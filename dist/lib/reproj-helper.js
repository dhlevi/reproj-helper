/*! For license information please see reproj-helper.js.LICENSE.txt */
(()=>{var t={497:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FormatConverter=void 0;var r,n=(r=i(741))&&r.__esModule?r:{default:r},s=function(){function t(){this.sourceWkt=null,this.sourceJson=null}return t.instance=function(){return new t},t.prototype.fromWkt=function(t){return this.sourceWkt=t.trim(),this.sourceJson={type:"Feature",properties:{},geometry:this.convertWktToJson()},this},t.prototype.toWkt=function(t){return void 0===t&&(t=!1),this.convertToWkt(t)},t.prototype.fromGeoJson=function(t){return this.sourceJson=(0,n.default)(t),this},t.prototype.toGeoJson=function(){return this.sourceJson},t.prototype.convertWktToJson=function(){if(!this.sourceWkt||0===this.sourceWkt.length)throw new Error("No WKT data supplied");var t=this.sourceWkt.split(" ")[0].trim().toUpperCase(),e=this.sourceWkt.split(" ")[1].trim().toUpperCase();if(["EMPTY"].includes(e))throw Error("Geometry is empty or using an unupported type!");var i=this.sourceWkt.substring(this.sourceWkt.indexOf("(")+1,this.sourceWkt.length-1);return this.buildWktGeometry(t,i)},t.prototype.buildWktGeometry=function(t,e){try{switch(t){case"POINT":return{type:"Point",coordinates:this.parseWktCoord(e)};case"MULTIPOINT":var i=e.trim().replace(/\(/g,"").replace(/\)/g,"");return{type:"MultiPoint",coordinates:this.parseWktLine(i)};case"LINESTRING":return{type:"LineString",coordinates:this.parseWktLine(e)};case"MULTILINESTRING":return{type:"MultiLineString",coordinates:this.parseWktRing(e)};case"TRIANGLE":case"POLYGON":return{type:"Polygon",coordinates:this.parseWktRing(e)};case"TIN":case"MULTIPOLYGON":for(var r={type:"MultiPolygon",coordinates:[]},n=e.split(")),"),s=0,a=n;s<a.length;s++){var o=a[s],h=o.replace("((","(")+(o.endsWith(")")?"":")");r.coordinates.push(this.parseWktRing(h.trim()))}return r;case"GEOMETRYCOLLECTION":for(var u={type:"GeometryCollection",geometries:[]},l=e.toUpperCase().replace(/POINT/g,"-POINT").replace(/LINESTRING/g,"-LINESTRING").replace(/POLYGON/g,"-POLYGON").replace(/MULTI-/g,"-MULTI").trim().split("-"),c=0,f=l;c<f.length;c++){var p=f[c];if(p&&p.length>0){var d=p.trim().toUpperCase();d.endsWith(",")&&(d=d.substring(0,d.length-1));var y=d.split(" ")[0].trim(),g=d.split(" ")[1].trim();if(["EMPTY","ZM","M"].includes(g))throw Error("Geometry is empty or using an unupported type!");var m=d.substring(d.indexOf("(")+1,d.length-1);u.geometries.push(this.buildWktGeometry(y,m))}}return u;default:throw new Error("WKT type of "+t+" is not currently supported")}}catch(t){throw Error(t)}},t.prototype.parseWktCoord=function(t){for(var e=[],i=0,r=t.trim().split(" ");i<r.length;i++){var n=r[i];e.push(parseFloat(n))}return e},t.prototype.parseWktLine=function(t){for(var e=[],i=0,r=t.trim().split(",");i<r.length;i++){var n=r[i];e.push(this.parseWktCoord(n))}return e},t.prototype.parseWktRing=function(t){for(var e=[],i=0,r=0,n=t.split("),");r<n.length;r++){var s=n[r],a=s.trim().substring(s.trim().indexOf("(")+1,s.trim().length-(s.endsWith(")")?1:0));e[i]=this.parseWktLine(a),i+=1}return e},t.prototype.convertToWkt=function(t){if(void 0===t&&(t=!1),this.sourceJson){if("FeatureCollection"===this.sourceJson.type){for(var e="GEOMETRYCOLLECTION (",i=0,r=this.sourceJson.features;i<r.length;i++){var n=r[i];e+=this.wktStringFromGeometry(n.geometry,t)+", "}return e.substring(0,e.length-2)+")"}return"Feature"===this.sourceJson.type?this.wktStringFromGeometry(this.sourceJson.geometry,t):this.wktStringFromGeometry(this.sourceJson,t)}return""},t.prototype.wktStringFromGeometry=function(t,e){switch(void 0===e&&(e=!1),t.type){case"Point":return"POINT"+(2===t.coordinates.length?" ":3===t.coordinates.length?" M ":" ZM ")+"("+this.toWktCoordString(t.coordinates)+")";case"MultiPoint":return"MULTIPOINT ("+this.lineToWktString(t.coordinates)+")";case"LineString":return"LINESTRING ("+this.lineToWktString(t.coordinates)+")";case"MultiLineString":return"MULTILINESTRING ("+this.ringToWktString(t.coordinates)+")";case"Polygon":return(3===t.coordinates[0][0].length&&e?"TRIANGLE":"POLYGON")+" ("+this.ringToWktString(t.coordinates)+")";case"MultiPolygon":return(3===t.coordinates[0][0][0].length&&e?"TIN":"MULTIPOLYGON")+" ("+this.polygonToWktString(t.coordinates)+")";case"GeometryCollection":for(var i="GEOMETRYCOLLECTION (",r=0,n=t.geometries;r<n.length;r++){var s=n[r];i+=this.wktStringFromGeometry(s)+", "}return i.substring(0,i.length-2)+")"}},t.prototype.polygonToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+="("+this.ringToWktString(n)+"), "}return e.substring(0,e.length-2)},t.prototype.ringToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+="("+this.lineToWktString(n)+"), "}return e.substring(0,e.length-2)},t.prototype.lineToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+=this.toWktCoordString(n)+", "}return e.substring(0,e.length-2)},t.prototype.toWktCoordString=function(t){for(var e="",i=0,r=t;i<r.length;i++)e+=r[i]+" ";return e.trim()},t}();e.FormatConverter=s},908:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ReProjector=void 0;var r=i(655),n=o(i(801)),s=o(i(741)),a=o(i(267));function o(t){return t&&t.__esModule?t:{default:t}}var h=function(){function t(){this.init(),this.sourceFeature=null,this.fromProjection="EPSG:3005",this.toProjection="WGS84"}return t.instance=function(){return new t},t.prototype.init=function(){console.debug("Initializing ReProjector"),n.default.defs("EPSG:3005",'PROJCS["NAD83 / BC Albers", GEOGCS["NAD83", DATUM["North_American_Datum_1983", SPHEROID["GRS 1980",6378137,298.257222101, AUTHORITY["EPSG","7019"]], TOWGS84[0,0,0,0,0,0,0], AUTHORITY["EPSG","6269"]], PRIMEM["Greenwich",0, AUTHORITY["EPSG","8901"]], UNIT["degree",0.0174532925199433, AUTHORITY["EPSG","9122"]], AUTHORITY["EPSG","4269"]], PROJECTION["Albers_Conic_Equal_Area"], PARAMETER["standard_parallel_1",50], PARAMETER["standard_parallel_2",58.5], PARAMETER["latitude_of_center",45], PARAMETER["longitude_of_center",-126], PARAMETER["false_easting",1000000], PARAMETER["false_northing",0], UNIT["metre",1, AUTHORITY["EPSG","9001"]], AXIS["Easting",EAST], AXIS["Northing",NORTH], AUTHORITY["EPSG","3005"]]'),n.default.defs("EPSG:3857","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"),n.default.defs("EPSG:3348","+proj=lcc +lat_1=49 +lat_2=77 +lat_0=63.390675 +lon_0=-91.86666666666666 +x_0=6200000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3979","+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3579","+proj=aea +lat_1=61.66666666666666 +lat_2=68 +lat_0=59 +lon_0=-132.5 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3402","+proj=tmerc +lat_0=0 +lon_0=-115 +k=0.9992 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("UTM7","+proj=utm +zone=7 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM8","+proj=utm +zone=8 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM9","+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM10","+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM11","+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM12","+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM13","+proj=utm +zone=13 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM14","+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM15","+proj=utm +zone=15 +datum=WGS84 +units=m +no_defs")},t.prototype.addDefinition=function(t,e){return console.debug("Adding definition "+t+" - "+e),n.default.defs(t,e),this},t.prototype.feature=function(t){return console.debug("Source Feature set"),this.sourceFeature=t,this},t.prototype.from=function(t){return console.debug("Projecting from "+t),this.fromProjection=t,this},t.prototype.to=function(t){return console.debug("Projecting to "+t),this.toProjection=t,this},t.prototype.addDefinitionFromEpsgIo=function(t){return(0,r.__awaiter)(this,void 0,void 0,(function(){var e,i;return(0,r.__generator)(this,(function(r){switch(r.label){case 0:return e=t.trim().includes(":")?t.split(":")[1].trim():t.trim(),[4,new Promise((function(t,i){a.default.get("https://epsg.io/"+e+".proj4",(function(e){var i="";e.on("data",(function(t){i+=t})),e.on("end",(function(){t(i)}))})).on("error",(function(t){i(t)}))}))];case 1:if(!((i=r.sent())&&i.length>0))throw new Error('Could not find definition for "'+t+'"');return this.addDefinition(t,i),[2,i]}}))}))},t.prototype.project=function(){return(0,r.__awaiter)(this,void 0,void 0,(function(){var t,e,i,n,a,o,h,u,l,c,f;return(0,r.__generator)(this,(function(r){if(console.debug("Starting projection"),!this.sourceFeature)throw console.error("No feature to project! Stopping"),new Error("Invalid Source Feature");t=null;try{if("FeatureCollection"===(t=(0,s.default)(this.sourceFeature)).type)for(e=0,i=t.features;e<i.length;e++)if("GeometryCollection"===(n=i[e]).geometry.type)for(a=0,o=n.geometry.geometries;a<o.length;a++)f=o[a],this.projectGeometry(f);else this.projectGeometry(n.geometry);else if("GeometryCollection"===t.type)for(h=0,u=t.geometries;h<u.length;h++)f=u[h],this.projectGeometry(f);else if("Feature"===t.type&&"GeometryCollection"===t.geometry.type)for(l=0,c=t.geometry.geometries;l<c.length;l++)f=c[l],this.projectGeometry(f);else"Feature"===t.type?this.projectGeometry(t.geometry):this.projectGeometry(t)}catch(t){console.error("Failed to reproject feature: "+t)}return[2,t]}))}))},t.prototype.projectGeometry=function(t){switch(t.type){case"Point":this.projectPoint(t.coordinates);break;case"LineString":case"MultiPoint":this.projectLineString(t.coordinates);break;case"Polygon":case"MultiLineString":this.projectPolygon(t.coordinates);break;case"MultiPolygon":for(var e=0,i=t.coordinates;e<i.length;e++){var r=i[e];this.projectPolygon(r)}break;default:console.error("No valid type found for this geometry. Projection cancelled"),console.error(t)}},t.prototype.projectPolygon=function(t){for(var e=0;e<t.length;e++)this.projectLineString(t[e])},t.prototype.projectLineString=function(t){for(var e=0;e<t.length;e++)this.projectPoint(t[e])},t.prototype.projectPoint=function(t){for(var e=(0,n.default)(this.fromProjection,this.toProjection,t),i=0;i<e.length;i++)t[i]=e[i]},t}();e.ReProjector=h},433:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpatialTransformers=void 0;var r,n=i(655),s=(r=i(741))&&r.__esModule?r:{default:r},a=i(649),o=function(){function t(){}return t.findInteriorRings=function(t){return(0,n.__awaiter)(this,void 0,void 0,(function(){var e,i,r,s,a,o;return(0,n.__generator)(this,(function(n){if(e=[],"Polygon"===(i="Feature"===t.type?t.geometry:t).type)for(o=1;o<i.coordinates.length;o++)e.push({type:"Polygon",coordinates:[i.coordinates[o]]});else if("MultiPolygon"===i.type)for(r=0,s=i.coordinates;r<s.length;r++)for(a=s[r],o=1;o<a.length;o++)e.push({type:"Polygon",coordinates:[a[o]]});return[2,e]}))}))},t.removeInteriorRings=function(t){return(0,n.__awaiter)(this,void 0,void 0,(function(){var e,i,r;return(0,n.__generator)(this,(function(n){if(e=(0,s.default)(t),"Polygon"===(i="Feature"===e.type?e.geometry:t).type)i.coordinates=[i.coordinates[0]];else if("MultiPolygon"===i.type)for(r=0;r<i.coordinates.length;r++)i.coordinates[r]=[i.coordinates[r][0]];return"Feature"===e.type&&(e.geometry=i),[2,e]}))}))},t.boundingBox=function(t){Array.isArray(t)||(t="FeatureCollection"===t.type?t.features:[t]);for(var e=1/0,i=-1/0,r=1/0,n=-1/0,s=0,a=t;s<a.length;s++){var o,h=a[s];switch((o="GeometryCollection"===h.geometry.type?this.boundingBox(h.geometry.geometries.map((function(t){return{type:"Feature",geometry:t,properties:{}}}))):h.geometry).type){case"Point":e=e>o.coordinates[0]?o.coordinates[0]:e,i=i<o.coordinates[0]?o.coordinates[0]:i,r=r>o.coordinates[1]?o.coordinates[1]:r,n=n<o.coordinates[1]?o.coordinates[1]:n;break;case"LineString":case"MultiPoint":for(var u=0,l=o.coordinates;u<l.length;u++)e=e>(_=l[u])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n;break;case"MultiLineString":case"Polygon":for(var c=0,f=o.coordinates;c<f.length;c++)for(var p=0,d=f[c];p<d.length;p++)e=e>(_=d[p])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n;break;case"MultiPolygon":for(var y=0,g=o.coordinates;y<g.length;y++)for(var m=0,M=g[y];m<M.length;m++)for(var b=0,v=M[m];b<v.length;b++){var _;e=e>(_=v[b])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n}}}return{type:"Polygon",bbox:[e,r,i,n],coordinates:[[[e,n],[i,n],[i,r],[e,r],[e,n]]]}},t.featureCentroid=function(t){var e=0,i=0,r=0;switch(t.geometry.type){case"Point":return t.geometry;case"LineString":case"MultiPoint":for(var n=0,s=t.geometry.coordinates;n<s.length;n++)e+=(g=s[n])[0],i+=g[1],r++;break;case"MultiLineString":case"Polygon":for(var a=0,o=t.geometry.coordinates;a<o.length;a++)for(var h=0,u=o[a];h<u.length;h++)e+=(g=u[h])[0],i+=g[1],r++;break;case"MultiPolygon":for(var l=0,c=t.geometry.coordinates;l<c.length;l++)for(var f=0,p=c[l];f<p.length;f++)for(var d=0,y=p[f];d<y.length;d++){var g;e+=(g=y[d])[0],i+=g[1],r++}break;case"GeometryCollection":for(var m=[],M=0,b=t.geometry.geometries;M<b.length;M++){var v=b[M];m.push(this.featureCentroid({type:"Feature",geometry:v,properties:null}).coordinates)}return this.featureCentroid({type:"Feature",geometry:{type:"MultiPoint",coordinates:m},properties:null})}return{type:"Point",coordinates:[e/r,i/r]}},t.reducePrecision=function(t,e){var i=(0,s.default)(t);switch("Feature"!==i.type&&(i={type:"Feature",geometry:i,properties:null}),i.geometry.type){case"Point":i.geometry.coordinates=a.SpatialUtils.reduceCoordinatePrecision(i.geometry.coordinates,e);break;case"LineString":case"MultiPoint":for(var r=0;r<i.geometry.coordinates.length;r++)i.geometry.coordinates[r]=a.SpatialUtils.reduceCoordinatePrecision(i.geometry.coordinates[r],e);break;case"MultiLineString":case"Polygon":for(var n=0,o=i.geometry.coordinates;n<o.length;n++){var h=o[n];for(r=0;r<h.length;r++)h[r]=a.SpatialUtils.reduceCoordinatePrecision(h[r],e)}break;case"MultiPolygon":for(var u=0,l=i.geometry.coordinates;u<l.length;u++)for(var c=0,f=l[u];c<f.length;c++)for(h=f[c],r=0;r<h.length;r++)h[r]=a.SpatialUtils.reduceCoordinatePrecision(h[r],e);break;case"GeometryCollection":for(r=0;r<i.geometry.geometries.length;r++)i.geometry.geometries[r]=this.reducePrecision(i.geometry.geometries[r],e)}return"Feature"!==t.type?i.geometry:i},t.explodeVertices=function(t){var e=(0,s.default)(t);"Feature"!==e.type&&(e={type:"Feature",geometry:e,properties:null});var i=[];switch(e.geometry.type){case"Point":i.push(e.geometry.coordinates);break;case"LineString":case"MultiPoint":i.push.apply(i,e.geometry.coordinates);break;case"MultiLineString":case"Polygon":for(var r=0,n=e.geometry.coordinates;r<n.length;r++){var a=n[r];i.push.apply(i,a)}break;case"MultiPolygon":for(var o=0,h=e.geometry.coordinates;o<h.length;o++)for(var u=0,l=h[o];u<l.length;u++)a=l[u],i.push.apply(i,a);break;case"GeometryCollection":for(var c=0;c<e.geometry.geometries.length;c++)i.push.apply(i,this.explodeVertices(e.geometry.geometries[c]))}return i},t.convexHull=function(t){var e=[];if(Array.isArray(t)||"FeatureCollection"!==t.type)if(Array.isArray(t))for(var i=0,r=t;i<r.length;i++){var n=r[i];Object.prototype.hasOwnProperty.call(n,"coordinates")||Object.prototype.hasOwnProperty.call(n,"geometry")?e.push.apply(e,this.explodeVertices(n)):e.push(n)}else e.push.apply(e,this.explodeVertices(t));else for(var s=0,o=t.features;s<o.length;s++){var h=o[s];e.push.apply(e,this.explodeVertices(h))}if(e.length<=1)return{type:"Polygon",coordinates:[]};e.sort(a.SpatialUtils.compareCoordinates);for(var u=[],l=0;l<e.length;l++){for(var c=e[l];u.length>=2&&(u[u.length-1][0]-u[u.length-2][0])*(c[1]-u[u.length-2][1])>=(u[u.length-1][1]-u[u.length-2][1])*(c[0]-u[u.length-2][0]);)u.pop();u.push(c)}u.pop();var f=[];for(l=e.length-1;l>=0;l--){for(c=e[l];f.length>=2&&(f[f.length-1][0]-f[f.length-2][0])*(c[1]-f[f.length-2][1])>=(f[f.length-1][1]-f[f.length-2][1])*(c[0]-f[f.length-2][0]);)f.pop();f.push(c)}return f.pop(),1==u.length&&1==f.length&&u[0][0]==f[0][0]&&u[0][1]==f[0][1]?{type:"Polygon",coordinates:[u]}:{type:"Polygon",coordinates:[u.concat(f)]}},t.RADIUS=6378137,t}();e.SpatialTransformers=o},649:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.utmZone=function(t,e){var i=Math.floor((e+180)/6)+1;return t>=56&&t<64&&e>=3&&e<12&&(i=32),t>=72&&t<84&&(e>=0&&e<9?i=31:e>=9&&e<21?i=33:e>=21&&e<33?i=35:e>=33&&e<42&&(i=37)),i},t.utmLetterDesignation=function(t){return-80<=t&&t<=84?"CDEFGHJKLMNPQRSTUVWXX"[Math.floor((t+80)/8)]:"Z"},t.utmZoneString=function(t,e){return"UTM"+this.utmZone(t,e)+this.utmLetterDesignation(t)},t.ddToDmsString=function(t,e,i){void 0===i&&(i=2);var r=Math.trunc(t),n=Math.floor(60*(Math.abs(t)-Math.abs(r))),s=this.reducePrecision(3600*(Math.abs(t)-Math.abs(r)-n/60),i);return s>=60&&(s-=60,n+=1),e?r+"° "+n+"' "+s+'"':r+" "+n+" "+s},t.dmsToDdString=function(t,e){void 0===e&&(e=6);var i=t.split(" ");if(i.length<3)return Number.NaN;var r=parseInt(i[0].replace(/[^0-9.-]/g,"")),n=parseInt(i[1].replace(/[^0-9.-]/g,"")),s=parseFloat(i[2].replace(/[^0-9.-]/g,""));if(isNaN(r)||isNaN(n)||isNaN(s))return Number.NaN;var a=Math.abs(r)+n/60+s/3600;r<0&&(a*=-1);var o=a.toString().split(".");return o.length>1&&o[1].length>5?parseFloat(a.toFixed(e)):a},t.latLonToDmsString=function(t,e,i){return{latitudeDMS:this.ddToDmsString(t,i)+" "+(t<0?"S":"N"),longitudeDMS:this.ddToDmsString(e,i)+" "+(e<0?"W":"E")}},t.haversineDistance=function(t,e){var i=this.degreesToRadians(e[1]-t[1]),r=this.degreesToRadians(e[0]-t[0]),n=this.degreesToRadians(t[1]),s=this.degreesToRadians(e[1]),a=Math.sin(i/2)*Math.sin(i/2)+Math.cos(n)*Math.cos(s)*Math.sin(r/2)*Math.sin(r/2),o=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return this.RADIUS*o},t.lineLength=function(t){for(var e=0,i=0,r="LineString"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=null,s=0,a=r[i];s<a.length;s++){var o=a[s];n?(e+=this.haversineDistance(n,o),n=o):n=o}return e},t.polygonPerimeter=function(t){for(var e=0,i=0,r="Polygon"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=0,s=r[i];n<s.length;n++){for(var a=null,o=null,h=0,u=s[n];h<u.length;h++){var l=u[h];o?(e+=this.haversineDistance(o,l),o=l):(a=l,o=l)}o&&a&&(o[0]!=a[0]||o[1]!=a[1])&&(e+=this.haversineDistance(o,a))}return e},t.polygonArea=function(t){for(var e=0,i=0,r="Polygon"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=r[i],s=0;s<n.length;s++){var a=Math.abs(this.polygonRingArea(n[s]));e+=0===s?a:-a}return e},t.polygonRingArea=function(t){var e=0;if(t.length>2){for(var i=0;i<t.length;i++){var r=void 0,n=void 0,s=void 0;i===t.length-2?(r=t.length-2,n=t.length-1,s=0):i===t.length-1?(r=t.length-1,n=0,s=1):(r=i,n=i+1,s=i+2);var a=t[r],o=t[n],h=t[s];e+=(this.degreesToRadians(h[0])-this.degreesToRadians(a[0]))*Math.sin(this.degreesToRadians(o[1]))}e=e*this.RADIUS*this.RADIUS/2}return e},t.degreesToRadians=function(t){return t*Math.PI/180},t.reducePrecision=function(t,e){return parseFloat(t.toFixed(e))},t.reduceCoordinatePrecision=function(t,e){return[this.reducePrecision(t[0],e),this.reducePrecision(t[1],e)]},t.compareCoordinates=function(t,e){return t[0]<e[0]?-1:t[0]>e[0]?1:t[1]<e[1]?-1:t[1]>e[1]?1:0},t.RADIUS=6378137,t}();e.SpatialUtils=i},45:(t,e,i)=>{"use strict";i(908),i(649),i(497),i(433)},742:(t,e)=>{"use strict";e.byteLength=function(t){var e=h(t),i=e[0],r=e[1];return 3*(i+r)/4-r},e.toByteArray=function(t){var e,i,s=h(t),a=s[0],o=s[1],u=new n(function(t,e,i){return 3*(e+i)/4-i}(0,a,o)),l=0,c=o>0?a-4:a;for(i=0;i<c;i+=4)e=r[t.charCodeAt(i)]<<18|r[t.charCodeAt(i+1)]<<12|r[t.charCodeAt(i+2)]<<6|r[t.charCodeAt(i+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;return 2===o&&(e=r[t.charCodeAt(i)]<<2|r[t.charCodeAt(i+1)]>>4,u[l++]=255&e),1===o&&(e=r[t.charCodeAt(i)]<<10|r[t.charCodeAt(i+1)]<<4|r[t.charCodeAt(i+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e),u},e.fromByteArray=function(t){for(var e,r=t.length,n=r%3,s=[],a=16383,o=0,h=r-n;o<h;o+=a)s.push(u(t,o,o+a>h?h:o+a));return 1===n?(e=t[r-1],s.push(i[e>>2]+i[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],s.push(i[e>>10]+i[e>>4&63]+i[e<<2&63]+"=")),s.join("")};for(var i=[],r=[],n="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,o=s.length;a<o;++a)i[a]=s[a],r[s.charCodeAt(a)]=a;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=t.indexOf("=");return-1===i&&(i=e),[i,i===e?0:4-i%4]}function u(t,e,r){for(var n,s,a=[],o=e;o<r;o+=3)n=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),a.push(i[(s=n)>>18&63]+i[s>>12&63]+i[s>>6&63]+i[63&s]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},764:(t,e,i)=>{"use strict";const r=i(742),n=i(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=h,e.SlowBuffer=function(t){return+t!=t&&(t=0),h.alloc(+t)},e.INSPECT_MAX_BYTES=50;const a=2147483647;function o(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,h.prototype),e}function h(t,e,i){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return u(t,e,i)}function u(t,e,i){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!h.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const i=0|y(t,e);let r=o(i);const n=r.write(t,e);return n!==i&&(r=r.slice(0,n)),r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Y(t,Uint8Array)){const e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return f(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Y(t,ArrayBuffer)||t&&Y(t.buffer,ArrayBuffer))return p(t,e,i);if("undefined"!=typeof SharedArrayBuffer&&(Y(t,SharedArrayBuffer)||t&&Y(t.buffer,SharedArrayBuffer)))return p(t,e,i);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return h.from(r,e,i);const n=function(t){if(h.isBuffer(t)){const e=0|d(t.length),i=o(e);return 0===i.length||t.copy(i,0,0,e),i}return void 0!==t.length?"number"!=typeof t.length||$(t.length)?o(0):f(t):"Buffer"===t.type&&Array.isArray(t.data)?f(t.data):void 0}(t);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return h.from(t[Symbol.toPrimitive]("string"),e,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return l(t),o(t<0?0:0|d(t))}function f(t){const e=t.length<0?0:0|d(t.length),i=o(e);for(let r=0;r<e;r+=1)i[r]=255&t[r];return i}function p(t,e,i){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(i||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===e&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,e):new Uint8Array(t,e,i),Object.setPrototypeOf(r,h.prototype),r}function d(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function y(t,e){if(h.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Y(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const i=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===i)return 0;let n=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return Q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return V(t).length;default:if(n)return r?-1:Q(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,i){let r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,i);case"utf8":case"utf-8":return R(this,e,i);case"ascii":return O(this,e,i);case"latin1":case"binary":return T(this,e,i);case"base64":return E(this,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,i);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,i){const r=t[e];t[e]=t[i],t[i]=r}function M(t,e,i,r,n){if(0===t.length)return-1;if("string"==typeof i?(r=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),$(i=+i)&&(i=n?0:t.length-1),i<0&&(i=t.length+i),i>=t.length){if(n)return-1;i=t.length-1}else if(i<0){if(!n)return-1;i=0}if("string"==typeof e&&(e=h.from(e,r)),h.isBuffer(e))return 0===e.length?-1:b(t,e,i,r,n);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,e,i):Uint8Array.prototype.lastIndexOf.call(t,e,i):b(t,[e],i,r,n);throw new TypeError("val must be string, number or Buffer")}function b(t,e,i,r,n){let s,a=1,o=t.length,h=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,o/=2,h/=2,i/=2}function u(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(n){let r=-1;for(s=i;s<o;s++)if(u(t,s)===u(e,-1===r?0:s-r)){if(-1===r&&(r=s),s-r+1===h)return r*a}else-1!==r&&(s-=s-r),r=-1}else for(i+h>o&&(i=o-h),s=i;s>=0;s--){let i=!0;for(let r=0;r<h;r++)if(u(t,s+r)!==u(e,r)){i=!1;break}if(i)return s}return-1}function v(t,e,i,r){i=Number(i)||0;const n=t.length-i;r?(r=Number(r))>n&&(r=n):r=n;const s=e.length;let a;for(r>s/2&&(r=s/2),a=0;a<r;++a){const r=parseInt(e.substr(2*a,2),16);if($(r))return a;t[i+a]=r}return a}function _(t,e,i,r){return X(Q(e,t.length-i),t,i,r)}function w(t,e,i,r){return X(function(t){const e=[];for(let i=0;i<t.length;++i)e.push(255&t.charCodeAt(i));return e}(e),t,i,r)}function x(t,e,i,r){return X(V(e),t,i,r)}function S(t,e,i,r){return X(function(t,e){let i,r,n;const s=[];for(let a=0;a<t.length&&!((e-=2)<0);++a)i=t.charCodeAt(a),r=i>>8,n=i%256,s.push(n),s.push(r);return s}(e,t.length-i),t,i,r)}function E(t,e,i){return 0===e&&i===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,i))}function R(t,e,i){i=Math.min(t.length,i);const r=[];let n=e;for(;n<i;){const e=t[n];let s=null,a=e>239?4:e>223?3:e>191?2:1;if(n+a<=i){let i,r,o,h;switch(a){case 1:e<128&&(s=e);break;case 2:i=t[n+1],128==(192&i)&&(h=(31&e)<<6|63&i,h>127&&(s=h));break;case 3:i=t[n+1],r=t[n+2],128==(192&i)&&128==(192&r)&&(h=(15&e)<<12|(63&i)<<6|63&r,h>2047&&(h<55296||h>57343)&&(s=h));break;case 4:i=t[n+1],r=t[n+2],o=t[n+3],128==(192&i)&&128==(192&r)&&128==(192&o)&&(h=(15&e)<<18|(63&i)<<12|(63&r)<<6|63&o,h>65535&&h<1114112&&(s=h))}}null===s?(s=65533,a=1):s>65535&&(s-=65536,r.push(s>>>10&1023|55296),s=56320|1023&s),r.push(s),n+=a}return function(t){const e=t.length;if(e<=P)return String.fromCharCode.apply(String,t);let i="",r=0;for(;r<e;)i+=String.fromCharCode.apply(String,t.slice(r,r+=P));return i}(r)}e.kMaxLength=a,h.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),h.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(h.prototype,"parent",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.buffer}}),Object.defineProperty(h.prototype,"offset",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.byteOffset}}),h.poolSize=8192,h.from=function(t,e,i){return u(t,e,i)},Object.setPrototypeOf(h.prototype,Uint8Array.prototype),Object.setPrototypeOf(h,Uint8Array),h.alloc=function(t,e,i){return function(t,e,i){return l(t),t<=0?o(t):void 0!==e?"string"==typeof i?o(t).fill(e,i):o(t).fill(e):o(t)}(t,e,i)},h.allocUnsafe=function(t){return c(t)},h.allocUnsafeSlow=function(t){return c(t)},h.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==h.prototype},h.compare=function(t,e){if(Y(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),Y(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),!h.isBuffer(t)||!h.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let i=t.length,r=e.length;for(let n=0,s=Math.min(i,r);n<s;++n)if(t[n]!==e[n]){i=t[n],r=e[n];break}return i<r?-1:r<i?1:0},h.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return h.alloc(0);let i;if(void 0===e)for(e=0,i=0;i<t.length;++i)e+=t[i].length;const r=h.allocUnsafe(e);let n=0;for(i=0;i<t.length;++i){let e=t[i];if(Y(e,Uint8Array))n+e.length>r.length?(h.isBuffer(e)||(e=h.from(e)),e.copy(r,n)):Uint8Array.prototype.set.call(r,e,n);else{if(!h.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(r,n)}n+=e.length}return r},h.byteLength=y,h.prototype._isBuffer=!0,h.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)m(this,e,e+1);return this},h.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},h.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},h.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?R(this,0,t):g.apply(this,arguments)},h.prototype.toLocaleString=h.prototype.toString,h.prototype.equals=function(t){if(!h.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===h.compare(this,t)},h.prototype.inspect=function(){let t="";const i=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,i).replace(/(.{2})/g,"$1 ").trim(),this.length>i&&(t+=" ... "),"<Buffer "+t+">"},s&&(h.prototype[s]=h.prototype.inspect),h.prototype.compare=function(t,e,i,r,n){if(Y(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),!h.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===i&&(i=t?t.length:0),void 0===r&&(r=0),void 0===n&&(n=this.length),e<0||i>t.length||r<0||n>this.length)throw new RangeError("out of range index");if(r>=n&&e>=i)return 0;if(r>=n)return-1;if(e>=i)return 1;if(this===t)return 0;let s=(n>>>=0)-(r>>>=0),a=(i>>>=0)-(e>>>=0);const o=Math.min(s,a),u=this.slice(r,n),l=t.slice(e,i);for(let t=0;t<o;++t)if(u[t]!==l[t]){s=u[t],a=l[t];break}return s<a?-1:a<s?1:0},h.prototype.includes=function(t,e,i){return-1!==this.indexOf(t,e,i)},h.prototype.indexOf=function(t,e,i){return M(this,t,e,i,!0)},h.prototype.lastIndexOf=function(t,e,i){return M(this,t,e,i,!1)},h.prototype.write=function(t,e,i,r){if(void 0===e)r="utf8",i=this.length,e=0;else if(void 0===i&&"string"==typeof e)r=e,i=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(i)?(i>>>=0,void 0===r&&(r="utf8")):(r=i,i=void 0)}const n=this.length-e;if((void 0===i||i>n)&&(i=n),t.length>0&&(i<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let s=!1;for(;;)switch(r){case"hex":return v(this,t,e,i);case"utf8":case"utf-8":return _(this,t,e,i);case"ascii":case"latin1":case"binary":return w(this,t,e,i);case"base64":return x(this,t,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,i);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const P=4096;function O(t,e,i){let r="";i=Math.min(t.length,i);for(let n=e;n<i;++n)r+=String.fromCharCode(127&t[n]);return r}function T(t,e,i){let r="";i=Math.min(t.length,i);for(let n=e;n<i;++n)r+=String.fromCharCode(t[n]);return r}function C(t,e,i){const r=t.length;(!e||e<0)&&(e=0),(!i||i<0||i>r)&&(i=r);let n="";for(let r=e;r<i;++r)n+=J[t[r]];return n}function A(t,e,i){const r=t.slice(e,i);let n="";for(let t=0;t<r.length-1;t+=2)n+=String.fromCharCode(r[t]+256*r[t+1]);return n}function k(t,e,i){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>i)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,i,r,n,s){if(!h.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<s)throw new RangeError('"value" argument is out of bounds');if(i+r>t.length)throw new RangeError("Index out of range")}function N(t,e,i,r,n){F(e,r,n,t,i,7);let s=Number(e&BigInt(4294967295));t[i++]=s,s>>=8,t[i++]=s,s>>=8,t[i++]=s,s>>=8,t[i++]=s;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,i}function L(t,e,i,r,n){F(e,r,n,t,i,7);let s=Number(e&BigInt(4294967295));t[i+7]=s,s>>=8,t[i+6]=s,s>>=8,t[i+5]=s,s>>=8,t[i+4]=s;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i+3]=a,a>>=8,t[i+2]=a,a>>=8,t[i+1]=a,a>>=8,t[i]=a,i+8}function j(t,e,i,r,n,s){if(i+r>t.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function U(t,e,i,r,s){return e=+e,i>>>=0,s||j(t,0,i,4),n.write(t,e,i,r,23,4),i+4}function q(t,e,i,r,s){return e=+e,i>>>=0,s||j(t,0,i,8),n.write(t,e,i,r,52,8),i+8}h.prototype.slice=function(t,e){const i=this.length;(t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(e=void 0===e?i:~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),e<t&&(e=t);const r=this.subarray(t,e);return Object.setPrototypeOf(r,h.prototype),r},h.prototype.readUintLE=h.prototype.readUIntLE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=this[t],n=1,s=0;for(;++s<e&&(n*=256);)r+=this[t+s]*n;return r},h.prototype.readUintBE=h.prototype.readUIntBE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=this[t+--e],n=1;for(;e>0&&(n*=256);)r+=this[t+--e]*n;return r},h.prototype.readUint8=h.prototype.readUInt8=function(t,e){return t>>>=0,e||k(t,1,this.length),this[t]},h.prototype.readUint16LE=h.prototype.readUInt16LE=function(t,e){return t>>>=0,e||k(t,2,this.length),this[t]|this[t+1]<<8},h.prototype.readUint16BE=h.prototype.readUInt16BE=function(t,e){return t>>>=0,e||k(t,2,this.length),this[t]<<8|this[t+1]},h.prototype.readUint32LE=h.prototype.readUInt32LE=function(t,e){return t>>>=0,e||k(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},h.prototype.readUint32BE=h.prototype.readUInt32BE=function(t,e){return t>>>=0,e||k(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},h.prototype.readBigUInt64LE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,n=this[++t]+256*this[++t]+65536*this[++t]+i*2**24;return BigInt(r)+(BigInt(n)<<BigInt(32))})),h.prototype.readBigUInt64BE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=e*2**24+65536*this[++t]+256*this[++t]+this[++t],n=this[++t]*2**24+65536*this[++t]+256*this[++t]+i;return(BigInt(r)<<BigInt(32))+BigInt(n)})),h.prototype.readIntLE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=this[t],n=1,s=0;for(;++s<e&&(n*=256);)r+=this[t+s]*n;return n*=128,r>=n&&(r-=Math.pow(2,8*e)),r},h.prototype.readIntBE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=e,n=1,s=this[t+--r];for(;r>0&&(n*=256);)s+=this[t+--r]*n;return n*=128,s>=n&&(s-=Math.pow(2,8*e)),s},h.prototype.readInt8=function(t,e){return t>>>=0,e||k(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},h.prototype.readInt16LE=function(t,e){t>>>=0,e||k(t,2,this.length);const i=this[t]|this[t+1]<<8;return 32768&i?4294901760|i:i},h.prototype.readInt16BE=function(t,e){t>>>=0,e||k(t,2,this.length);const i=this[t+1]|this[t]<<8;return 32768&i?4294901760|i:i},h.prototype.readInt32LE=function(t,e){return t>>>=0,e||k(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},h.prototype.readInt32BE=function(t,e){return t>>>=0,e||k(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},h.prototype.readBigInt64LE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=this[t+4]+256*this[t+5]+65536*this[t+6]+(i<<24);return(BigInt(r)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),h.prototype.readBigInt64BE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(r)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+i)})),h.prototype.readFloatLE=function(t,e){return t>>>=0,e||k(t,4,this.length),n.read(this,t,!0,23,4)},h.prototype.readFloatBE=function(t,e){return t>>>=0,e||k(t,4,this.length),n.read(this,t,!1,23,4)},h.prototype.readDoubleLE=function(t,e){return t>>>=0,e||k(t,8,this.length),n.read(this,t,!0,52,8)},h.prototype.readDoubleBE=function(t,e){return t>>>=0,e||k(t,8,this.length),n.read(this,t,!1,52,8)},h.prototype.writeUintLE=h.prototype.writeUIntLE=function(t,e,i,r){t=+t,e>>>=0,i>>>=0,r||I(this,t,e,i,Math.pow(2,8*i)-1,0);let n=1,s=0;for(this[e]=255&t;++s<i&&(n*=256);)this[e+s]=t/n&255;return e+i},h.prototype.writeUintBE=h.prototype.writeUIntBE=function(t,e,i,r){t=+t,e>>>=0,i>>>=0,r||I(this,t,e,i,Math.pow(2,8*i)-1,0);let n=i-1,s=1;for(this[e+n]=255&t;--n>=0&&(s*=256);)this[e+n]=t/s&255;return e+i},h.prototype.writeUint8=h.prototype.writeUInt8=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,1,255,0),this[e]=255&t,e+1},h.prototype.writeUint16LE=h.prototype.writeUInt16LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeUint16BE=h.prototype.writeUInt16BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeUint32LE=h.prototype.writeUInt32LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},h.prototype.writeUint32BE=h.prototype.writeUInt32BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigUInt64LE=K((function(t,e=0){return N(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeBigUInt64BE=K((function(t,e=0){return L(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeIntLE=function(t,e,i,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*i-1);I(this,t,e,i,r-1,-r)}let n=0,s=1,a=0;for(this[e]=255&t;++n<i&&(s*=256);)t<0&&0===a&&0!==this[e+n-1]&&(a=1),this[e+n]=(t/s>>0)-a&255;return e+i},h.prototype.writeIntBE=function(t,e,i,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*i-1);I(this,t,e,i,r-1,-r)}let n=i-1,s=1,a=0;for(this[e+n]=255&t;--n>=0&&(s*=256);)t<0&&0===a&&0!==this[e+n+1]&&(a=1),this[e+n]=(t/s>>0)-a&255;return e+i},h.prototype.writeInt8=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},h.prototype.writeInt16LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeInt16BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeInt32LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},h.prototype.writeInt32BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigInt64LE=K((function(t,e=0){return N(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeBigInt64BE=K((function(t,e=0){return L(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeFloatLE=function(t,e,i){return U(this,t,e,!0,i)},h.prototype.writeFloatBE=function(t,e,i){return U(this,t,e,!1,i)},h.prototype.writeDoubleLE=function(t,e,i){return q(this,t,e,!0,i)},h.prototype.writeDoubleBE=function(t,e,i){return q(this,t,e,!1,i)},h.prototype.copy=function(t,e,i,r){if(!h.isBuffer(t))throw new TypeError("argument should be a Buffer");if(i||(i=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<i&&(r=i),r===i)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-i&&(r=t.length-e+i);const n=r-i;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,i,r):Uint8Array.prototype.set.call(t,this.subarray(i,r),e),n},h.prototype.fill=function(t,e,i,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,i=this.length):"string"==typeof i&&(r=i,i=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!h.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){const e=t.charCodeAt(0);("utf8"===r&&e<128||"latin1"===r)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<i)throw new RangeError("Out of range index");if(i<=e)return this;let n;if(e>>>=0,i=void 0===i?this.length:i>>>0,t||(t=0),"number"==typeof t)for(n=e;n<i;++n)this[n]=t;else{const s=h.isBuffer(t)?t:h.from(t,r),a=s.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(n=0;n<i-e;++n)this[n+e]=s[n%a]}return this};const B={};function G(t,e,i){B[t]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function D(t){let e="",i=t.length;const r="-"===t[0]?1:0;for(;i>=r+4;i-=3)e=`_${t.slice(i-3,i)}${e}`;return`${t.slice(0,i)}${e}`}function F(t,e,i,r,n,s){if(t>i||t<e){const r="bigint"==typeof e?"n":"";let n;throw n=s>3?0===e||e===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(s+1)}${r}`:`>= -(2${r} ** ${8*(s+1)-1}${r}) and < 2 ** ${8*(s+1)-1}${r}`:`>= ${e}${r} and <= ${i}${r}`,new B.ERR_OUT_OF_RANGE("value",n,t)}!function(t,e,i){W(e,"offset"),void 0!==t[e]&&void 0!==t[e+i]||z(e,t.length-(i+1))}(r,n,s)}function W(t,e){if("number"!=typeof t)throw new B.ERR_INVALID_ARG_TYPE(e,"number",t)}function z(t,e,i){if(Math.floor(t)!==t)throw W(t,i),new B.ERR_OUT_OF_RANGE(i||"offset","an integer",t);if(e<0)throw new B.ERR_BUFFER_OUT_OF_BOUNDS;throw new B.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${e}`,t)}G("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),G("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),G("ERR_OUT_OF_RANGE",(function(t,e,i){let r=`The value of "${t}" is out of range.`,n=i;return Number.isInteger(i)&&Math.abs(i)>2**32?n=D(String(i)):"bigint"==typeof i&&(n=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(n=D(n)),n+="n"),r+=` It must be ${e}. Received ${n}`,r}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function Q(t,e){let i;e=e||1/0;const r=t.length;let n=null;const s=[];for(let a=0;a<r;++a){if(i=t.charCodeAt(a),i>55295&&i<57344){if(!n){if(i>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&s.push(239,191,189);continue}n=i;continue}if(i<56320){(e-=3)>-1&&s.push(239,191,189),n=i;continue}i=65536+(n-55296<<10|i-56320)}else n&&(e-=3)>-1&&s.push(239,191,189);if(n=null,i<128){if((e-=1)<0)break;s.push(i)}else if(i<2048){if((e-=2)<0)break;s.push(i>>6|192,63&i|128)}else if(i<65536){if((e-=3)<0)break;s.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return s}function V(t){return r.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function X(t,e,i,r){let n;for(n=0;n<r&&!(n+i>=e.length||n>=t.length);++n)e[n+i]=t[n];return n}function Y(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function $(t){return t!=t}const J=function(){const t="0123456789abcdef",e=new Array(256);for(let i=0;i<16;++i){const r=16*i;for(let n=0;n<16;++n)e[r+n]=t[i]+t[n]}return e}();function K(t){return"undefined"==typeof BigInt?Z:t}function Z(){throw new Error("BigInt not supported")}},584:t=>{t.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},187:t=>{"use strict";var e,i="object"==typeof Reflect?Reflect:null,r=i&&"function"==typeof i.apply?i.apply:function(t,e,i){return Function.prototype.apply.call(t,e,i)};e=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var n=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,t.exports.once=function(t,e){return new Promise((function(i,r){function n(){void 0!==s&&t.removeListener("error",s),i([].slice.call(arguments))}var s;"error"!==e&&(s=function(i){t.removeListener(e,n),r(i)},t.once("error",s)),t.once(e,n)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var a=10;function o(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function h(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function u(t,e,i,r){var n,s,a,u;if(o(i),void 0===(s=t._events)?(s=t._events=Object.create(null),t._eventsCount=0):(void 0!==s.newListener&&(t.emit("newListener",e,i.listener?i.listener:i),s=t._events),a=s[e]),void 0===a)a=s[e]=i,++t._eventsCount;else if("function"==typeof a?a=s[e]=r?[i,a]:[a,i]:r?a.unshift(i):a.push(i),(n=h(t))>0&&a.length>n&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=a.length,u=l,console&&console.warn&&console.warn(u)}return t}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(t,e,i){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:i},n=l.bind(r);return n.listener=i,r.wrapFn=n,n}function f(t,e,i){var r=t._events;if(void 0===r)return[];var n=r[e];return void 0===n?[]:"function"==typeof n?i?[n.listener||n]:[n]:i?function(t){for(var e=new Array(t.length),i=0;i<e.length;++i)e[i]=t[i].listener||t[i];return e}(n):d(n,n.length)}function p(t){var e=this._events;if(void 0!==e){var i=e[t];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function d(t,e){for(var i=new Array(e),r=0;r<e;++r)i[r]=t[r];return i}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");a=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return h(this)},s.prototype.emit=function(t){for(var e=[],i=1;i<arguments.length;i++)e.push(arguments[i]);var n="error"===t,s=this._events;if(void 0!==s)n=n&&void 0===s.error;else if(!n)return!1;if(n){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var h=s[t];if(void 0===h)return!1;if("function"==typeof h)r(h,this,e);else{var u=h.length,l=d(h,u);for(i=0;i<u;++i)r(l[i],this,e)}return!0},s.prototype.addListener=function(t,e){return u(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return u(this,t,e,!0)},s.prototype.once=function(t,e){return o(e),this.on(t,c(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return o(e),this.prependListener(t,c(this,t,e)),this},s.prototype.removeListener=function(t,e){var i,r,n,s,a;if(o(e),void 0===(r=this._events))return this;if(void 0===(i=r[t]))return this;if(i===e||i.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,i.listener||e));else if("function"!=typeof i){for(n=-1,s=i.length-1;s>=0;s--)if(i[s]===e||i[s].listener===e){a=i[s].listener,n=s;break}if(n<0)return this;0===n?i.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(i,n),1===i.length&&(r[t]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[t]),this;if(0===arguments.length){var n,s=Object.keys(i);for(r=0;r<s.length;++r)"removeListener"!==(n=s[r])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=i[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return f(this,t,!0)},s.prototype.rawListeners=function(t){return f(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},267:(t,e,i)=>{var r=i(501),n=i(575),s=t.exports;for(var a in r)r.hasOwnProperty(a)&&(s[a]=r[a]);function o(t){if("string"==typeof t&&(t=n.parse(t)),t.protocol||(t.protocol="https:"),"https:"!==t.protocol)throw new Error('Protocol "'+t.protocol+'" not supported. Expected "https:"');return t}s.request=function(t,e){return t=o(t),r.request.call(this,t,e)},s.get=function(t,e){return t=o(t),r.get.call(this,t,e)}},645:(t,e)=>{e.read=function(t,e,i,r,n){var s,a,o=8*n-r-1,h=(1<<o)-1,u=h>>1,l=-7,c=i?n-1:0,f=i?-1:1,p=t[e+c];for(c+=f,s=p&(1<<-l)-1,p>>=-l,l+=o;l>0;s=256*s+t[e+c],c+=f,l-=8);for(a=s&(1<<-l)-1,s>>=-l,l+=r;l>0;a=256*a+t[e+c],c+=f,l-=8);if(0===s)s=1-u;else{if(s===h)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,r),s-=u}return(p?-1:1)*a*Math.pow(2,s-r)},e.write=function(t,e,i,r,n,s){var a,o,h,u=8*s-n-1,l=(1<<u)-1,c=l>>1,f=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:s-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(h=Math.pow(2,-a))<1&&(a--,h*=2),(e+=a+c>=1?f/h:f*Math.pow(2,1-c))*h>=2&&(a++,h/=2),a+c>=l?(o=0,a=l):a+c>=1?(o=(e*h-1)*Math.pow(2,n),a+=c):(o=e*Math.pow(2,c-1)*Math.pow(2,n),a=0));n>=8;t[i+p]=255&o,p+=d,o/=256,n-=8);for(a=a<<n|o,u+=n;u>0;t[i+p]=255&a,p+=d,a/=256,u-=8);t[i+p-d]|=128*y}},717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}}},801:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>Ee});var r=484813681109536e-20,n=Math.PI/2,s=1e-10,a=.017453292519943295,o=57.29577951308232,h=Math.PI/4,u=2*Math.PI,l=3.14159265359,c={greenwich:0,lisbon:-9.131906111111,paris:2.337229166667,bogota:-74.080916666667,madrid:-3.687938888889,rome:12.452333333333,bern:7.439583333333,jakarta:106.807719444444,ferro:-17.666666666667,brussels:4.367975,stockholm:18.058277777778,athens:23.7163375,oslo:10.722916666667};const f={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}};var p=/[\s_\-\/\(\)]/g;function d(t,e){if(t[e])return t[e];for(var i,r=Object.keys(t),n=e.toLowerCase().replace(p,""),s=-1;++s<r.length;)if((i=r[s]).toLowerCase().replace(p,"")===n)return t[i]}function y(t){var e,i,r,n={},s=t.split("+").map((function(t){return t.trim()})).filter((function(t){return t})).reduce((function(t,e){var i=e.split("=");return i.push(!0),t[i[0].toLowerCase()]=i[1],t}),{}),o={proj:"projName",datum:"datumCode",rf:function(t){n.rf=parseFloat(t)},lat_0:function(t){n.lat0=t*a},lat_1:function(t){n.lat1=t*a},lat_2:function(t){n.lat2=t*a},lat_ts:function(t){n.lat_ts=t*a},lon_0:function(t){n.long0=t*a},lon_1:function(t){n.long1=t*a},lon_2:function(t){n.long2=t*a},alpha:function(t){n.alpha=parseFloat(t)*a},lonc:function(t){n.longc=t*a},x_0:function(t){n.x0=parseFloat(t)},y_0:function(t){n.y0=parseFloat(t)},k_0:function(t){n.k0=parseFloat(t)},k:function(t){n.k0=parseFloat(t)},a:function(t){n.a=parseFloat(t)},b:function(t){n.b=parseFloat(t)},r_a:function(){n.R_A=!0},zone:function(t){n.zone=parseInt(t,10)},south:function(){n.utmSouth=!0},towgs84:function(t){n.datum_params=t.split(",").map((function(t){return parseFloat(t)}))},to_meter:function(t){n.to_meter=parseFloat(t)},units:function(t){n.units=t;var e=d(f,t);e&&(n.to_meter=e.to_meter)},from_greenwich:function(t){n.from_greenwich=t*a},pm:function(t){var e=d(c,t);n.from_greenwich=(e||parseFloat(t))*a},nadgrids:function(t){"@null"===t?n.datumCode="none":n.nadgrids=t},axis:function(t){var e="ewnsud";3===t.length&&-1!==e.indexOf(t.substr(0,1))&&-1!==e.indexOf(t.substr(1,1))&&-1!==e.indexOf(t.substr(2,1))&&(n.axis=t)}};for(e in s)i=s[e],e in o?"function"==typeof(r=o[e])?r(i):n[r]=i:n[e]=i;return"string"==typeof n.datumCode&&"WGS84"!==n.datumCode&&(n.datumCode=n.datumCode.toLowerCase()),n}var g=/\s/,m=/[A-Za-z]/,M=/[A-Za-z84]/,b=/[,\]]/,v=/[\d\.E\-\+]/;function _(t){if("string"!=typeof t)throw new Error("not a string");this.text=t.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=1}function w(t,e,i){Array.isArray(e)&&(i.unshift(e),e=null);var r=e?{}:t,n=i.reduce((function(t,e){return x(e,t),t}),r);e&&(t[e]=n)}function x(t,e){if(Array.isArray(t)){var i=t.shift();if("PARAMETER"===i&&(i=t.shift()),1===t.length)return Array.isArray(t[0])?(e[i]={},void x(t[0],e[i])):void(e[i]=t[0]);if(t.length)if("TOWGS84"!==i){if("AXIS"===i)return i in e||(e[i]=[]),void e[i].push(t);var r;switch(Array.isArray(i)||(e[i]={}),i){case"UNIT":case"PRIMEM":case"VERT_DATUM":return e[i]={name:t[0].toLowerCase(),convert:t[1]},void(3===t.length&&x(t[2],e[i]));case"SPHEROID":case"ELLIPSOID":return e[i]={name:t[0],a:t[1],rf:t[2]},void(4===t.length&&x(t[3],e[i]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return t[0]=["name",t[0]],void w(e,i,t);default:for(r=-1;++r<t.length;)if(!Array.isArray(t[r]))return x(t,e[i]);return w(e,i,t)}}else e[i]=t;else e[i]=!0}else e[t]=!0}function S(t){return.017453292519943295*t}function E(t){var e=new _(t).output(),i=e.shift(),r=e.shift();e.unshift(["name",r]),e.unshift(["type",i]);var n={};return x(e,n),function(t){if("GEOGCS"===t.type?t.projName="longlat":"LOCAL_CS"===t.type?(t.projName="identity",t.local=!0):"object"==typeof t.PROJECTION?t.projName=Object.keys(t.PROJECTION)[0]:t.projName=t.PROJECTION,t.AXIS){for(var e="",i=0,r=t.AXIS.length;i<r;++i){var n=t.AXIS[i][0].toLowerCase();-1!==n.indexOf("north")?e+="n":-1!==n.indexOf("south")?e+="s":-1!==n.indexOf("east")?e+="e":-1!==n.indexOf("west")&&(e+="w")}2===e.length&&(e+="u"),3===e.length&&(t.axis=e)}t.UNIT&&(t.units=t.UNIT.name.toLowerCase(),"metre"===t.units&&(t.units="meter"),t.UNIT.convert&&("GEOGCS"===t.type?t.DATUM&&t.DATUM.SPHEROID&&(t.to_meter=t.UNIT.convert*t.DATUM.SPHEROID.a):t.to_meter=t.UNIT.convert));var s=t.GEOGCS;function a(e){return e*(t.to_meter||1)}"GEOGCS"===t.type&&(s=t),s&&(s.DATUM?t.datumCode=s.DATUM.name.toLowerCase():t.datumCode=s.name.toLowerCase(),"d_"===t.datumCode.slice(0,2)&&(t.datumCode=t.datumCode.slice(2)),"new_zealand_geodetic_datum_1949"!==t.datumCode&&"new_zealand_1949"!==t.datumCode||(t.datumCode="nzgd49"),"wgs_1984"!==t.datumCode&&"world_geodetic_system_1984"!==t.datumCode||("Mercator_Auxiliary_Sphere"===t.PROJECTION&&(t.sphere=!0),t.datumCode="wgs84"),"_ferro"===t.datumCode.slice(-6)&&(t.datumCode=t.datumCode.slice(0,-6)),"_jakarta"===t.datumCode.slice(-8)&&(t.datumCode=t.datumCode.slice(0,-8)),~t.datumCode.indexOf("belge")&&(t.datumCode="rnb72"),s.DATUM&&s.DATUM.SPHEROID&&(t.ellps=s.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk"),"international"===t.ellps.toLowerCase().slice(0,13)&&(t.ellps="intl"),t.a=s.DATUM.SPHEROID.a,t.rf=parseFloat(s.DATUM.SPHEROID.rf,10)),s.DATUM&&s.DATUM.TOWGS84&&(t.datum_params=s.DATUM.TOWGS84),~t.datumCode.indexOf("osgb_1936")&&(t.datumCode="osgb36"),~t.datumCode.indexOf("osni_1952")&&(t.datumCode="osni52"),(~t.datumCode.indexOf("tm65")||~t.datumCode.indexOf("geodetic_datum_of_1965"))&&(t.datumCode="ire65"),"ch1903+"===t.datumCode&&(t.datumCode="ch1903"),~t.datumCode.indexOf("israel")&&(t.datumCode="isr93")),t.b&&!isFinite(t.b)&&(t.b=t.a),[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",S],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",S],["x0","false_easting",a],["y0","false_northing",a],["long0","central_meridian",S],["lat0","latitude_of_origin",S],["lat0","standard_parallel_1",S],["lat1","standard_parallel_1",S],["lat2","standard_parallel_2",S],["azimuth","Azimuth"],["alpha","azimuth",S],["srsCode","name"]].forEach((function(e){return function(t,e){var i=e[0],r=e[1];!(i in t)&&r in t&&(t[i]=t[r],3===e.length&&(t[i]=e[2](t[i])))}(t,e)})),t.long0||!t.longc||"Albers_Conic_Equal_Area"!==t.projName&&"Lambert_Azimuthal_Equal_Area"!==t.projName||(t.long0=t.longc),t.lat_ts||!t.lat1||"Stereographic_South_Pole"!==t.projName&&"Polar Stereographic (variant B)"!==t.projName||(t.lat0=S(t.lat1>0?90:-90),t.lat_ts=t.lat1)}(n),n}function R(t){var e=this;if(2===arguments.length){var i=arguments[1];"string"==typeof i?"+"===i.charAt(0)?R[t]=y(arguments[1]):R[t]=E(arguments[1]):R[t]=i}else if(1===arguments.length){if(Array.isArray(t))return t.map((function(t){Array.isArray(t)?R.apply(e,t):R(t)}));if("string"==typeof t){if(t in R)return R[t]}else"EPSG"in t?R["EPSG:"+t.EPSG]=t:"ESRI"in t?R["ESRI:"+t.ESRI]=t:"IAU2000"in t?R["IAU2000:"+t.IAU2000]=t:console.log(t);return}}_.prototype.readCharicter=function(){var t=this.text[this.place++];if(4!==this.state)for(;g.test(t);){if(this.place>=this.text.length)return;t=this.text[this.place++]}switch(this.state){case 1:return this.neutral(t);case 2:return this.keyword(t);case 4:return this.quoted(t);case 5:return this.afterquote(t);case 3:return this.number(t);case-1:return}},_.prototype.afterquote=function(t){if('"'===t)return this.word+='"',void(this.state=4);if(b.test(t))return this.word=this.word.trim(),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in afterquote yet, index '+this.place)},_.prototype.afterItem=function(t){return","===t?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=1)):"]"===t?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=1,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},_.prototype.number=function(t){if(!v.test(t)){if(b.test(t))return this.word=parseFloat(this.word),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in number yet, index '+this.place)}this.word+=t},_.prototype.quoted=function(t){'"'!==t?this.word+=t:this.state=5},_.prototype.keyword=function(t){if(M.test(t))this.word+=t;else{if("["===t){var e=[];return e.push(this.word),this.level++,null===this.root?this.root=e:this.currentObject.push(e),this.stack.push(this.currentObject),this.currentObject=e,void(this.state=1)}if(!b.test(t))throw new Error("havn't handled \""+t+'" in keyword yet, index '+this.place);this.afterItem(t)}},_.prototype.neutral=function(t){if(m.test(t))return this.word=t,void(this.state=2);if('"'===t)return this.word="",void(this.state=4);if(v.test(t))return this.word=t,void(this.state=3);if(!b.test(t))throw new Error("havn't handled \""+t+'" in neutral yet, index '+this.place);this.afterItem(t)},_.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(-1===this.state)return this.root;throw new Error('unable to parse string "'+this.text+'". State is '+this.state)},function(t){t("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"),t("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"),t("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),t.WGS84=t["EPSG:4326"],t["EPSG:3785"]=t["EPSG:3857"],t.GOOGLE=t["EPSG:3857"],t["EPSG:900913"]=t["EPSG:3857"],t["EPSG:102113"]=t["EPSG:3857"]}(R);const P=R;var O=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"],T=["3857","900913","3785","102113"];function C(t,e){var i,r;if(t=t||{},!e)return t;for(r in e)void 0!==(i=e[r])&&(t[r]=i);return t}function A(t,e,i){var r=t*e;return i/Math.sqrt(1-r*r)}function k(t){return t<0?-1:1}function I(t){return Math.abs(t)<=l?t:t-k(t)*u}function N(t,e,i){var r=t*i,s=.5*t;return r=Math.pow((1-r)/(1+r),s),Math.tan(.5*(n-e))/r}function L(t,e){for(var i,r,s=.5*t,a=n-2*Math.atan(e),o=0;o<=15;o++)if(i=t*Math.sin(a),a+=r=n-2*Math.atan(e*Math.pow((1-i)/(1+i),s))-a,Math.abs(r)<=1e-10)return a;return-9999}function j(t){return t}var U=[{init:function(){var t=this.b/this.a;this.es=1-t*t,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=Math.sqrt(this.es),this.lat_ts?this.sphere?this.k0=Math.cos(this.lat_ts):this.k0=A(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)):this.k0||(this.k?this.k0=this.k:this.k0=1)},forward:function(t){var e,i,r=t.x,a=t.y;if(a*o>90&&a*o<-90&&r*o>180&&r*o<-180)return null;if(Math.abs(Math.abs(a)-n)<=s)return null;if(this.sphere)e=this.x0+this.a*this.k0*I(r-this.long0),i=this.y0+this.a*this.k0*Math.log(Math.tan(h+.5*a));else{var u=Math.sin(a),l=N(this.e,a,u);e=this.x0+this.a*this.k0*I(r-this.long0),i=this.y0-this.a*this.k0*Math.log(l)}return t.x=e,t.y=i,t},inverse:function(t){var e,i,r=t.x-this.x0,s=t.y-this.y0;if(this.sphere)i=n-2*Math.atan(Math.exp(-s/(this.a*this.k0)));else{var a=Math.exp(-s/(this.a*this.k0));if(-9999===(i=L(this.e,a)))return null}return e=I(this.long0+r/(this.a*this.k0)),t.x=e,t.y=i,t},names:["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{init:function(){},forward:j,inverse:j,names:["longlat","identity"]}],q={},B=[];function G(t,e){var i=B.length;return t.names?(B[i]=t,t.names.forEach((function(t){q[t.toLowerCase()]=i})),this):(console.log(e),!0)}const D={start:function(){U.forEach(G)},add:G,get:function(t){if(!t)return!1;var e=t.toLowerCase();return void 0!==q[e]&&B[q[e]]?B[q[e]]:void 0}};var F={MERIT:{a:6378137,rf:298.257,ellipseName:"MERIT 1983"},SGS85:{a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"},GRS80:{a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"},IAU76:{a:6378140,rf:298.257,ellipseName:"IAU 1976"},airy:{a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"},APL4:{a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"},NWL9D:{a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"},mod_airy:{a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"},andrae:{a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"},aust_SA:{a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"},GRS67:{a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"},bessel:{a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"},bess_nam:{a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"},clrk66:{a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"},clrk80:{a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."},clrk58:{a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"},CPM:{a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"},delmbr:{a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"},engelis:{a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"},evrst30:{a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"},evrst48:{a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"},evrst56:{a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"},evrst69:{a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"},evrstSS:{a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"},fschr60:{a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"},fschr60m:{a:6378155,rf:298.3,ellipseName:"Fischer 1960"},fschr68:{a:6378150,rf:298.3,ellipseName:"Fischer 1968"},helmert:{a:6378200,rf:298.3,ellipseName:"Helmert 1906"},hough:{a:6378270,rf:297,ellipseName:"Hough"},intl:{a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"},kaula:{a:6378163,rf:298.24,ellipseName:"Kaula 1961"},lerch:{a:6378139,rf:298.257,ellipseName:"Lerch 1979"},mprts:{a:6397300,rf:191,ellipseName:"Maupertius 1738"},new_intl:{a:6378157.5,b:6356772.2,ellipseName:"New International 1967"},plessis:{a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"},krass:{a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"},SEasia:{a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"},walbeck:{a:6376896,b:6355834.8467,ellipseName:"Walbeck"},WGS60:{a:6378165,rf:298.3,ellipseName:"WGS 60"},WGS66:{a:6378145,rf:298.25,ellipseName:"WGS 66"},WGS7:{a:6378135,rf:298.26,ellipseName:"WGS 72"}},W=F.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};F.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};var z={wgs84:{towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"},ch1903:{towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"},ggrs87:{towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"},nad83:{towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"},nad27:{nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"},potsdam:{towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"},carthage:{towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"},hermannskogel:{towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"},osni52:{towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"},ire65:{towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"},rassadiran:{towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"},nzgd49:{towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"},osgb36:{towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"},s_jtsk:{towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"},beduaram:{towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"},gunung_segara:{towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"},rnb72:{towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"}};function H(t,e){if(!(this instanceof H))return new H(t);e=e||function(t){if(t)throw t};var i=function(t){if(!function(t){return"string"==typeof t}(t))return t;if(function(t){return t in P}(t))return P[t];if(function(t){return O.some((function(e){return t.indexOf(e)>-1}))}(t)){var e=E(t);if(function(t){var e=d(t,"authority");if(e){var i=d(e,"epsg");return i&&T.indexOf(i)>-1}}(e))return P["EPSG:3857"];var i=function(t){var e=d(t,"extension");if(e)return d(e,"proj4")}(e);return i?y(i):e}return function(t){return"+"===t[0]}(t)?y(t):void 0}(t);if("object"==typeof i){var n=H.projections.get(i.projName);if(n){if(i.datumCode&&"none"!==i.datumCode){var a=d(z,i.datumCode);a&&(i.datum_params=a.towgs84?a.towgs84.split(","):null,i.ellps=a.ellipse,i.datumName=a.datumName?a.datumName:i.datumCode)}i.k0=i.k0||1,i.axis=i.axis||"enu",i.ellps=i.ellps||"wgs84";var o,h,u,l,c,f,p=function(t,e,i,r,n){if(!t){var a=d(F,r);a||(a=W),t=a.a,e=a.b,i=a.rf}return i&&!e&&(e=(1-1/i)*t),(0===i||Math.abs(t-e)<s)&&(n=!0,e=t),{a:t,b:e,rf:i,sphere:n}}(i.a,i.b,i.rf,i.ellps,i.sphere),g=(o=p.a,h=p.b,p.rf,c=((u=o*o)-(l=h*h))/u,f=0,i.R_A?(u=(o*=1-c*(.16666666666666666+c*(.04722222222222222+.022156084656084655*c)))*o,c=0):f=Math.sqrt(c),{es:c,e:f,ep2:(u-l)/l}),m=i.datum||function(t,e,i,n,s,a){var o={};return o.datum_type=void 0===t||"none"===t?5:4,e&&(o.datum_params=e.map(parseFloat),0===o.datum_params[0]&&0===o.datum_params[1]&&0===o.datum_params[2]||(o.datum_type=1),o.datum_params.length>3&&(0===o.datum_params[3]&&0===o.datum_params[4]&&0===o.datum_params[5]&&0===o.datum_params[6]||(o.datum_type=2,o.datum_params[3]*=r,o.datum_params[4]*=r,o.datum_params[5]*=r,o.datum_params[6]=o.datum_params[6]/1e6+1))),o.a=i,o.b=n,o.es=s,o.ep2=a,o}(i.datumCode,i.datum_params,p.a,p.b,g.es,g.ep2);C(this,i),C(this,n),this.a=p.a,this.b=p.b,this.rf=p.rf,this.sphere=p.sphere,this.es=g.es,this.e=g.e,this.ep2=g.ep2,this.datum=m,this.init(),e(null,this)}else e(t)}else e(t)}H.projections=D,H.projections.start();const Q=H;function V(t,e,i){var r,s,a,o,h=t.x,u=t.y,l=t.z?t.z:0;if(u<-n&&u>-1.001*n)u=-n;else if(u>n&&u<1.001*n)u=n;else{if(u<-n)return{x:-1/0,y:-1/0,z:t.z};if(u>n)return{x:1/0,y:1/0,z:t.z}}return h>Math.PI&&(h-=2*Math.PI),s=Math.sin(u),o=Math.cos(u),a=s*s,{x:((r=i/Math.sqrt(1-e*a))+l)*o*Math.cos(h),y:(r+l)*o*Math.sin(h),z:(r*(1-e)+l)*s}}function X(t,e,i,r){var n,s,a,o,h,u,l,c,f,p,d,y,g,m,M,b=t.x,v=t.y,_=t.z?t.z:0;if(n=Math.sqrt(b*b+v*v),s=Math.sqrt(b*b+v*v+_*_),n/i<1e-12){if(m=0,s/i<1e-12)return M=-r,{x:t.x,y:t.y,z:t.z}}else m=Math.atan2(v,b);a=_/s,c=(o=n/s)*(1-e)*(h=1/Math.sqrt(1-e*(2-e)*o*o)),f=a*h,g=0;do{g++,u=e*(l=i/Math.sqrt(1-e*f*f))/(l+(M=n*c+_*f-l*(1-e*f*f))),y=(d=a*(h=1/Math.sqrt(1-u*(2-u)*o*o)))*c-(p=o*(1-u)*h)*f,c=p,f=d}while(y*y>1e-24&&g<30);return{x:m,y:Math.atan(d/Math.abs(p)),z:M}}function Y(t){return 1===t||2===t}function $(t,e,i){var r,n,s,a=i.x,o=i.y,h=i.z||0,u={};for(s=0;s<3;s++)if(!e||2!==s||void 0!==i.z)switch(0===s?(r=a,n=-1!=="ew".indexOf(t.axis[s])?"x":"y"):1===s?(r=o,n=-1!=="ns".indexOf(t.axis[s])?"y":"x"):(r=h,n="z"),t.axis[s]){case"e":u[n]=r;break;case"w":u[n]=-r;break;case"n":u[n]=r;break;case"s":u[n]=-r;break;case"u":void 0!==i[n]&&(u.z=r);break;case"d":void 0!==i[n]&&(u.z=-r);break;default:return null}return u}function J(t){var e={x:t[0],y:t[1]};return t.length>2&&(e.z=t[2]),t.length>3&&(e.m=t[3]),e}function K(t){if("function"==typeof Number.isFinite){if(Number.isFinite(t))return;throw new TypeError("coordinates must be finite numbers")}if("number"!=typeof t||t!=t||!isFinite(t))throw new TypeError("coordinates must be finite numbers")}function Z(t,e,i){var r;if(Array.isArray(i)&&(i=J(i)),function(t){K(t.x),K(t.y)}(i),t.datum&&e.datum&&function(t,e){return(1===t.datum.datum_type||2===t.datum.datum_type)&&"WGS84"!==e.datumCode||(1===e.datum.datum_type||2===e.datum.datum_type)&&"WGS84"!==t.datumCode}(t,e)&&(i=Z(t,r=new Q("WGS84"),i),t=r),"enu"!==t.axis&&(i=$(t,!1,i)),"longlat"===t.projName)i={x:i.x*a,y:i.y*a,z:i.z||0};else if(t.to_meter&&(i={x:i.x*t.to_meter,y:i.y*t.to_meter,z:i.z||0}),!(i=t.inverse(i)))return;return t.from_greenwich&&(i.x+=t.from_greenwich),i=function(t,e,i){return function(t,e){return t.datum_type===e.datum_type&&!(t.a!==e.a||Math.abs(t.es-e.es)>5e-11)&&(1===t.datum_type?t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]:2!==t.datum_type||t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]&&t.datum_params[3]===e.datum_params[3]&&t.datum_params[4]===e.datum_params[4]&&t.datum_params[5]===e.datum_params[5]&&t.datum_params[6]===e.datum_params[6])}(t,e)||5===t.datum_type||5===e.datum_type?i:t.es!==e.es||t.a!==e.a||Y(t.datum_type)||Y(e.datum_type)?(i=V(i,t.es,t.a),Y(t.datum_type)&&(i=function(t,e,i){if(1===e)return{x:t.x+i[0],y:t.y+i[1],z:t.z+i[2]};if(2===e){var r=i[0],n=i[1],s=i[2],a=i[3],o=i[4],h=i[5],u=i[6];return{x:u*(t.x-h*t.y+o*t.z)+r,y:u*(h*t.x+t.y-a*t.z)+n,z:u*(-o*t.x+a*t.y+t.z)+s}}}(i,t.datum_type,t.datum_params)),Y(e.datum_type)&&(i=function(t,e,i){if(1===e)return{x:t.x-i[0],y:t.y-i[1],z:t.z-i[2]};if(2===e){var r=i[0],n=i[1],s=i[2],a=i[3],o=i[4],h=i[5],u=i[6],l=(t.x-r)/u,c=(t.y-n)/u,f=(t.z-s)/u;return{x:l+h*c-o*f,y:-h*l+c+a*f,z:o*l-a*c+f}}}(i,e.datum_type,e.datum_params)),X(i,e.es,e.a,e.b)):i}(t.datum,e.datum,i),e.from_greenwich&&(i={x:i.x-e.from_greenwich,y:i.y,z:i.z||0}),"longlat"===e.projName?i={x:i.x*o,y:i.y*o,z:i.z||0}:(i=e.forward(i),e.to_meter&&(i={x:i.x/e.to_meter,y:i.y/e.to_meter,z:i.z||0})),"enu"!==e.axis?$(e,!0,i):i}var tt=Q("WGS84");function et(t,e,i){var r,n,s;return Array.isArray(i)?(r=Z(t,e,i)||{x:NaN,y:NaN},i.length>2?void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name?"number"==typeof r.z?[r.x,r.y,r.z].concat(i.splice(3)):[r.x,r.y,i[2]].concat(i.splice(3)):[r.x,r.y].concat(i.splice(2)):[r.x,r.y]):(n=Z(t,e,i),2===(s=Object.keys(i)).length||s.forEach((function(r){if(void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name){if("x"===r||"y"===r||"z"===r)return}else if("x"===r||"y"===r)return;n[r]=i[r]})),n)}function it(t){return t instanceof Q?t:t.oProj?t.oProj:Q(t)}const rt=function(t,e,i){t=it(t);var r,n=!1;return void 0===e?(e=t,t=tt,n=!0):(void 0!==e.x||Array.isArray(e))&&(i=e,e=t,t=tt,n=!0),e=it(e),i?et(t,e,i):(r={forward:function(i){return et(t,e,i)},inverse:function(i){return et(e,t,i)}},n&&(r.oProj=e),r)};var nt="AJSAJS",st="AFAFAF",at=65,ot=73,ht=79;const ut={forward:lt,inverse:function(t){var e=dt(gt(t.toUpperCase()));return e.lat&&e.lon?[e.lon,e.lat,e.lon,e.lat]:[e.left,e.bottom,e.right,e.top]},toPoint:ct};function lt(t,e){return e=e||5,function(t,e){var i,r,n,s,a,o,h,u,l,c,f,p="00000"+t.easting,d="00000"+t.northing;return t.zoneNumber+t.zoneLetter+(l=t.easting,c=t.northing,f=yt(t.zoneNumber),i=Math.floor(l/1e5),r=Math.floor(c/1e5)%20,s=nt.charCodeAt(n=f-1),a=st.charCodeAt(n),u=!1,(o=s+i-1)>90&&(o=o-90+at-1,u=!0),(o===ot||s<ot&&o>ot||(o>ot||s<ot)&&u)&&o++,(o===ht||s<ht&&o>ht||(o>ht||s<ht)&&u)&&++o===ot&&o++,o>90&&(o=o-90+at-1),(h=a+r)>86?(h=h-86+at-1,u=!0):u=!1,(h===ot||a<ot&&h>ot||(h>ot||a<ot)&&u)&&h++,(h===ht||a<ht&&h>ht||(h>ht||a<ht)&&u)&&++h===ot&&h++,h>86&&(h=h-86+at-1),String.fromCharCode(o)+String.fromCharCode(h))+p.substr(p.length-5,e)+d.substr(d.length-5,e)}(function(t){var e,i,r,n,s,a,o,h=t.lat,u=t.lon,l=6378137,c=.00669438,f=.9996,p=ft(h),d=ft(u);o=Math.floor((u+180)/6)+1,180===u&&(o=60),h>=56&&h<64&&u>=3&&u<12&&(o=32),h>=72&&h<84&&(u>=0&&u<9?o=31:u>=9&&u<21?o=33:u>=21&&u<33?o=35:u>=33&&u<42&&(o=37)),a=ft(6*(o-1)-180+3),e=.006739496752268451,i=l/Math.sqrt(1-c*Math.sin(p)*Math.sin(p)),r=Math.tan(p)*Math.tan(p),n=e*Math.cos(p)*Math.cos(p);var y,g,m=f*i*((s=Math.cos(p)*(d-a))+(1-r+n)*s*s*s/6+(5-18*r+r*r+72*n-58*e)*s*s*s*s*s/120)+5e5,M=f*(l*(.9983242984503243*p-.002514607064228144*Math.sin(2*p)+2639046602129982e-21*Math.sin(4*p)-3.418046101696858e-9*Math.sin(6*p))+i*Math.tan(p)*(s*s/2+(5-r+9*n+4*n*n)*s*s*s*s/24+(61-58*r+r*r+600*n-2.2240339282485886)*s*s*s*s*s*s/720));return h<0&&(M+=1e7),{northing:Math.round(M),easting:Math.round(m),zoneNumber:o,zoneLetter:(y=h,g="Z",84>=y&&y>=72?g="X":72>y&&y>=64?g="W":64>y&&y>=56?g="V":56>y&&y>=48?g="U":48>y&&y>=40?g="T":40>y&&y>=32?g="S":32>y&&y>=24?g="R":24>y&&y>=16?g="Q":16>y&&y>=8?g="P":8>y&&y>=0?g="N":0>y&&y>=-8?g="M":-8>y&&y>=-16?g="L":-16>y&&y>=-24?g="K":-24>y&&y>=-32?g="J":-32>y&&y>=-40?g="H":-40>y&&y>=-48?g="G":-48>y&&y>=-56?g="F":-56>y&&y>=-64?g="E":-64>y&&y>=-72?g="D":-72>y&&y>=-80&&(g="C"),g)}}({lat:t[1],lon:t[0]}),e)}function ct(t){var e=dt(gt(t.toUpperCase()));return e.lat&&e.lon?[e.lon,e.lat]:[(e.left+e.right)/2,(e.top+e.bottom)/2]}function ft(t){return t*(Math.PI/180)}function pt(t){return t/Math.PI*180}function dt(t){var e=t.northing,i=t.easting,r=t.zoneLetter,n=t.zoneNumber;if(n<0||n>60)return null;var s,a,o,h,u,l,c,f,p,d=.9996,y=6378137,g=.00669438,m=(1-Math.sqrt(.99330562))/(1+Math.sqrt(.99330562)),M=i-5e5,b=e;r<"N"&&(b-=1e7),c=6*(n-1)-180+3,s=.006739496752268451,p=(f=b/d/6367449.145945056)+(3*m/2-27*m*m*m/32)*Math.sin(2*f)+(21*m*m/16-55*m*m*m*m/32)*Math.sin(4*f)+151*m*m*m/96*Math.sin(6*f),a=y/Math.sqrt(1-g*Math.sin(p)*Math.sin(p)),o=Math.tan(p)*Math.tan(p),h=s*Math.cos(p)*Math.cos(p),u=.99330562*y/Math.pow(1-g*Math.sin(p)*Math.sin(p),1.5),l=M/(a*d);var v=p-a*Math.tan(p)/u*(l*l/2-(5+3*o+10*h-4*h*h-9*s)*l*l*l*l/24+(61+90*o+298*h+45*o*o-1.6983531815716497-3*h*h)*l*l*l*l*l*l/720);v=pt(v);var _,w=(l-(1+2*o+h)*l*l*l/6+(5-2*h+28*o-3*h*h+8*s+24*o*o)*l*l*l*l*l/120)/Math.cos(p);if(w=c+pt(w),t.accuracy){var x=dt({northing:t.northing+t.accuracy,easting:t.easting+t.accuracy,zoneLetter:t.zoneLetter,zoneNumber:t.zoneNumber});_={top:x.lat,right:x.lon,bottom:v,left:w}}else _={lat:v,lon:w};return _}function yt(t){var e=t%6;return 0===e&&(e=6),e}function gt(t){if(t&&0===t.length)throw"MGRSPoint coverting from nothing";for(var e,i=t.length,r=null,n="",s=0;!/[A-Z]/.test(e=t.charAt(s));){if(s>=2)throw"MGRSPoint bad conversion from: "+t;n+=e,s++}var a=parseInt(n,10);if(0===s||s+3>i)throw"MGRSPoint bad conversion from: "+t;var o=t.charAt(s++);if(o<="A"||"B"===o||"Y"===o||o>="Z"||"I"===o||"O"===o)throw"MGRSPoint zone letter "+o+" not handled: "+t;r=t.substring(s,s+=2);for(var h=yt(a),u=function(t,e){for(var i=nt.charCodeAt(e-1),r=1e5,n=!1;i!==t.charCodeAt(0);){if(++i===ot&&i++,i===ht&&i++,i>90){if(n)throw"Bad character: "+t;i=at,n=!0}r+=1e5}return r}(r.charAt(0),h),l=function(t,e){if(t>"V")throw"MGRSPoint given invalid Northing "+t;for(var i=st.charCodeAt(e-1),r=0,n=!1;i!==t.charCodeAt(0);){if(++i===ot&&i++,i===ht&&i++,i>86){if(n)throw"Bad character: "+t;i=at,n=!0}r+=1e5}return r}(r.charAt(1),h);l<mt(o);)l+=2e6;var c=i-s;if(c%2!=0)throw"MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+t;var f,p,d,y=c/2,g=0,m=0;return y>0&&(f=1e5/Math.pow(10,y),p=t.substring(s,s+y),g=parseFloat(p)*f,d=t.substring(s+y),m=parseFloat(d)*f),{easting:g+u,northing:m+l,zoneLetter:o,zoneNumber:a,accuracy:f}}function mt(t){var e;switch(t){case"C":e=11e5;break;case"D":e=2e6;break;case"E":e=28e5;break;case"F":e=37e5;break;case"G":e=46e5;break;case"H":e=55e5;break;case"J":e=64e5;break;case"K":e=73e5;break;case"L":e=82e5;break;case"M":e=91e5;break;case"N":e=0;break;case"P":e=8e5;break;case"Q":e=17e5;break;case"R":e=26e5;break;case"S":e=35e5;break;case"T":e=44e5;break;case"U":e=53e5;break;case"V":e=62e5;break;case"W":e=7e6;break;case"X":e=79e5;break;default:e=-1}if(e>=0)return e;throw"Invalid zone letter: "+t}function Mt(t,e,i){if(!(this instanceof Mt))return new Mt(t,e,i);if(Array.isArray(t))this.x=t[0],this.y=t[1],this.z=t[2]||0;else if("object"==typeof t)this.x=t.x,this.y=t.y,this.z=t.z||0;else if("string"==typeof t&&void 0===e){var r=t.split(",");this.x=parseFloat(r[0],10),this.y=parseFloat(r[1],10),this.z=parseFloat(r[2],10)||0}else this.x=t,this.y=e,this.z=i||0;console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}Mt.fromMGRS=function(t){return new Mt(ct(t))},Mt.prototype.toMGRS=function(t){return lt([this.x,this.y],t)};const bt=Mt;var vt=.046875,_t=.01953125,wt=.01068115234375;function xt(t){var e=[];e[0]=1-t*(.25+t*(vt+t*(_t+t*wt))),e[1]=t*(.75-t*(vt+t*(_t+t*wt)));var i=t*t;return e[2]=i*(.46875-t*(.013020833333333334+.007120768229166667*t)),i*=t,e[3]=i*(.3645833333333333-.005696614583333333*t),e[4]=i*t*.3076171875,e}function St(t,e,i,r){return i*=e,e*=e,r[0]*t-i*(r[1]+e*(r[2]+e*(r[3]+e*r[4])))}function Et(t,e,i){for(var r=1/(1-e),n=t,a=20;a;--a){var o=Math.sin(n),h=1-e*o*o;if(n-=h=(St(n,o,Math.cos(n),i)-t)*(h*Math.sqrt(h))*r,Math.abs(h)<s)return n}return n}const Rt={init:function(){this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.es&&(this.en=xt(this.es),this.ml0=St(this.lat0,Math.sin(this.lat0),Math.cos(this.lat0),this.en))},forward:function(t){var e,i,r,n=t.x,a=t.y,o=I(n-this.long0),h=Math.sin(a),u=Math.cos(a);if(this.es){var l=u*o,c=Math.pow(l,2),f=this.ep2*Math.pow(u,2),p=Math.pow(f,2),d=Math.abs(u)>s?Math.tan(a):0,y=Math.pow(d,2),g=Math.pow(y,2);e=1-this.es*Math.pow(h,2),l/=Math.sqrt(e);var m=St(a,h,u,this.en);i=this.a*(this.k0*l*(1+c/6*(1-y+f+c/20*(5-18*y+g+14*f-58*y*f+c/42*(61+179*g-g*y-479*y)))))+this.x0,r=this.a*(this.k0*(m-this.ml0+h*o*l/2*(1+c/12*(5-y+9*f+4*p+c/30*(61+g-58*y+270*f-330*y*f+c/56*(1385+543*g-g*y-3111*y))))))+this.y0}else{var M=u*Math.sin(o);if(Math.abs(Math.abs(M)-1)<s)return 93;if(i=.5*this.a*this.k0*Math.log((1+M)/(1-M))+this.x0,r=u*Math.cos(o)/Math.sqrt(1-Math.pow(M,2)),(M=Math.abs(r))>=1){if(M-1>s)return 93;r=0}else r=Math.acos(r);a<0&&(r=-r),r=this.a*this.k0*(r-this.lat0)+this.y0}return t.x=i,t.y=r,t},inverse:function(t){var e,i,r,a,o=(t.x-this.x0)*(1/this.a),h=(t.y-this.y0)*(1/this.a);if(this.es)if(i=Et(e=this.ml0+h/this.k0,this.es,this.en),Math.abs(i)<n){var u=Math.sin(i),l=Math.cos(i),c=Math.abs(l)>s?Math.tan(i):0,f=this.ep2*Math.pow(l,2),p=Math.pow(f,2),d=Math.pow(c,2),y=Math.pow(d,2);e=1-this.es*Math.pow(u,2);var g=o*Math.sqrt(e)/this.k0,m=Math.pow(g,2);r=i-(e*=c)*m/(1-this.es)*.5*(1-m/12*(5+3*d-9*f*d+f-4*p-m/30*(61+90*d-252*f*d+45*y+46*f-m/56*(1385+3633*d+4095*y+1574*y*d)))),a=I(this.long0+g*(1-m/6*(1+2*d+f-m/20*(5+28*d+24*y+8*f*d+6*f-m/42*(61+662*d+1320*y+720*y*d))))/l)}else r=n*k(h),a=0;else{var M=Math.exp(o/this.k0),b=.5*(M-1/M),v=this.lat0+h/this.k0,_=Math.cos(v);e=Math.sqrt((1-Math.pow(_,2))/(1+Math.pow(b,2))),r=Math.asin(e),h<0&&(r=-r),a=0===b&&0===_?0:I(Math.atan2(b,_)+this.long0)}return t.x=a,t.y=r,t},names:["Transverse_Mercator","Transverse Mercator","tmerc"]};function Pt(t){var e=Math.exp(t);return(e-1/e)/2}function Ot(t,e){t=Math.abs(t),e=Math.abs(e);var i=Math.max(t,e),r=Math.min(t,e)/(i||1);return i*Math.sqrt(1+Math.pow(r,2))}function Tt(t,e){for(var i,r=2*Math.cos(2*e),n=t.length-1,s=t[n],a=0;--n>=0;)i=r*s-a+t[n],a=s,s=i;return e+i*Math.sin(2*e)}function Ct(t,e,i){for(var r,n,s=Math.sin(e),a=Math.cos(e),o=Pt(i),h=function(t){var e=Math.exp(t);return(e+1/e)/2}(i),u=2*a*h,l=-2*s*o,c=t.length-1,f=t[c],p=0,d=0,y=0;--c>=0;)r=d,n=p,f=u*(d=f)-r-l*(p=y)+t[c],y=l*d-n+u*p;return[(u=s*h)*f-(l=a*o)*y,u*y+l*f]}const At={init:function(){if(void 0===this.es||this.es<=0)throw new Error("incorrect elliptical usage");this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.cgb=[],this.cbg=[],this.utg=[],this.gtu=[];var t=this.es/(1+Math.sqrt(1-this.es)),e=t/(2-t),i=e;this.cgb[0]=e*(2+e*(-2/3+e*(e*(116/45+e*(26/45+e*(-2854/675)))-2))),this.cbg[0]=e*(e*(2/3+e*(4/3+e*(-82/45+e*(32/45+e*(4642/4725)))))-2),i*=e,this.cgb[1]=i*(7/3+e*(e*(-227/45+e*(2704/315+e*(2323/945)))-1.6)),this.cbg[1]=i*(5/3+e*(-16/15+e*(-13/9+e*(904/315+e*(-1522/945))))),i*=e,this.cgb[2]=i*(56/15+e*(-136/35+e*(-1262/105+e*(73814/2835)))),this.cbg[2]=i*(-26/15+e*(34/21+e*(1.6+e*(-12686/2835)))),i*=e,this.cgb[3]=i*(4279/630+e*(-332/35+e*(-399572/14175))),this.cbg[3]=i*(1237/630+e*(e*(-24832/14175)-2.4)),i*=e,this.cgb[4]=i*(4174/315+e*(-144838/6237)),this.cbg[4]=i*(-734/315+e*(109598/31185)),i*=e,this.cgb[5]=i*(601676/22275),this.cbg[5]=i*(444337/155925),i=Math.pow(e,2),this.Qn=this.k0/(1+e)*(1+i*(1/4+i*(1/64+i/256))),this.utg[0]=e*(e*(2/3+e*(-37/96+e*(1/360+e*(81/512+e*(-96199/604800)))))-.5),this.gtu[0]=e*(.5+e*(-2/3+e*(5/16+e*(41/180+e*(-127/288+e*(7891/37800)))))),this.utg[1]=i*(-1/48+e*(-1/15+e*(437/1440+e*(-46/105+e*(1118711/3870720))))),this.gtu[1]=i*(13/48+e*(e*(557/1440+e*(281/630+e*(-1983433/1935360)))-.6)),i*=e,this.utg[2]=i*(-17/480+e*(37/840+e*(209/4480+e*(-5569/90720)))),this.gtu[2]=i*(61/240+e*(-103/140+e*(15061/26880+e*(167603/181440)))),i*=e,this.utg[3]=i*(-4397/161280+e*(11/504+e*(830251/7257600))),this.gtu[3]=i*(49561/161280+e*(-179/168+e*(6601661/7257600))),i*=e,this.utg[4]=i*(-4583/161280+e*(108847/3991680)),this.gtu[4]=i*(34729/80640+e*(-3418889/1995840)),i*=e,this.utg[5]=i*(-20648693/638668800),this.gtu[5]=.6650675310896665*i;var r=Tt(this.cbg,this.lat0);this.Zb=-this.Qn*(r+function(t,e){for(var i,r=2*Math.cos(e),n=t.length-1,s=t[n],a=0;--n>=0;)i=r*s-a+t[n],a=s,s=i;return Math.sin(e)*i}(this.gtu,2*r))},forward:function(t){var e=I(t.x-this.long0),i=t.y;i=Tt(this.cbg,i);var r=Math.sin(i),n=Math.cos(i),s=Math.sin(e),a=Math.cos(e);i=Math.atan2(r,a*n),e=Math.atan2(s*n,Ot(r,n*a)),e=function(t){var e=Math.abs(t);return e=function(t){var e=1+t,i=e-1;return 0===i?t:t*Math.log(e)/i}(e*(1+e/(Ot(1,e)+1))),t<0?-e:e}(Math.tan(e));var o,h,u=Ct(this.gtu,2*i,2*e);return i+=u[0],e+=u[1],Math.abs(e)<=2.623395162778?(o=this.a*(this.Qn*e)+this.x0,h=this.a*(this.Qn*i+this.Zb)+this.y0):(o=1/0,h=1/0),t.x=o,t.y=h,t},inverse:function(t){var e,i,r=(t.x-this.x0)*(1/this.a),n=(t.y-this.y0)*(1/this.a);if(n=(n-this.Zb)/this.Qn,r/=this.Qn,Math.abs(r)<=2.623395162778){var s=Ct(this.utg,2*n,2*r);n+=s[0],r+=s[1],r=Math.atan(Pt(r));var a=Math.sin(n),o=Math.cos(n),h=Math.sin(r),u=Math.cos(r);n=Math.atan2(a*u,Ot(h,u*o)),e=I((r=Math.atan2(h,u*o))+this.long0),i=Tt(this.cgb,n)}else e=1/0,i=1/0;return t.x=e,t.y=i,t},names:["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc"]},kt={init:function(){var t=function(t,e){if(void 0===t){if((t=Math.floor(30*(I(e)+Math.PI)/Math.PI)+1)<0)return 0;if(t>60)return 60}return t}(this.zone,this.long0);if(void 0===t)throw new Error("unknown utm zone");this.lat0=0,this.long0=(6*Math.abs(t)-183)*a,this.x0=5e5,this.y0=this.utmSouth?1e7:0,this.k0=.9996,At.init.apply(this),this.forward=At.forward,this.inverse=At.inverse},names:["Universal Transverse Mercator System","utm"],dependsOn:"etmerc"};function It(t,e){return Math.pow((1-t)/(1+t),e)}const Nt={init:function(){var t=Math.sin(this.lat0),e=Math.cos(this.lat0);e*=e,this.rc=Math.sqrt(1-this.es)/(1-this.es*t*t),this.C=Math.sqrt(1+this.es*e*e/(1-this.es)),this.phic0=Math.asin(t/this.C),this.ratexp=.5*this.C*this.e,this.K=Math.tan(.5*this.phic0+h)/(Math.pow(Math.tan(.5*this.lat0+h),this.C)*It(this.e*t,this.ratexp))},forward:function(t){var e=t.x,i=t.y;return t.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*i+h),this.C)*It(this.e*Math.sin(i),this.ratexp))-n,t.x=this.C*e,t},inverse:function(t){for(var e=t.x/this.C,i=t.y,r=Math.pow(Math.tan(.5*i+h)/this.K,1/this.C),s=20;s>0&&(i=2*Math.atan(r*It(this.e*Math.sin(t.y),-.5*this.e))-n,!(Math.abs(i-t.y)<1e-14));--s)t.y=i;return s?(t.x=e,t.y=i,t):null},names:["gauss"]},Lt={init:function(){Nt.init.apply(this),this.rc&&(this.sinc0=Math.sin(this.phic0),this.cosc0=Math.cos(this.phic0),this.R2=2*this.rc,this.title||(this.title="Oblique Stereographic Alternative"))},forward:function(t){var e,i,r,n;return t.x=I(t.x-this.long0),Nt.forward.apply(this,[t]),e=Math.sin(t.y),i=Math.cos(t.y),r=Math.cos(t.x),n=this.k0*this.R2/(1+this.sinc0*e+this.cosc0*i*r),t.x=n*i*Math.sin(t.x),t.y=n*(this.cosc0*e-this.sinc0*i*r),t.x=this.a*t.x+this.x0,t.y=this.a*t.y+this.y0,t},inverse:function(t){var e,i,r,n,s;if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,s=Math.sqrt(t.x*t.x+t.y*t.y)){var a=2*Math.atan2(s,this.R2);e=Math.sin(a),i=Math.cos(a),n=Math.asin(i*this.sinc0+t.y*e*this.cosc0/s),r=Math.atan2(t.x*e,s*this.cosc0*i-t.y*this.sinc0*e)}else n=this.phic0,r=0;return t.x=r,t.y=n,Nt.inverse.apply(this,[t]),t.x=I(t.x+this.long0),t},names:["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative","Double_Stereographic"]},jt={init:function(){this.coslat0=Math.cos(this.lat0),this.sinlat0=Math.sin(this.lat0),this.sphere?1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=s&&(this.k0=.5*(1+k(this.lat0)*Math.sin(this.lat_ts))):(Math.abs(this.coslat0)<=s&&(this.lat0>0?this.con=1:this.con=-1),this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e)),1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=s&&(this.k0=.5*this.cons*A(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/N(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))),this.ms1=A(this.e,this.sinlat0,this.coslat0),this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-n,this.cosX0=Math.cos(this.X0),this.sinX0=Math.sin(this.X0))},forward:function(t){var e,i,r,a,o,h,u=t.x,l=t.y,c=Math.sin(l),f=Math.cos(l),p=I(u-this.long0);return Math.abs(Math.abs(u-this.long0)-Math.PI)<=s&&Math.abs(l+this.lat0)<=s?(t.x=NaN,t.y=NaN,t):this.sphere?(e=2*this.k0/(1+this.sinlat0*c+this.coslat0*f*Math.cos(p)),t.x=this.a*e*f*Math.sin(p)+this.x0,t.y=this.a*e*(this.coslat0*c-this.sinlat0*f*Math.cos(p))+this.y0,t):(i=2*Math.atan(this.ssfn_(l,c,this.e))-n,a=Math.cos(i),r=Math.sin(i),Math.abs(this.coslat0)<=s?(o=N(this.e,l*this.con,this.con*c),h=2*this.a*this.k0*o/this.cons,t.x=this.x0+h*Math.sin(u-this.long0),t.y=this.y0-this.con*h*Math.cos(u-this.long0),t):(Math.abs(this.sinlat0)<s?(e=2*this.a*this.k0/(1+a*Math.cos(p)),t.y=e*r):(e=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*r+this.cosX0*a*Math.cos(p))),t.y=e*(this.cosX0*r-this.sinX0*a*Math.cos(p))+this.y0),t.x=e*a*Math.sin(p)+this.x0,t))},inverse:function(t){var e,i,r,a,o;t.x-=this.x0,t.y-=this.y0;var h=Math.sqrt(t.x*t.x+t.y*t.y);if(this.sphere){var u=2*Math.atan(h/(2*this.a*this.k0));return e=this.long0,i=this.lat0,h<=s?(t.x=e,t.y=i,t):(i=Math.asin(Math.cos(u)*this.sinlat0+t.y*Math.sin(u)*this.coslat0/h),e=Math.abs(this.coslat0)<s?this.lat0>0?I(this.long0+Math.atan2(t.x,-1*t.y)):I(this.long0+Math.atan2(t.x,t.y)):I(this.long0+Math.atan2(t.x*Math.sin(u),h*this.coslat0*Math.cos(u)-t.y*this.sinlat0*Math.sin(u))),t.x=e,t.y=i,t)}if(Math.abs(this.coslat0)<=s){if(h<=s)return i=this.lat0,e=this.long0,t.x=e,t.y=i,t;t.x*=this.con,t.y*=this.con,r=h*this.cons/(2*this.a*this.k0),i=this.con*L(this.e,r),e=this.con*I(this.con*this.long0+Math.atan2(t.x,-1*t.y))}else a=2*Math.atan(h*this.cosX0/(2*this.a*this.k0*this.ms1)),e=this.long0,h<=s?o=this.X0:(o=Math.asin(Math.cos(a)*this.sinX0+t.y*Math.sin(a)*this.cosX0/h),e=I(this.long0+Math.atan2(t.x*Math.sin(a),h*this.cosX0*Math.cos(a)-t.y*this.sinX0*Math.sin(a)))),i=-1*L(this.e,Math.tan(.5*(n+o)));return t.x=e,t.y=i,t},names:["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"],ssfn_:function(t,e,i){return e*=i,Math.tan(.5*(n+t))*Math.pow((1-e)/(1+e),.5*i)}},Ut={init:function(){var t=this.lat0;this.lambda0=this.long0;var e=Math.sin(t),i=this.a,r=1/this.rf,n=2*r-Math.pow(r,2),s=this.e=Math.sqrt(n);this.R=this.k0*i*Math.sqrt(1-n)/(1-n*Math.pow(e,2)),this.alpha=Math.sqrt(1+n/(1-n)*Math.pow(Math.cos(t),4)),this.b0=Math.asin(e/this.alpha);var a=Math.log(Math.tan(Math.PI/4+this.b0/2)),o=Math.log(Math.tan(Math.PI/4+t/2)),h=Math.log((1+s*e)/(1-s*e));this.K=a-this.alpha*o+this.alpha*s/2*h},forward:function(t){var e=Math.log(Math.tan(Math.PI/4-t.y/2)),i=this.e/2*Math.log((1+this.e*Math.sin(t.y))/(1-this.e*Math.sin(t.y))),r=-this.alpha*(e+i)+this.K,n=2*(Math.atan(Math.exp(r))-Math.PI/4),s=this.alpha*(t.x-this.lambda0),a=Math.atan(Math.sin(s)/(Math.sin(this.b0)*Math.tan(n)+Math.cos(this.b0)*Math.cos(s))),o=Math.asin(Math.cos(this.b0)*Math.sin(n)-Math.sin(this.b0)*Math.cos(n)*Math.cos(s));return t.y=this.R/2*Math.log((1+Math.sin(o))/(1-Math.sin(o)))+this.y0,t.x=this.R*a+this.x0,t},inverse:function(t){for(var e=t.x-this.x0,i=t.y-this.y0,r=e/this.R,n=2*(Math.atan(Math.exp(i/this.R))-Math.PI/4),s=Math.asin(Math.cos(this.b0)*Math.sin(n)+Math.sin(this.b0)*Math.cos(n)*Math.cos(r)),a=Math.atan(Math.sin(r)/(Math.cos(this.b0)*Math.cos(r)-Math.sin(this.b0)*Math.tan(n))),o=this.lambda0+a/this.alpha,h=0,u=s,l=-1e3,c=0;Math.abs(u-l)>1e-7;){if(++c>20)return;h=1/this.alpha*(Math.log(Math.tan(Math.PI/4+s/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(u))/2)),l=u,u=2*Math.atan(Math.exp(h))-Math.PI/2}return t.x=o,t.y=u,t},names:["somerc"]},qt={init:function(){this.no_off=this.no_off||!1,this.no_rot=this.no_rot||!1,isNaN(this.k0)&&(this.k0=1);var t=Math.sin(this.lat0),e=Math.cos(this.lat0),i=this.e*t;this.bl=Math.sqrt(1+this.es/(1-this.es)*Math.pow(e,4)),this.al=this.a*this.bl*this.k0*Math.sqrt(1-this.es)/(1-i*i);var r,n,s=N(this.e,this.lat0,t),a=this.bl/e*Math.sqrt((1-this.es)/(1-i*i));if(a*a<1&&(a=1),isNaN(this.longc)){var o=N(this.e,this.lat1,Math.sin(this.lat1)),h=N(this.e,this.lat2,Math.sin(this.lat2));this.lat0>=0?this.el=(a+Math.sqrt(a*a-1))*Math.pow(s,this.bl):this.el=(a-Math.sqrt(a*a-1))*Math.pow(s,this.bl);var u=Math.pow(o,this.bl),l=Math.pow(h,this.bl);n=.5*((r=this.el/u)-1/r);var c=(this.el*this.el-l*u)/(this.el*this.el+l*u),f=(l-u)/(l+u),p=I(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-Math.atan(c*Math.tan(.5*this.bl*p)/f)/this.bl,this.long0=I(this.long0);var d=I(this.long1-this.long0);this.gamma0=Math.atan(Math.sin(this.bl*d)/n),this.alpha=Math.asin(a*Math.sin(this.gamma0))}else r=this.lat0>=0?a+Math.sqrt(a*a-1):a-Math.sqrt(a*a-1),this.el=r*Math.pow(s,this.bl),n=.5*(r-1/r),this.gamma0=Math.asin(Math.sin(this.alpha)/a),this.long0=this.longc-Math.asin(n*Math.tan(this.gamma0))/this.bl;this.no_off?this.uc=0:this.lat0>=0?this.uc=this.al/this.bl*Math.atan2(Math.sqrt(a*a-1),Math.cos(this.alpha)):this.uc=-1*this.al/this.bl*Math.atan2(Math.sqrt(a*a-1),Math.cos(this.alpha))},forward:function(t){var e,i,r,a=t.x,o=t.y,u=I(a-this.long0);if(Math.abs(Math.abs(o)-n)<=s)r=o>0?-1:1,i=this.al/this.bl*Math.log(Math.tan(h+r*this.gamma0*.5)),e=-1*r*n*this.al/this.bl;else{var l=N(this.e,o,Math.sin(o)),c=this.el/Math.pow(l,this.bl),f=.5*(c-1/c),p=.5*(c+1/c),d=Math.sin(this.bl*u),y=(f*Math.sin(this.gamma0)-d*Math.cos(this.gamma0))/p;i=Math.abs(Math.abs(y)-1)<=s?Number.POSITIVE_INFINITY:.5*this.al*Math.log((1-y)/(1+y))/this.bl,e=Math.abs(Math.cos(this.bl*u))<=s?this.al*this.bl*u:this.al*Math.atan2(f*Math.cos(this.gamma0)+d*Math.sin(this.gamma0),Math.cos(this.bl*u))/this.bl}return this.no_rot?(t.x=this.x0+e,t.y=this.y0+i):(e-=this.uc,t.x=this.x0+i*Math.cos(this.alpha)+e*Math.sin(this.alpha),t.y=this.y0+e*Math.cos(this.alpha)-i*Math.sin(this.alpha)),t},inverse:function(t){var e,i;this.no_rot?(i=t.y-this.y0,e=t.x-this.x0):(i=(t.x-this.x0)*Math.cos(this.alpha)-(t.y-this.y0)*Math.sin(this.alpha),e=(t.y-this.y0)*Math.cos(this.alpha)+(t.x-this.x0)*Math.sin(this.alpha),e+=this.uc);var r=Math.exp(-1*this.bl*i/this.al),a=.5*(r-1/r),o=.5*(r+1/r),h=Math.sin(this.bl*e/this.al),u=(h*Math.cos(this.gamma0)+a*Math.sin(this.gamma0))/o,l=Math.pow(this.el/Math.sqrt((1+u)/(1-u)),1/this.bl);return Math.abs(u-1)<s?(t.x=this.long0,t.y=n):Math.abs(u+1)<s?(t.x=this.long0,t.y=-1*n):(t.y=L(this.e,l),t.x=I(this.long0-Math.atan2(a*Math.cos(this.gamma0)-h*Math.sin(this.gamma0),Math.cos(this.bl*e/this.al))/this.bl)),t},names:["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"]},Bt={init:function(){if(this.lat2||(this.lat2=this.lat1),this.k0||(this.k0=1),this.x0=this.x0||0,this.y0=this.y0||0,!(Math.abs(this.lat1+this.lat2)<s)){var t=this.b/this.a;this.e=Math.sqrt(1-t*t);var e=Math.sin(this.lat1),i=Math.cos(this.lat1),r=A(this.e,e,i),n=N(this.e,this.lat1,e),a=Math.sin(this.lat2),o=Math.cos(this.lat2),h=A(this.e,a,o),u=N(this.e,this.lat2,a),l=N(this.e,this.lat0,Math.sin(this.lat0));Math.abs(this.lat1-this.lat2)>s?this.ns=Math.log(r/h)/Math.log(n/u):this.ns=e,isNaN(this.ns)&&(this.ns=e),this.f0=r/(this.ns*Math.pow(n,this.ns)),this.rh=this.a*this.f0*Math.pow(l,this.ns),this.title||(this.title="Lambert Conformal Conic")}},forward:function(t){var e=t.x,i=t.y;Math.abs(2*Math.abs(i)-Math.PI)<=s&&(i=k(i)*(n-2e-10));var r,a,o=Math.abs(Math.abs(i)-n);if(o>s)r=N(this.e,i,Math.sin(i)),a=this.a*this.f0*Math.pow(r,this.ns);else{if((o=i*this.ns)<=0)return null;a=0}var h=this.ns*I(e-this.long0);return t.x=this.k0*(a*Math.sin(h))+this.x0,t.y=this.k0*(this.rh-a*Math.cos(h))+this.y0,t},inverse:function(t){var e,i,r,s,a,o=(t.x-this.x0)/this.k0,h=this.rh-(t.y-this.y0)/this.k0;this.ns>0?(e=Math.sqrt(o*o+h*h),i=1):(e=-Math.sqrt(o*o+h*h),i=-1);var u=0;if(0!==e&&(u=Math.atan2(i*o,i*h)),0!==e||this.ns>0){if(i=1/this.ns,r=Math.pow(e/(this.a*this.f0),i),-9999===(s=L(this.e,r)))return null}else s=-n;return a=I(u/this.ns+this.long0),t.x=a,t.y=s,t},names:["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"]},Gt={init:function(){this.a=6377397.155,this.es=.006674372230614,this.e=Math.sqrt(this.es),this.lat0||(this.lat0=.863937979737193),this.long0||(this.long0=.4334234309119251),this.k0||(this.k0=.9999),this.s45=.785398163397448,this.s90=2*this.s45,this.fi0=this.lat0,this.e2=this.es,this.e=Math.sqrt(this.e2),this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2)),this.uq=1.04216856380474,this.u0=Math.asin(Math.sin(this.fi0)/this.alfa),this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2),this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g,this.k1=this.k0,this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2)),this.s0=1.37008346281555,this.n=Math.sin(this.s0),this.ro0=this.k1*this.n0/Math.tan(this.s0),this.ad=this.s90-this.uq},forward:function(t){var e,i,r,n,s,a,o,h=t.x,u=t.y,l=I(h-this.long0);return e=Math.pow((1+this.e*Math.sin(u))/(1-this.e*Math.sin(u)),this.alfa*this.e/2),i=2*(Math.atan(this.k*Math.pow(Math.tan(u/2+this.s45),this.alfa)/e)-this.s45),r=-l*this.alfa,n=Math.asin(Math.cos(this.ad)*Math.sin(i)+Math.sin(this.ad)*Math.cos(i)*Math.cos(r)),s=Math.asin(Math.cos(i)*Math.sin(r)/Math.cos(n)),a=this.n*s,o=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(n/2+this.s45),this.n),t.y=o*Math.cos(a)/1,t.x=o*Math.sin(a)/1,this.czech||(t.y*=-1,t.x*=-1),t},inverse:function(t){var e,i,r,n,s,a,o,h=t.x;t.x=t.y,t.y=h,this.czech||(t.y*=-1,t.x*=-1),s=Math.sqrt(t.x*t.x+t.y*t.y),n=Math.atan2(t.y,t.x)/Math.sin(this.s0),r=2*(Math.atan(Math.pow(this.ro0/s,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45),e=Math.asin(Math.cos(this.ad)*Math.sin(r)-Math.sin(this.ad)*Math.cos(r)*Math.cos(n)),i=Math.asin(Math.cos(r)*Math.sin(n)/Math.cos(e)),t.x=this.long0-i/this.alfa,a=e,o=0;var u=0;do{t.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(e/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(a))/(1-this.e*Math.sin(a)),this.e/2))-this.s45),Math.abs(a-t.y)<1e-10&&(o=1),a=t.y,u+=1}while(0===o&&u<15);return u>=15?null:t},names:["Krovak","krovak"]};function Dt(t,e,i,r,n){return t*n-e*Math.sin(2*n)+i*Math.sin(4*n)-r*Math.sin(6*n)}function Ft(t){return 1-.25*t*(1+t/16*(3+1.25*t))}function Wt(t){return.375*t*(1+.25*t*(1+.46875*t))}function zt(t){return.05859375*t*t*(1+.75*t)}function Ht(t){return t*t*t*(35/3072)}function Qt(t,e,i){var r=e*i;return t/Math.sqrt(1-r*r)}function Vt(t){return Math.abs(t)<n?t:t-k(t)*Math.PI}function Xt(t,e,i,r,n){var s,a;s=t/e;for(var o=0;o<15;o++)if(s+=a=(t-(e*s-i*Math.sin(2*s)+r*Math.sin(4*s)-n*Math.sin(6*s)))/(e-2*i*Math.cos(2*s)+4*r*Math.cos(4*s)-6*n*Math.cos(6*s)),Math.abs(a)<=1e-10)return s;return NaN}const Yt={init:function(){this.sphere||(this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.ml0=this.a*Dt(this.e0,this.e1,this.e2,this.e3,this.lat0))},forward:function(t){var e,i,r=t.x,n=t.y;if(r=I(r-this.long0),this.sphere)e=this.a*Math.asin(Math.cos(n)*Math.sin(r)),i=this.a*(Math.atan2(Math.tan(n),Math.cos(r))-this.lat0);else{var s=Math.sin(n),a=Math.cos(n),o=Qt(this.a,this.e,s),h=Math.tan(n)*Math.tan(n),u=r*Math.cos(n),l=u*u,c=this.es*a*a/(1-this.es);e=o*u*(1-l*h*(1/6-(8-h+8*c)*l/120)),i=this.a*Dt(this.e0,this.e1,this.e2,this.e3,n)-this.ml0+o*s/a*l*(.5+(5-h+6*c)*l/24)}return t.x=e+this.x0,t.y=i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,i,r=t.x/this.a,a=t.y/this.a;if(this.sphere){var o=a+this.lat0;e=Math.asin(Math.sin(o)*Math.cos(r)),i=Math.atan2(Math.tan(r),Math.cos(o))}else{var h=Xt(this.ml0/this.a+a,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(h)-n)<=s)return t.x=this.long0,t.y=n,a<0&&(t.y*=-1),t;var u=Qt(this.a,this.e,Math.sin(h)),l=u*u*u/this.a/this.a*(1-this.es),c=Math.pow(Math.tan(h),2),f=r*this.a/u,p=f*f;e=h-u*Math.tan(h)/l*f*f*(.5-(1+3*c)*f*f/24),i=f*(1-p*(c/3+(1+3*c)*c*p/15))/Math.cos(h)}return t.x=I(i+this.long0),t.y=Vt(e),t},names:["Cassini","Cassini_Soldner","cass"]};function $t(t,e){var i;return t>1e-7?(1-t*t)*(e/(1-(i=t*e)*i)-.5/t*Math.log((1-i)/(1+i))):2*e}const Jt={init:function(){var t,e=Math.abs(this.lat0);if(Math.abs(e-n)<s?this.mode=this.lat0<0?this.S_POLE:this.N_POLE:Math.abs(e)<s?this.mode=this.EQUIT:this.mode=this.OBLIQ,this.es>0)switch(this.qp=$t(this.e,1),this.mmf=.5/(1-this.es),this.apa=function(t){var e,i=[];return i[0]=.3333333333333333*t,e=t*t,i[0]+=.17222222222222222*e,i[1]=.06388888888888888*e,e*=t,i[0]+=.10257936507936508*e,i[1]+=.0664021164021164*e,i[2]=.016415012942191543*e,i}(this.es),this.mode){case this.N_POLE:case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp),this.dd=1/this.rq,this.xmf=1,this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp),t=Math.sin(this.lat0),this.sinb1=$t(this.e,t)/this.qp,this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1),this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*t*t)*this.rq*this.cosb1),this.ymf=(this.xmf=this.rq)/this.dd,this.xmf*=this.dd}else this.mode===this.OBLIQ&&(this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0))},forward:function(t){var e,i,r,a,o,u,l,c,f,p,d=t.x,y=t.y;if(d=I(d-this.long0),this.sphere){if(o=Math.sin(y),p=Math.cos(y),r=Math.cos(d),this.mode===this.OBLIQ||this.mode===this.EQUIT){if((i=this.mode===this.EQUIT?1+p*r:1+this.sinph0*o+this.cosph0*p*r)<=s)return null;e=(i=Math.sqrt(2/i))*p*Math.sin(d),i*=this.mode===this.EQUIT?o:this.cosph0*o-this.sinph0*p*r}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(r=-r),Math.abs(y+this.lat0)<s)return null;i=h-.5*y,e=(i=2*(this.mode===this.S_POLE?Math.cos(i):Math.sin(i)))*Math.sin(d),i*=r}}else{switch(l=0,c=0,f=0,r=Math.cos(d),a=Math.sin(d),o=Math.sin(y),u=$t(this.e,o),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(l=u/this.qp,c=Math.sqrt(1-l*l)),this.mode){case this.OBLIQ:f=1+this.sinb1*l+this.cosb1*c*r;break;case this.EQUIT:f=1+c*r;break;case this.N_POLE:f=n+y,u=this.qp-u;break;case this.S_POLE:f=y-n,u=this.qp+u}if(Math.abs(f)<s)return null;switch(this.mode){case this.OBLIQ:case this.EQUIT:f=Math.sqrt(2/f),i=this.mode===this.OBLIQ?this.ymf*f*(this.cosb1*l-this.sinb1*c*r):(f=Math.sqrt(2/(1+c*r)))*l*this.ymf,e=this.xmf*f*c*a;break;case this.N_POLE:case this.S_POLE:u>=0?(e=(f=Math.sqrt(u))*a,i=r*(this.mode===this.S_POLE?f:-f)):e=i=0}}return t.x=this.a*e+this.x0,t.y=this.a*i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,i,r,a,o,h,u,l,c,f,p=t.x/this.a,d=t.y/this.a;if(this.sphere){var y,g=0,m=0;if((i=.5*(y=Math.sqrt(p*p+d*d)))>1)return null;switch(i=2*Math.asin(i),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(m=Math.sin(i),g=Math.cos(i)),this.mode){case this.EQUIT:i=Math.abs(y)<=s?0:Math.asin(d*m/y),p*=m,d=g*y;break;case this.OBLIQ:i=Math.abs(y)<=s?this.lat0:Math.asin(g*this.sinph0+d*m*this.cosph0/y),p*=m*this.cosph0,d=(g-Math.sin(i)*this.sinph0)*y;break;case this.N_POLE:d=-d,i=n-i;break;case this.S_POLE:i-=n}e=0!==d||this.mode!==this.EQUIT&&this.mode!==this.OBLIQ?Math.atan2(p,d):0}else{if(u=0,this.mode===this.OBLIQ||this.mode===this.EQUIT){if(p/=this.dd,d*=this.dd,(h=Math.sqrt(p*p+d*d))<s)return t.x=this.long0,t.y=this.lat0,t;a=2*Math.asin(.5*h/this.rq),r=Math.cos(a),p*=a=Math.sin(a),this.mode===this.OBLIQ?(u=r*this.sinb1+d*a*this.cosb1/h,o=this.qp*u,d=h*this.cosb1*r-d*this.sinb1*a):(u=d*a/h,o=this.qp*u,d=h*r)}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(d=-d),!(o=p*p+d*d))return t.x=this.long0,t.y=this.lat0,t;u=1-o/this.qp,this.mode===this.S_POLE&&(u=-u)}e=Math.atan2(p,d),f=(l=Math.asin(u))+l,i=l+(c=this.apa)[0]*Math.sin(f)+c[1]*Math.sin(f+f)+c[2]*Math.sin(f+f+f)}return t.x=I(this.long0+e),t.y=i,t},names:["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"],S_POLE:1,N_POLE:2,EQUIT:3,OBLIQ:4};function Kt(t){return Math.abs(t)>1&&(t=t>1?1:-1),Math.asin(t)}const Zt={init:function(){Math.abs(this.lat1+this.lat2)<s||(this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e3=Math.sqrt(this.es),this.sin_po=Math.sin(this.lat1),this.cos_po=Math.cos(this.lat1),this.t1=this.sin_po,this.con=this.sin_po,this.ms1=A(this.e3,this.sin_po,this.cos_po),this.qs1=$t(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat2),this.cos_po=Math.cos(this.lat2),this.t2=this.sin_po,this.ms2=A(this.e3,this.sin_po,this.cos_po),this.qs2=$t(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat0),this.cos_po=Math.cos(this.lat0),this.t3=this.sin_po,this.qs0=$t(this.e3,this.sin_po,this.cos_po),Math.abs(this.lat1-this.lat2)>s?this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1):this.ns0=this.con,this.c=this.ms1*this.ms1+this.ns0*this.qs1,this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0)},forward:function(t){var e=t.x,i=t.y;this.sin_phi=Math.sin(i),this.cos_phi=Math.cos(i);var r=$t(this.e3,this.sin_phi,this.cos_phi),n=this.a*Math.sqrt(this.c-this.ns0*r)/this.ns0,s=this.ns0*I(e-this.long0),a=n*Math.sin(s)+this.x0,o=this.rh-n*Math.cos(s)+this.y0;return t.x=a,t.y=o,t},inverse:function(t){var e,i,r,n,s,a;return t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns0>=0?(e=Math.sqrt(t.x*t.x+t.y*t.y),r=1):(e=-Math.sqrt(t.x*t.x+t.y*t.y),r=-1),n=0,0!==e&&(n=Math.atan2(r*t.x,r*t.y)),r=e*this.ns0/this.a,this.sphere?a=Math.asin((this.c-r*r)/(2*this.ns0)):(i=(this.c-r*r)/this.ns0,a=this.phi1z(this.e3,i)),s=I(n/this.ns0+this.long0),t.x=s,t.y=a,t},names:["Albers_Conic_Equal_Area","Albers","aea"],phi1z:function(t,e){var i,r,n,a,o=Kt(.5*e);if(t<s)return o;for(var h=t*t,u=1;u<=25;u++)if(o+=a=.5*(n=1-(r=t*(i=Math.sin(o)))*r)*n/Math.cos(o)*(e/(1-h)-i/n+.5/t*Math.log((1-r)/(1+r))),Math.abs(a)<=1e-7)return o;return null}},te={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0),this.infinity_dist=1e3*this.a,this.rc=1},forward:function(t){var e,i,r,n,a,o,h,u=t.x,l=t.y;return r=I(u-this.long0),e=Math.sin(l),i=Math.cos(l),n=Math.cos(r),(a=this.sin_p14*e+this.cos_p14*i*n)>0||Math.abs(a)<=s?(o=this.x0+1*this.a*i*Math.sin(r)/a,h=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*i*n)/a):(o=this.x0+this.infinity_dist*i*Math.sin(r),h=this.y0+this.infinity_dist*(this.cos_p14*e-this.sin_p14*i*n)),t.x=o,t.y=h,t},inverse:function(t){var e,i,r,n,s,a;return t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,(e=Math.sqrt(t.x*t.x+t.y*t.y))?(n=Math.atan2(e,this.rc),i=Math.sin(n),a=Kt((r=Math.cos(n))*this.sin_p14+t.y*i*this.cos_p14/e),s=Math.atan2(t.x*i,e*this.cos_p14*r-t.y*this.sin_p14*i),s=I(this.long0+s)):(a=this.phic0,s=0),t.x=s,t.y=a,t},names:["gnom"]},ee={init:function(){this.sphere||(this.k0=A(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)))},forward:function(t){var e,i,r=t.x,n=t.y,s=I(r-this.long0);if(this.sphere)e=this.x0+this.a*s*Math.cos(this.lat_ts),i=this.y0+this.a*Math.sin(n)/Math.cos(this.lat_ts);else{var a=$t(this.e,Math.sin(n));e=this.x0+this.a*this.k0*s,i=this.y0+this.a*a*.5/this.k0}return t.x=e,t.y=i,t},inverse:function(t){var e,i;return t.x-=this.x0,t.y-=this.y0,this.sphere?(e=I(this.long0+t.x/this.a/Math.cos(this.lat_ts)),i=Math.asin(t.y/this.a*Math.cos(this.lat_ts))):(i=function(t,e){var i=1-(1-t*t)/(2*t)*Math.log((1-t)/(1+t));if(Math.abs(Math.abs(e)-i)<1e-6)return e<0?-1*n:n;for(var r,s,a,o,h=Math.asin(.5*e),u=0;u<30;u++)if(s=Math.sin(h),a=Math.cos(h),o=t*s,h+=r=Math.pow(1-o*o,2)/(2*a)*(e/(1-t*t)-s/(1-o*o)+.5/t*Math.log((1-o)/(1+o))),Math.abs(r)<=1e-10)return h;return NaN}(this.e,2*t.y*this.k0/this.a),e=I(this.long0+t.x/(this.a*this.k0))),t.x=e,t.y=i,t},names:["cea"]},ie={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Equidistant Cylindrical (Plate Carre)",this.rc=Math.cos(this.lat_ts)},forward:function(t){var e=t.x,i=t.y,r=I(e-this.long0),n=Vt(i-this.lat0);return t.x=this.x0+this.a*r*this.rc,t.y=this.y0+this.a*n,t},inverse:function(t){var e=t.x,i=t.y;return t.x=I(this.long0+(e-this.x0)/(this.a*this.rc)),t.y=Vt(this.lat0+(i-this.y0)/this.a),t},names:["Equirectangular","Equidistant_Cylindrical","eqc"]},re={init:function(){this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.ml0=this.a*Dt(this.e0,this.e1,this.e2,this.e3,this.lat0)},forward:function(t){var e,i,r,n=t.x,a=t.y,o=I(n-this.long0);if(r=o*Math.sin(a),this.sphere)Math.abs(a)<=s?(e=this.a*o,i=-1*this.a*this.lat0):(e=this.a*Math.sin(r)/Math.tan(a),i=this.a*(Vt(a-this.lat0)+(1-Math.cos(r))/Math.tan(a)));else if(Math.abs(a)<=s)e=this.a*o,i=-1*this.ml0;else{var h=Qt(this.a,this.e,Math.sin(a))/Math.tan(a);e=h*Math.sin(r),i=this.a*Dt(this.e0,this.e1,this.e2,this.e3,a)-this.ml0+h*(1-Math.cos(r))}return t.x=e+this.x0,t.y=i+this.y0,t},inverse:function(t){var e,i,r,n,a,o,h,u,l;if(r=t.x-this.x0,n=t.y-this.y0,this.sphere)if(Math.abs(n+this.a*this.lat0)<=s)e=I(r/this.a+this.long0),i=0;else{var c;for(o=this.lat0+n/this.a,h=r*r/this.a/this.a+o*o,u=o,a=20;a;--a)if(u+=l=-1*(o*(u*(c=Math.tan(u))+1)-u-.5*(u*u+h)*c)/((u-o)/c-1),Math.abs(l)<=s){i=u;break}e=I(this.long0+Math.asin(r*Math.tan(u)/this.a)/Math.sin(i))}else if(Math.abs(n+this.ml0)<=s)i=0,e=I(this.long0+r/this.a);else{var f,p,d,y,g;for(o=(this.ml0+n)/this.a,h=r*r/this.a/this.a+o*o,u=o,a=20;a;--a)if(g=this.e*Math.sin(u),f=Math.sqrt(1-g*g)*Math.tan(u),p=this.a*Dt(this.e0,this.e1,this.e2,this.e3,u),d=this.e0-2*this.e1*Math.cos(2*u)+4*this.e2*Math.cos(4*u)-6*this.e3*Math.cos(6*u),u-=l=(o*(f*(y=p/this.a)+1)-y-.5*f*(y*y+h))/(this.es*Math.sin(2*u)*(y*y+h-2*o*y)/(4*f)+(o-y)*(f*d-2/Math.sin(2*u))-d),Math.abs(l)<=s){i=u;break}f=Math.sqrt(1-this.es*Math.pow(Math.sin(i),2))*Math.tan(i),e=I(this.long0+Math.asin(r*f/this.a)/Math.sin(i))}return t.x=e,t.y=i,t},names:["Polyconic","poly"]},ne={init:function(){this.A=[],this.A[1]=.6399175073,this.A[2]=-.1358797613,this.A[3]=.063294409,this.A[4]=-.02526853,this.A[5]=.0117879,this.A[6]=-.0055161,this.A[7]=.0026906,this.A[8]=-.001333,this.A[9]=67e-5,this.A[10]=-34e-5,this.B_re=[],this.B_im=[],this.B_re[1]=.7557853228,this.B_im[1]=0,this.B_re[2]=.249204646,this.B_im[2]=.003371507,this.B_re[3]=-.001541739,this.B_im[3]=.04105856,this.B_re[4]=-.10162907,this.B_im[4]=.01727609,this.B_re[5]=-.26623489,this.B_im[5]=-.36249218,this.B_re[6]=-.6870983,this.B_im[6]=-1.1651967,this.C_re=[],this.C_im=[],this.C_re[1]=1.3231270439,this.C_im[1]=0,this.C_re[2]=-.577245789,this.C_im[2]=-.007809598,this.C_re[3]=.508307513,this.C_im[3]=-.112208952,this.C_re[4]=-.15094762,this.C_im[4]=.18200602,this.C_re[5]=1.01418179,this.C_im[5]=1.64497696,this.C_re[6]=1.9660549,this.C_im[6]=2.5127645,this.D=[],this.D[1]=1.5627014243,this.D[2]=.5185406398,this.D[3]=-.03333098,this.D[4]=-.1052906,this.D[5]=-.0368594,this.D[6]=.007317,this.D[7]=.0122,this.D[8]=.00394,this.D[9]=-.0013},forward:function(t){var e,i=t.x,n=t.y-this.lat0,s=i-this.long0,a=n/r*1e-5,o=s,h=1,u=0;for(e=1;e<=10;e++)h*=a,u+=this.A[e]*h;var l,c=u,f=o,p=1,d=0,y=0,g=0;for(e=1;e<=6;e++)l=d*c+p*f,p=p*c-d*f,d=l,y=y+this.B_re[e]*p-this.B_im[e]*d,g=g+this.B_im[e]*p+this.B_re[e]*d;return t.x=g*this.a+this.x0,t.y=y*this.a+this.y0,t},inverse:function(t){var e,i,n=t.x,s=t.y,a=n-this.x0,o=(s-this.y0)/this.a,h=a/this.a,u=1,l=0,c=0,f=0;for(e=1;e<=6;e++)i=l*o+u*h,u=u*o-l*h,l=i,c=c+this.C_re[e]*u-this.C_im[e]*l,f=f+this.C_im[e]*u+this.C_re[e]*l;for(var p=0;p<this.iterations;p++){var d,y=c,g=f,m=o,M=h;for(e=2;e<=6;e++)d=g*c+y*f,y=y*c-g*f,g=d,m+=(e-1)*(this.B_re[e]*y-this.B_im[e]*g),M+=(e-1)*(this.B_im[e]*y+this.B_re[e]*g);y=1,g=0;var b=this.B_re[1],v=this.B_im[1];for(e=2;e<=6;e++)d=g*c+y*f,y=y*c-g*f,g=d,b+=e*(this.B_re[e]*y-this.B_im[e]*g),v+=e*(this.B_im[e]*y+this.B_re[e]*g);var _=b*b+v*v;c=(m*b+M*v)/_,f=(M*b-m*v)/_}var w=c,x=f,S=1,E=0;for(e=1;e<=9;e++)S*=w,E+=this.D[e]*S;var R=this.lat0+E*r*1e5,P=this.long0+x;return t.x=P,t.y=R,t},names:["New_Zealand_Map_Grid","nzmg"]},se={init:function(){},forward:function(t){var e=t.x,i=t.y,r=I(e-this.long0),n=this.x0+this.a*r,s=this.y0+this.a*Math.log(Math.tan(Math.PI/4+i/2.5))*1.25;return t.x=n,t.y=s,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e=I(this.long0+t.x/this.a),i=2.5*(Math.atan(Math.exp(.8*t.y/this.a))-Math.PI/4);return t.x=e,t.y=i,t},names:["Miller_Cylindrical","mill"]},ae={init:function(){this.sphere?(this.n=1,this.m=0,this.es=0,this.C_y=Math.sqrt((this.m+1)/this.n),this.C_x=this.C_y/(this.m+1)):this.en=xt(this.es)},forward:function(t){var e,i,r=t.x,n=t.y;if(r=I(r-this.long0),this.sphere){if(this.m)for(var a=this.n*Math.sin(n),o=20;o;--o){var h=(this.m*n+Math.sin(n)-a)/(this.m+Math.cos(n));if(n-=h,Math.abs(h)<s)break}else n=1!==this.n?Math.asin(this.n*Math.sin(n)):n;e=this.a*this.C_x*r*(this.m+Math.cos(n)),i=this.a*this.C_y*n}else{var u=Math.sin(n),l=Math.cos(n);i=this.a*St(n,u,l,this.en),e=this.a*r*l/Math.sqrt(1-this.es*u*u)}return t.x=e,t.y=i,t},inverse:function(t){var e,i,r;return t.x-=this.x0,i=t.x/this.a,t.y-=this.y0,e=t.y/this.a,this.sphere?(e/=this.C_y,i/=this.C_x*(this.m+Math.cos(e)),this.m?e=Kt((this.m*e+Math.sin(e))/this.n):1!==this.n&&(e=Kt(Math.sin(e)/this.n)),i=I(i+this.long0),e=Vt(e)):(e=Et(t.y/this.a,this.es,this.en),(r=Math.abs(e))<n?(r=Math.sin(e),i=I(this.long0+t.x*Math.sqrt(1-this.es*r*r)/(this.a*Math.cos(e)))):r-s<n&&(i=this.long0)),t.x=i,t.y=e,t},names:["Sinusoidal","sinu"]},oe={init:function(){},forward:function(t){for(var e=t.x,i=t.y,r=I(e-this.long0),n=i,a=Math.PI*Math.sin(i);;){var o=-(n+Math.sin(n)-a)/(1+Math.cos(n));if(n+=o,Math.abs(o)<s)break}n/=2,Math.PI/2-Math.abs(i)<s&&(r=0);var h=.900316316158*this.a*r*Math.cos(n)+this.x0,u=1.4142135623731*this.a*Math.sin(n)+this.y0;return t.x=h,t.y=u,t},inverse:function(t){var e,i;t.x-=this.x0,t.y-=this.y0,i=t.y/(1.4142135623731*this.a),Math.abs(i)>.999999999999&&(i=.999999999999),e=Math.asin(i);var r=I(this.long0+t.x/(.900316316158*this.a*Math.cos(e)));r<-Math.PI&&(r=-Math.PI),r>Math.PI&&(r=Math.PI),i=(2*e+Math.sin(2*e))/Math.PI,Math.abs(i)>1&&(i=1);var n=Math.asin(i);return t.x=r,t.y=n,t},names:["Mollweide","moll"]},he={init:function(){Math.abs(this.lat1+this.lat2)<s||(this.lat2=this.lat2||this.lat1,this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.sinphi=Math.sin(this.lat1),this.cosphi=Math.cos(this.lat1),this.ms1=A(this.e,this.sinphi,this.cosphi),this.ml1=Dt(this.e0,this.e1,this.e2,this.e3,this.lat1),Math.abs(this.lat1-this.lat2)<s?this.ns=this.sinphi:(this.sinphi=Math.sin(this.lat2),this.cosphi=Math.cos(this.lat2),this.ms2=A(this.e,this.sinphi,this.cosphi),this.ml2=Dt(this.e0,this.e1,this.e2,this.e3,this.lat2),this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)),this.g=this.ml1+this.ms1/this.ns,this.ml0=Dt(this.e0,this.e1,this.e2,this.e3,this.lat0),this.rh=this.a*(this.g-this.ml0))},forward:function(t){var e,i=t.x,r=t.y;if(this.sphere)e=this.a*(this.g-r);else{var n=Dt(this.e0,this.e1,this.e2,this.e3,r);e=this.a*(this.g-n)}var s=this.ns*I(i-this.long0),a=this.x0+e*Math.sin(s),o=this.y0+this.rh-e*Math.cos(s);return t.x=a,t.y=o,t},inverse:function(t){var e,i,r,n;t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns>=0?(i=Math.sqrt(t.x*t.x+t.y*t.y),e=1):(i=-Math.sqrt(t.x*t.x+t.y*t.y),e=-1);var s=0;return 0!==i&&(s=Math.atan2(e*t.x,e*t.y)),this.sphere?(n=I(this.long0+s/this.ns),r=Vt(this.g-i/this.a),t.x=n,t.y=r,t):(r=Xt(this.g-i/this.a,this.e0,this.e1,this.e2,this.e3),n=I(this.long0+s/this.ns),t.x=n,t.y=r,t)},names:["Equidistant_Conic","eqdc"]},ue={init:function(){this.R=this.a},forward:function(t){var e,i,r=t.x,a=t.y,o=I(r-this.long0);Math.abs(a)<=s&&(e=this.x0+this.R*o,i=this.y0);var h=Kt(2*Math.abs(a/Math.PI));(Math.abs(o)<=s||Math.abs(Math.abs(a)-n)<=s)&&(e=this.x0,i=a>=0?this.y0+Math.PI*this.R*Math.tan(.5*h):this.y0+Math.PI*this.R*-Math.tan(.5*h));var u=.5*Math.abs(Math.PI/o-o/Math.PI),l=u*u,c=Math.sin(h),f=Math.cos(h),p=f/(c+f-1),d=p*p,y=p*(2/c-1),g=y*y,m=Math.PI*this.R*(u*(p-g)+Math.sqrt(l*(p-g)*(p-g)-(g+l)*(d-g)))/(g+l);o<0&&(m=-m),e=this.x0+m;var M=l+p;return m=Math.PI*this.R*(y*M-u*Math.sqrt((g+l)*(l+1)-M*M))/(g+l),i=a>=0?this.y0+m:this.y0-m,t.x=e,t.y=i,t},inverse:function(t){var e,i,r,n,a,o,h,u,l,c,f,p;return t.x-=this.x0,t.y-=this.y0,f=Math.PI*this.R,a=(r=t.x/f)*r+(n=t.y/f)*n,f=3*(n*n/(u=-2*(o=-Math.abs(n)*(1+a))+1+2*n*n+a*a)+(2*(h=o-2*n*n+r*r)*h*h/u/u/u-9*o*h/u/u)/27)/(l=(o-h*h/3/u)/u)/(c=2*Math.sqrt(-l/3)),Math.abs(f)>1&&(f=f>=0?1:-1),p=Math.acos(f)/3,i=t.y>=0?(-c*Math.cos(p+Math.PI/3)-h/3/u)*Math.PI:-(-c*Math.cos(p+Math.PI/3)-h/3/u)*Math.PI,e=Math.abs(r)<s?this.long0:I(this.long0+Math.PI*(a-1+Math.sqrt(1+2*(r*r-n*n)+a*a))/2/r),t.x=e,t.y=i,t},names:["Van_der_Grinten_I","VanDerGrinten","vandg"]},le={init:function(){this.sin_p12=Math.sin(this.lat0),this.cos_p12=Math.cos(this.lat0)},forward:function(t){var e,i,r,a,o,h,u,l,c,f,p,d,y,g,m,M,b,v,_,w,x,S,E=t.x,R=t.y,P=Math.sin(t.y),O=Math.cos(t.y),T=I(E-this.long0);return this.sphere?Math.abs(this.sin_p12-1)<=s?(t.x=this.x0+this.a*(n-R)*Math.sin(T),t.y=this.y0-this.a*(n-R)*Math.cos(T),t):Math.abs(this.sin_p12+1)<=s?(t.x=this.x0+this.a*(n+R)*Math.sin(T),t.y=this.y0+this.a*(n+R)*Math.cos(T),t):(v=this.sin_p12*P+this.cos_p12*O*Math.cos(T),b=(M=Math.acos(v))?M/Math.sin(M):1,t.x=this.x0+this.a*b*O*Math.sin(T),t.y=this.y0+this.a*b*(this.cos_p12*P-this.sin_p12*O*Math.cos(T)),t):(e=Ft(this.es),i=Wt(this.es),r=zt(this.es),a=Ht(this.es),Math.abs(this.sin_p12-1)<=s?(o=this.a*Dt(e,i,r,a,n),h=this.a*Dt(e,i,r,a,R),t.x=this.x0+(o-h)*Math.sin(T),t.y=this.y0-(o-h)*Math.cos(T),t):Math.abs(this.sin_p12+1)<=s?(o=this.a*Dt(e,i,r,a,n),h=this.a*Dt(e,i,r,a,R),t.x=this.x0+(o+h)*Math.sin(T),t.y=this.y0+(o+h)*Math.cos(T),t):(u=P/O,l=Qt(this.a,this.e,this.sin_p12),c=Qt(this.a,this.e,P),f=Math.atan((1-this.es)*u+this.es*l*this.sin_p12/(c*O)),_=0===(p=Math.atan2(Math.sin(T),this.cos_p12*Math.tan(f)-this.sin_p12*Math.cos(T)))?Math.asin(this.cos_p12*Math.sin(f)-this.sin_p12*Math.cos(f)):Math.abs(Math.abs(p)-Math.PI)<=s?-Math.asin(this.cos_p12*Math.sin(f)-this.sin_p12*Math.cos(f)):Math.asin(Math.sin(T)*Math.cos(f)/Math.sin(p)),d=this.e*this.sin_p12/Math.sqrt(1-this.es),M=l*_*(1-(w=_*_)*(m=(y=this.e*this.cos_p12*Math.cos(p)/Math.sqrt(1-this.es))*y)*(1-m)/6+(x=w*_)/8*(g=d*y)*(1-2*m)+(S=x*_)/120*(m*(4-7*m)-3*d*d*(1-7*m))-S*_/48*g),t.x=this.x0+M*Math.sin(p),t.y=this.y0+M*Math.cos(p),t))},inverse:function(t){var e,i,r,a,o,h,u,l,c,f,p,d,y,g,m,M,b,v,_,w,x,S,E;if(t.x-=this.x0,t.y-=this.y0,this.sphere){if((e=Math.sqrt(t.x*t.x+t.y*t.y))>2*n*this.a)return;return i=e/this.a,r=Math.sin(i),a=Math.cos(i),o=this.long0,Math.abs(e)<=s?h=this.lat0:(h=Kt(a*this.sin_p12+t.y*r*this.cos_p12/e),u=Math.abs(this.lat0)-n,o=Math.abs(u)<=s?this.lat0>=0?I(this.long0+Math.atan2(t.x,-t.y)):I(this.long0-Math.atan2(-t.x,t.y)):I(this.long0+Math.atan2(t.x*r,e*this.cos_p12*a-t.y*this.sin_p12*r))),t.x=o,t.y=h,t}return l=Ft(this.es),c=Wt(this.es),f=zt(this.es),p=Ht(this.es),Math.abs(this.sin_p12-1)<=s?(h=Xt(((d=this.a*Dt(l,c,f,p,n))-(e=Math.sqrt(t.x*t.x+t.y*t.y)))/this.a,l,c,f,p),o=I(this.long0+Math.atan2(t.x,-1*t.y)),t.x=o,t.y=h,t):Math.abs(this.sin_p12+1)<=s?(d=this.a*Dt(l,c,f,p,n),h=Xt(((e=Math.sqrt(t.x*t.x+t.y*t.y))-d)/this.a,l,c,f,p),o=I(this.long0+Math.atan2(t.x,t.y)),t.x=o,t.y=h,t):(e=Math.sqrt(t.x*t.x+t.y*t.y),m=Math.atan2(t.x,t.y),y=Qt(this.a,this.e,this.sin_p12),M=Math.cos(m),v=-(b=this.e*this.cos_p12*M)*b/(1-this.es),_=3*this.es*(1-v)*this.sin_p12*this.cos_p12*M/(1-this.es),S=1-v*(x=(w=e/y)-v*(1+v)*Math.pow(w,3)/6-_*(1+3*v)*Math.pow(w,4)/24)*x/2-w*x*x*x/6,g=Math.asin(this.sin_p12*Math.cos(x)+this.cos_p12*Math.sin(x)*M),o=I(this.long0+Math.asin(Math.sin(m)*Math.sin(x)/Math.cos(g))),E=Math.sin(g),h=Math.atan2((E-this.es*S*this.sin_p12)*Math.tan(g),E*(1-this.es)),t.x=o,t.y=h,t)},names:["Azimuthal_Equidistant","aeqd"]},ce={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0)},forward:function(t){var e,i,r,n,a,o,h,u=t.x,l=t.y;return r=I(u-this.long0),e=Math.sin(l),i=Math.cos(l),n=Math.cos(r),((a=this.sin_p14*e+this.cos_p14*i*n)>0||Math.abs(a)<=s)&&(o=1*this.a*i*Math.sin(r),h=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*i*n)),t.x=o,t.y=h,t},inverse:function(t){var e,i,r,a,o,h,u;return t.x-=this.x0,t.y-=this.y0,i=Kt((e=Math.sqrt(t.x*t.x+t.y*t.y))/this.a),r=Math.sin(i),a=Math.cos(i),h=this.long0,Math.abs(e)<=s?(u=this.lat0,t.x=h,t.y=u,t):(u=Kt(a*this.sin_p14+t.y*r*this.cos_p14/e),o=Math.abs(this.lat0)-n,Math.abs(o)<=s?(h=this.lat0>=0?I(this.long0+Math.atan2(t.x,-t.y)):I(this.long0-Math.atan2(-t.x,t.y)),t.x=h,t.y=u,t):(h=I(this.long0+Math.atan2(t.x*r,e*this.cos_p14*a-t.y*this.sin_p14*r)),t.x=h,t.y=u,t))},names:["ortho"]};function fe(t,e,i,r){var a;return t<s?(r.value=1,a=0):(a=Math.atan2(e,i),Math.abs(a)<=h?r.value=1:a>h&&a<=n+h?(r.value=2,a-=n):a>n+h||a<=-(n+h)?(r.value=3,a=a>=0?a-l:a+l):(r.value=4,a+=n)),a}function pe(t,e){var i=t+e;return i<-l?i+=u:i>+l&&(i-=u),i}const de={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Quadrilateralized Spherical Cube",this.lat0>=n-h/2?this.face=5:this.lat0<=-(n-h/2)?this.face=6:Math.abs(this.long0)<=h?this.face=1:Math.abs(this.long0)<=n+h?this.face=this.long0>0?2:4:this.face=3,0!==this.es&&(this.one_minus_f=1-(this.a-this.b)/this.a,this.one_minus_f_squared=this.one_minus_f*this.one_minus_f)},forward:function(t){var e,i,r,s,a,o,u={x:0,y:0},c={value:0};if(t.x-=this.long0,e=0!==this.es?Math.atan(this.one_minus_f_squared*Math.tan(t.y)):t.y,i=t.x,5===this.face)s=n-e,i>=h&&i<=n+h?(c.value=1,r=i-n):i>n+h||i<=-(n+h)?(c.value=2,r=i>0?i-l:i+l):i>-(n+h)&&i<=-h?(c.value=3,r=i+n):(c.value=4,r=i);else if(6===this.face)s=n+e,i>=h&&i<=n+h?(c.value=1,r=-i+n):i<h&&i>=-h?(c.value=2,r=-i):i<-h&&i>=-(n+h)?(c.value=3,r=-i-n):(c.value=4,r=i>0?-i+l:-i-l);else{var f,p,d,y,g,m;2===this.face?i=pe(i,+n):3===this.face?i=pe(i,+l):4===this.face&&(i=pe(i,-n)),y=Math.sin(e),g=Math.cos(e),m=Math.sin(i),f=g*Math.cos(i),p=g*m,d=y,1===this.face?r=fe(s=Math.acos(f),d,p,c):2===this.face?r=fe(s=Math.acos(p),d,-f,c):3===this.face?r=fe(s=Math.acos(-f),d,-p,c):4===this.face?r=fe(s=Math.acos(-p),d,f,c):(s=r=0,c.value=1)}return o=Math.atan(12/l*(r+Math.acos(Math.sin(r)*Math.cos(h))-n)),a=Math.sqrt((1-Math.cos(s))/(Math.cos(o)*Math.cos(o))/(1-Math.cos(Math.atan(1/Math.cos(r))))),2===c.value?o+=n:3===c.value?o+=l:4===c.value&&(o+=1.5*l),u.x=a*Math.cos(o),u.y=a*Math.sin(o),u.x=u.x*this.a+this.x0,u.y=u.y*this.a+this.y0,t.x=u.x,t.y=u.y,t},inverse:function(t){var e,i,r,s,a,o,h,u,c,f,p,d,y={lam:0,phi:0},g={value:0};if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,i=Math.atan(Math.sqrt(t.x*t.x+t.y*t.y)),e=Math.atan2(t.y,t.x),t.x>=0&&t.x>=Math.abs(t.y)?g.value=1:t.y>=0&&t.y>=Math.abs(t.x)?(g.value=2,e-=n):t.x<0&&-t.x>=Math.abs(t.y)?(g.value=3,e=e<0?e+l:e-l):(g.value=4,e+=n),c=l/12*Math.tan(e),a=Math.sin(c)/(Math.cos(c)-1/Math.sqrt(2)),o=Math.atan(a),(h=1-(r=Math.cos(e))*r*(s=Math.tan(i))*s*(1-Math.cos(Math.atan(1/Math.cos(o)))))<-1?h=-1:h>1&&(h=1),5===this.face)u=Math.acos(h),y.phi=n-u,1===g.value?y.lam=o+n:2===g.value?y.lam=o<0?o+l:o-l:3===g.value?y.lam=o-n:y.lam=o;else if(6===this.face)u=Math.acos(h),y.phi=u-n,1===g.value?y.lam=-o+n:2===g.value?y.lam=-o:3===g.value?y.lam=-o-n:y.lam=o<0?-o-l:-o+l;else{var m,M,b;c=(m=h)*m,M=(c+=(b=c>=1?0:Math.sqrt(1-c)*Math.sin(o))*b)>=1?0:Math.sqrt(1-c),2===g.value?(c=M,M=-b,b=c):3===g.value?(M=-M,b=-b):4===g.value&&(c=M,M=b,b=-c),2===this.face?(c=m,m=-M,M=c):3===this.face?(m=-m,M=-M):4===this.face&&(c=m,m=M,M=-c),y.phi=Math.acos(-b)-n,y.lam=Math.atan2(M,m),2===this.face?y.lam=pe(y.lam,-n):3===this.face?y.lam=pe(y.lam,-l):4===this.face&&(y.lam=pe(y.lam,+n))}return 0!==this.es&&(f=y.phi<0?1:0,p=Math.tan(y.phi),d=this.b/Math.sqrt(p*p+this.one_minus_f_squared),y.phi=Math.atan(Math.sqrt(this.a*this.a-d*d)/(this.one_minus_f*d)),f&&(y.phi=-y.phi)),y.lam+=this.long0,t.x=y.lam,t.y=y.phi,t},names:["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"]};var ye=[[1,22199e-21,-715515e-10,31103e-10],[.9986,-482243e-9,-24897e-9,-13309e-10],[.9954,-83103e-8,-448605e-10,-9.86701e-7],[.99,-.00135364,-59661e-9,36777e-10],[.9822,-.00167442,-449547e-11,-572411e-11],[.973,-.00214868,-903571e-10,1.8736e-8],[.96,-.00305085,-900761e-10,164917e-11],[.9427,-.00382792,-653386e-10,-26154e-10],[.9216,-.00467746,-10457e-8,481243e-11],[.8962,-.00536223,-323831e-10,-543432e-11],[.8679,-.00609363,-113898e-9,332484e-11],[.835,-.00698325,-640253e-10,9.34959e-7],[.7986,-.00755338,-500009e-10,9.35324e-7],[.7597,-.00798324,-35971e-9,-227626e-11],[.7186,-.00851367,-701149e-10,-86303e-10],[.6732,-.00986209,-199569e-9,191974e-10],[.6213,-.010418,883923e-10,624051e-11],[.5722,-.00906601,182e-6,624051e-11],[.5322,-.00677797,275608e-9,624051e-11]],ge=[[-520417e-23,.0124,121431e-23,-845284e-16],[.062,.0124,-1.26793e-9,4.22642e-10],[.124,.0124,5.07171e-9,-1.60604e-9],[.186,.0123999,-1.90189e-8,6.00152e-9],[.248,.0124002,7.10039e-8,-2.24e-8],[.31,.0123992,-2.64997e-7,8.35986e-8],[.372,.0124029,9.88983e-7,-3.11994e-7],[.434,.0123893,-369093e-11,-4.35621e-7],[.4958,.0123198,-102252e-10,-3.45523e-7],[.5571,.0121916,-154081e-10,-5.82288e-7],[.6176,.0119938,-241424e-10,-5.25327e-7],[.6769,.011713,-320223e-10,-5.16405e-7],[.7346,.0113541,-397684e-10,-6.09052e-7],[.7903,.0109107,-489042e-10,-104739e-11],[.8435,.0103431,-64615e-9,-1.40374e-9],[.8936,.00969686,-64636e-9,-8547e-9],[.9394,.00840947,-192841e-9,-42106e-10],[.9761,.00616527,-256e-6,-42106e-10],[1,.00328947,-319159e-9,-42106e-10]],me=.8487,Me=1.3523,be=function(t,e){return t[0]+e*(t[1]+e*(t[2]+e*t[3]))};const ve={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.long0=this.long0||0,this.es=0,this.title=this.title||"Robinson"},forward:function(t){var e=I(t.x-this.long0),i=Math.abs(t.y),r=Math.floor(11.459155902616464*i);r<0?r=0:r>=18&&(r=17);var n={x:be(ye[r],i=o*(i-.08726646259971647*r))*e,y:be(ge[r],i)};return t.y<0&&(n.y=-n.y),n.x=n.x*this.a*me+this.x0,n.y=n.y*this.a*Me+this.y0,n},inverse:function(t){var e={x:(t.x-this.x0)/(this.a*me),y:Math.abs(t.y-this.y0)/(this.a*Me)};if(e.y>=1)e.x/=ye[18][0],e.y=t.y<0?-n:n;else{var i=Math.floor(18*e.y);for(i<0?i=0:i>=18&&(i=17);;)if(ge[i][0]>e.y)--i;else{if(!(ge[i+1][0]<=e.y))break;++i}var r=ge[i],s=5*(e.y-r[0])/(ge[i+1][0]-r[0]);s=function(t,e,i,r){for(var n=e;r;--r){var s=t(n);if(n-=s,Math.abs(s)<1e-10)break}return n}((function(t){return(be(r,t)-e.y)/function(t,e){return t[1]+e*(2*t[2]+3*e*t[3])}(r,t)}),s,0,100),e.x/=be(ye[i],s),e.y=(5*i+s)*a,t.y<0&&(e.y=-e.y)}return e.x=I(e.x+this.long0),e},names:["Robinson","robin"]},_e={init:function(){this.name="geocent"},forward:function(t){return V(t,this.es,this.a)},inverse:function(t){return X(t,this.es,this.a,this.b)},names:["Geocentric","geocentric","geocent","Geocent"]};var we={h:{def:1e5,num:!0},azi:{def:0,num:!0,degrees:!0},tilt:{def:0,num:!0,degrees:!0},long0:{def:0,num:!0},lat0:{def:0,num:!0}};const xe={init:function(){if(Object.keys(we).forEach(function(t){if(void 0===this[t])this[t]=we[t].def;else{if(we[t].num&&isNaN(this[t]))throw new Error("Invalid parameter value, must be numeric "+t+" = "+this[t]);we[t].num&&(this[t]=parseFloat(this[t]))}we[t].degrees&&(this[t]=this[t]*a)}.bind(this)),Math.abs(Math.abs(this.lat0)-n)<s?this.mode=this.lat0<0?1:0:Math.abs(this.lat0)<s?this.mode=2:(this.mode=3,this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0)),this.pn1=this.h/this.a,this.pn1<=0||this.pn1>1e10)throw new Error("Invalid height");this.p=1+this.pn1,this.rp=1/this.p,this.h1=1/this.pn1,this.pfact=(this.p+1)*this.h1,this.es=0;var t=this.tilt,e=this.azi;this.cg=Math.cos(e),this.sg=Math.sin(e),this.cw=Math.cos(t),this.sw=Math.sin(t)},forward:function(t){t.x-=this.long0;var e,i,r,n,s=Math.sin(t.y),a=Math.cos(t.y),o=Math.cos(t.x);switch(this.mode){case 3:i=this.sinph0*s+this.cosph0*a*o;break;case 2:i=a*o;break;case 1:i=-s;break;case 0:i=s}switch(e=(i=this.pn1/(this.p-i))*a*Math.sin(t.x),this.mode){case 3:i*=this.cosph0*s-this.sinph0*a*o;break;case 2:i*=s;break;case 0:i*=-a*o;break;case 1:i*=a*o}return n=1/((r=i*this.cg+e*this.sg)*this.sw*this.h1+this.cw),e=(e*this.cg-i*this.sg)*this.cw*n,i=r*n,t.x=e*this.a,t.y=i*this.a,t},inverse:function(t){t.x/=this.a,t.y/=this.a;var e,i,r,n={x:t.x,y:t.y};r=1/(this.pn1-t.y*this.sw),e=this.pn1*t.x*r,i=this.pn1*t.y*this.cw*r,t.x=e*this.cg+i*this.sg,t.y=i*this.cg-e*this.sg;var a=Ot(t.x,t.y);if(Math.abs(a)<s)n.x=0,n.y=t.y;else{var o,h;switch(h=1-a*a*this.pfact,h=(this.p-Math.sqrt(h))/(this.pn1/a+a/this.pn1),o=Math.sqrt(1-h*h),this.mode){case 3:n.y=Math.asin(o*this.sinph0+t.y*h*this.cosph0/a),t.y=(o-this.sinph0*Math.sin(n.y))*a,t.x*=h*this.cosph0;break;case 2:n.y=Math.asin(t.y*h/a),t.y=o*a,t.x*=h;break;case 0:n.y=Math.asin(o),t.y=-t.y;break;case 1:n.y=-Math.asin(o)}n.x=Math.atan2(t.x,t.y)}return t.x=n.x+this.long0,t.y=n.y,t},names:["Tilted_Perspective","tpers"]};var Se;rt.defaultDatum="WGS84",rt.Proj=Q,rt.WGS84=new rt.Proj("WGS84"),rt.Point=bt,rt.toPoint=J,rt.defs=P,rt.transform=Z,rt.mgrs=ut,rt.version="__VERSION__",(Se=rt).Proj.projections.add(Rt),Se.Proj.projections.add(At),Se.Proj.projections.add(kt),Se.Proj.projections.add(Lt),Se.Proj.projections.add(jt),Se.Proj.projections.add(Ut),Se.Proj.projections.add(qt),Se.Proj.projections.add(Bt),Se.Proj.projections.add(Gt),Se.Proj.projections.add(Yt),Se.Proj.projections.add(Jt),Se.Proj.projections.add(Zt),Se.Proj.projections.add(te),Se.Proj.projections.add(ee),Se.Proj.projections.add(ie),Se.Proj.projections.add(re),Se.Proj.projections.add(ne),Se.Proj.projections.add(se),Se.Proj.projections.add(ae),Se.Proj.projections.add(oe),Se.Proj.projections.add(he),Se.Proj.projections.add(ue),Se.Proj.projections.add(le),Se.Proj.projections.add(ce),Se.Proj.projections.add(de),Se.Proj.projections.add(ve),Se.Proj.projections.add(_e),Se.Proj.projections.add(xe);const Ee=rt},587:t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,i,r,n){i=i||"&",r=r||"=";var s={};if("string"!=typeof t||0===t.length)return s;var a=/\+/g;t=t.split(i);var o=1e3;n&&"number"==typeof n.maxKeys&&(o=n.maxKeys);var h=t.length;o>0&&h>o&&(h=o);for(var u=0;u<h;++u){var l,c,f,p,d=t[u].replace(a,"%20"),y=d.indexOf(r);y>=0?(l=d.substr(0,y),c=d.substr(y+1)):(l=d,c=""),f=decodeURIComponent(l),p=decodeURIComponent(c),e(s,f)?Array.isArray(s[f])?s[f].push(p):s[f]=[s[f],p]:s[f]=p}return s}},361:t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,i,r,n){return i=i||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(n){var s=encodeURIComponent(e(n))+r;return Array.isArray(t[n])?t[n].map((function(t){return s+encodeURIComponent(e(t))})).join(i):s+encodeURIComponent(e(t[n]))})).join(i):n?encodeURIComponent(e(n))+r+encodeURIComponent(e(t)):""}},673:(t,e,i)=>{"use strict";e.decode=e.parse=i(587),e.encode=e.stringify=i(361)},509:(t,e,i)=>{var r=i(764),n=r.Buffer;function s(t,e){for(var i in t)e[i]=t[i]}function a(t,e,i){return n(t,e,i)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=r:(s(r,e),e.Buffer=a),s(n,a),a.from=function(t,e,i){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,e,i)},a.alloc=function(t,e,i){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=n(t);return void 0!==e?"string"==typeof i?r.fill(e,i):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},501:(t,e,i)=>{var r=i(989),n=i(676),s=i(529),a=i(584),o=i(575),h=e;h.request=function(t,e){t="string"==typeof t?o.parse(t):s(t);var n=-1===i.g.location.protocol.search(/^https?:$/)?"http:":"",a=t.protocol||n,h=t.hostname||t.host,u=t.port,l=t.path||"/";h&&-1!==h.indexOf(":")&&(h="["+h+"]"),t.url=(h?a+"//"+h:"")+(u?":"+u:"")+l,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var c=new r(t);return e&&c.on("response",e),c},h.get=function(t,e){var i=h.request(t,e);return i.end(),i},h.ClientRequest=r,h.IncomingMessage=n.IncomingMessage,h.Agent=function(){},h.Agent.defaultMaxSockets=4,h.globalAgent=new h.Agent,h.STATUS_CODES=a,h.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]},725:(t,e,i)=>{var r;function n(){if(void 0!==r)return r;if(i.g.XMLHttpRequest){r=new i.g.XMLHttpRequest;try{r.open("GET",i.g.XDomainRequest?"/":"https://example.com")}catch(t){r=null}}else r=null;return r}function s(t){var e=n();if(!e)return!1;try{return e.responseType=t,e.responseType===t}catch(t){}return!1}function a(t){return"function"==typeof t}e.fetch=a(i.g.fetch)&&a(i.g.ReadableStream),e.writableStream=a(i.g.WritableStream),e.abortController=a(i.g.AbortController),e.arraybuffer=e.fetch||s("arraybuffer"),e.msstream=!e.fetch&&s("ms-stream"),e.mozchunkedarraybuffer=!e.fetch&&s("moz-chunked-arraybuffer"),e.overrideMimeType=e.fetch||!!n()&&a(n().overrideMimeType),r=null},989:(t,e,i)=>{var r=i(725),n=i(717),s=i(676),a=i(925),o=s.IncomingMessage,h=s.readyStates,u=t.exports=function(t){var e,i=this;a.Writable.call(i),i._opts=t,i._body=[],i._headers={},t.auth&&i.setHeader("Authorization","Basic "+Buffer.from(t.auth).toString("base64")),Object.keys(t.headers).forEach((function(e){i.setHeader(e,t.headers[e])}));var n=!0;if("disable-fetch"===t.mode||"requestTimeout"in t&&!r.abortController)n=!1,e=!0;else if("prefer-streaming"===t.mode)e=!1;else if("allow-wrong-content-type"===t.mode)e=!r.overrideMimeType;else{if(t.mode&&"default"!==t.mode&&"prefer-fast"!==t.mode)throw new Error("Invalid value for opts.mode");e=!0}i._mode=function(t,e){return r.fetch&&e?"fetch":r.mozchunkedarraybuffer?"moz-chunked-arraybuffer":r.msstream?"ms-stream":r.arraybuffer&&t?"arraybuffer":"text"}(e,n),i._fetchTimer=null,i.on("finish",(function(){i._onFinish()}))};n(u,a.Writable),u.prototype.setHeader=function(t,e){var i=t.toLowerCase();-1===l.indexOf(i)&&(this._headers[i]={name:t,value:e})},u.prototype.getHeader=function(t){var e=this._headers[t.toLowerCase()];return e?e.value:null},u.prototype.removeHeader=function(t){delete this._headers[t.toLowerCase()]},u.prototype._onFinish=function(){var t=this;if(!t._destroyed){var e=t._opts,n=t._headers,s=null;"GET"!==e.method&&"HEAD"!==e.method&&(s=new Blob(t._body,{type:(n["content-type"]||{}).value||""}));var a=[];if(Object.keys(n).forEach((function(t){var e=n[t].name,i=n[t].value;Array.isArray(i)?i.forEach((function(t){a.push([e,t])})):a.push([e,i])})),"fetch"===t._mode){var o=null;if(r.abortController){var u=new AbortController;o=u.signal,t._fetchAbortController=u,"requestTimeout"in e&&0!==e.requestTimeout&&(t._fetchTimer=i.g.setTimeout((function(){t.emit("requestTimeout"),t._fetchAbortController&&t._fetchAbortController.abort()}),e.requestTimeout))}i.g.fetch(t._opts.url,{method:t._opts.method,headers:a,body:s||void 0,mode:"cors",credentials:e.withCredentials?"include":"same-origin",signal:o}).then((function(e){t._fetchResponse=e,t._connect()}),(function(e){i.g.clearTimeout(t._fetchTimer),t._destroyed||t.emit("error",e)}))}else{var l=t._xhr=new i.g.XMLHttpRequest;try{l.open(t._opts.method,t._opts.url,!0)}catch(e){return void process.nextTick((function(){t.emit("error",e)}))}"responseType"in l&&(l.responseType=t._mode),"withCredentials"in l&&(l.withCredentials=!!e.withCredentials),"text"===t._mode&&"overrideMimeType"in l&&l.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in e&&(l.timeout=e.requestTimeout,l.ontimeout=function(){t.emit("requestTimeout")}),a.forEach((function(t){l.setRequestHeader(t[0],t[1])})),t._response=null,l.onreadystatechange=function(){switch(l.readyState){case h.LOADING:case h.DONE:t._onXHRProgress()}},"moz-chunked-arraybuffer"===t._mode&&(l.onprogress=function(){t._onXHRProgress()}),l.onerror=function(){t._destroyed||t.emit("error",new Error("XHR error"))};try{l.send(s)}catch(e){return void process.nextTick((function(){t.emit("error",e)}))}}}},u.prototype._onXHRProgress=function(){var t=this;(function(t){try{var e=t.status;return null!==e&&0!==e}catch(t){return!1}})(t._xhr)&&!t._destroyed&&(t._response||t._connect(),t._response._onXHRProgress())},u.prototype._connect=function(){var t=this;t._destroyed||(t._response=new o(t._xhr,t._fetchResponse,t._mode,t._fetchTimer),t._response.on("error",(function(e){t.emit("error",e)})),t.emit("response",t._response))},u.prototype._write=function(t,e,i){this._body.push(t),i()},u.prototype.abort=u.prototype.destroy=function(){var t=this;t._destroyed=!0,i.g.clearTimeout(t._fetchTimer),t._response&&(t._response._destroyed=!0),t._xhr?t._xhr.abort():t._fetchAbortController&&t._fetchAbortController.abort()},u.prototype.end=function(t,e,i){"function"==typeof t&&(i=t,t=void 0),a.Writable.prototype.end.call(this,t,e,i)},u.prototype.flushHeaders=function(){},u.prototype.setTimeout=function(){},u.prototype.setNoDelay=function(){},u.prototype.setSocketKeepAlive=function(){};var l=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]},676:(t,e,i)=>{var r=i(725),n=i(717),s=i(925),a=e.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},o=e.IncomingMessage=function(t,e,n,a){var o=this;if(s.Readable.call(o),o._mode=n,o.headers={},o.rawHeaders=[],o.trailers={},o.rawTrailers=[],o.on("end",(function(){process.nextTick((function(){o.emit("close")}))})),"fetch"===n){if(o._fetchResponse=e,o.url=e.url,o.statusCode=e.status,o.statusMessage=e.statusText,e.headers.forEach((function(t,e){o.headers[e.toLowerCase()]=t,o.rawHeaders.push(e,t)})),r.writableStream){var h=new WritableStream({write:function(t){return new Promise((function(e,i){o._destroyed?i():o.push(Buffer.from(t))?e():o._resumeFetch=e}))},close:function(){i.g.clearTimeout(a),o._destroyed||o.push(null)},abort:function(t){o._destroyed||o.emit("error",t)}});try{return void e.body.pipeTo(h).catch((function(t){i.g.clearTimeout(a),o._destroyed||o.emit("error",t)}))}catch(t){}}var u=e.body.getReader();!function t(){u.read().then((function(e){if(!o._destroyed){if(e.done)return i.g.clearTimeout(a),void o.push(null);o.push(Buffer.from(e.value)),t()}})).catch((function(t){i.g.clearTimeout(a),o._destroyed||o.emit("error",t)}))}()}else if(o._xhr=t,o._pos=0,o.url=t.responseURL,o.statusCode=t.status,o.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach((function(t){var e=t.match(/^([^:]+):\s*(.*)/);if(e){var i=e[1].toLowerCase();"set-cookie"===i?(void 0===o.headers[i]&&(o.headers[i]=[]),o.headers[i].push(e[2])):void 0!==o.headers[i]?o.headers[i]+=", "+e[2]:o.headers[i]=e[2],o.rawHeaders.push(e[1],e[2])}})),o._charset="x-user-defined",!r.overrideMimeType){var l=o.rawHeaders["mime-type"];if(l){var c=l.match(/;\s*charset=([^;])(;|$)/);c&&(o._charset=c[1].toLowerCase())}o._charset||(o._charset="utf-8")}};n(o,s.Readable),o.prototype._read=function(){var t=this._resumeFetch;t&&(this._resumeFetch=null,t())},o.prototype._onXHRProgress=function(){var t=this,e=t._xhr,r=null;switch(t._mode){case"text":if((r=e.responseText).length>t._pos){var n=r.substr(t._pos);if("x-user-defined"===t._charset){for(var s=Buffer.alloc(n.length),o=0;o<n.length;o++)s[o]=255&n.charCodeAt(o);t.push(s)}else t.push(n,t._charset);t._pos=r.length}break;case"arraybuffer":if(e.readyState!==a.DONE||!e.response)break;r=e.response,t.push(Buffer.from(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=e.response,e.readyState!==a.LOADING||!r)break;t.push(Buffer.from(new Uint8Array(r)));break;case"ms-stream":if(r=e.response,e.readyState!==a.LOADING)break;var h=new i.g.MSStreamReader;h.onprogress=function(){h.result.byteLength>t._pos&&(t.push(Buffer.from(new Uint8Array(h.result.slice(t._pos)))),t._pos=h.result.byteLength)},h.onload=function(){t.push(null)},h.readAsArrayBuffer(r)}t._xhr.readyState===a.DONE&&"ms-stream"!==t._mode&&t.push(null)}},303:t=>{"use strict";var e={};function i(t,i,r){r||(r=Error);var n=function(t){var e,r;function n(e,r,n){return t.call(this,function(t,e,r){return"string"==typeof i?i:i(t,e,r)}(e,r,n))||this}return r=t,(e=n).prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r,n}(r);n.prototype.name=r.name,n.prototype.code=t,e[t]=n}function r(t,e){if(Array.isArray(t)){var i=t.length;return t=t.map((function(t){return String(t)})),i>2?"one of ".concat(e," ").concat(t.slice(0,i-1).join(", "),", or ")+t[i-1]:2===i?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}i("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),i("ERR_INVALID_ARG_TYPE",(function(t,e,i){var n,s,a,o,h;if("string"==typeof e&&(s="not ",e.substr(0,s.length)===s)?(n="must not be",e=e.replace(/^not /,"")):n="must be",function(t,e,i){return(void 0===i||i>t.length)&&(i=t.length),t.substring(i-e.length,i)===e}(t," argument"))a="The ".concat(t," ").concat(n," ").concat(r(e,"type"));else{var u=("number"!=typeof h&&(h=0),h+".".length>(o=t).length||-1===o.indexOf(".",h)?"argument":"property");a='The "'.concat(t,'" ').concat(u," ").concat(n," ").concat(r(e,"type"))}return a+". Received type ".concat(typeof i)}),TypeError),i("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),i("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),i("ERR_STREAM_PREMATURE_CLOSE","Premature close"),i("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),i("ERR_STREAM_WRITE_AFTER_END","write after end"),i("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),i("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},560:(t,e,i)=>{"use strict";var r=Object.keys||function(t){var e=[];for(var i in t)e.push(i);return e};t.exports=u;var n=i(2),s=i(313);i(717)(u,n);for(var a=r(s.prototype),o=0;o<a.length;o++){var h=a[o];u.prototype[h]||(u.prototype[h]=s.prototype[h])}function u(t){if(!(this instanceof u))return new u(t);n.call(this,t),s.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",l)))}function l(){this._writableState.ended||process.nextTick(c,this)}function c(t){t.end()}Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(u.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(u.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(u.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},842:(t,e,i)=>{"use strict";t.exports=n;var r=i(846);function n(t){if(!(this instanceof n))return new n(t);r.call(this,t)}i(717)(n,r),n.prototype._transform=function(t,e,i){i(null,t)}},2:(t,e,i)=>{"use strict";var r;t.exports=S,S.ReadableState=x,i(187).EventEmitter;var n,s=function(t,e){return t.listeners(e).length},a=i(463),o=i(764).Buffer,h=i.g.Uint8Array||function(){},u=i(758);n=u&&u.debuglog?u.debuglog("stream"):function(){};var l,c,f,p=i(641),d=i(369),y=i(624).getHighWaterMark,g=i(303).q,m=g.ERR_INVALID_ARG_TYPE,M=g.ERR_STREAM_PUSH_AFTER_EOF,b=g.ERR_METHOD_NOT_IMPLEMENTED,v=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;i(717)(S,a);var _=d.errorOrDestroy,w=["error","close","destroy","pause","resume"];function x(t,e,n){r=r||i(560),t=t||{},"boolean"!=typeof n&&(n=e instanceof r),this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=y(this,t,"readableHighWaterMark",n),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(l||(l=i(553).s),this.decoder=new l(t.encoding),this.encoding=t.encoding)}function S(t){if(r=r||i(560),!(this instanceof S))return new S(t);var e=this instanceof r;this._readableState=new x(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function E(t,e,i,r,s){n("readableAddChunk",e);var a,u=t._readableState;if(null===e)u.reading=!1,function(t,e){if(n("onEofChunk"),!e.ended){if(e.decoder){var i=e.decoder.end();i&&i.length&&(e.buffer.push(i),e.length+=e.objectMode?1:i.length)}e.ended=!0,e.sync?T(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,C(t)))}}(t,u);else if(s||(a=function(t,e){var i,r;return r=e,o.isBuffer(r)||r instanceof h||"string"==typeof e||void 0===e||t.objectMode||(i=new m("chunk",["string","Buffer","Uint8Array"],e)),i}(u,e)),a)_(t,a);else if(u.objectMode||e&&e.length>0)if("string"==typeof e||u.objectMode||Object.getPrototypeOf(e)===o.prototype||(e=function(t){return o.from(t)}(e)),r)u.endEmitted?_(t,new v):R(t,u,e,!0);else if(u.ended)_(t,new M);else{if(u.destroyed)return!1;u.reading=!1,u.decoder&&!i?(e=u.decoder.write(e),u.objectMode||0!==e.length?R(t,u,e,!1):A(t,u)):R(t,u,e,!1)}else r||(u.reading=!1,A(t,u));return!u.ended&&(u.length<u.highWaterMark||0===u.length)}function R(t,e,i,r){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",i)):(e.length+=e.objectMode?1:i.length,r?e.buffer.unshift(i):e.buffer.push(i),e.needReadable&&T(t)),A(t,e)}Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),S.prototype.destroy=d.destroy,S.prototype._undestroy=d.undestroy,S.prototype._destroy=function(t,e){e(t)},S.prototype.push=function(t,e){var i,r=this._readableState;return r.objectMode?i=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=o.from(t,e),e=""),i=!0),E(this,t,e,!1,i)},S.prototype.unshift=function(t){return E(this,t,null,!0,!1)},S.prototype.isPaused=function(){return!1===this._readableState.flowing},S.prototype.setEncoding=function(t){l||(l=i(553).s);var e=new l(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,n="";null!==r;)n+=e.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==n&&this._readableState.buffer.push(n),this._readableState.length=n.length,this};var P=1073741824;function O(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=P?t=P:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function T(t){var e=t._readableState;n("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(n("emitReadable",e.flowing),e.emittedReadable=!0,process.nextTick(C,t))}function C(t){var e=t._readableState;n("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function A(t,e){e.readingMore||(e.readingMore=!0,process.nextTick(k,t,e))}function k(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var i=e.length;if(n("maybeReadMore read 0"),t.read(0),i===e.length)break}e.readingMore=!1}function I(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function N(t){n("readable nexttick read 0"),t.read(0)}function L(t,e){n("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(n("flow",e.flowing);e.flowing&&null!==t.read(););}function U(t,e){return 0===e.length?null:(e.objectMode?i=e.buffer.shift():!t||t>=e.length?(i=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):i=e.buffer.consume(t,e.decoder),i);var i}function q(t){var e=t._readableState;n("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,process.nextTick(B,e,t))}function B(t,e){if(n("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var i=e._writableState;(!i||i.autoDestroy&&i.finished)&&e.destroy()}}function G(t,e){for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i;return-1}S.prototype.read=function(t){n("read",t),t=parseInt(t,10);var e=this._readableState,i=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return n("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?q(this):T(this),null;if(0===(t=O(t,e))&&e.ended)return 0===e.length&&q(this),null;var r,s=e.needReadable;return n("need readable",s),(0===e.length||e.length-t<e.highWaterMark)&&n("length less than watermark",s=!0),e.ended||e.reading?n("reading or ended",s=!1):s&&(n("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=O(i,e))),null===(r=t>0?U(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),i!==t&&e.ended&&q(this)),null!==r&&this.emit("data",r),r},S.prototype._read=function(t){_(this,new b("_read()"))},S.prototype.pipe=function(t,e){var i=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=t;break;case 1:r.pipes=[r.pipes,t];break;default:r.pipes.push(t)}r.pipesCount+=1,n("pipe count=%d opts=%j",r.pipesCount,e);var a=e&&!1===e.end||t===process.stdout||t===process.stderr?d:o;function o(){n("onend"),t.end()}r.endEmitted?process.nextTick(a):i.once("end",a),t.on("unpipe",(function e(s,a){n("onunpipe"),s===i&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,n("cleanup"),t.removeListener("close",f),t.removeListener("finish",p),t.removeListener("drain",h),t.removeListener("error",c),t.removeListener("unpipe",e),i.removeListener("end",o),i.removeListener("end",d),i.removeListener("data",l),u=!0,!r.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}));var h=function(t){return function(){var e=t._readableState;n("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,j(t))}}(i);t.on("drain",h);var u=!1;function l(e){n("ondata");var s=t.write(e);n("dest.write",s),!1===s&&((1===r.pipesCount&&r.pipes===t||r.pipesCount>1&&-1!==G(r.pipes,t))&&!u&&(n("false write response, pause",r.awaitDrain),r.awaitDrain++),i.pause())}function c(e){n("onerror",e),d(),t.removeListener("error",c),0===s(t,"error")&&_(t,e)}function f(){t.removeListener("finish",p),d()}function p(){n("onfinish"),t.removeListener("close",f),d()}function d(){n("unpipe"),i.unpipe(t)}return i.on("data",l),function(t,e,i){if("function"==typeof t.prependListener)return t.prependListener(e,i);t._events&&t._events.error?Array.isArray(t._events.error)?t._events.error.unshift(i):t._events.error=[i,t._events.error]:t.on(e,i)}(t,"error",c),t.once("close",f),t.once("finish",p),t.emit("pipe",i),r.flowing||(n("pipe resume"),i.resume()),t},S.prototype.unpipe=function(t){var e=this._readableState,i={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,i)),this;if(!t){var r=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var s=0;s<n;s++)r[s].emit("unpipe",this,{hasUnpiped:!1});return this}var a=G(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,i)),this},S.prototype.on=function(t,e){var i=a.prototype.on.call(this,t,e),r=this._readableState;return"data"===t?(r.readableListening=this.listenerCount("readable")>0,!1!==r.flowing&&this.resume()):"readable"===t&&(r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.flowing=!1,r.emittedReadable=!1,n("on readable",r.length,r.reading),r.length?T(this):r.reading||process.nextTick(N,this))),i},S.prototype.addListener=S.prototype.on,S.prototype.removeListener=function(t,e){var i=a.prototype.removeListener.call(this,t,e);return"readable"===t&&process.nextTick(I,this),i},S.prototype.removeAllListeners=function(t){var e=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||process.nextTick(I,this),e},S.prototype.resume=function(){var t=this._readableState;return t.flowing||(n("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,process.nextTick(L,t,e))}(this,t)),t.paused=!1,this},S.prototype.pause=function(){return n("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(n("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},S.prototype.wrap=function(t){var e=this,i=this._readableState,r=!1;for(var s in t.on("end",(function(){if(n("wrapped end"),i.decoder&&!i.ended){var t=i.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(s){n("wrapped data"),i.decoder&&(s=i.decoder.write(s)),i.objectMode&&null==s||(i.objectMode||s&&s.length)&&(e.push(s)||(r=!0,t.pause()))})),t)void 0===this[s]&&"function"==typeof t[s]&&(this[s]=function(e){return function(){return t[e].apply(t,arguments)}}(s));for(var a=0;a<w.length;a++)t.on(w[a],this.emit.bind(this,w[a]));return this._read=function(e){n("wrapped _read",e),r&&(r=!1,t.resume())},this},"function"==typeof Symbol&&(S.prototype[Symbol.asyncIterator]=function(){return void 0===c&&(c=i(819)),c(this)}),Object.defineProperty(S.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(S.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(S.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),S._fromList=U,Object.defineProperty(S.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(S.from=function(t,e){return void 0===f&&(f=i(869)),f(S,t,e)})},846:(t,e,i)=>{"use strict";t.exports=l;var r=i(303).q,n=r.ERR_METHOD_NOT_IMPLEMENTED,s=r.ERR_MULTIPLE_CALLBACK,a=r.ERR_TRANSFORM_ALREADY_TRANSFORMING,o=r.ERR_TRANSFORM_WITH_LENGTH_0,h=i(560);function u(t,e){var i=this._transformState;i.transforming=!1;var r=i.writecb;if(null===r)return this.emit("error",new s);i.writechunk=null,i.writecb=null,null!=e&&this.push(e),r(t);var n=this._readableState;n.reading=!1,(n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);h.call(this,t),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",c)}function c(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?f(this,null,null):this._flush((function(e,i){f(t,e,i)}))}function f(t,e,i){if(e)return t.emit("error",e);if(null!=i&&t.push(i),t._writableState.length)throw new o;if(t._transformState.transforming)throw new a;return t.push(null)}i(717)(l,h),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,h.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,i){i(new n("_transform()"))},l.prototype._write=function(t,e,i){var r=this._transformState;if(r.writecb=i,r.writechunk=t,r.writeencoding=e,!r.transforming){var n=this._readableState;(r.needTransform||n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){h.prototype._destroy.call(this,t,(function(t){e(t)}))}},313:(t,e,i)=>{"use strict";function r(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,i){var r=t.entry;for(t.entry=null;r;){var n=r.callback;e.pendingcb--,n(undefined),r=r.next}e.corkedRequestsFree.next=t}(e,t)}}var n;t.exports=S,S.WritableState=x;var s,a={deprecate:i(927)},o=i(463),h=i(764).Buffer,u=i.g.Uint8Array||function(){},l=i(369),c=i(624).getHighWaterMark,f=i(303).q,p=f.ERR_INVALID_ARG_TYPE,d=f.ERR_METHOD_NOT_IMPLEMENTED,y=f.ERR_MULTIPLE_CALLBACK,g=f.ERR_STREAM_CANNOT_PIPE,m=f.ERR_STREAM_DESTROYED,M=f.ERR_STREAM_NULL_VALUES,b=f.ERR_STREAM_WRITE_AFTER_END,v=f.ERR_UNKNOWN_ENCODING,_=l.errorOrDestroy;function w(){}function x(t,e,s){n=n||i(560),t=t||{},"boolean"!=typeof s&&(s=e instanceof n),this.objectMode=!!t.objectMode,s&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=c(this,t,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===t.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var i=t._writableState,r=i.sync,n=i.writecb;if("function"!=typeof n)throw new y;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(i),e)!function(t,e,i,r,n){--e.pendingcb,i?(process.nextTick(n,r),process.nextTick(C,t,e),t._writableState.errorEmitted=!0,_(t,r)):(n(r),t._writableState.errorEmitted=!0,_(t,r),C(t,e))}(t,i,r,e,n);else{var s=O(i)||t.destroyed;s||i.corked||i.bufferProcessing||!i.bufferedRequest||P(t,i),r?process.nextTick(R,t,i,s,n):R(t,i,s,n)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new r(this)}function S(t){var e=this instanceof(n=n||i(560));if(!e&&!s.call(S,this))return new S(t);this._writableState=new x(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),o.call(this)}function E(t,e,i,r,n,s,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new m("write")):i?t._writev(n,e.onwrite):t._write(n,s,e.onwrite),e.sync=!1}function R(t,e,i,r){i||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),C(t,e)}function P(t,e){e.bufferProcessing=!0;var i=e.bufferedRequest;if(t._writev&&i&&i.next){var n=e.bufferedRequestCount,s=new Array(n),a=e.corkedRequestsFree;a.entry=i;for(var o=0,h=!0;i;)s[o]=i,i.isBuf||(h=!1),i=i.next,o+=1;s.allBuffers=h,E(t,e,!0,e.length,s,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new r(e),e.bufferedRequestCount=0}else{for(;i;){var u=i.chunk,l=i.encoding,c=i.callback;if(E(t,e,!1,e.objectMode?1:u.length,u,l,c),i=i.next,e.bufferedRequestCount--,e.writing)break}null===i&&(e.lastBufferedRequest=null)}e.bufferedRequest=i,e.bufferProcessing=!1}function O(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function T(t,e){t._final((function(i){e.pendingcb--,i&&_(t,i),e.prefinished=!0,t.emit("prefinish"),C(t,e)}))}function C(t,e){var i=O(e);if(i&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,process.nextTick(T,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var r=t._readableState;(!r||r.autoDestroy&&r.endEmitted)&&t.destroy()}return i}i(717)(S,o),x.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(x.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(S,Symbol.hasInstance,{value:function(t){return!!s.call(this,t)||this===S&&t&&t._writableState instanceof x}})):s=function(t){return t instanceof this},S.prototype.pipe=function(){_(this,new g)},S.prototype.write=function(t,e,i){var r,n=this._writableState,s=!1,a=!n.objectMode&&(r=t,h.isBuffer(r)||r instanceof u);return a&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(i=e,e=null),a?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof i&&(i=w),n.ending?function(t,e){var i=new b;_(t,i),process.nextTick(e,i)}(this,i):(a||function(t,e,i,r){var n;return null===i?n=new M:"string"==typeof i||e.objectMode||(n=new p("chunk",["string","Buffer"],i)),!n||(_(t,n),process.nextTick(r,n),!1)}(this,n,t,i))&&(n.pendingcb++,s=function(t,e,i,r,n,s){if(!i){var a=function(t,e,i){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,i)),e}(e,r,n);r!==a&&(i=!0,n="buffer",r=a)}var o=e.objectMode?1:r.length;e.length+=o;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:n,isBuf:i,callback:s,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else E(t,e,!1,o,r,n,s);return u}(this,n,a,t,e,i)),s},S.prototype.cork=function(){this._writableState.corked++},S.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||P(this,t))},S.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new v(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(S.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(S.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),S.prototype._write=function(t,e,i){i(new d("_write()"))},S.prototype._writev=null,S.prototype.end=function(t,e,i){var r=this._writableState;return"function"==typeof t?(i=t,t=null,e=null):"function"==typeof e&&(i=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||function(t,e,i){e.ending=!0,C(t,e),i&&(e.finished?process.nextTick(i):t.once("finish",i)),e.ended=!0,t.writable=!1}(this,r,i),this},Object.defineProperty(S.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),S.prototype.destroy=l.destroy,S.prototype._undestroy=l.undestroy,S.prototype._destroy=function(t,e){e(t)}},819:(t,e,i)=>{"use strict";var r;function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var s=i(467),a=Symbol("lastResolve"),o=Symbol("lastReject"),h=Symbol("error"),u=Symbol("ended"),l=Symbol("lastPromise"),c=Symbol("handlePromise"),f=Symbol("stream");function p(t,e){return{value:t,done:e}}function d(t){var e=t[a];if(null!==e){var i=t[f].read();null!==i&&(t[l]=null,t[a]=null,t[o]=null,e(p(i,!1)))}}function y(t){process.nextTick(d,t)}var g=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((n(r={get stream(){return this[f]},next:function(){var t=this,e=this[h];if(null!==e)return Promise.reject(e);if(this[u])return Promise.resolve(p(void 0,!0));if(this[f].destroyed)return new Promise((function(e,i){process.nextTick((function(){t[h]?i(t[h]):e(p(void 0,!0))}))}));var i,r=this[l];if(r)i=new Promise(function(t,e){return function(i,r){t.then((function(){e[u]?i(p(void 0,!0)):e[c](i,r)}),r)}}(r,this));else{var n=this[f].read();if(null!==n)return Promise.resolve(p(n,!1));i=new Promise(this[c])}return this[l]=i,i}},Symbol.asyncIterator,(function(){return this})),n(r,"return",(function(){var t=this;return new Promise((function(e,i){t[f].destroy(null,(function(t){t?i(t):e(p(void 0,!0))}))}))})),r),g);t.exports=function(t){var e,i=Object.create(m,(n(e={},f,{value:t,writable:!0}),n(e,a,{value:null,writable:!0}),n(e,o,{value:null,writable:!0}),n(e,h,{value:null,writable:!0}),n(e,u,{value:t._readableState.endEmitted,writable:!0}),n(e,c,{value:function(t,e){var r=i[f].read();r?(i[l]=null,i[a]=null,i[o]=null,t(p(r,!1))):(i[a]=t,i[o]=e)},writable:!0}),e));return i[l]=null,s(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=i[o];return null!==e&&(i[l]=null,i[a]=null,i[o]=null,e(t)),void(i[h]=t)}var r=i[a];null!==r&&(i[l]=null,i[a]=null,i[o]=null,r(p(void 0,!0))),i[u]=!0})),t.on("readable",y.bind(null,i)),i}},641:(t,e,i)=>{"use strict";function r(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,r)}return i}function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function s(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=i(764).Buffer,o=i(758).inspect,h=o&&o.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,i;return e=t,(i=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,i=""+e.data;e=e.next;)i+=t+e.data;return i}},{key:"concat",value:function(t){if(0===this.length)return a.alloc(0);for(var e,i,r,n=a.allocUnsafe(t>>>0),s=this.head,o=0;s;)e=s.data,i=n,r=o,a.prototype.copy.call(e,i,r),o+=s.data.length,s=s.next;return n}},{key:"consume",value:function(t,e){var i;return t<this.head.data.length?(i=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):i=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),i}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,i=1,r=e.data;for(t-=r.length;e=e.next;){var n=e.data,s=t>n.length?n.length:t;if(s===n.length?r+=n:r+=n.slice(0,t),0==(t-=s)){s===n.length?(++i,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=n.slice(s));break}++i}return this.length-=i,r}},{key:"_getBuffer",value:function(t){var e=a.allocUnsafe(t),i=this.head,r=1;for(i.data.copy(e),t-=i.data.length;i=i.next;){var n=i.data,s=t>n.length?n.length:t;if(n.copy(e,e.length-t,0,s),0==(t-=s)){s===n.length?(++r,i.next?this.head=i.next:this.head=this.tail=null):(this.head=i,i.data=n.slice(s));break}++r}return this.length-=r,e}},{key:h,value:function(t,e){return o(this,function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?r(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}])&&s(e.prototype,i),t}()},369:t=>{"use strict";function e(t,e){r(t,e),i(t)}function i(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function r(t,e){t.emit("error",e)}t.exports={destroy:function(t,n){var s=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(n?n(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(r,this,t)):process.nextTick(r,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!n&&t?s._writableState?s._writableState.errorEmitted?process.nextTick(i,s):(s._writableState.errorEmitted=!0,process.nextTick(e,s,t)):process.nextTick(e,s,t):n?(process.nextTick(i,s),n(t)):process.nextTick(i,s)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var i=t._readableState,r=t._writableState;i&&i.autoDestroy||r&&r.autoDestroy?t.destroy(e):t.emit("error",e)}}},467:(t,e,i)=>{"use strict";var r=i(303).q.ERR_STREAM_PREMATURE_CLOSE;function n(){}t.exports=function t(e,i,s){if("function"==typeof i)return t(e,null,i);i||(i={}),s=function(t){var e=!1;return function(){if(!e){e=!0;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];t.apply(this,r)}}}(s||n);var a=i.readable||!1!==i.readable&&e.readable,o=i.writable||!1!==i.writable&&e.writable,h=function(){e.writable||l()},u=e._writableState&&e._writableState.finished,l=function(){o=!1,u=!0,a||s.call(e)},c=e._readableState&&e._readableState.endEmitted,f=function(){a=!1,c=!0,o||s.call(e)},p=function(t){s.call(e,t)},d=function(){var t;return a&&!c?(e._readableState&&e._readableState.ended||(t=new r),s.call(e,t)):o&&!u?(e._writableState&&e._writableState.ended||(t=new r),s.call(e,t)):void 0},y=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",d),e.req?y():e.on("request",y)):o&&!e._writableState&&(e.on("end",h),e.on("close",h)),e.on("end",f),e.on("finish",l),!1!==i.error&&e.on("error",p),e.on("close",d),function(){e.removeListener("complete",l),e.removeListener("abort",d),e.removeListener("request",y),e.req&&e.req.removeListener("finish",l),e.removeListener("end",h),e.removeListener("close",h),e.removeListener("finish",l),e.removeListener("end",f),e.removeListener("error",p),e.removeListener("close",d)}}},869:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},689:(t,e,i)=>{"use strict";var r,n=i(303).q,s=n.ERR_MISSING_ARGS,a=n.ERR_STREAM_DESTROYED;function o(t){if(t)throw t}function h(t,e,n,s){s=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(s);var o=!1;t.on("close",(function(){o=!0})),void 0===r&&(r=i(467)),r(t,{readable:e,writable:n},(function(t){if(t)return s(t);o=!0,s()}));var h=!1;return function(e){if(!o&&!h)return h=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void s(e||new a("pipe"))}}function u(t){t()}function l(t,e){return t.pipe(e)}function c(t){return t.length?"function"!=typeof t[t.length-1]?o:t.pop():o}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r,n=c(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new s("streams");var a=e.map((function(t,i){var s=i<e.length-1;return h(t,s,i>0,(function(t){r||(r=t),t&&a.forEach(u),s||(a.forEach(u),n(r))}))}));return e.reduce(l)}},624:(t,e,i)=>{"use strict";var r=i(303).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,i,n){var s=function(t,e,i){return null!=t.highWaterMark?t.highWaterMark:e?t[i]:null}(e,n,i);if(null!=s){if(!isFinite(s)||Math.floor(s)!==s||s<0)throw new r(n?i:"highWaterMark",s);return Math.floor(s)}return t.objectMode?16:16384}}},463:(t,e,i)=>{t.exports=i(187).EventEmitter},925:(t,e,i)=>{(e=t.exports=i(2)).Stream=e,e.Readable=e,e.Writable=i(313),e.Duplex=i(560),e.Transform=i(846),e.PassThrough=i(842),e.finished=i(467),e.pipeline=i(689)},553:(t,e,i)=>{"use strict";var r=i(509).Buffer,n=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function s(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===n||!n(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=h,this.end=u,e=4;break;case"utf8":this.fillLast=o,e=4;break;case"base64":this.text=l,this.end=c,e=3;break;default:return this.write=f,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function o(t){var e=this.lastTotal-this.lastNeed,i=function(t,e,i){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==i?i:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function h(t,e){if((t.length-e)%2==0){var i=t.toString("utf16le",e);if(i){var r=i.charCodeAt(i.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],i.slice(0,-1)}return i}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function u(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var i=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,i)}return e}function l(t,e){var i=(t.length-e)%3;return 0===i?t.toString("base64",e):(this.lastNeed=3-i,this.lastTotal=3,1===i?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-i))}function c(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function f(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.s=s,s.prototype.write=function(t){if(0===t.length)return"";var e,i;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";i=this.lastNeed,this.lastNeed=0}else i=0;return i<t.length?e?e+this.text(t,i):this.text(t,i):e||""},s.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},s.prototype.text=function(t,e){var i=function(t,e,i){var r=e.length-1;if(r<i)return 0;var n=a(e[r]);return n>=0?(n>0&&(t.lastNeed=n-1),n):--r<i||-2===n?0:(n=a(e[r]))>=0?(n>0&&(t.lastNeed=n-2),n):--r<i||-2===n?0:(n=a(e[r]))>=0?(n>0&&(2===n?n=0:t.lastNeed=n-3),n):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=i;var r=t.length-(i-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},s.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},741:function(t){t.exports=function(t){function e(r){if(i[r])return i[r].exports;var n=i[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,e),n.l=!0,n.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,r){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=1)}([function(t,e,i){"use strict";var r,n=this&&this.__assign||Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t};Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return r.execute(t)},function(t){t.execute=function(e){var i;return null===e?i=e:e instanceof Date?i=new Date(e.getTime()):Array.isArray(e)?(i=[],e.forEach((function(t,e,r){i.push(t)})),i=i.map((function(e){return t.execute(e)}))):"object"==typeof e&&e!=={}?(i=n({},e),Object.keys(i).forEach((function(e){i[e]=t.execute(i[e])}))):i=e,i},t.isPrimitive=function(){}}(r||(r={}))},function(t,e,i){t.exports=i(0)}])},655:(t,e,i)=>{"use strict";i.r(e),i.d(e,{__extends:()=>n,__assign:()=>s,__rest:()=>a,__decorate:()=>o,__param:()=>h,__metadata:()=>u,__awaiter:()=>l,__generator:()=>c,__createBinding:()=>f,__exportStar:()=>p,__values:()=>d,__read:()=>y,__spread:()=>g,__spreadArrays:()=>m,__await:()=>M,__asyncGenerator:()=>b,__asyncDelegator:()=>v,__asyncValues:()=>_,__makeTemplateObject:()=>w,__importStar:()=>x,__importDefault:()=>S,__classPrivateFieldGet:()=>E,__classPrivateFieldSet:()=>R});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function n(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var s=function(){return(s=Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function a(t,e){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(i[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(t);n<r.length;n++)e.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(t,r[n])&&(i[r[n]]=t[r[n]])}return i}function o(t,e,i,r){var n,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,i,r);else for(var o=t.length-1;o>=0;o--)(n=t[o])&&(a=(s<3?n(a):s>3?n(e,i,a):n(e,i))||a);return s>3&&a&&Object.defineProperty(e,i,a),a}function h(t,e){return function(i,r){e(i,r,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,i,r){return new(i||(i=Promise))((function(n,s){function a(t){try{h(r.next(t))}catch(t){s(t)}}function o(t){try{h(r.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,o)}h((r=r.apply(t,e||[])).next())}))}function c(t,e){var i,r,n,s,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){a.label=s[1];break}if(6===s[0]&&a.label<n[1]){a.label=n[1],n=s;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(s);break}n[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}function f(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}function p(t,e){for(var i in t)"default"===i||e.hasOwnProperty(i)||(e[i]=t[i])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],r=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var r,n,s=i.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=s.next()).done;)a.push(r.value)}catch(t){n={error:t}}finally{try{r&&!r.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}return a}function g(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function m(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var r=Array(t),n=0;for(e=0;e<i;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,n++)r[n]=s[a];return r}function M(t){return this instanceof M?(this.v=t,this):new M(t)}function b(t,e,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,n=i.apply(t,e||[]),s=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){n[t]&&(r[t]=function(e){return new Promise((function(i,r){s.push([t,e,i,r])>1||o(t,e)}))})}function o(t,e){try{(i=n[t](e)).value instanceof M?Promise.resolve(i.value.v).then(h,u):l(s[0][2],i)}catch(t){l(s[0][3],t)}var i}function h(t){o("next",t)}function u(t){o("throw",t)}function l(t,e){t(e),s.shift(),s.length&&o(s[0][0],s[0][1])}}function v(t){var e,i;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,n){e[r]=t[r]?function(e){return(i=!i)?{value:M(t[r](e)),done:"return"===r}:n?n(e):e}:n}}function _(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,i=t[Symbol.asyncIterator];return i?i.call(t):(t=d(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(i){e[i]=t[i]&&function(e){return new Promise((function(r,n){!function(t,e,i,r){Promise.resolve(r).then((function(e){t({value:e,done:i})}),e)}(r,n,(e=t[i](e)).done,e.value)}))}}}function w(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function x(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}function S(t){return t&&t.__esModule?t:{default:t}}function E(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function R(t,e,i){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,i),i}},511:function(t,e,i){var r;t=i.nmd(t),function(n){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof i.g&&i.g;s.global!==s&&s.window!==s&&s.self;var a,o=2147483647,h=36,u=/^xn--/,l=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,d=String.fromCharCode;function y(t){throw RangeError(f[t])}function g(t,e){for(var i=t.length,r=[];i--;)r[i]=e(t[i]);return r}function m(t,e){var i=t.split("@"),r="";return i.length>1&&(r=i[0]+"@",t=i[1]),r+g((t=t.replace(c,".")).split("."),e).join(".")}function M(t){for(var e,i,r=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(i=t.charCodeAt(n++)))?r.push(((1023&e)<<10)+(1023&i)+65536):(r.push(e),n--):r.push(e);return r}function b(t){return g(t,(function(t){var e="";return t>65535&&(e+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+d(t)})).join("")}function v(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function _(t,e,i){var r=0;for(t=i?p(t/700):t>>1,t+=p(t/e);t>455;r+=h)t=p(t/35);return p(r+36*t/(t+38))}function w(t){var e,i,r,n,s,a,u,l,c,f,d,g=[],m=t.length,M=0,v=128,w=72;for((i=t.lastIndexOf("-"))<0&&(i=0),r=0;r<i;++r)t.charCodeAt(r)>=128&&y("not-basic"),g.push(t.charCodeAt(r));for(n=i>0?i+1:0;n<m;){for(s=M,a=1,u=h;n>=m&&y("invalid-input"),((l=(d=t.charCodeAt(n++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:h)>=h||l>p((o-M)/a))&&y("overflow"),M+=l*a,!(l<(c=u<=w?1:u>=w+26?26:u-w));u+=h)a>p(o/(f=h-c))&&y("overflow"),a*=f;w=_(M-s,e=g.length+1,0==s),p(M/e)>o-v&&y("overflow"),v+=p(M/e),M%=e,g.splice(M++,0,v)}return b(g)}function x(t){var e,i,r,n,s,a,u,l,c,f,g,m,b,w,x,S=[];for(m=(t=M(t)).length,e=128,i=0,s=72,a=0;a<m;++a)(g=t[a])<128&&S.push(d(g));for(r=n=S.length,n&&S.push("-");r<m;){for(u=o,a=0;a<m;++a)(g=t[a])>=e&&g<u&&(u=g);for(u-e>p((o-i)/(b=r+1))&&y("overflow"),i+=(u-e)*b,e=u,a=0;a<m;++a)if((g=t[a])<e&&++i>o&&y("overflow"),g==e){for(l=i,c=h;!(l<(f=c<=s?1:c>=s+26?26:c-s));c+=h)x=l-f,w=h-f,S.push(d(v(f+x%w,0))),l=p(x/w);S.push(d(v(l,0))),s=_(i,b,r==n),i=0,++r}++i,++e}return S.join("")}a={version:"1.3.2",ucs2:{decode:M,encode:b},decode:w,encode:x,toASCII:function(t){return m(t,(function(t){return l.test(t)?"xn--"+x(t):t}))},toUnicode:function(t){return m(t,(function(t){return u.test(t)?w(t.slice(4).toLowerCase()):t}))}},void 0===(r=function(){return a}.call(e,i,e,t))||(t.exports=r)}()},575:(t,e,i)=>{"use strict";var r=i(511),n=i(502);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=b,e.resolve=function(t,e){return b(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?b(t,!1,!0).resolveObject(e):e},e.format=function(t){return n.isString(t)&&(t=b(t)),t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var a=/^([a-z0-9.+-]+:)/i,o=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(u),c=["%","/","?",";","#"].concat(l),f=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,y={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},M=i(673);function b(t,e,i){if(t&&n.isObject(t)&&t instanceof s)return t;var r=new s;return r.parse(t,e,i),r}s.prototype.parse=function(t,e,i){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),o=-1!==s&&s<t.indexOf("#")?"?":"#",u=t.split(o);u[0]=u[0].replace(/\\/g,"/");var b=t=u.join(o);if(b=b.trim(),!i&&1===t.split("#").length){var v=h.exec(b);if(v)return this.path=b,this.href=b,this.pathname=v[1],v[2]?(this.search=v[2],this.query=e?M.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var _=a.exec(b);if(_){var w=(_=_[0]).toLowerCase();this.protocol=w,b=b.substr(_.length)}if(i||_||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===b.substr(0,2);!x||_&&g[_]||(b=b.substr(2),this.slashes=!0)}if(!g[_]&&(x||_&&!m[_])){for(var S,E,R=-1,P=0;P<f.length;P++)-1!==(O=b.indexOf(f[P]))&&(-1===R||O<R)&&(R=O);for(-1!==(E=-1===R?b.lastIndexOf("@"):b.lastIndexOf("@",R))&&(S=b.slice(0,E),b=b.slice(E+1),this.auth=decodeURIComponent(S)),R=-1,P=0;P<c.length;P++){var O;-1!==(O=b.indexOf(c[P]))&&(-1===R||O<R)&&(R=O)}-1===R&&(R=b.length),this.host=b.slice(0,R),b=b.slice(R),this.parseHost(),this.hostname=this.hostname||"";var T="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!T)for(var C=this.hostname.split(/\./),A=(P=0,C.length);P<A;P++){var k=C[P];if(k&&!k.match(p)){for(var I="",N=0,L=k.length;N<L;N++)k.charCodeAt(N)>127?I+="x":I+=k[N];if(!I.match(p)){var j=C.slice(0,P),U=C.slice(P+1),q=k.match(d);q&&(j.push(q[1]),U.unshift(q[2])),U.length&&(b="/"+U.join(".")+b),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),T||(this.hostname=r.toASCII(this.hostname));var B=this.port?":"+this.port:"",G=this.hostname||"";this.host=G+B,this.href+=this.host,T&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!y[w])for(P=0,A=l.length;P<A;P++){var D=l[P];if(-1!==b.indexOf(D)){var F=encodeURIComponent(D);F===D&&(F=escape(D)),b=b.split(D).join(F)}}var W=b.indexOf("#");-1!==W&&(this.hash=b.substr(W),b=b.slice(0,W));var z=b.indexOf("?");if(-1!==z?(this.search=b.substr(z),this.query=b.substr(z+1),e&&(this.query=M.parse(this.query)),b=b.slice(0,z)):e&&(this.search="",this.query={}),b&&(this.pathname=b),m[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){B=this.pathname||"";var H=this.search||"";this.path=B+H}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",i=this.pathname||"",r=this.hash||"",s=!1,a="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(a=M.stringify(this.query));var o=this.search||a&&"?"+a||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||m[e])&&!1!==s?(s="//"+(s||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):s||(s=""),r&&"#"!==r.charAt(0)&&(r="#"+r),o&&"?"!==o.charAt(0)&&(o="?"+o),e+s+(i=i.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(o=o.replace("#","%23"))+r},s.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(n.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var i=new s,r=Object.keys(this),a=0;a<r.length;a++){var o=r[a];i[o]=this[o]}if(i.hash=t.hash,""===t.href)return i.href=i.format(),i;if(t.slashes&&!t.protocol){for(var h=Object.keys(t),u=0;u<h.length;u++){var l=h[u];"protocol"!==l&&(i[l]=t[l])}return m[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(t.protocol&&t.protocol!==i.protocol){if(!m[t.protocol]){for(var c=Object.keys(t),f=0;f<c.length;f++){var p=c[f];i[p]=t[p]}return i.href=i.format(),i}if(i.protocol=t.protocol,t.host||g[t.protocol])i.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),i.pathname=d.join("/")}if(i.search=t.search,i.query=t.query,i.host=t.host||"",i.auth=t.auth,i.hostname=t.hostname||t.host,i.port=t.port,i.pathname||i.search){var y=i.pathname||"",M=i.search||"";i.path=y+M}return i.slashes=i.slashes||t.slashes,i.href=i.format(),i}var b=i.pathname&&"/"===i.pathname.charAt(0),v=t.host||t.pathname&&"/"===t.pathname.charAt(0),_=v||b||i.host&&t.pathname,w=_,x=i.pathname&&i.pathname.split("/")||[],S=(d=t.pathname&&t.pathname.split("/")||[],i.protocol&&!m[i.protocol]);if(S&&(i.hostname="",i.port=null,i.host&&(""===x[0]?x[0]=i.host:x.unshift(i.host)),i.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),_=_&&(""===d[0]||""===x[0])),v)i.host=t.host||""===t.host?t.host:i.host,i.hostname=t.hostname||""===t.hostname?t.hostname:i.hostname,i.search=t.search,i.query=t.query,x=d;else if(d.length)x||(x=[]),x.pop(),x=x.concat(d),i.search=t.search,i.query=t.query;else if(!n.isNullOrUndefined(t.search))return S&&(i.hostname=i.host=x.shift(),(T=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=T.shift(),i.host=i.hostname=T.shift())),i.search=t.search,i.query=t.query,n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i;if(!x.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var E=x.slice(-1)[0],R=(i.host||t.host||x.length>1)&&("."===E||".."===E)||""===E,P=0,O=x.length;O>=0;O--)"."===(E=x[O])?x.splice(O,1):".."===E?(x.splice(O,1),P++):P&&(x.splice(O,1),P--);if(!_&&!w)for(;P--;P)x.unshift("..");!_||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),R&&"/"!==x.join("/").substr(-1)&&x.push("");var T,C=""===x[0]||x[0]&&"/"===x[0].charAt(0);return S&&(i.hostname=i.host=C?"":x.length?x.shift():"",(T=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=T.shift(),i.host=i.hostname=T.shift())),(_=_||i.host&&x.length)&&!C&&x.unshift(""),x.length?i.pathname=x.join("/"):(i.pathname=null,i.path=null),n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=t.auth||i.auth,i.slashes=i.slashes||t.slashes,i.href=i.format(),i},s.prototype.parseHost=function(){var t=this.host,e=o.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},502:t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},927:(t,e,i)=>{function r(t){try{if(!i.g.localStorage)return!1}catch(t){return!1}var e=i.g.localStorage[t];return null!=e&&"true"===String(e).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var i=!1;return function(){if(!i){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),i=!0}return t.apply(this,arguments)}}},529:t=>{t.exports=function(){for(var t={},i=0;i<arguments.length;i++){var r=arguments[i];for(var n in r)e.call(r,n)&&(t[n]=r[n])}return t};var e=Object.prototype.hasOwnProperty},758:()=>{}},e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),i(45)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,