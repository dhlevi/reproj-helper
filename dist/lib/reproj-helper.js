/*! For license information please see reproj-helper.js.LICENSE.txt */
(()=>{var t={497:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FormatConverter=void 0;var r,n=(r=i(741))&&r.__esModule?r:{default:r},s=function(){function t(){this.sourceWkt=null,this.sourceJson=null}return t.instance=function(){return new t},t.prototype.fromWkt=function(t){return this.sourceWkt=t.trim(),this.sourceJson={type:"Feature",properties:{},geometry:this.convertWktToJson()},this},t.prototype.toWkt=function(t){return void 0===t&&(t=!1),this.convertToWkt(t)},t.prototype.fromGeoJson=function(t){return this.sourceJson=(0,n.default)(t),this},t.prototype.toGeoJson=function(){return this.sourceJson},t.prototype.convertWktToJson=function(){if(!this.sourceWkt||0===this.sourceWkt.length)throw new Error("No WKT data supplied");var t=this.sourceWkt.split(" ")[0].trim().toUpperCase(),e=this.sourceWkt.split(" ")[1].trim().toUpperCase();if(["EMPTY"].includes(e))throw Error("Geometry is empty or using an unupported type!");var i=this.sourceWkt.substring(this.sourceWkt.indexOf("(")+1,this.sourceWkt.length-1);return this.buildWktGeometry(t,i)},t.prototype.buildWktGeometry=function(t,e){try{switch(t){case"POINT":return{type:"Point",coordinates:this.parseWktCoord(e)};case"MULTIPOINT":var i=e.trim().replace(/\(/g,"").replace(/\)/g,"");return{type:"MultiPoint",coordinates:this.parseWktLine(i)};case"LINESTRING":return{type:"LineString",coordinates:this.parseWktLine(e)};case"MULTILINESTRING":return{type:"MultiLineString",coordinates:this.parseWktRing(e)};case"TRIANGLE":case"POLYGON":return{type:"Polygon",coordinates:this.parseWktRing(e)};case"TIN":case"MULTIPOLYGON":for(var r={type:"MultiPolygon",coordinates:[]},n=e.split(")),"),s=0,a=n;s<a.length;s++){var o=a[s],h=o.replace("((","(")+(o.endsWith(")")?"":")");r.coordinates.push(this.parseWktRing(h.trim()))}return r;case"GEOMETRYCOLLECTION":for(var u={type:"GeometryCollection",geometries:[]},l=e.toUpperCase().replace(/POINT/g,"-POINT").replace(/LINESTRING/g,"-LINESTRING").replace(/POLYGON/g,"-POLYGON").replace(/MULTI-/g,"-MULTI").trim().split("-"),c=0,f=l;c<f.length;c++){var p=f[c];if(p&&p.length>0){var d=p.trim().toUpperCase();d.endsWith(",")&&(d=d.substring(0,d.length-1));var y=d.split(" ")[0].trim(),g=d.split(" ")[1].trim();if(["EMPTY","ZM","M"].includes(g))throw Error("Geometry is empty or using an unupported type!");var m=d.substring(d.indexOf("(")+1,d.length-1);u.geometries.push(this.buildWktGeometry(y,m))}}return u;default:throw new Error("WKT type of "+t+" is not currently supported")}}catch(t){throw Error(t)}},t.prototype.parseWktCoord=function(t){for(var e=[],i=0,r=t.trim().split(" ");i<r.length;i++){var n=r[i];e.push(parseFloat(n))}return e},t.prototype.parseWktLine=function(t){for(var e=[],i=0,r=t.trim().split(",");i<r.length;i++){var n=r[i];e.push(this.parseWktCoord(n))}return e},t.prototype.parseWktRing=function(t){for(var e=[],i=0,r=0,n=t.split("),");r<n.length;r++){var s=n[r],a=s.trim().substring(s.trim().indexOf("(")+1,s.trim().length-(s.endsWith(")")?1:0));e[i]=this.parseWktLine(a),i+=1}return e},t.prototype.convertToWkt=function(t){if(void 0===t&&(t=!1),this.sourceJson){if("FeatureCollection"===this.sourceJson.type){for(var e="GEOMETRYCOLLECTION (",i=0,r=this.sourceJson.features;i<r.length;i++){var n=r[i];e+=this.wktStringFromGeometry(n.geometry,t)+", "}return e.substring(0,e.length-2)+")"}return"Feature"===this.sourceJson.type?this.wktStringFromGeometry(this.sourceJson.geometry,t):this.wktStringFromGeometry(this.sourceJson,t)}return""},t.prototype.wktStringFromGeometry=function(t,e){switch(void 0===e&&(e=!1),t.type){case"Point":return"POINT"+(2===t.coordinates.length?" ":3===t.coordinates.length?" M ":" ZM ")+"("+this.toWktCoordString(t.coordinates)+")";case"MultiPoint":return"MULTIPOINT ("+this.lineToWktString(t.coordinates)+")";case"LineString":return"LINESTRING ("+this.lineToWktString(t.coordinates)+")";case"MultiLineString":return"MULTILINESTRING ("+this.ringToWktString(t.coordinates)+")";case"Polygon":return(3===t.coordinates[0][0].length&&e?"TRIANGLE":"POLYGON")+" ("+this.ringToWktString(t.coordinates)+")";case"MultiPolygon":return(3===t.coordinates[0][0][0].length&&e?"TIN":"MULTIPOLYGON")+" ("+this.polygonToWktString(t.coordinates)+")";case"GeometryCollection":for(var i="GEOMETRYCOLLECTION (",r=0,n=t.geometries;r<n.length;r++){var s=n[r];i+=this.wktStringFromGeometry(s)+", "}return i.substring(0,i.length-2)+")"}},t.prototype.polygonToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+="("+this.ringToWktString(n)+"), "}return e.substring(0,e.length-2)},t.prototype.ringToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+="("+this.lineToWktString(n)+"), "}return e.substring(0,e.length-2)},t.prototype.lineToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+=this.toWktCoordString(n)+", "}return e.substring(0,e.length-2)},t.prototype.toWktCoordString=function(t){for(var e="",i=0,r=t;i<r.length;i++)e+=r[i]+" ";return e.trim()},t}();e.FormatConverter=s},908:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ReProjector=void 0;var r=i(655),n=o(i(801)),s=o(i(741)),a=o(i(267));function o(t){return t&&t.__esModule?t:{default:t}}var h=function(){function t(){this.init(),this.sourceFeature=null,this.fromProjection="EPSG:3005",this.toProjection="WGS84"}return t.instance=function(){return new t},t.prototype.init=function(){console.debug("Initializing ReProjector"),n.default.defs("EPSG:3005",'PROJCS["NAD83 / BC Albers", GEOGCS["NAD83", DATUM["North_American_Datum_1983", SPHEROID["GRS 1980",6378137,298.257222101, AUTHORITY["EPSG","7019"]], TOWGS84[0,0,0,0,0,0,0], AUTHORITY["EPSG","6269"]], PRIMEM["Greenwich",0, AUTHORITY["EPSG","8901"]], UNIT["degree",0.0174532925199433, AUTHORITY["EPSG","9122"]], AUTHORITY["EPSG","4269"]], PROJECTION["Albers_Conic_Equal_Area"], PARAMETER["standard_parallel_1",50], PARAMETER["standard_parallel_2",58.5], PARAMETER["latitude_of_center",45], PARAMETER["longitude_of_center",-126], PARAMETER["false_easting",1000000], PARAMETER["false_northing",0], UNIT["metre",1, AUTHORITY["EPSG","9001"]], AXIS["Easting",EAST], AXIS["Northing",NORTH], AUTHORITY["EPSG","3005"]]'),n.default.defs("EPSG:3857","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"),n.default.defs("EPSG:3348","+proj=lcc +lat_1=49 +lat_2=77 +lat_0=63.390675 +lon_0=-91.86666666666666 +x_0=6200000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3979","+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3579","+proj=aea +lat_1=61.66666666666666 +lat_2=68 +lat_0=59 +lon_0=-132.5 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3402","+proj=tmerc +lat_0=0 +lon_0=-115 +k=0.9992 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("UTM7","+proj=utm +zone=7 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM8","+proj=utm +zone=8 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM9","+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM10","+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM11","+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM12","+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM13","+proj=utm +zone=13 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM14","+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM15","+proj=utm +zone=15 +datum=WGS84 +units=m +no_defs")},t.prototype.addDefinition=function(t,e){return console.debug("Adding definition "+t+" - "+e),n.default.defs(t,e),this},t.prototype.feature=function(t){return console.debug("Source Feature set"),this.sourceFeature=t,this},t.prototype.from=function(t){return console.debug("Projecting from "+t),this.fromProjection=t,this},t.prototype.to=function(t){return console.debug("Projecting to "+t),this.toProjection=t,this},t.prototype.addDefinitionFromEpsgIo=function(t){return(0,r.__awaiter)(this,void 0,void 0,(function(){var e,i;return(0,r.__generator)(this,(function(r){switch(r.label){case 0:return e=t.trim().includes(":")?t.split(":")[1].trim():t.trim(),[4,new Promise((function(t,i){a.default.get("https://epsg.io/"+e+".proj4",(function(e){var i="";e.on("data",(function(t){i+=t})),e.on("end",(function(){t(i)}))})).on("error",(function(t){i(t)}))}))];case 1:if(!((i=r.sent())&&i.length>0))throw new Error('Could not find definition for "'+t+'"');return this.addDefinition(t,i),[2,i]}}))}))},t.prototype.project=function(){return(0,r.__awaiter)(this,void 0,void 0,(function(){var t,e,i,n,a,o,h,u,l,c,f;return(0,r.__generator)(this,(function(r){if(console.debug("Starting projection"),!this.sourceFeature)throw console.error("No feature to project! Stopping"),new Error("Invalid Source Feature");t=null;try{if("FeatureCollection"===(t=(0,s.default)(this.sourceFeature)).type)for(e=0,i=t.features;e<i.length;e++)if("GeometryCollection"===(n=i[e]).geometry.type)for(a=0,o=n.geometry.geometries;a<o.length;a++)f=o[a],this.projectGeometry(f);else this.projectGeometry(n.geometry);else if("GeometryCollection"===t.type)for(h=0,u=t.geometries;h<u.length;h++)f=u[h],this.projectGeometry(f);else if("Feature"===t.type&&"GeometryCollection"===t.geometry.type)for(l=0,c=t.geometry.geometries;l<c.length;l++)f=c[l],this.projectGeometry(f);else"Feature"===t.type?this.projectGeometry(t.geometry):this.projectGeometry(t)}catch(t){console.error("Failed to reproject feature: "+t)}return[2,t]}))}))},t.prototype.projectGeometry=function(t){switch(t.type){case"Point":this.projectPoint(t.coordinates);break;case"LineString":case"MultiPoint":this.projectLineString(t.coordinates);break;case"Polygon":case"MultiLineString":this.projectPolygon(t.coordinates);break;case"MultiPolygon":for(var e=0,i=t.coordinates;e<i.length;e++){var r=i[e];this.projectPolygon(r)}break;default:console.error("No valid type found for this geometry. Projection cancelled"),console.error(t)}},t.prototype.projectPolygon=function(t){for(var e=0;e<t.length;e++)this.projectLineString(t[e])},t.prototype.projectLineString=function(t){for(var e=0;e<t.length;e++)this.projectPoint(t[e])},t.prototype.projectPoint=function(t){for(var e=(0,n.default)(this.fromProjection,this.toProjection,t),i=0;i<e.length;i++)t[i]=e[i]},t}();e.ReProjector=h},433:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpatialTransformers=void 0;var r,n=i(655),s=(r=i(741))&&r.__esModule?r:{default:r},a=i(649),o=function(){function t(){}return t.findInteriorRings=function(t){return(0,n.__awaiter)(this,void 0,void 0,(function(){var e,i,r,s,a,o;return(0,n.__generator)(this,(function(n){if(e=[],"Polygon"===(i="Feature"===t.type?t.geometry:t).type)for(o=1;o<i.coordinates.length;o++)e.push({type:"Polygon",coordinates:[i.coordinates[o]]});else if("MultiPolygon"===i.type)for(r=0,s=i.coordinates;r<s.length;r++)for(a=s[r],o=1;o<a.length;o++)e.push({type:"Polygon",coordinates:[a[o]]});return[2,e]}))}))},t.removeInteriorRings=function(t){return(0,n.__awaiter)(this,void 0,void 0,(function(){var e,i,r;return(0,n.__generator)(this,(function(n){if(e=(0,s.default)(t),"Polygon"===(i="Feature"===e.type?e.geometry:t).type)i.coordinates=[i.coordinates[0]];else if("MultiPolygon"===i.type)for(r=0;r<i.coordinates.length;r++)i.coordinates[r]=[i.coordinates[r][0]];return"Feature"===e.type&&(e.geometry=i),[2,e]}))}))},t.boundingBox=function(t){Array.isArray(t)||(t="FeatureCollection"===t.type?t.features:[t]);for(var e=1/0,i=-1/0,r=1/0,n=-1/0,s=0,a=t;s<a.length;s++){var o,h=a[s];switch((o="GeometryCollection"===h.geometry.type?this.boundingBox(h.geometry.geometries.map((function(t){return{type:"Feature",geometry:t,properties:{}}}))):h.geometry).type){case"Point":e=e>o.coordinates[0]?o.coordinates[0]:e,i=i<o.coordinates[0]?o.coordinates[0]:i,r=r>o.coordinates[1]?o.coordinates[1]:r,n=n<o.coordinates[1]?o.coordinates[1]:n;break;case"LineString":case"MultiPoint":for(var u=0,l=o.coordinates;u<l.length;u++)e=e>(_=l[u])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n;break;case"MultiLineString":case"Polygon":for(var c=0,f=o.coordinates;c<f.length;c++)for(var p=0,d=f[c];p<d.length;p++)e=e>(_=d[p])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n;break;case"MultiPolygon":for(var y=0,g=o.coordinates;y<g.length;y++)for(var m=0,M=g[y];m<M.length;m++)for(var b=0,v=M[m];b<v.length;b++){var _;e=e>(_=v[b])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n}}}return{type:"Polygon",bbox:[e,r,i,n],coordinates:[[[e,n],[i,n],[i,r],[e,r],[e,n]]]}},t.featureCentroid=function(t){var e=0,i=0,r=0;switch(t.geometry.type){case"Point":return t.geometry;case"LineString":case"MultiPoint":for(var n=0,s=t.geometry.coordinates;n<s.length;n++)e+=(g=s[n])[0],i+=g[1],r++;break;case"MultiLineString":case"Polygon":for(var a=0,o=t.geometry.coordinates;a<o.length;a++)for(var h=0,u=o[a];h<u.length;h++)e+=(g=u[h])[0],i+=g[1],r++;break;case"MultiPolygon":for(var l=0,c=t.geometry.coordinates;l<c.length;l++)for(var f=0,p=c[l];f<p.length;f++)for(var d=0,y=p[f];d<y.length;d++){var g;e+=(g=y[d])[0],i+=g[1],r++}break;case"GeometryCollection":for(var m=[],M=0,b=t.geometry.geometries;M<b.length;M++){var v=b[M];m.push(this.featureCentroid({type:"Feature",geometry:v,properties:null}).coordinates)}return this.featureCentroid({type:"Feature",geometry:{type:"MultiPoint",coordinates:m},properties:null})}return{type:"Point",coordinates:[e/r,i/r]}},t.reducePrecision=function(t,e){var i=(0,s.default)(t);switch("Feature"!==i.type&&(i={type:"Feature",geometry:i,properties:null}),i.geometry.type){case"Point":i.geometry.coordinates=a.SpatialUtils.reduceCoordinatePrecision(i.geometry.coordinates,e);break;case"LineString":case"MultiPoint":for(var r=0;r<i.geometry.coordinates.length;r++)i.geometry.coordinates[r]=a.SpatialUtils.reduceCoordinatePrecision(i.geometry.coordinates[r],e);break;case"MultiLineString":case"Polygon":for(var n=0,o=i.geometry.coordinates;n<o.length;n++){var h=o[n];for(r=0;r<h.length;r++)h[r]=a.SpatialUtils.reduceCoordinatePrecision(h[r],e)}break;case"MultiPolygon":for(var u=0,l=i.geometry.coordinates;u<l.length;u++)for(var c=0,f=l[u];c<f.length;c++)for(h=f[c],r=0;r<h.length;r++)h[r]=a.SpatialUtils.reduceCoordinatePrecision(h[r],e);break;case"GeometryCollection":for(r=0;r<i.geometry.geometries.length;r++)i.geometry.geometries[r]=this.reducePrecision(i.geometry.geometries[r],e)}return"Feature"!==t.type?i.geometry:i},t.explodeVertices=function(t){var e=(0,s.default)(t);"Feature"!==e.type&&(e={type:"Feature",geometry:e,properties:null});var i=[];switch(e.geometry.type){case"Point":i.push(e.geometry.coordinates);break;case"LineString":case"MultiPoint":i.push.apply(i,e.geometry.coordinates);break;case"MultiLineString":case"Polygon":for(var r=0,n=e.geometry.coordinates;r<n.length;r++){var a=n[r];i.push.apply(i,a)}break;case"MultiPolygon":for(var o=0,h=e.geometry.coordinates;o<h.length;o++)for(var u=0,l=h[o];u<l.length;u++)a=l[u],i.push.apply(i,a);break;case"GeometryCollection":for(var c=0;c<e.geometry.geometries.length;c++)i.push.apply(i,this.explodeVertices(e.geometry.geometries[c]))}return i},t.convexHull=function(t){var e=[];if(Array.isArray(t)||"FeatureCollection"!==t.type)if(Array.isArray(t))for(var i=0,r=t;i<r.length;i++){var n=r[i];Object.prototype.hasOwnProperty.call(n,"coordinates")||Object.prototype.hasOwnProperty.call(n,"geometry")?e.push.apply(e,this.explodeVertices(n)):e.push(n)}else e.push.apply(e,this.explodeVertices(t));else for(var s=0,o=t.features;s<o.length;s++){var h=o[s];e.push.apply(e,this.explodeVertices(h))}if(e.length<=1)return{type:"Polygon",coordinates:[]};e.sort(a.SpatialUtils.compareCoordinates);for(var u=[],l=0;l<e.length;l++){for(var c=e[l];u.length>=2&&(u[u.length-1][0]-u[u.length-2][0])*(c[1]-u[u.length-2][1])>=(u[u.length-1][1]-u[u.length-2][1])*(c[0]-u[u.length-2][0]);)u.pop();u.push(c)}u.pop();var f=[];for(l=e.length-1;l>=0;l--){for(c=e[l];f.length>=2&&(f[f.length-1][0]-f[f.length-2][0])*(c[1]-f[f.length-2][1])>=(f[f.length-1][1]-f[f.length-2][1])*(c[0]-f[f.length-2][0]);)f.pop();f.push(c)}return f.pop(),1==u.length&&1==f.length&&u[0][0]==f[0][0]&&u[0][1]==f[0][1]?{type:"Polygon",coordinates:[u]}:{type:"Polygon",coordinates:[u.concat(f)]}},t.RADIUS=6378137,t}();e.SpatialTransformers=o},649:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.utmZone=function(t,e){var i=Math.floor((e+180)/6)+1;return t>=56&&t<64&&e>=3&&e<12&&(i=32),t>=72&&t<84&&(e>=0&&e<9?i=31:e>=9&&e<21?i=33:e>=21&&e<33?i=35:e>=33&&e<42&&(i=37)),i},t.utmLetterDesignation=function(t){return-80<=t&&t<=84?"CDEFGHJKLMNPQRSTUVWXX"[Math.floor((t+80)/8)]:"Z"},t.utmZoneString=function(t,e){return"UTM"+this.utmZone(t,e)+this.utmLetterDesignation(t)},t.ddToDmsString=function(t,e,i){void 0===i&&(i=2);var r=Math.trunc(t),n=Math.floor(60*(Math.abs(t)-Math.abs(r))),s=this.reducePrecision(3600*(Math.abs(t)-Math.abs(r)-n/60),i);return e?r+"° "+n+"' "+s+'"':r+" "+n+" "+s},t.latLonToDmsString=function(t,e,i){return{latitudeDMS:this.ddToDmsString(t,i)+" "+(t<0?"S":"N"),longitudeDMS:this.ddToDmsString(e,i)+" "+(e<0?"W":"E")}},t.haversineDistance=function(t,e){var i=this.degreesToRadians(e[1]-t[1]),r=this.degreesToRadians(e[0]-t[0]),n=this.degreesToRadians(t[1]),s=this.degreesToRadians(e[1]),a=Math.sin(i/2)*Math.sin(i/2)+Math.cos(n)*Math.cos(s)*Math.sin(r/2)*Math.sin(r/2),o=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return this.RADIUS*o},t.lineLength=function(t){for(var e=0,i=0,r="LineString"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=null,s=0,a=r[i];s<a.length;s++){var o=a[s];n?(e+=this.haversineDistance(n,o),n=o):n=o}return e},t.polygonPerimeter=function(t){for(var e=0,i=0,r="Polygon"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=0,s=r[i];n<s.length;n++){for(var a=null,o=null,h=0,u=s[n];h<u.length;h++){var l=u[h];o?(e+=this.haversineDistance(o,l),o=l):(a=l,o=l)}o&&a&&(o[0]!=a[0]||o[1]!=a[1])&&(e+=this.haversineDistance(o,a))}return e},t.polygonArea=function(t){for(var e=0,i=0,r="Polygon"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=r[i],s=0;s<n.length;s++){var a=Math.abs(this.polygonRingArea(n[s]));e+=0===s?a:-a}return e},t.polygonRingArea=function(t){var e=0;if(t.length>2){for(var i=0;i<t.length;i++){var r=void 0,n=void 0,s=void 0;i===t.length-2?(r=t.length-2,n=t.length-1,s=0):i===t.length-1?(r=t.length-1,n=0,s=1):(r=i,n=i+1,s=i+2);var a=t[r],o=t[n],h=t[s];e+=(this.degreesToRadians(h[0])-this.degreesToRadians(a[0]))*Math.sin(this.degreesToRadians(o[1]))}e=e*this.RADIUS*this.RADIUS/2}return e},t.degreesToRadians=function(t){return t*Math.PI/180},t.reducePrecision=function(t,e){return parseFloat(t.toFixed(e))},t.reduceCoordinatePrecision=function(t,e){return[this.reducePrecision(t[0],e),this.reducePrecision(t[1],e)]},t.compareCoordinates=function(t,e){return t[0]<e[0]?-1:t[0]>e[0]?1:t[1]<e[1]?-1:t[1]>e[1]?1:0},t.RADIUS=6378137,t}();e.SpatialUtils=i},45:(t,e,i)=>{"use strict";i(908),i(649),i(497),i(433)},742:(t,e)=>{"use strict";e.byteLength=function(t){var e=h(t),i=e[0],r=e[1];return 3*(i+r)/4-r},e.toByteArray=function(t){var e,i,s=h(t),a=s[0],o=s[1],u=new n(function(t,e,i){return 3*(e+i)/4-i}(0,a,o)),l=0,c=o>0?a-4:a;for(i=0;i<c;i+=4)e=r[t.charCodeAt(i)]<<18|r[t.charCodeAt(i+1)]<<12|r[t.charCodeAt(i+2)]<<6|r[t.charCodeAt(i+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;return 2===o&&(e=r[t.charCodeAt(i)]<<2|r[t.charCodeAt(i+1)]>>4,u[l++]=255&e),1===o&&(e=r[t.charCodeAt(i)]<<10|r[t.charCodeAt(i+1)]<<4|r[t.charCodeAt(i+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e),u},e.fromByteArray=function(t){for(var e,r=t.length,n=r%3,s=[],a=16383,o=0,h=r-n;o<h;o+=a)s.push(u(t,o,o+a>h?h:o+a));return 1===n?(e=t[r-1],s.push(i[e>>2]+i[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],s.push(i[e>>10]+i[e>>4&63]+i[e<<2&63]+"=")),s.join("")};for(var i=[],r=[],n="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,o=s.length;a<o;++a)i[a]=s[a],r[s.charCodeAt(a)]=a;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=t.indexOf("=");return-1===i&&(i=e),[i,i===e?0:4-i%4]}function u(t,e,r){for(var n,s,a=[],o=e;o<r;o+=3)n=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),a.push(i[(s=n)>>18&63]+i[s>>12&63]+i[s>>6&63]+i[63&s]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},764:(t,e,i)=>{"use strict";const r=i(742),n=i(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=h,e.SlowBuffer=function(t){return+t!=t&&(t=0),h.alloc(+t)},e.INSPECT_MAX_BYTES=50;const a=2147483647;function o(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,h.prototype),e}function h(t,e,i){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return u(t,e,i)}function u(t,e,i){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!h.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const i=0|y(t,e);let r=o(i);const n=r.write(t,e);return n!==i&&(r=r.slice(0,n)),r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Y(t,Uint8Array)){const e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return f(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Y(t,ArrayBuffer)||t&&Y(t.buffer,ArrayBuffer))return p(t,e,i);if("undefined"!=typeof SharedArrayBuffer&&(Y(t,SharedArrayBuffer)||t&&Y(t.buffer,SharedArrayBuffer)))return p(t,e,i);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return h.from(r,e,i);const n=function(t){if(h.isBuffer(t)){const e=0|d(t.length),i=o(e);return 0===i.length||t.copy(i,0,0,e),i}return void 0!==t.length?"number"!=typeof t.length||$(t.length)?o(0):f(t):"Buffer"===t.type&&Array.isArray(t.data)?f(t.data):void 0}(t);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return h.from(t[Symbol.toPrimitive]("string"),e,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return l(t),o(t<0?0:0|d(t))}function f(t){const e=t.length<0?0:0|d(t.length),i=o(e);for(let r=0;r<e;r+=1)i[r]=255&t[r];return i}function p(t,e,i){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(i||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===e&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,e):new Uint8Array(t,e,i),Object.setPrototypeOf(r,h.prototype),r}function d(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function y(t,e){if(h.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Y(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const i=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===i)return 0;let n=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return Q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return V(t).length;default:if(n)return r?-1:Q(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,i){let r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,i);case"utf8":case"utf-8":return R(this,e,i);case"ascii":return O(this,e,i);case"latin1":case"binary":return T(this,e,i);case"base64":return E(this,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,i);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,i){const r=t[e];t[e]=t[i],t[i]=r}function M(t,e,i,r,n){if(0===t.length)return-1;if("string"==typeof i?(r=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),$(i=+i)&&(i=n?0:t.length-1),i<0&&(i=t.length+i),i>=t.length){if(n)return-1;i=t.length-1}else if(i<0){if(!n)return-1;i=0}if("string"==typeof e&&(e=h.from(e,r)),h.isBuffer(e))return 0===e.length?-1:b(t,e,i,r,n);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,e,i):Uint8Array.prototype.lastIndexOf.call(t,e,i):b(t,[e],i,r,n);throw new TypeError("val must be string, number or Buffer")}function b(t,e,i,r,n){let s,a=1,o=t.length,h=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,o/=2,h/=2,i/=2}function u(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(n){let r=-1;for(s=i;s<o;s++)if(u(t,s)===u(e,-1===r?0:s-r)){if(-1===r&&(r=s),s-r+1===h)return r*a}else-1!==r&&(s-=s-r),r=-1}else for(i+h>o&&(i=o-h),s=i;s>=0;s--){let i=!0;for(let r=0;r<h;r++)if(u(t,s+r)!==u(e,r)){i=!1;break}if(i)return s}return-1}function v(t,e,i,r){i=Number(i)||0;const n=t.length-i;r?(r=Number(r))>n&&(r=n):r=n;const s=e.length;let a;for(r>s/2&&(r=s/2),a=0;a<r;++a){const r=parseInt(e.substr(2*a,2),16);if($(r))return a;t[i+a]=r}return a}function _(t,e,i,r){return X(Q(e,t.length-i),t,i,r)}function w(t,e,i,r){return X(function(t){const e=[];for(let i=0;i<t.length;++i)e.push(255&t.charCodeAt(i));return e}(e),t,i,r)}function x(t,e,i,r){return X(V(e),t,i,r)}function S(t,e,i,r){return X(function(t,e){let i,r,n;const s=[];for(let a=0;a<t.length&&!((e-=2)<0);++a)i=t.charCodeAt(a),r=i>>8,n=i%256,s.push(n),s.push(r);return s}(e,t.length-i),t,i,r)}function E(t,e,i){return 0===e&&i===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,i))}function R(t,e,i){i=Math.min(t.length,i);const r=[];let n=e;for(;n<i;){const e=t[n];let s=null,a=e>239?4:e>223?3:e>191?2:1;if(n+a<=i){let i,r,o,h;switch(a){case 1:e<128&&(s=e);break;case 2:i=t[n+1],128==(192&i)&&(h=(31&e)<<6|63&i,h>127&&(s=h));break;case 3:i=t[n+1],r=t[n+2],128==(192&i)&&128==(192&r)&&(h=(15&e)<<12|(63&i)<<6|63&r,h>2047&&(h<55296||h>57343)&&(s=h));break;case 4:i=t[n+1],r=t[n+2],o=t[n+3],128==(192&i)&&128==(192&r)&&128==(192&o)&&(h=(15&e)<<18|(63&i)<<12|(63&r)<<6|63&o,h>65535&&h<1114112&&(s=h))}}null===s?(s=65533,a=1):s>65535&&(s-=65536,r.push(s>>>10&1023|55296),s=56320|1023&s),r.push(s),n+=a}return function(t){const e=t.length;if(e<=P)return String.fromCharCode.apply(String,t);let i="",r=0;for(;r<e;)i+=String.fromCharCode.apply(String,t.slice(r,r+=P));return i}(r)}e.kMaxLength=a,h.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),h.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(h.prototype,"parent",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.buffer}}),Object.defineProperty(h.prototype,"offset",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.byteOffset}}),h.poolSize=8192,h.from=function(t,e,i){return u(t,e,i)},Object.setPrototypeOf(h.prototype,Uint8Array.prototype),Object.setPrototypeOf(h,Uint8Array),h.alloc=function(t,e,i){return function(t,e,i){return l(t),t<=0?o(t):void 0!==e?"string"==typeof i?o(t).fill(e,i):o(t).fill(e):o(t)}(t,e,i)},h.allocUnsafe=function(t){return c(t)},h.allocUnsafeSlow=function(t){return c(t)},h.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==h.prototype},h.compare=function(t,e){if(Y(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),Y(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),!h.isBuffer(t)||!h.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let i=t.length,r=e.length;for(let n=0,s=Math.min(i,r);n<s;++n)if(t[n]!==e[n]){i=t[n],r=e[n];break}return i<r?-1:r<i?1:0},h.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return h.alloc(0);let i;if(void 0===e)for(e=0,i=0;i<t.length;++i)e+=t[i].length;const r=h.allocUnsafe(e);let n=0;for(i=0;i<t.length;++i){let e=t[i];if(Y(e,Uint8Array))n+e.length>r.length?(h.isBuffer(e)||(e=h.from(e)),e.copy(r,n)):Uint8Array.prototype.set.call(r,e,n);else{if(!h.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(r,n)}n+=e.length}return r},h.byteLength=y,h.prototype._isBuffer=!0,h.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)m(this,e,e+1);return this},h.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},h.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},h.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?R(this,0,t):g.apply(this,arguments)},h.prototype.toLocaleString=h.prototype.toString,h.prototype.equals=function(t){if(!h.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===h.compare(this,t)},h.prototype.inspect=function(){let t="";const i=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,i).replace(/(.{2})/g,"$1 ").trim(),this.length>i&&(t+=" ... "),"<Buffer "+t+">"},s&&(h.prototype[s]=h.prototype.inspect),h.prototype.compare=function(t,e,i,r,n){if(Y(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),!h.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===i&&(i=t?t.length:0),void 0===r&&(r=0),void 0===n&&(n=this.length),e<0||i>t.length||r<0||n>this.length)throw new RangeError("out of range index");if(r>=n&&e>=i)return 0;if(r>=n)return-1;if(e>=i)return 1;if(this===t)return 0;let s=(n>>>=0)-(r>>>=0),a=(i>>>=0)-(e>>>=0);const o=Math.min(s,a),u=this.slice(r,n),l=t.slice(e,i);for(let t=0;t<o;++t)if(u[t]!==l[t]){s=u[t],a=l[t];break}return s<a?-1:a<s?1:0},h.prototype.includes=function(t,e,i){return-1!==this.indexOf(t,e,i)},h.prototype.indexOf=function(t,e,i){return M(this,t,e,i,!0)},h.prototype.lastIndexOf=function(t,e,i){return M(this,t,e,i,!1)},h.prototype.write=function(t,e,i,r){if(void 0===e)r="utf8",i=this.length,e=0;else if(void 0===i&&"string"==typeof e)r=e,i=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(i)?(i>>>=0,void 0===r&&(r="utf8")):(r=i,i=void 0)}const n=this.length-e;if((void 0===i||i>n)&&(i=n),t.length>0&&(i<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let s=!1;for(;;)switch(r){case"hex":return v(this,t,e,i);case"utf8":case"utf-8":return _(this,t,e,i);case"ascii":case"latin1":case"binary":return w(this,t,e,i);case"base64":return x(this,t,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,i);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const P=4096;function O(t,e,i){let r="";i=Math.min(t.length,i);for(let n=e;n<i;++n)r+=String.fromCharCode(127&t[n]);return r}function T(t,e,i){let r="";i=Math.min(t.length,i);for(let n=e;n<i;++n)r+=String.fromCharCode(t[n]);return r}function C(t,e,i){const r=t.length;(!e||e<0)&&(e=0),(!i||i<0||i>r)&&(i=r);let n="";for(let r=e;r<i;++r)n+=J[t[r]];return n}function A(t,e,i){const r=t.slice(e,i);let n="";for(let t=0;t<r.length-1;t+=2)n+=String.fromCharCode(r[t]+256*r[t+1]);return n}function k(t,e,i){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>i)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,i,r,n,s){if(!h.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<s)throw new RangeError('"value" argument is out of bounds');if(i+r>t.length)throw new RangeError("Index out of range")}function N(t,e,i,r,n){F(e,r,n,t,i,7);let s=Number(e&BigInt(4294967295));t[i++]=s,s>>=8,t[i++]=s,s>>=8,t[i++]=s,s>>=8,t[i++]=s;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,i}function L(t,e,i,r,n){F(e,r,n,t,i,7);let s=Number(e&BigInt(4294967295));t[i+7]=s,s>>=8,t[i+6]=s,s>>=8,t[i+5]=s,s>>=8,t[i+4]=s;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i+3]=a,a>>=8,t[i+2]=a,a>>=8,t[i+1]=a,a>>=8,t[i]=a,i+8}function j(t,e,i,r,n,s){if(i+r>t.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function U(t,e,i,r,s){return e=+e,i>>>=0,s||j(t,0,i,4),n.write(t,e,i,r,23,4),i+4}function q(t,e,i,r,s){return e=+e,i>>>=0,s||j(t,0,i,8),n.write(t,e,i,r,52,8),i+8}h.prototype.slice=function(t,e){const i=this.length;(t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(e=void 0===e?i:~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),e<t&&(e=t);const r=this.subarray(t,e);return Object.setPrototypeOf(r,h.prototype),r},h.prototype.readUintLE=h.prototype.readUIntLE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=this[t],n=1,s=0;for(;++s<e&&(n*=256);)r+=this[t+s]*n;return r},h.prototype.readUintBE=h.prototype.readUIntBE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=this[t+--e],n=1;for(;e>0&&(n*=256);)r+=this[t+--e]*n;return r},h.prototype.readUint8=h.prototype.readUInt8=function(t,e){return t>>>=0,e||k(t,1,this.length),this[t]},h.prototype.readUint16LE=h.prototype.readUInt16LE=function(t,e){return t>>>=0,e||k(t,2,this.length),this[t]|this[t+1]<<8},h.prototype.readUint16BE=h.prototype.readUInt16BE=function(t,e){return t>>>=0,e||k(t,2,this.length),this[t]<<8|this[t+1]},h.prototype.readUint32LE=h.prototype.readUInt32LE=function(t,e){return t>>>=0,e||k(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},h.prototype.readUint32BE=h.prototype.readUInt32BE=function(t,e){return t>>>=0,e||k(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},h.prototype.readBigUInt64LE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,n=this[++t]+256*this[++t]+65536*this[++t]+i*2**24;return BigInt(r)+(BigInt(n)<<BigInt(32))})),h.prototype.readBigUInt64BE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=e*2**24+65536*this[++t]+256*this[++t]+this[++t],n=this[++t]*2**24+65536*this[++t]+256*this[++t]+i;return(BigInt(r)<<BigInt(32))+BigInt(n)})),h.prototype.readIntLE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=this[t],n=1,s=0;for(;++s<e&&(n*=256);)r+=this[t+s]*n;return n*=128,r>=n&&(r-=Math.pow(2,8*e)),r},h.prototype.readIntBE=function(t,e,i){t>>>=0,e>>>=0,i||k(t,e,this.length);let r=e,n=1,s=this[t+--r];for(;r>0&&(n*=256);)s+=this[t+--r]*n;return n*=128,s>=n&&(s-=Math.pow(2,8*e)),s},h.prototype.readInt8=function(t,e){return t>>>=0,e||k(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},h.prototype.readInt16LE=function(t,e){t>>>=0,e||k(t,2,this.length);const i=this[t]|this[t+1]<<8;return 32768&i?4294901760|i:i},h.prototype.readInt16BE=function(t,e){t>>>=0,e||k(t,2,this.length);const i=this[t+1]|this[t]<<8;return 32768&i?4294901760|i:i},h.prototype.readInt32LE=function(t,e){return t>>>=0,e||k(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},h.prototype.readInt32BE=function(t,e){return t>>>=0,e||k(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},h.prototype.readBigInt64LE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=this[t+4]+256*this[t+5]+65536*this[t+6]+(i<<24);return(BigInt(r)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),h.prototype.readBigInt64BE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(r)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+i)})),h.prototype.readFloatLE=function(t,e){return t>>>=0,e||k(t,4,this.length),n.read(this,t,!0,23,4)},h.prototype.readFloatBE=function(t,e){return t>>>=0,e||k(t,4,this.length),n.read(this,t,!1,23,4)},h.prototype.readDoubleLE=function(t,e){return t>>>=0,e||k(t,8,this.length),n.read(this,t,!0,52,8)},h.prototype.readDoubleBE=function(t,e){return t>>>=0,e||k(t,8,this.length),n.read(this,t,!1,52,8)},h.prototype.writeUintLE=h.prototype.writeUIntLE=function(t,e,i,r){t=+t,e>>>=0,i>>>=0,r||I(this,t,e,i,Math.pow(2,8*i)-1,0);let n=1,s=0;for(this[e]=255&t;++s<i&&(n*=256);)this[e+s]=t/n&255;return e+i},h.prototype.writeUintBE=h.prototype.writeUIntBE=function(t,e,i,r){t=+t,e>>>=0,i>>>=0,r||I(this,t,e,i,Math.pow(2,8*i)-1,0);let n=i-1,s=1;for(this[e+n]=255&t;--n>=0&&(s*=256);)this[e+n]=t/s&255;return e+i},h.prototype.writeUint8=h.prototype.writeUInt8=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,1,255,0),this[e]=255&t,e+1},h.prototype.writeUint16LE=h.prototype.writeUInt16LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeUint16BE=h.prototype.writeUInt16BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeUint32LE=h.prototype.writeUInt32LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},h.prototype.writeUint32BE=h.prototype.writeUInt32BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigUInt64LE=K((function(t,e=0){return N(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeBigUInt64BE=K((function(t,e=0){return L(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeIntLE=function(t,e,i,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*i-1);I(this,t,e,i,r-1,-r)}let n=0,s=1,a=0;for(this[e]=255&t;++n<i&&(s*=256);)t<0&&0===a&&0!==this[e+n-1]&&(a=1),this[e+n]=(t/s>>0)-a&255;return e+i},h.prototype.writeIntBE=function(t,e,i,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*i-1);I(this,t,e,i,r-1,-r)}let n=i-1,s=1,a=0;for(this[e+n]=255&t;--n>=0&&(s*=256);)t<0&&0===a&&0!==this[e+n+1]&&(a=1),this[e+n]=(t/s>>0)-a&255;return e+i},h.prototype.writeInt8=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},h.prototype.writeInt16LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeInt16BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeInt32LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},h.prototype.writeInt32BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigInt64LE=K((function(t,e=0){return N(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeBigInt64BE=K((function(t,e=0){return L(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeFloatLE=function(t,e,i){return U(this,t,e,!0,i)},h.prototype.writeFloatBE=function(t,e,i){return U(this,t,e,!1,i)},h.prototype.writeDoubleLE=function(t,e,i){return q(this,t,e,!0,i)},h.prototype.writeDoubleBE=function(t,e,i){return q(this,t,e,!1,i)},h.prototype.copy=function(t,e,i,r){if(!h.isBuffer(t))throw new TypeError("argument should be a Buffer");if(i||(i=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<i&&(r=i),r===i)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-i&&(r=t.length-e+i);const n=r-i;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,i,r):Uint8Array.prototype.set.call(t,this.subarray(i,r),e),n},h.prototype.fill=function(t,e,i,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,i=this.length):"string"==typeof i&&(r=i,i=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!h.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){const e=t.charCodeAt(0);("utf8"===r&&e<128||"latin1"===r)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<i)throw new RangeError("Out of range index");if(i<=e)return this;let n;if(e>>>=0,i=void 0===i?this.length:i>>>0,t||(t=0),"number"==typeof t)for(n=e;n<i;++n)this[n]=t;else{const s=h.isBuffer(t)?t:h.from(t,r),a=s.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(n=0;n<i-e;++n)this[n+e]=s[n%a]}return this};const B={};function G(t,e,i){B[t]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function D(t){let e="",i=t.length;const r="-"===t[0]?1:0;for(;i>=r+4;i-=3)e=`_${t.slice(i-3,i)}${e}`;return`${t.slice(0,i)}${e}`}function F(t,e,i,r,n,s){if(t>i||t<e){const r="bigint"==typeof e?"n":"";let n;throw n=s>3?0===e||e===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(s+1)}${r}`:`>= -(2${r} ** ${8*(s+1)-1}${r}) and < 2 ** ${8*(s+1)-1}${r}`:`>= ${e}${r} and <= ${i}${r}`,new B.ERR_OUT_OF_RANGE("value",n,t)}!function(t,e,i){W(e,"offset"),void 0!==t[e]&&void 0!==t[e+i]||z(e,t.length-(i+1))}(r,n,s)}function W(t,e){if("number"!=typeof t)throw new B.ERR_INVALID_ARG_TYPE(e,"number",t)}function z(t,e,i){if(Math.floor(t)!==t)throw W(t,i),new B.ERR_OUT_OF_RANGE(i||"offset","an integer",t);if(e<0)throw new B.ERR_BUFFER_OUT_OF_BOUNDS;throw new B.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${e}`,t)}G("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),G("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),G("ERR_OUT_OF_RANGE",(function(t,e,i){let r=`The value of "${t}" is out of range.`,n=i;return Number.isInteger(i)&&Math.abs(i)>2**32?n=D(String(i)):"bigint"==typeof i&&(n=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(n=D(n)),n+="n"),r+=` It must be ${e}. Received ${n}`,r}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function Q(t,e){let i;e=e||1/0;const r=t.length;let n=null;const s=[];for(let a=0;a<r;++a){if(i=t.charCodeAt(a),i>55295&&i<57344){if(!n){if(i>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&s.push(239,191,189);continue}n=i;continue}if(i<56320){(e-=3)>-1&&s.push(239,191,189),n=i;continue}i=65536+(n-55296<<10|i-56320)}else n&&(e-=3)>-1&&s.push(239,191,189);if(n=null,i<128){if((e-=1)<0)break;s.push(i)}else if(i<2048){if((e-=2)<0)break;s.push(i>>6|192,63&i|128)}else if(i<65536){if((e-=3)<0)break;s.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return s}function V(t){return r.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function X(t,e,i,r){let n;for(n=0;n<r&&!(n+i>=e.length||n>=t.length);++n)e[n+i]=t[n];return n}function Y(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function $(t){return t!=t}const J=function(){const t="0123456789abcdef",e=new Array(256);for(let i=0;i<16;++i){const r=16*i;for(let n=0;n<16;++n)e[r+n]=t[i]+t[n]}return e}();function K(t){return"undefined"==typeof BigInt?Z:t}function Z(){throw new Error("BigInt not supported")}},584:t=>{t.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},187:t=>{"use strict";var e,i="object"==typeof Reflect?Reflect:null,r=i&&"function"==typeof i.apply?i.apply:function(t,e,i){return Function.prototype.apply.call(t,e,i)};e=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var n=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,t.exports.once=function(t,e){return new Promise((function(i,r){function n(){void 0!==s&&t.removeListener("error",s),i([].slice.call(arguments))}var s;"error"!==e&&(s=function(i){t.removeListener(e,n),r(i)},t.once("error",s)),t.once(e,n)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var a=10;function o(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function h(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function u(t,e,i,r){var n,s,a,u;if(o(i),void 0===(s=t._events)?(s=t._events=Object.create(null),t._eventsCount=0):(void 0!==s.newListener&&(t.emit("newListener",e,i.listener?i.listener:i),s=t._events),a=s[e]),void 0===a)a=s[e]=i,++t._eventsCount;else if("function"==typeof a?a=s[e]=r?[i,a]:[a,i]:r?a.unshift(i):a.push(i),(n=h(t))>0&&a.length>n&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=a.length,u=l,console&&console.warn&&console.warn(u)}return t}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(t,e,i){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:i},n=l.bind(r);return n.listener=i,r.wrapFn=n,n}function f(t,e,i){var r=t._events;if(void 0===r)return[];var n=r[e];return void 0===n?[]:"function"==typeof n?i?[n.listener||n]:[n]:i?function(t){for(var e=new Array(t.length),i=0;i<e.length;++i)e[i]=t[i].listener||t[i];return e}(n):d(n,n.length)}function p(t){var e=this._events;if(void 0!==e){var i=e[t];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function d(t,e){for(var i=new Array(e),r=0;r<e;++r)i[r]=t[r];return i}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");a=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return h(this)},s.prototype.emit=function(t){for(var e=[],i=1;i<arguments.length;i++)e.push(arguments[i]);var n="error"===t,s=this._events;if(void 0!==s)n=n&&void 0===s.error;else if(!n)return!1;if(n){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var h=s[t];if(void 0===h)return!1;if("function"==typeof h)r(h,this,e);else{var u=h.length,l=d(h,u);for(i=0;i<u;++i)r(l[i],this,e)}return!0},s.prototype.addListener=function(t,e){return u(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return u(this,t,e,!0)},s.prototype.once=function(t,e){return o(e),this.on(t,c(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return o(e),this.prependListener(t,c(this,t,e)),this},s.prototype.removeListener=function(t,e){var i,r,n,s,a;if(o(e),void 0===(r=this._events))return this;if(void 0===(i=r[t]))return this;if(i===e||i.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,i.listener||e));else if("function"!=typeof i){for(n=-1,s=i.length-1;s>=0;s--)if(i[s]===e||i[s].listener===e){a=i[s].listener,n=s;break}if(n<0)return this;0===n?i.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(i,n),1===i.length&&(r[t]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[t]),this;if(0===arguments.length){var n,s=Object.keys(i);for(r=0;r<s.length;++r)"removeListener"!==(n=s[r])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=i[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return f(this,t,!0)},s.prototype.rawListeners=function(t){return f(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},267:(t,e,i)=>{var r=i(501),n=i(575),s=t.exports;for(var a in r)r.hasOwnProperty(a)&&(s[a]=r[a]);function o(t){if("string"==typeof t&&(t=n.parse(t)),t.protocol||(t.protocol="https:"),"https:"!==t.protocol)throw new Error('Protocol "'+t.protocol+'" not supported. Expected "https:"');return t}s.request=function(t,e){return t=o(t),r.request.call(this,t,e)},s.get=function(t,e){return t=o(t),r.get.call(this,t,e)}},645:(t,e)=>{e.read=function(t,e,i,r,n){var s,a,o=8*n-r-1,h=(1<<o)-1,u=h>>1,l=-7,c=i?n-1:0,f=i?-1:1,p=t[e+c];for(c+=f,s=p&(1<<-l)-1,p>>=-l,l+=o;l>0;s=256*s+t[e+c],c+=f,l-=8);for(a=s&(1<<-l)-1,s>>=-l,l+=r;l>0;a=256*a+t[e+c],c+=f,l-=8);if(0===s)s=1-u;else{if(s===h)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,r),s-=u}return(p?-1:1)*a*Math.pow(2,s-r)},e.write=function(t,e,i,r,n,s){var a,o,h,u=8*s-n-1,l=(1<<u)-1,c=l>>1,f=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:s-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(h=Math.pow(2,-a))<1&&(a--,h*=2),(e+=a+c>=1?f/h:f*Math.pow(2,1-c))*h>=2&&(a++,h/=2),a+c>=l?(o=0,a=l):a+c>=1?(o=(e*h-1)*Math.pow(2,n),a+=c):(o=e*Math.pow(2,c-1)*Math.pow(2,n),a=0));n>=8;t[i+p]=255&o,p+=d,o/=256,n-=8);for(a=a<<n|o,u+=n;u>0;t[i+p]=255&a,p+=d,a/=256,u-=8);t[i+p-d]|=128*y}},717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}}},801:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>Ee});var r=484813681109536e-20,n=Math.PI/2,s=1e-10,a=.017453292519943295,o=57.29577951308232,h=Math.PI/4,u=2*Math.PI,l=3.14159265359,c={greenwich:0,lisbon:-9.131906111111,paris:2.337229166667,bogota:-74.080916666667,madrid:-3.687938888889,rome:12.452333333333,bern:7.439583333333,jakarta:106.807719444444,ferro:-17.666666666667,brussels:4.367975,stockholm:18.058277777778,athens:23.7163375,oslo:10.722916666667};const f={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}};var p=/[\s_\-\/\(\)]/g;function d(t,e){if(t[e])return t[e];for(var i,r=Object.keys(t),n=e.toLowerCase().replace(p,""),s=-1;++s<r.length;)if((i=r[s]).toLowerCase().replace(p,"")===n)return t[i]}function y(t){var e,i,r,n={},s=t.split("+").map((function(t){return t.trim()})).filter((function(t){return t})).reduce((function(t,e){var i=e.split("=");return i.push(!0),t[i[0].toLowerCase()]=i[1],t}),{}),o={proj:"projName",datum:"datumCode",rf:function(t){n.rf=parseFloat(t)},lat_0:function(t){n.lat0=t*a},lat_1:function(t){n.lat1=t*a},lat_2:function(t){n.lat2=t*a},lat_ts:function(t){n.lat_ts=t*a},lon_0:function(t){n.long0=t*a},lon_1:function(t){n.long1=t*a},lon_2:function(t){n.long2=t*a},alpha:function(t){n.alpha=parseFloat(t)*a},lonc:function(t){n.longc=t*a},x_0:function(t){n.x0=parseFloat(t)},y_0:function(t){n.y0=parseFloat(t)},k_0:function(t){n.k0=parseFloat(t)},k:function(t){n.k0=parseFloat(t)},a:function(t){n.a=parseFloat(t)},b:function(t){n.b=parseFloat(t)},r_a:function(){n.R_A=!0},zone:function(t){n.zone=parseInt(t,10)},south:function(){n.utmSouth=!0},towgs84:function(t){n.datum_params=t.split(",").map((function(t){return parseFloat(t)}))},to_meter:function(t){n.to_meter=parseFloat(t)},units:function(t){n.units=t;var e=d(f,t);e&&(n.to_meter=e.to_meter)},from_greenwich:function(t){n.from_greenwich=t*a},pm:function(t){var e=d(c,t);n.from_greenwich=(e||parseFloat(t))*a},nadgrids:function(t){"@null"===t?n.datumCode="none":n.nadgrids=t},axis:function(t){var e="ewnsud";3===t.length&&-1!==e.indexOf(t.substr(0,1))&&-1!==e.indexOf(t.substr(1,1))&&-1!==e.indexOf(t.substr(2,1))&&(n.axis=t)}};for(e in s)i=s[e],e in o?"function"==typeof(r=o[e])?r(i):n[r]=i:n[e]=i;return"string"==typeof n.datumCode&&"WGS84"!==n.datumCode&&(n.datumCode=n.datumCode.toLowerCase()),n}var g=/\s/,m=/[A-Za-z]/,M=/[A-Za-z84]/,b=/[,\]]/,v=/[\d\.E\-\+]/;function _(t){if("string"!=typeof t)throw new Error("not a string");this.text=t.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=1}function w(t,e,i){Array.isArray(e)&&(i.unshift(e),e=null);var r=e?{}:t,n=i.reduce((function(t,e){return x(e,t),t}),r);e&&(t[e]=n)}function x(t,e){if(Array.isArray(t)){var i=t.shift();if("PARAMETER"===i&&(i=t.shift()),1===t.length)return Array.isArray(t[0])?(e[i]={},void x(t[0],e[i])):void(e[i]=t[0]);if(t.length)if("TOWGS84"!==i){if("AXIS"===i)return i in e||(e[i]=[]),void e[i].push(t);var r;switch(Array.isArray(i)||(e[i]={}),i){case"UNIT":case"PRIMEM":case"VERT_DATUM":return e[i]={name:t[0].toLowerCase(),convert:t[1]},void(3===t.length&&x(t[2],e[i]));case"SPHEROID":case"ELLIPSOID":return e[i]={name:t[0],a:t[1],rf:t[2]},void(4===t.length&&x(t[3],e[i]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return t[0]=["name",t[0]],void w(e,i,t);default:for(r=-1;++r<t.length;)if(!Array.isArray(t[r]))return x(t,e[i]);return w(e,i,t)}}else e[i]=t;else e[i]=!0}else e[t]=!0}function S(t){return.017453292519943295*t}function E(t){var e=new _(t).output(),i=e.shift(),r=e.shift();e.unshift(["name",r]),e.unshift(["type",i]);var n={};return x(e,n),function(t){if("GEOGCS"===t.type?t.projName="longlat":"LOCAL_CS"===t.type?(t.projName="identity",t.local=!0):"object"==typeof t.PROJECTION?t.projName=Object.keys(t.PROJECTION)[0]:t.projName=t.PROJECTION,t.AXIS){for(var e="",i=0,r=t.AXIS.length;i<r;++i){var n=t.AXIS[i][0].toLowerCase();-1!==n.indexOf("north")?e+="n":-1!==n.indexOf("south")?e+="s":-1!==n.indexOf("east")?e+="e":-1!==n.indexOf("west")&&(e+="w")}2===e.length&&(e+="u"),3===e.length&&(t.axis=e)}t.UNIT&&(t.units=t.UNIT.name.toLowerCase(),"metre"===t.units&&(t.units="meter"),t.UNIT.convert&&("GEOGCS"===t.type?t.DATUM&&t.DATUM.SPHEROID&&(t.to_meter=t.UNIT.convert*t.DATUM.SPHEROID.a):t.to_meter=t.UNIT.convert));var s=t.GEOGCS;function a(e){return e*(t.to_meter||1)}"GEOGCS"===t.type&&(s=t),s&&(s.DATUM?t.datumCode=s.DATUM.name.toLowerCase():t.datumCode=s.name.toLowerCase(),"d_"===t.datumCode.slice(0,2)&&(t.datumCode=t.datumCode.slice(2)),"new_zealand_geodetic_datum_1949"!==t.datumCode&&"new_zealand_1949"!==t.datumCode||(t.datumCode="nzgd49"),"wgs_1984"!==t.datumCode&&"world_geodetic_system_1984"!==t.datumCode||("Mercator_Auxiliary_Sphere"===t.PROJECTION&&(t.sphere=!0),t.datumCode="wgs84"),"_ferro"===t.datumCode.slice(-6)&&(t.datumCode=t.datumCode.slice(0,-6)),"_jakarta"===t.datumCode.slice(-8)&&(t.datumCode=t.datumCode.slice(0,-8)),~t.datumCode.indexOf("belge")&&(t.datumCode="rnb72"),s.DATUM&&s.DATUM.SPHEROID&&(t.ellps=s.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk"),"international"===t.ellps.toLowerCase().slice(0,13)&&(t.ellps="intl"),t.a=s.DATUM.SPHEROID.a,t.rf=parseFloat(s.DATUM.SPHEROID.rf,10)),s.DATUM&&s.DATUM.TOWGS84&&(t.datum_params=s.DATUM.TOWGS84),~t.datumCode.indexOf("osgb_1936")&&(t.datumCode="osgb36"),~t.datumCode.indexOf("osni_1952")&&(t.datumCode="osni52"),(~t.datumCode.indexOf("tm65")||~t.datumCode.indexOf("geodetic_datum_of_1965"))&&(t.datumCode="ire65"),"ch1903+"===t.datumCode&&(t.datumCode="ch1903"),~t.datumCode.indexOf("israel")&&(t.datumCode="isr93")),t.b&&!isFinite(t.b)&&(t.b=t.a),[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",S],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",S],["x0","false_easting",a],["y0","false_northing",a],["long0","central_meridian",S],["lat0","latitude_of_origin",S],["lat0","standard_parallel_1",S],["lat1","standard_parallel_1",S],["lat2","standard_parallel_2",S],["azimuth","Azimuth"],["alpha","azimuth",S],["srsCode","name"]].forEach((function(e){return function(t,e){var i=e[0],r=e[1];!(i in t)&&r in t&&(t[i]=t[r],3===e.length&&(t[i]=e[2](t[i])))}(t,e)})),t.long0||!t.longc||"Albers_Conic_Equal_Area"!==t.projName&&"Lambert_Azimuthal_Equal_Area"!==t.projName||(t.long0=t.longc),t.lat_ts||!t.lat1||"Stereographic_South_Pole"!==t.projName&&"Polar Stereographic (variant B)"!==t.projName||(t.lat0=S(t.lat1>0?90:-90),t.lat_ts=t.lat1)}(n),n}function R(t){var e=this;if(2===arguments.length){var i=arguments[1];"string"==typeof i?"+"===i.charAt(0)?R[t]=y(arguments[1]):R[t]=E(arguments[1]):R[t]=i}else if(1===arguments.length){if(Array.isArray(t))return t.map((function(t){Array.isArray(t)?R.apply(e,t):R(t)}));if("string"==typeof t){if(t in R)return R[t]}else"EPSG"in t?R["EPSG:"+t.EPSG]=t:"ESRI"in t?R["ESRI:"+t.ESRI]=t:"IAU2000"in t?R["IAU2000:"+t.IAU2000]=t:console.log(t);return}}_.prototype.readCharicter=function(){var t=this.text[this.place++];if(4!==this.state)for(;g.test(t);){if(this.place>=this.text.length)return;t=this.text[this.place++]}switch(this.state){case 1:return this.neutral(t);case 2:return this.keyword(t);case 4:return this.quoted(t);case 5:return this.afterquote(t);case 3:return this.number(t);case-1:return}},_.prototype.afterquote=function(t){if('"'===t)return this.word+='"',void(this.state=4);if(b.test(t))return this.word=this.word.trim(),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in afterquote yet, index '+this.place)},_.prototype.afterItem=function(t){return","===t?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=1)):"]"===t?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=1,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},_.prototype.number=function(t){if(!v.test(t)){if(b.test(t))return this.word=parseFloat(this.word),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in number yet, index '+this.place)}this.word+=t},_.prototype.quoted=function(t){'"'!==t?this.word+=t:this.state=5},_.prototype.keyword=function(t){if(M.test(t))this.word+=t;else{if("["===t){var e=[];return e.push(this.word),this.level++,null===this.root?this.root=e:this.currentObject.push(e),this.stack.push(this.currentObject),this.currentObject=e,void(this.state=1)}if(!b.test(t))throw new Error("havn't handled \""+t+'" in keyword yet, index '+this.place);this.afterItem(t)}},_.prototype.neutral=function(t){if(m.test(t))return this.word=t,void(this.state=2);if('"'===t)return this.word="",void(this.state=4);if(v.test(t))return this.word=t,void(this.state=3);if(!b.test(t))throw new Error("havn't handled \""+t+'" in neutral yet, index '+this.place);this.afterItem(t)},_.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(-1===this.state)return this.root;throw new Error('unable to parse string "'+this.text+'". State is '+this.state)},function(t){t("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"),t("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"),t("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),t.WGS84=t["EPSG:4326"],t["EPSG:3785"]=t["EPSG:3857"],t.GOOGLE=t["EPSG:3857"],t["EPSG:900913"]=t["EPSG:3857"],t["EPSG:102113"]=t["EPSG:3857"]}(R);const P=R;var O=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"],T=["3857","900913","3785","102113"];function C(t,e){var i,r;if(t=t||{},!e)return t;for(r in e)void 0!==(i=e[r])&&(t[r]=i);return t}function A(t,e,i){var r=t*e;return i/Math.sqrt(1-r*r)}function k(t){return t<0?-1:1}function I(t){return Math.abs(t)<=l?t:t-k(t)*u}function N(t,e,i){var r=t*i,s=.5*t;return r=Math.pow((1-r)/(1+r),s),Math.tan(.5*(n-e))/r}function L(t,e){for(var i,r,s=.5*t,a=n-2*Math.atan(e),o=0;o<=15;o++)if(i=t*Math.sin(a),a+=r=n-2*Math.atan(e*Math.pow((1-i)/(1+i),s))-a,Math.abs(r)<=1e-10)return a;return-9999}function j(t){return t}var U=[{init:function(){var t=this.b/this.a;this.es=1-t*t,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=Math.sqrt(this.es),this.lat_ts?this.sphere?this.k0=Math.cos(this.lat_ts):this.k0=A(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)):this.k0||(this.k?this.k0=this.k:this.k0=1)},forward:function(t){var e,i,r=t.x,a=t.y;if(a*o>90&&a*o<-90&&r*o>180&&r*o<-180)return null;if(Math.abs(Math.abs(a)-n)<=s)return null;if(this.sphere)e=this.x0+this.a*this.k0*I(r-this.long0),i=this.y0+this.a*this.k0*Math.log(Math.tan(h+.5*a));else{var u=Math.sin(a),l=N(this.e,a,u);e=this.x0+this.a*this.k0*I(r-this.long0),i=this.y0-this.a*this.k0*Math.log(l)}return t.x=e,t.y=i,t},inverse:function(t){var e,i,r=t.x-this.x0,s=t.y-this.y0;if(this.sphere)i=n-2*Math.atan(Math.exp(-s/(this.a*this.k0)));else{var a=Math.exp(-s/(this.a*this.k0));if(-9999===(i=L(this.e,a)))return null}return e=I(this.long0+r/(this.a*this.k0)),t.x=e,t.y=i,t},names:["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{init:function(){},forward:j,inverse:j,names:["longlat","identity"]}],q={},B=[];function G(t,e){var i=B.length;return t.names?(B[i]=t,t.names.forEach((function(t){q[t.toLowerCase()]=i})),this):(console.log(e),!0)}const D={start:function(){U.forEach(G)},add:G,get:function(t){if(!t)return!1;var e=t.toLowerCase();return void 0!==q[e]&&B[q[e]]?B[q[e]]:void 0}};var F={MERIT:{a:6378137,rf:298.257,ellipseName:"MERIT 1983"},SGS85:{a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"},GRS80:{a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"},IAU76:{a:6378140,rf:298.257,ellipseName:"IAU 1976"},airy:{a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"},APL4:{a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"},NWL9D:{a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"},mod_airy:{a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"},andrae:{a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"},aust_SA:{a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"},GRS67:{a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"},bessel:{a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"},bess_nam:{a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"},clrk66:{a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"},clrk80:{a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."},clrk58:{a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"},CPM:{a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"},delmbr:{a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"},engelis:{a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"},evrst30:{a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"},evrst48:{a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"},evrst56:{a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"},evrst69:{a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"},evrstSS:{a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"},fschr60:{a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"},fschr60m:{a:6378155,rf:298.3,ellipseName:"Fischer 1960"},fschr68:{a:6378150,rf:298.3,ellipseName:"Fischer 1968"},helmert:{a:6378200,rf:298.3,ellipseName:"Helmert 1906"},hough:{a:6378270,rf:297,ellipseName:"Hough"},intl:{a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"},kaula:{a:6378163,rf:298.24,ellipseName:"Kaula 1961"},lerch:{a:6378139,rf:298.257,ellipseName:"Lerch 1979"},mprts:{a:6397300,rf:191,ellipseName:"Maupertius 1738"},new_intl:{a:6378157.5,b:6356772.2,ellipseName:"New International 1967"},plessis:{a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"},krass:{a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"},SEasia:{a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"},walbeck:{a:6376896,b:6355834.8467,ellipseName:"Walbeck"},WGS60:{a:6378165,rf:298.3,ellipseName:"WGS 60"},WGS66:{a:6378145,rf:298.25,ellipseName:"WGS 66"},WGS7:{a:6378135,rf:298.26,ellipseName:"WGS 72"}},W=F.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};F.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};var z={wgs84:{towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"},ch1903:{towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"},ggrs87:{towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"},nad83:{towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"},nad27:{nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"},potsdam:{towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"},carthage:{towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"},hermannskogel:{towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"},osni52:{towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"},ire65:{towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"},rassadiran:{towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"},nzgd49:{towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"},osgb36:{towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"},s_jtsk:{towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"},beduaram:{towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"},gunung_segara:{towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"},rnb72:{towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"}};function H(t,e){if(!(this instanceof H))return new H(t);e=e||function(t){if(t)throw t};var i=function(t){if(!function(t){return"string"==typeof t}(t))return t;if(function(t){return t in P}(t))return P[t];if(function(t){return O.some((function(e){return t.indexOf(e)>-1}))}(t)){var e=E(t);if(function(t){var e=d(t,"authority");if(e){var i=d(e,"epsg");return i&&T.indexOf(i)>-1}}(e))return P["EPSG:3857"];var i=function(t){var e=d(t,"extension");if(e)return d(e,"proj4")}(e);return i?y(i):e}return function(t){return"+"===t[0]}(t)?y(t):void 0}(t);if("object"==typeof i){var n=H.projections.get(i.projName);if(n){if(i.datumCode&&"none"!==i.datumCode){var a=d(z,i.datumCode);a&&(i.datum_params=a.towgs84?a.towgs84.split(","):null,i.ellps=a.ellipse,i.datumName=a.datumName?a.datumName:i.datumCode)}i.k0=i.k0||1,i.axis=i.axis||"enu",i.ellps=i.ellps||"wgs84";var o,h,u,l,c,f,p=function(t,e,i,r,n){if(!t){var a=d(F,r);a||(a=W),t=a.a,e=a.b,i=a.rf}return i&&!e&&(e=(1-1/i)*t),(0===i||Math.abs(t-e)<s)&&(n=!0,e=t),{a:t,b:e,rf:i,sphere:n}}(i.a,i.b,i.rf,i.ellps,i.sphere),g=(o=p.a,h=p.b,p.rf,c=((u=o*o)-(l=h*h))/u,f=0,i.R_A?(u=(o*=1-c*(.16666666666666666+c*(.04722222222222222+.022156084656084655*c)))*o,c=0):f=Math.sqrt(c),{es:c,e:f,ep2:(u-l)/l}),m=i.datum||function(t,e,i,n,s,a){var o={};return o.datum_type=void 0===t||"none"===t?5:4,e&&(o.datum_params=e.map(parseFloat),0===o.datum_params[0]&&0===o.datum_params[1]&&0===o.datum_params[2]||(o.datum_type=1),o.datum_params.length>3&&(0===o.datum_params[3]&&0===o.datum_params[4]&&0===o.datum_params[5]&&0===o.datum_params[6]||(o.datum_type=2,o.datum_params[3]*=r,o.datum_params[4]*=r,o.datum_params[5]*=r,o.datum_params[6]=o.datum_params[6]/1e6+1))),o.a=i,o.b=n,o.es=s,o.ep2=a,o}(i.datumCode,i.datum_params,p.a,p.b,g.es,g.ep2);C(this,i),C(this,n),this.a=p.a,this.b=p.b,this.rf=p.rf,this.sphere=p.sphere,this.es=g.es,this.e=g.e,this.ep2=g.ep2,this.datum=m,this.init(),e(null,this)}else e(t)}else e(t)}H.projections=D,H.projections.start();const Q=H;function V(t,e,i){var r,s,a,o,h=t.x,u=t.y,l=t.z?t.z:0;if(u<-n&&u>-1.001*n)u=-n;else if(u>n&&u<1.001*n)u=n;else{if(u<-n)return{x:-1/0,y:-1/0,z:t.z};if(u>n)return{x:1/0,y:1/0,z:t.z}}return h>Math.PI&&(h-=2*Math.PI),s=Math.sin(u),o=Math.cos(u),a=s*s,{x:((r=i/Math.sqrt(1-e*a))+l)*o*Math.cos(h),y:(r+l)*o*Math.sin(h),z:(r*(1-e)+l)*s}}function X(t,e,i,r){var n,s,a,o,h,u,l,c,f,p,d,y,g,m,M,b=t.x,v=t.y,_=t.z?t.z:0;if(n=Math.sqrt(b*b+v*v),s=Math.sqrt(b*b+v*v+_*_),n/i<1e-12){if(m=0,s/i<1e-12)return M=-r,{x:t.x,y:t.y,z:t.z}}else m=Math.atan2(v,b);a=_/s,c=(o=n/s)*(1-e)*(h=1/Math.sqrt(1-e*(2-e)*o*o)),f=a*h,g=0;do{g++,u=e*(l=i/Math.sqrt(1-e*f*f))/(l+(M=n*c+_*f-l*(1-e*f*f))),y=(d=a*(h=1/Math.sqrt(1-u*(2-u)*o*o)))*c-(p=o*(1-u)*h)*f,c=p,f=d}while(y*y>1e-24&&g<30);return{x:m,y:Math.atan(d/Math.abs(p)),z:M}}function Y(t){return 1===t||2===t}function $(t,e,i){var r,n,s,a=i.x,o=i.y,h=i.z||0,u={};for(s=0;s<3;s++)if(!e||2!==s||void 0!==i.z)switch(0===s?(r=a,n=-1!=="ew".indexOf(t.axis[s])?"x":"y"):1===s?(r=o,n=-1!=="ns".indexOf(t.axis[s])?"y":"x"):(r=h,n="z"),t.axis[s]){case"e":u[n]=r;break;case"w":u[n]=-r;break;case"n":u[n]=r;break;case"s":u[n]=-r;break;case"u":void 0!==i[n]&&(u.z=r);break;case"d":void 0!==i[n]&&(u.z=-r);break;default:return null}return u}function J(t){var e={x:t[0],y:t[1]};return t.length>2&&(e.z=t[2]),t.length>3&&(e.m=t[3]),e}function K(t){if("function"==typeof Number.isFinite){if(Number.isFinite(t))return;throw new TypeError("coordinates must be finite numbers")}if("number"!=typeof t||t!=t||!isFinite(t))throw new TypeError("coordinates must be finite numbers")}function Z(t,e,i){var r;if(Array.isArray(i)&&(i=J(i)),function(t){K(t.x),K(t.y)}(i),t.datum&&e.datum&&function(t,e){return(1===t.datum.datum_type||2===t.datum.datum_type)&&"WGS84"!==e.datumCode||(1===e.datum.datum_type||2===e.datum.datum_type)&&"WGS84"!==t.datumCode}(t,e)&&(i=Z(t,r=new Q("WGS84"),i),t=r),"enu"!==t.axis&&(i=$(t,!1,i)),"longlat"===t.projName)i={x:i.x*a,y:i.y*a,z:i.z||0};else if(t.to_meter&&(i={x:i.x*t.to_meter,y:i.y*t.to_meter,z:i.z||0}),!(i=t.inverse(i)))return;return t.from_greenwich&&(i.x+=t.from_greenwich),i=function(t,e,i){return function(t,e){return t.datum_type===e.datum_type&&!(t.a!==e.a||Math.abs(t.es-e.es)>5e-11)&&(1===t.datum_type?t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]:2!==t.datum_type||t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]&&t.datum_params[3]===e.datum_params[3]&&t.datum_params[4]===e.datum_params[4]&&t.datum_params[5]===e.datum_params[5]&&t.datum_params[6]===e.datum_params[6])}(t,e)||5===t.datum_type||5===e.datum_type?i:t.es!==e.es||t.a!==e.a||Y(t.datum_type)||Y(e.datum_type)?(i=V(i,t.es,t.a),Y(t.datum_type)&&(i=function(t,e,i){if(1===e)return{x:t.x+i[0],y:t.y+i[1],z:t.z+i[2]};if(2===e){var r=i[0],n=i[1],s=i[2],a=i[3],o=i[4],h=i[5],u=i[6];return{x:u*(t.x-h*t.y+o*t.z)+r,y:u*(h*t.x+t.y-a*t.z)+n,z:u*(-o*t.x+a*t.y+t.z)+s}}}(i,t.datum_type,t.datum_params)),Y(e.datum_type)&&(i=function(t,e,i){if(1===e)return{x:t.x-i[0],y:t.y-i[1],z:t.z-i[2]};if(2===e){var r=i[0],n=i[1],s=i[2],a=i[3],o=i[4],h=i[5],u=i[6],l=(t.x-r)/u,c=(t.y-n)/u,f=(t.z-s)/u;return{x:l+h*c-o*f,y:-h*l+c+a*f,z:o*l-a*c+f}}}(i,e.datum_type,e.datum_params)),X(i,e.es,e.a,e.b)):i}(t.datum,e.datum,i),e.from_greenwich&&(i={x:i.x-e.from_greenwich,y:i.y,z:i.z||0}),"longlat"===e.projName?i={x:i.x*o,y:i.y*o,z:i.z||0}:(i=e.forward(i),e.to_meter&&(i={x:i.x/e.to_meter,y:i.y/e.to_meter,z:i.z||0})),"enu"!==e.axis?$(e,!0,i):i}var tt=Q("WGS84");function et(t,e,i){var r,n,s;return Array.isArray(i)?(r=Z(t,e,i)||{x:NaN,y:NaN},i.length>2?void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name?"number"==typeof r.z?[r.x,r.y,r.z].concat(i.splice(3)):[r.x,r.y,i[2]].concat(i.splice(3)):[r.x,r.y].concat(i.splice(2)):[r.x,r.y]):(n=Z(t,e,i),2===(s=Object.keys(i)).length||s.forEach((function(r){if(void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name){if("x"===r||"y"===r||"z"===r)return}else if("x"===r||"y"===r)return;n[r]=i[r]})),n)}function it(t){return t instanceof Q?t:t.oProj?t.oProj:Q(t)}const rt=function(t,e,i){t=it(t);var r,n=!1;return void 0===e?(e=t,t=tt,n=!0):(void 0!==e.x||Array.isArray(e))&&(i=e,e=t,t=tt,n=!0),e=it(e),i?et(t,e,i):(r={forward:function(i){return et(t,e,i)},inverse:function(i){return et(e,t,i)}},n&&(r.oProj=e),r)};var nt="AJSAJS",st="AFAFAF",at=65,ot=73,ht=79;const ut={forward:lt,inverse:function(t){var e=dt(gt(t.toUpperCase()));return e.lat&&e.lon?[e.lon,e.lat,e.lon,e.lat]:[e.left,e.bottom,e.right,e.top]},toPoint:ct};function lt(t,e){return e=e||5,function(t,e){var i,r,n,s,a,o,h,u,l,c,f,p="00000"+t.easting,d="00000"+t.northing;return t.zoneNumber+t.zoneLetter+(l=t.easting,c=t.northing,f=yt(t.zoneNumber),i=Math.floor(l/1e5),r=Math.floor(c/1e5)%20,s=nt.charCodeAt(n=f-1),a=st.charCodeAt(n),u=!1,(o=s+i-1)>90&&(o=o-90+at-1,u=!0),(o===ot||s<ot&&o>ot||(o>ot||s<ot)&&u)&&o++,(o===ht||s<ht&&o>ht||(o>ht||s<ht)&&u)&&++o===ot&&o++,o>90&&(o=o-90+at-1),(h=a+r)>86?(h=h-86+at-1,u=!0):u=!1,(h===ot||a<ot&&h>ot||(h>ot||a<ot)&&u)&&h++,(h===ht||a<ht&&h>ht||(h>ht||a<ht)&&u)&&++h===ot&&h++,h>86&&(h=h-86+at-1),String.fromCharCode(o)+String.fromCharCode(h))+p.substr(p.length-5,e)+d.substr(d.length-5,e)}(function(t){var e,i,r,n,s,a,o,h=t.lat,u=t.lon,l=6378137,c=.00669438,f=.9996,p=ft(h),d=ft(u);o=Math.floor((u+180)/6)+1,180===u&&(o=60),h>=56&&h<64&&u>=3&&u<12&&(o=32),h>=72&&h<84&&(u>=0&&u<9?o=31:u>=9&&u<21?o=33:u>=21&&u<33?o=35:u>=33&&u<42&&(o=37)),a=ft(6*(o-1)-180+3),e=.006739496752268451,i=l/Math.sqrt(1-c*Math.sin(p)*Math.sin(p)),r=Math.tan(p)*Math.tan(p),n=e*Math.cos(p)*Math.cos(p);var y,g,m=f*i*((s=Math.cos(p)*(d-a))+(1-r+n)*s*s*s/6+(5-18*r+r*r+72*n-58*e)*s*s*s*s*s/120)+5e5,M=f*(l*(.9983242984503243*p-.002514607064228144*Math.sin(2*p)+2639046602129982e-21*Math.sin(4*p)-3.418046101696858e-9*Math.sin(6*p))+i*Math.tan(p)*(s*s/2+(5-r+9*n+4*n*n)*s*s*s*s/24+(61-58*r+r*r+600*n-2.2240339282485886)*s*s*s*s*s*s/720));return h<0&&(M+=1e7),{northing:Math.round(M),easting:Math.round(m),zoneNumber:o,zoneLetter:(y=h,g="Z",84>=y&&y>=72?g="X":72>y&&y>=64?g="W":64>y&&y>=56?g="V":56>y&&y>=48?g="U":48>y&&y>=40?g="T":40>y&&y>=32?g="S":32>y&&y>=24?g="R":24>y&&y>=16?g="Q":16>y&&y>=8?g="P":8>y&&y>=0?g="N":0>y&&y>=-8?g="M":-8>y&&y>=-16?g="L":-16>y&&y>=-24?g="K":-24>y&&y>=-32?g="J":-32>y&&y>=-40?g="H":-40>y&&y>=-48?g="G":-48>y&&y>=-56?g="F":-56>y&&y>=-64?g="E":-64>y&&y>=-72?g="D":-72>y&&y>=-80&&(g="C"),g)}}({lat:t[1],lon:t[0]}),e)}function ct(t){var e=dt(gt(t.toUpperCase()));return e.lat&&e.lon?[e.lon,e.lat]:[(e.left+e.right)/2,(e.top+e.bottom)/2]}function ft(t){return t*(Math.PI/180)}function pt(t){return t/Math.PI*180}function dt(t){var e=t.northing,i=t.easting,r=t.zoneLetter,n=t.zoneNumber;if(n<0||n>60)return null;var s,a,o,h,u,l,c,f,p,d=.9996,y=6378137,g=.00669438,m=(1-Math.sqrt(.99330562))/(1+Math.sqrt(.99330562)),M=i-5e5,b=e;r<"N"&&(b-=1e7),c=6*(n-1)-180+3,s=.006739496752268451,p=(f=b/d/6367449.145945056)+(3*m/2-27*m*m*m/32)*Math.sin(2*f)+(21*m*m/16-55*m*m*m*m/32)*Math.sin(4*f)+151*m*m*m/96*Math.sin(6*f),a=y/Math.sqrt(1-g*Math.sin(p)*Math.sin(p)),o=Math.tan(p)*Math.tan(p),h=s*Math.cos(p)*Math.cos(p),u=.99330562*y/Math.pow(1-g*Math.sin(p)*Math.sin(p),1.5),l=M/(a*d);var v=p-a*Math.tan(p)/u*(l*l/2-(5+3*o+10*h-4*h*h-9*s)*l*l*l*l/24+(61+90*o+298*h+45*o*o-1.6983531815716497-3*h*h)*l*l*l*l*l*l/720);v=pt(v);var _,w=(l-(1+2*o+h)*l*l*l/6+(5-2*h+28*o-3*h*h+8*s+24*o*o)*l*l*l*l*l/120)/Math.cos(p);if(w=c+pt(w),t.accuracy){var x=dt({northing:t.northing+t.accuracy,easting:t.easting+t.accuracy,zoneLetter:t.zoneLetter,zoneNumber:t.zoneNumber});_={top:x.lat,right:x.lon,bottom:v,left:w}}else _={lat:v,lon:w};return _}function yt(t){var e=t%6;return 0===e&&(e=6),e}function gt(t){if(t&&0===t.length)throw"MGRSPoint coverting from nothing";for(var e,i=t.length,r=null,n="",s=0;!/[A-Z]/.test(e=t.charAt(s));){if(s>=2)throw"MGRSPoint bad conversion from: "+t;n+=e,s++}var a=parseInt(n,10);if(0===s||s+3>i)throw"MGRSPoint bad conversion from: "+t;var o=t.charAt(s++);if(o<="A"||"B"===o||"Y"===o||o>="Z"||"I"===o||"O"===o)throw"MGRSPoint zone letter "+o+" not handled: "+t;r=t.substring(s,s+=2);for(var h=yt(a),u=function(t,e){for(var i=nt.charCodeAt(e-1),r=1e5,n=!1;i!==t.charCodeAt(0);){if(++i===ot&&i++,i===ht&&i++,i>90){if(n)throw"Bad character: "+t;i=at,n=!0}r+=1e5}return r}(r.charAt(0),h),l=function(t,e){if(t>"V")throw"MGRSPoint given invalid Northing "+t;for(var i=st.charCodeAt(e-1),r=0,n=!1;i!==t.charCodeAt(0);){if(++i===ot&&i++,i===ht&&i++,i>86){if(n)throw"Bad character: "+t;i=at,n=!0}r+=1e5}return r}(r.charAt(1),h);l<mt(o);)l+=2e6;var c=i-s;if(c%2!=0)throw"MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+t;var f,p,d,y=c/2,g=0,m=0;return y>0&&(f=1e5/Math.pow(10,y),p=t.substring(s,s+y),g=parseFloat(p)*f,d=t.substring(s+y),m=parseFloat(d)*f),{easting:g+u,northing:m+l,zoneLetter:o,zoneNumber:a,accuracy:f}}function mt(t){var e;switch(t){case"C":e=11e5;break;case"D":e=2e6;break;case"E":e=28e5;break;case"F":e=37e5;break;case"G":e=46e5;break;case"H":e=55e5;break;case"J":e=64e5;break;case"K":e=73e5;break;case"L":e=82e5;break;case"M":e=91e5;break;case"N":e=0;break;case"P":e=8e5;break;case"Q":e=17e5;break;case"R":e=26e5;break;case"S":e=35e5;break;case"T":e=44e5;break;case"U":e=53e5;break;case"V":e=62e5;break;case"W":e=7e6;break;case"X":e=79e5;break;default:e=-1}if(e>=0)return e;throw"Invalid zone letter: "+t}function Mt(t,e,i){if(!(this instanceof Mt))return new Mt(t,e,i);if(Array.isArray(t))this.x=t[0],this.y=t[1],this.z=t[2]||0;else if("object"==typeof t)this.x=t.x,this.y=t.y,this.z=t.z||0;else if("string"==typeof t&&void 0===e){var r=t.split(",");this.x=parseFloat(r[0],10),this.y=parseFloat(r[1],10),this.z=parseFloat(r[2],10)||0}else this.x=t,this.y=e,this.z=i||0;console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}Mt.fromMGRS=function(t){return new Mt(ct(t))},Mt.prototype.toMGRS=function(t){return lt([this.x,this.y],t)};const bt=Mt;var vt=.046875,_t=.01953125,wt=.01068115234375;function xt(t){var e=[];e[0]=1-t*(.25+t*(vt+t*(_t+t*wt))),e[1]=t*(.75-t*(vt+t*(_t+t*wt)));var i=t*t;return e[2]=i*(.46875-t*(.013020833333333334+.007120768229166667*t)),i*=t,e[3]=i*(.3645833333333333-.005696614583333333*t),e[4]=i*t*.3076171875,e}function St(t,e,i,r){return i*=e,e*=e,r[0]*t-i*(r[1]+e*(r[2]+e*(r[3]+e*r[4])))}function Et(t,e,i){for(var r=1/(1-e),n=t,a=20;a;--a){var o=Math.sin(n),h=1-e*o*o;if(n-=h=(St(n,o,Math.cos(n),i)-t)*(h*Math.sqrt(h))*r,Math.abs(h)<s)return n}return n}const Rt={init:function(){this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.es&&(this.en=xt(this.es),this.ml0=St(this.lat0,Math.sin(this.lat0),Math.cos(this.lat0),this.en))},forward:function(t){var e,i,r,n=t.x,a=t.y,o=I(n-this.long0),h=Math.sin(a),u=Math.cos(a);if(this.es){var l=u*o,c=Math.pow(l,2),f=this.ep2*Math.pow(u,2),p=Math.pow(f,2),d=Math.abs(u)>s?Math.tan(a):0,y=Math.pow(d,2),g=Math.pow(y,2);e=1-this.es*Math.pow(h,2),l/=Math.sqrt(e);var m=St(a,h,u,this.en);i=this.a*(this.k0*l*(1+c/6*(1-y+f+c/20*(5-18*y+g+14*f-58*y*f+c/42*(61+179*g-g*y-479*y)))))+this.x0,r=this.a*(this.k0*(m-this.ml0+h*o*l/2*(1+c/12*(5-y+9*f+4*p+c/30*(61+g-58*y+270*f-330*y*f+c/56*(1385+543*g-g*y-3111*y))))))+this.y0}else{var M=u*Math.sin(o);if(Math.abs(Math.abs(M)-1)<s)return 93;if(i=.5*this.a*this.k0*Math.log((1+M)/(1-M))+this.x0,r=u*Math.cos(o)/Math.sqrt(1-Math.pow(M,2)),(M=Math.abs(r))>=1){if(M-1>s)return 93;r=0}else r=Math.acos(r);a<0&&(r=-r),r=this.a*this.k0*(r-this.lat0)+this.y0}return t.x=i,t.y=r,t},inverse:function(t){var e,i,r,a,o=(t.x-this.x0)*(1/this.a),h=(t.y-this.y0)*(1/this.a);if(this.es)if(i=Et(e=this.ml0+h/this.k0,this.es,this.en),Math.abs(i)<n){var u=Math.sin(i),l=Math.cos(i),c=Math.abs(l)>s?Math.tan(i):0,f=this.ep2*Math.pow(l,2),p=Math.pow(f,2),d=Math.pow(c,2),y=Math.pow(d,2);e=1-this.es*Math.pow(u,2);var g=o*Math.sqrt(e)/this.k0,m=Math.pow(g,2);r=i-(e*=c)*m/(1-this.es)*.5*(1-m/12*(5+3*d-9*f*d+f-4*p-m/30*(61+90*d-252*f*d+45*y+46*f-m/56*(1385+3633*d+4095*y+1574*y*d)))),a=I(this.long0+g*(1-m/6*(1+2*d+f-m/20*(5+28*d+24*y+8*f*d+6*f-m/42*(61+662*d+1320*y+720*y*d))))/l)}else r=n*k(h),a=0;else{var M=Math.exp(o/this.k0),b=.5*(M-1/M),v=this.lat0+h/this.k0,_=Math.cos(v);e=Math.sqrt((1-Math.pow(_,2))/(1+Math.pow(b,2))),r=Math.asin(e),h<0&&(r=-r),a=0===b&&0===_?0:I(Math.atan2(b,_)+this.long0)}return t.x=a,t.y=r,t},names:["Transverse_Mercator","Transverse Mercator","tmerc"]};function Pt(t){var e=Math.exp(t);return(e-1/e)/2}function Ot(t,e){t=Math.abs(t),e=Math.abs(e);var i=Math.max(t,e),r=Math.min(t,e)/(i||1);return i*Math.sqrt(1+Math.pow(r,2))}function Tt(t,e){for(var i,r=2*Math.cos(2*e),n=t.length-1,s=t[n],a=0;--n>=0;)i=r*s-a+t[n],a=s,s=i;return e+i*Math.sin(2*e)}function Ct(t,e,i){for(var r,n,s=Math.sin(e),a=Math.cos(e),o=Pt(i),h=function(t){var e=Math.exp(t);return(e+1/e)/2}(i),u=2*a*h,l=-2*s*o,c=t.length-1,f=t[c],p=0,d=0,y=0;--c>=0;)r=d,n=p,f=u*(d=f)-r-l*(p=y)+t[c],y=l*d-n+u*p;return[(u=s*h)*f-(l=a*o)*y,u*y+l*f]}const At={init:function(){if(void 0===this.es||this.es<=0)throw new Error("incorrect elliptical usage");this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.cgb=[],this.cbg=[],this.utg=[],this.gtu=[];var t=this.es/(1+Math.sqrt(1-this.es)),e=t/(2-t),i=e;this.cgb[0]=e*(2+e*(-2/3+e*(e*(116/45+e*(26/45+e*(-2854/675)))-2))),this.cbg[0]=e*(e*(2/3+e*(4/3+e*(-82/45+e*(32/45+e*(4642/4725)))))-2),i*=e,this.cgb[1]=i*(7/3+e*(e*(-227/45+e*(2704/315+e*(2323/945)))-1.6)),this.cbg[1]=i*(5/3+e*(-16/15+e*(-13/9+e*(904/315+e*(-1522/945))))),i*=e,this.cgb[2]=i*(56/15+e*(-136/35+e*(-1262/105+e*(73814/2835)))),this.cbg[2]=i*(-26/15+e*(34/21+e*(1.6+e*(-12686/2835)))),i*=e,this.cgb[3]=i*(4279/630+e*(-332/35+e*(-399572/14175))),this.cbg[3]=i*(1237/630+e*(e*(-24832/14175)-2.4)),i*=e,this.cgb[4]=i*(4174/315+e*(-144838/6237)),this.cbg[4]=i*(-734/315+e*(109598/31185)),i*=e,this.cgb[5]=i*(601676/22275),this.cbg[5]=i*(444337/155925),i=Math.pow(e,2),this.Qn=this.k0/(1+e)*(1+i*(1/4+i*(1/64+i/256))),this.utg[0]=e*(e*(2/3+e*(-37/96+e*(1/360+e*(81/512+e*(-96199/604800)))))-.5),this.gtu[0]=e*(.5+e*(-2/3+e*(5/16+e*(41/180+e*(-127/288+e*(7891/37800)))))),this.utg[1]=i*(-1/48+e*(-1/15+e*(437/1440+e*(-46/105+e*(1118711/3870720))))),this.gtu[1]=i*(13/48+e*(e*(557/1440+e*(281/630+e*(-1983433/1935360)))-.6)),i*=e,this.utg[2]=i*(-17/480+e*(37/840+e*(209/4480+e*(-5569/90720)))),this.gtu[2]=i*(61/240+e*(-103/140+e*(15061/26880+e*(167603/181440)))),i*=e,this.utg[3]=i*(-4397/161280+e*(11/504+e*(830251/7257600))),this.gtu[3]=i*(49561/161280+e*(-179/168+e*(6601661/7257600))),i*=e,this.utg[4]=i*(-4583/161280+e*(108847/3991680)),this.gtu[4]=i*(34729/80640+e*(-3418889/1995840)),i*=e,this.utg[5]=i*(-20648693/638668800),this.gtu[5]=.6650675310896665*i;var r=Tt(this.cbg,this.lat0);this.Zb=-this.Qn*(r+function(t,e){for(var i,r=2*Math.cos(e),n=t.length-1,s=t[n],a=0;--n>=0;)i=r*s-a+t[n],a=s,s=i;return Math.sin(e)*i}(this.gtu,2*r))},forward:function(t){var e=I(t.x-this.long0),i=t.y;i=Tt(this.cbg,i);var r=Math.sin(i),n=Math.cos(i),s=Math.sin(e),a=Math.cos(e);i=Math.atan2(r,a*n),e=Math.atan2(s*n,Ot(r,n*a)),e=function(t){var e=Math.abs(t);return e=function(t){var e=1+t,i=e-1;return 0===i?t:t*Math.log(e)/i}(e*(1+e/(Ot(1,e)+1))),t<0?-e:e}(Math.tan(e));var o,h,u=Ct(this.gtu,2*i,2*e);return i+=u[0],e+=u[1],Math.abs(e)<=2.623395162778?(o=this.a*(this.Qn*e)+this.x0,h=this.a*(this.Qn*i+this.Zb)+this.y0):(o=1/0,h=1/0),t.x=o,t.y=h,t},inverse:function(t){var e,i,r=(t.x-this.x0)*(1/this.a),n=(t.y-this.y0)*(1/this.a);if(n=(n-this.Zb)/this.Qn,r/=this.Qn,Math.abs(r)<=2.623395162778){var s=Ct(this.utg,2*n,2*r);n+=s[0],r+=s[1],r=Math.atan(Pt(r));var a=Math.sin(n),o=Math.cos(n),h=Math.sin(r),u=Math.cos(r);n=Math.atan2(a*u,Ot(h,u*o)),e=I((r=Math.atan2(h,u*o))+this.long0),i=Tt(this.cgb,n)}else e=1/0,i=1/0;return t.x=e,t.y=i,t},names:["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc"]},kt={init:function(){var t=function(t,e){if(void 0===t){if((t=Math.floor(30*(I(e)+Math.PI)/Math.PI)+1)<0)return 0;if(t>60)return 60}return t}(this.zone,this.long0);if(void 0===t)throw new Error("unknown utm zone");this.lat0=0,this.long0=(6*Math.abs(t)-183)*a,this.x0=5e5,this.y0=this.utmSouth?1e7:0,this.k0=.9996,At.init.apply(this),this.forward=At.forward,this.inverse=At.inverse},names:["Universal Transverse Mercator System","utm"],dependsOn:"etmerc"};function It(t,e){return Math.pow((1-t)/(1+t),e)}const Nt={init:function(){var t=Math.sin(this.lat0),e=Math.cos(this.lat0);e*=e,this.rc=Math.sqrt(1-this.es)/(1-this.es*t*t),this.C=Math.sqrt(1+this.es*e*e/(1-this.es)),this.phic0=Math.asin(t/this.C),this.ratexp=.5*this.C*this.e,this.K=Math.tan(.5*this.phic0+h)/(Math.pow(Math.tan(.5*this.lat0+h),this.C)*It(this.e*t,this.ratexp))},forward:function(t){var e=t.x,i=t.y;return t.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*i+h),this.C)*It(this.e*Math.sin(i),this.ratexp))-n,t.x=this.C*e,t},inverse:function(t){for(var e=t.x/this.C,i=t.y,r=Math.pow(Math.tan(.5*i+h)/this.K,1/this.C),s=20;s>0&&(i=2*Math.atan(r*It(this.e*Math.sin(t.y),-.5*this.e))-n,!(Math.abs(i-t.y)<1e-14));--s)t.y=i;return s?(t.x=e,t.y=i,t):null},names:["gauss"]},Lt={init:function(){Nt.init.apply(this),this.rc&&(this.sinc0=Math.sin(this.phic0),this.cosc0=Math.cos(this.phic0),this.R2=2*this.rc,this.title||(this.title="Oblique Stereographic Alternative"))},forward:function(t){var e,i,r,n;return t.x=I(t.x-this.long0),Nt.forward.apply(this,[t]),e=Math.sin(t.y),i=Math.cos(t.y),r=Math.cos(t.x),n=this.k0*this.R2/(1+this.sinc0*e+this.cosc0*i*r),t.x=n*i*Math.sin(t.x),t.y=n*(this.cosc0*e-this.sinc0*i*r),t.x=this.a*t.x+this.x0,t.y=this.a*t.y+this.y0,t},inverse:function(t){var e,i,r,n,s;if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,s=Math.sqrt(t.x*t.x+t.y*t.y)){var a=2*Math.atan2(s,this.R2);e=Math.sin(a),i=Math.cos(a),n=Math.asin(i*this.sinc0+t.y*e*this.cosc0/s),r=Math.atan2(t.x*e,s*this.cosc0*i-t.y*this.sinc0*e)}else n=this.phic0,r=0;return t.x=r,t.y=n,Nt.inverse.apply(this,[t]),t.x=I(t.x+this.long0),t},names:["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative","Double_Stereographic"]},jt={init:function(){this.coslat0=Math.cos(this.lat0),this.sinlat0=Math.sin(this.lat0),this.sphere?1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=s&&(this.k0=.5*(1+k(this.lat0)*Math.sin(this.lat_ts))):(Math.abs(this.coslat0)<=s&&(this.lat0>0?this.con=1:this.con=-1),this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e)),1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=s&&(this.k0=.5*this.cons*A(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/N(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))),this.ms1=A(this.e,this.sinlat0,this.coslat0),this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-n,this.cosX0=Math.cos(this.X0),this.sinX0=Math.sin(this.X0))},forward:function(t){var e,i,r,a,o,h,u=t.x,l=t.y,c=Math.sin(l),f=Math.cos(l),p=I(u-this.long0);return Math.abs(Math.abs(u-this.long0)-Math.PI)<=s&&Math.abs(l+this.lat0)<=s?(t.x=NaN,t.y=NaN,t):this.sphere?(e=2*this.k0/(1+this.sinlat0*c+this.coslat0*f*Math.cos(p)),t.x=this.a*e*f*Math.sin(p)+this.x0,t.y=this.a*e*(this.coslat0*c-this.sinlat0*f*Math.cos(p))+this.y0,t):(i=2*Math.atan(this.ssfn_(l,c,this.e))-n,a=Math.cos(i),r=Math.sin(i),Math.abs(this.coslat0)<=s?(o=N(this.e,l*this.con,this.con*c),h=2*this.a*this.k0*o/this.cons,t.x=this.x0+h*Math.sin(u-this.long0),t.y=this.y0-this.con*h*Math.cos(u-this.long0),t):(Math.abs(this.sinlat0)<s?(e=2*this.a*this.k0/(1+a*Math.cos(p)),t.y=e*r):(e=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*r+this.cosX0*a*Math.cos(p))),t.y=e*(this.cosX0*r-this.sinX0*a*Math.cos(p))+this.y0),t.x=e*a*Math.sin(p)+this.x0,t))},inverse:function(t){var e,i,r,a,o;t.x-=this.x0,t.y-=this.y0;var h=Math.sqrt(t.x*t.x+t.y*t.y);if(this.sphere){var u=2*Math.atan(h/(2*this.a*this.k0));return e=this.long0,i=this.lat0,h<=s?(t.x=e,t.y=i,t):(i=Math.asin(Math.cos(u)*this.sinlat0+t.y*Math.sin(u)*this.coslat0/h),e=Math.abs(this.coslat0)<s?this.lat0>0?I(this.long0+Math.atan2(t.x,-1*t.y)):I(this.long0+Math.atan2(t.x,t.y)):I(this.long0+Math.atan2(t.x*Math.sin(u),h*this.coslat0*Math.cos(u)-t.y*this.sinlat0*Math.sin(u))),t.x=e,t.y=i,t)}if(Math.abs(this.coslat0)<=s){if(h<=s)return i=this.lat0,e=this.long0,t.x=e,t.y=i,t;t.x*=this.con,t.y*=this.con,r=h*this.cons/(2*this.a*this.k0),i=this.con*L(this.e,r),e=this.con*I(this.con*this.long0+Math.atan2(t.x,-1*t.y))}else a=2*Math.atan(h*this.cosX0/(2*this.a*this.k0*this.ms1)),e=this.long0,h<=s?o=this.X0:(o=Math.asin(Math.cos(a)*this.sinX0+t.y*Math.sin(a)*this.cosX0/h),e=I(this.long0+Math.atan2(t.x*Math.sin(a),h*this.cosX0*Math.cos(a)-t.y*this.sinX0*Math.sin(a)))),i=-1*L(this.e,Math.tan(.5*(n+o)));return t.x=e,t.y=i,t},names:["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"],ssfn_:function(t,e,i){return e*=i,Math.tan(.5*(n+t))*Math.pow((1-e)/(1+e),.5*i)}},Ut={init:function(){var t=this.lat0;this.lambda0=this.long0;var e=Math.sin(t),i=this.a,r=1/this.rf,n=2*r-Math.pow(r,2),s=this.e=Math.sqrt(n);this.R=this.k0*i*Math.sqrt(1-n)/(1-n*Math.pow(e,2)),this.alpha=Math.sqrt(1+n/(1-n)*Math.pow(Math.cos(t),4)),this.b0=Math.asin(e/this.alpha);var a=Math.log(Math.tan(Math.PI/4+this.b0/2)),o=Math.log(Math.tan(Math.PI/4+t/2)),h=Math.log((1+s*e)/(1-s*e));this.K=a-this.alpha*o+this.alpha*s/2*h},forward:function(t){var e=Math.log(Math.tan(Math.PI/4-t.y/2)),i=this.e/2*Math.log((1+this.e*Math.sin(t.y))/(1-this.e*Math.sin(t.y))),r=-this.alpha*(e+i)+this.K,n=2*(Math.atan(Math.exp(r))-Math.PI/4),s=this.alpha*(t.x-this.lambda0),a=Math.atan(Math.sin(s)/(Math.sin(this.b0)*Math.tan(n)+Math.cos(this.b0)*Math.cos(s))),o=Math.asin(Math.cos(this.b0)*Math.sin(n)-Math.sin(this.b0)*Math.cos(n)*Math.cos(s));return t.y=this.R/2*Math.log((1+Math.sin(o))/(1-Math.sin(o)))+this.y0,t.x=this.R*a+this.x0,t},inverse:function(t){for(var e=t.x-this.x0,i=t.y-this.y0,r=e/this.R,n=2*(Math.atan(Math.exp(i/this.R))-Math.PI/4),s=Math.asin(Math.cos(this.b0)*Math.sin(n)+Math.sin(this.b0)*Math.cos(n)*Math.cos(r)),a=Math.atan(Math.sin(r)/(Math.cos(this.b0)*Math.cos(r)-Math.sin(this.b0)*Math.tan(n))),o=this.lambda0+a/this.alpha,h=0,u=s,l=-1e3,c=0;Math.abs(u-l)>1e-7;){if(++c>20)return;h=1/this.alpha*(Math.log(Math.tan(Math.PI/4+s/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(u))/2)),l=u,u=2*Math.atan(Math.exp(h))-Math.PI/2}return t.x=o,t.y=u,t},names:["somerc"]},qt={init:function(){this.no_off=this.no_off||!1,this.no_rot=this.no_rot||!1,isNaN(this.k0)&&(this.k0=1);var t=Math.sin(this.lat0),e=Math.cos(this.lat0),i=this.e*t;this.bl=Math.sqrt(1+this.es/(1-this.es)*Math.pow(e,4)),this.al=this.a*this.bl*this.k0*Math.sqrt(1-this.es)/(1-i*i);var r,n,s=N(this.e,this.lat0,t),a=this.bl/e*Math.sqrt((1-this.es)/(1-i*i));if(a*a<1&&(a=1),isNaN(this.longc)){var o=N(this.e,this.lat1,Math.sin(this.lat1)),h=N(this.e,this.lat2,Math.sin(this.lat2));this.lat0>=0?this.el=(a+Math.sqrt(a*a-1))*Math.pow(s,this.bl):this.el=(a-Math.sqrt(a*a-1))*Math.pow(s,this.bl);var u=Math.pow(o,this.bl),l=Math.pow(h,this.bl);n=.5*((r=this.el/u)-1/r);var c=(this.el*this.el-l*u)/(this.el*this.el+l*u),f=(l-u)/(l+u),p=I(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-Math.atan(c*Math.tan(.5*this.bl*p)/f)/this.bl,this.long0=I(this.long0);var d=I(this.long1-this.long0);this.gamma0=Math.atan(Math.sin(this.bl*d)/n),this.alpha=Math.asin(a*Math.sin(this.gamma0))}else r=this.lat0>=0?a+Math.sqrt(a*a-1):a-Math.sqrt(a*a-1),this.el=r*Math.pow(s,this.bl),n=.5*(r-1/r),this.gamma0=Math.asin(Math.sin(this.alpha)/a),this.long0=this.longc-Math.asin(n*Math.tan(this.gamma0))/this.bl;this.no_off?this.uc=0:this.lat0>=0?this.uc=this.al/this.bl*Math.atan2(Math.sqrt(a*a-1),Math.cos(this.alpha)):this.uc=-1*this.al/this.bl*Math.atan2(Math.sqrt(a*a-1),Math.cos(this.alpha))},forward:function(t){var e,i,r,a=t.x,o=t.y,u=I(a-this.long0);if(Math.abs(Math.abs(o)-n)<=s)r=o>0?-1:1,i=this.al/this.bl*Math.log(Math.tan(h+r*this.gamma0*.5)),e=-1*r*n*this.al/this.bl;else{var l=N(this.e,o,Math.sin(o)),c=this.el/Math.pow(l,this.bl),f=.5*(c-1/c),p=.5*(c+1/c),d=Math.sin(this.bl*u),y=(f*Math.sin(this.gamma0)-d*Math.cos(this.gamma0))/p;i=Math.abs(Math.abs(y)-1)<=s?Number.POSITIVE_INFINITY:.5*this.al*Math.log((1-y)/(1+y))/this.bl,e=Math.abs(Math.cos(this.bl*u))<=s?this.al*this.bl*u:this.al*Math.atan2(f*Math.cos(this.gamma0)+d*Math.sin(this.gamma0),Math.cos(this.bl*u))/this.bl}return this.no_rot?(t.x=this.x0+e,t.y=this.y0+i):(e-=this.uc,t.x=this.x0+i*Math.cos(this.alpha)+e*Math.sin(this.alpha),t.y=this.y0+e*Math.cos(this.alpha)-i*Math.sin(this.alpha)),t},inverse:function(t){var e,i;this.no_rot?(i=t.y-this.y0,e=t.x-this.x0):(i=(t.x-this.x0)*Math.cos(this.alpha)-(t.y-this.y0)*Math.sin(this.alpha),e=(t.y-this.y0)*Math.cos(this.alpha)+(t.x-this.x0)*Math.sin(this.alpha),e+=this.uc);var r=Math.exp(-1*this.bl*i/this.al),a=.5*(r-1/r),o=.5*(r+1/r),h=Math.sin(this.bl*e/this.al),u=(h*Math.cos(this.gamma0)+a*Math.sin(this.gamma0))/o,l=Math.pow(this.el/Math.sqrt((1+u)/(1-u)),1/this.bl);return Math.abs(u-1)<s?(t.x=this.long0,t.y=n):Math.abs(u+1)<s?(t.x=this.long0,t.y=-1*n):(t.y=L(this.e,l),t.x=I(this.long0-Math.atan2(a*Math.cos(this.gamma0)-h*Math.sin(this.gamma0),Math.cos(this.bl*e/this.al))/this.bl)),t},names:["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"]},Bt={init:function(){if(this.lat2||(this.lat2=this.lat1),this.k0||(this.k0=1),this.x0=this.x0||0,this.y0=this.y0||0,!(Math.abs(this.lat1+this.lat2)<s)){var t=this.b/this.a;this.e=Math.sqrt(1-t*t);var e=Math.sin(this.lat1),i=Math.cos(this.lat1),r=A(this.e,e,i),n=N(this.e,this.lat1,e),a=Math.sin(this.lat2),o=Math.cos(this.lat2),h=A(this.e,a,o),u=N(this.e,this.lat2,a),l=N(this.e,this.lat0,Math.sin(this.lat0));Math.abs(this.lat1-this.lat2)>s?this.ns=Math.log(r/h)/Math.log(n/u):this.ns=e,isNaN(this.ns)&&(this.ns=e),this.f0=r/(this.ns*Math.pow(n,this.ns)),this.rh=this.a*this.f0*Math.pow(l,this.ns),this.title||(this.title="Lambert Conformal Conic")}},forward:function(t){var e=t.x,i=t.y;Math.abs(2*Math.abs(i)-Math.PI)<=s&&(i=k(i)*(n-2e-10));var r,a,o=Math.abs(Math.abs(i)-n);if(o>s)r=N(this.e,i,Math.sin(i)),a=this.a*this.f0*Math.pow(r,this.ns);else{if((o=i*this.ns)<=0)return null;a=0}var h=this.ns*I(e-this.long0);return t.x=this.k0*(a*Math.sin(h))+this.x0,t.y=this.k0*(this.rh-a*Math.cos(h))+this.y0,t},inverse:function(t){var e,i,r,s,a,o=(t.x-this.x0)/this.k0,h=this.rh-(t.y-this.y0)/this.k0;this.ns>0?(e=Math.sqrt(o*o+h*h),i=1):(e=-Math.sqrt(o*o+h*h),i=-1);var u=0;if(0!==e&&(u=Math.atan2(i*o,i*h)),0!==e||this.ns>0){if(i=1/this.ns,r=Math.pow(e/(this.a*this.f0),i),-9999===(s=L(this.e,r)))return null}else s=-n;return a=I(u/this.ns+this.long0),t.x=a,t.y=s,t},names:["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"]},Gt={init:function(){this.a=6377397.155,this.es=.006674372230614,this.e=Math.sqrt(this.es),this.lat0||(this.lat0=.863937979737193),this.long0||(this.long0=.4334234309119251),this.k0||(this.k0=.9999),this.s45=.785398163397448,this.s90=2*this.s45,this.fi0=this.lat0,this.e2=this.es,this.e=Math.sqrt(this.e2),this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2)),this.uq=1.04216856380474,this.u0=Math.asin(Math.sin(this.fi0)/this.alfa),this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2),this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g,this.k1=this.k0,this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2)),this.s0=1.37008346281555,this.n=Math.sin(this.s0),this.ro0=this.k1*this.n0/Math.tan(this.s0),this.ad=this.s90-this.uq},forward:function(t){var e,i,r,n,s,a,o,h=t.x,u=t.y,l=I(h-this.long0);return e=Math.pow((1+this.e*Math.sin(u))/(1-this.e*Math.sin(u)),this.alfa*this.e/2),i=2*(Math.atan(this.k*Math.pow(Math.tan(u/2+this.s45),this.alfa)/e)-this.s45),r=-l*this.alfa,n=Math.asin(Math.cos(this.ad)*Math.sin(i)+Math.sin(this.ad)*Math.cos(i)*Math.cos(r)),s=Math.asin(Math.cos(i)*Math.sin(r)/Math.cos(n)),a=this.n*s,o=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(n/2+this.s45),this.n),t.y=o*Math.cos(a)/1,t.x=o*Math.sin(a)/1,this.czech||(t.y*=-1,t.x*=-1),t},inverse:function(t){var e,i,r,n,s,a,o,h=t.x;t.x=t.y,t.y=h,this.czech||(t.y*=-1,t.x*=-1),s=Math.sqrt(t.x*t.x+t.y*t.y),n=Math.atan2(t.y,t.x)/Math.sin(this.s0),r=2*(Math.atan(Math.pow(this.ro0/s,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45),e=Math.asin(Math.cos(this.ad)*Math.sin(r)-Math.sin(this.ad)*Math.cos(r)*Math.cos(n)),i=Math.asin(Math.cos(r)*Math.sin(n)/Math.cos(e)),t.x=this.long0-i/this.alfa,a=e,o=0;var u=0;do{t.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(e/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(a))/(1-this.e*Math.sin(a)),this.e/2))-this.s45),Math.abs(a-t.y)<1e-10&&(o=1),a=t.y,u+=1}while(0===o&&u<15);return u>=15?null:t},names:["Krovak","krovak"]};function Dt(t,e,i,r,n){return t*n-e*Math.sin(2*n)+i*Math.sin(4*n)-r*Math.sin(6*n)}function Ft(t){return 1-.25*t*(1+t/16*(3+1.25*t))}function Wt(t){return.375*t*(1+.25*t*(1+.46875*t))}function zt(t){return.05859375*t*t*(1+.75*t)}function Ht(t){return t*t*t*(35/3072)}function Qt(t,e,i){var r=e*i;return t/Math.sqrt(1-r*r)}function Vt(t){return Math.abs(t)<n?t:t-k(t)*Math.PI}function Xt(t,e,i,r,n){var s,a;s=t/e;for(var o=0;o<15;o++)if(s+=a=(t-(e*s-i*Math.sin(2*s)+r*Math.sin(4*s)-n*Math.sin(6*s)))/(e-2*i*Math.cos(2*s)+4*r*Math.cos(4*s)-6*n*Math.cos(6*s)),Math.abs(a)<=1e-10)return s;return NaN}const Yt={init:function(){this.sphere||(this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.ml0=this.a*Dt(this.e0,this.e1,this.e2,this.e3,this.lat0))},forward:function(t){var e,i,r=t.x,n=t.y;if(r=I(r-this.long0),this.sphere)e=this.a*Math.asin(Math.cos(n)*Math.sin(r)),i=this.a*(Math.atan2(Math.tan(n),Math.cos(r))-this.lat0);else{var s=Math.sin(n),a=Math.cos(n),o=Qt(this.a,this.e,s),h=Math.tan(n)*Math.tan(n),u=r*Math.cos(n),l=u*u,c=this.es*a*a/(1-this.es);e=o*u*(1-l*h*(1/6-(8-h+8*c)*l/120)),i=this.a*Dt(this.e0,this.e1,this.e2,this.e3,n)-this.ml0+o*s/a*l*(.5+(5-h+6*c)*l/24)}return t.x=e+this.x0,t.y=i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,i,r=t.x/this.a,a=t.y/this.a;if(this.sphere){var o=a+this.lat0;e=Math.asin(Math.sin(o)*Math.cos(r)),i=Math.atan2(Math.tan(r),Math.cos(o))}else{var h=Xt(this.ml0/this.a+a,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(h)-n)<=s)return t.x=this.long0,t.y=n,a<0&&(t.y*=-1),t;var u=Qt(this.a,this.e,Math.sin(h)),l=u*u*u/this.a/this.a*(1-this.es),c=Math.pow(Math.tan(h),2),f=r*this.a/u,p=f*f;e=h-u*Math.tan(h)/l*f*f*(.5-(1+3*c)*f*f/24),i=f*(1-p*(c/3+(1+3*c)*c*p/15))/Math.cos(h)}return t.x=I(i+this.long0),t.y=Vt(e),t},names:["Cassini","Cassini_Soldner","cass"]};function $t(t,e){var i;return t>1e-7?(1-t*t)*(e/(1-(i=t*e)*i)-.5/t*Math.log((1-i)/(1+i))):2*e}const Jt={init:function(){var t,e=Math.abs(this.lat0);if(Math.abs(e-n)<s?this.mode=this.lat0<0?this.S_POLE:this.N_POLE:Math.abs(e)<s?this.mode=this.EQUIT:this.mode=this.OBLIQ,this.es>0)switch(this.qp=$t(this.e,1),this.mmf=.5/(1-this.es),this.apa=function(t){var e,i=[];return i[0]=.3333333333333333*t,e=t*t,i[0]+=.17222222222222222*e,i[1]=.06388888888888888*e,e*=t,i[0]+=.10257936507936508*e,i[1]+=.0664021164021164*e,i[2]=.016415012942191543*e,i}(this.es),this.mode){case this.N_POLE:case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp),this.dd=1/this.rq,this.xmf=1,this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp),t=Math.sin(this.lat0),this.sinb1=$t(this.e,t)/this.qp,this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1),this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*t*t)*this.rq*this.cosb1),this.ymf=(this.xmf=this.rq)/this.dd,this.xmf*=this.dd}else this.mode===this.OBLIQ&&(this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0))},forward:function(t){var e,i,r,a,o,u,l,c,f,p,d=t.x,y=t.y;if(d=I(d-this.long0),this.sphere){if(o=Math.sin(y),p=Math.cos(y),r=Math.cos(d),this.mode===this.OBLIQ||this.mode===this.EQUIT){if((i=this.mode===this.EQUIT?1+p*r:1+this.sinph0*o+this.cosph0*p*r)<=s)return null;e=(i=Math.sqrt(2/i))*p*Math.sin(d),i*=this.mode===this.EQUIT?o:this.cosph0*o-this.sinph0*p*r}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(r=-r),Math.abs(y+this.lat0)<s)return null;i=h-.5*y,e=(i=2*(this.mode===this.S_POLE?Math.cos(i):Math.sin(i)))*Math.sin(d),i*=r}}else{switch(l=0,c=0,f=0,r=Math.cos(d),a=Math.sin(d),o=Math.sin(y),u=$t(this.e,o),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(l=u/this.qp,c=Math.sqrt(1-l*l)),this.mode){case this.OBLIQ:f=1+this.sinb1*l+this.cosb1*c*r;break;case this.EQUIT:f=1+c*r;break;case this.N_POLE:f=n+y,u=this.qp-u;break;case this.S_POLE:f=y-n,u=this.qp+u}if(Math.abs(f)<s)return null;switch(this.mode){case this.OBLIQ:case this.EQUIT:f=Math.sqrt(2/f),i=this.mode===this.OBLIQ?this.ymf*f*(this.cosb1*l-this.sinb1*c*r):(f=Math.sqrt(2/(1+c*r)))*l*this.ymf,e=this.xmf*f*c*a;break;case this.N_POLE:case this.S_POLE:u>=0?(e=(f=Math.sqrt(u))*a,i=r*(this.mode===this.S_POLE?f:-f)):e=i=0}}return t.x=this.a*e+this.x0,t.y=this.a*i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,i,r,a,o,h,u,l,c,f,p=t.x/this.a,d=t.y/this.a;if(this.sphere){var y,g=0,m=0;if((i=.5*(y=Math.sqrt(p*p+d*d)))>1)return null;switch(i=2*Math.asin(i),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(m=Math.sin(i),g=Math.cos(i)),this.mode){case this.EQUIT:i=Math.abs(y)<=s?0:Math.asin(d*m/y),p*=m,d=g*y;break;case this.OBLIQ:i=Math.abs(y)<=s?this.lat0:Math.asin(g*this.sinph0+d*m*this.cosph0/y),p*=m*this.cosph0,d=(g-Math.sin(i)*this.sinph0)*y;break;case this.N_POLE:d=-d,i=n-i;break;case this.S_POLE:i-=n}e=0!==d||this.mode!==this.EQUIT&&this.mode!==this.OBLIQ?Math.atan2(p,d):0}else{if(u=0,this.mode===this.OBLIQ||this.mode===this.EQUIT){if(p/=this.dd,d*=this.dd,(h=Math.sqrt(p*p+d*d))<s)return t.x=this.long0,t.y=this.lat0,t;a=2*Math.asin(.5*h/this.rq),r=Math.cos(a),p*=a=Math.sin(a),this.mode===this.OBLIQ?(u=r*this.sinb1+d*a*this.cosb1/h,o=this.qp*u,d=h*this.cosb1*r-d*this.sinb1*a):(u=d*a/h,o=this.qp*u,d=h*r)}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(d=-d),!(o=p*p+d*d))return t.x=this.long0,t.y=this.lat0,t;u=1-o/this.qp,this.mode===this.S_POLE&&(u=-u)}e=Math.atan2(p,d),f=(l=Math.asin(u))+l,i=l+(c=this.apa)[0]*Math.sin(f)+c[1]*Math.sin(f+f)+c[2]*Math.sin(f+f+f)}return t.x=I(this.long0+e),t.y=i,t},names:["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"],S_POLE:1,N_POLE:2,EQUIT:3,OBLIQ:4};function Kt(t){return Math.abs(t)>1&&(t=t>1?1:-1),Math.asin(t)}const Zt={init:function(){Math.abs(this.lat1+this.lat2)<s||(this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e3=Math.sqrt(this.es),this.sin_po=Math.sin(this.lat1),this.cos_po=Math.cos(this.lat1),this.t1=this.sin_po,this.con=this.sin_po,this.ms1=A(this.e3,this.sin_po,this.cos_po),this.qs1=$t(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat2),this.cos_po=Math.cos(this.lat2),this.t2=this.sin_po,this.ms2=A(this.e3,this.sin_po,this.cos_po),this.qs2=$t(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat0),this.cos_po=Math.cos(this.lat0),this.t3=this.sin_po,this.qs0=$t(this.e3,this.sin_po,this.cos_po),Math.abs(this.lat1-this.lat2)>s?this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1):this.ns0=this.con,this.c=this.ms1*this.ms1+this.ns0*this.qs1,this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0)},forward:function(t){var e=t.x,i=t.y;this.sin_phi=Math.sin(i),this.cos_phi=Math.cos(i);var r=$t(this.e3,this.sin_phi,this.cos_phi),n=this.a*Math.sqrt(this.c-this.ns0*r)/this.ns0,s=this.ns0*I(e-this.long0),a=n*Math.sin(s)+this.x0,o=this.rh-n*Math.cos(s)+this.y0;return t.x=a,t.y=o,t},inverse:function(t){var e,i,r,n,s,a;return t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns0>=0?(e=Math.sqrt(t.x*t.x+t.y*t.y),r=1):(e=-Math.sqrt(t.x*t.x+t.y*t.y),r=-1),n=0,0!==e&&(n=Math.atan2(r*t.x,r*t.y)),r=e*this.ns0/this.a,this.sphere?a=Math.asin((this.c-r*r)/(2*this.ns0)):(i=(this.c-r*r)/this.ns0,a=this.phi1z(this.e3,i)),s=I(n/this.ns0+this.long0),t.x=s,t.y=a,t},names:["Albers_Conic_Equal_Area","Albers","aea"],phi1z:function(t,e){var i,r,n,a,o=Kt(.5*e);if(t<s)return o;for(var h=t*t,u=1;u<=25;u++)if(o+=a=.5*(n=1-(r=t*(i=Math.sin(o)))*r)*n/Math.cos(o)*(e/(1-h)-i/n+.5/t*Math.log((1-r)/(1+r))),Math.abs(a)<=1e-7)return o;return null}},te={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0),this.infinity_dist=1e3*this.a,this.rc=1},forward:function(t){var e,i,r,n,a,o,h,u=t.x,l=t.y;return r=I(u-this.long0),e=Math.sin(l),i=Math.cos(l),n=Math.cos(r),(a=this.sin_p14*e+this.cos_p14*i*n)>0||Math.abs(a)<=s?(o=this.x0+1*this.a*i*Math.sin(r)/a,h=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*i*n)/a):(o=this.x0+this.infinity_dist*i*Math.sin(r),h=this.y0+this.infinity_dist*(this.cos_p14*e-this.sin_p14*i*n)),t.x=o,t.y=h,t},inverse:function(t){var e,i,r,n,s,a;return t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,(e=Math.sqrt(t.x*t.x+t.y*t.y))?(n=Math.atan2(e,this.rc),i=Math.sin(n),a=Kt((r=Math.cos(n))*this.sin_p14+t.y*i*this.cos_p14/e),s=Math.atan2(t.x*i,e*this.cos_p14*r-t.y*this.sin_p14*i),s=I(this.long0+s)):(a=this.phic0,s=0),t.x=s,t.y=a,t},names:["gnom"]},ee={init:function(){this.sphere||(this.k0=A(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)))},forward:function(t){var e,i,r=t.x,n=t.y,s=I(r-this.long0);if(this.sphere)e=this.x0+this.a*s*Math.cos(this.lat_ts),i=this.y0+this.a*Math.sin(n)/Math.cos(this.lat_ts);else{var a=$t(this.e,Math.sin(n));e=this.x0+this.a*this.k0*s,i=this.y0+this.a*a*.5/this.k0}return t.x=e,t.y=i,t},inverse:function(t){var e,i;return t.x-=this.x0,t.y-=this.y0,this.sphere?(e=I(this.long0+t.x/this.a/Math.cos(this.lat_ts)),i=Math.asin(t.y/this.a*Math.cos(this.lat_ts))):(i=function(t,e){var i=1-(1-t*t)/(2*t)*Math.log((1-t)/(1+t));if(Math.abs(Math.abs(e)-i)<1e-6)return e<0?-1*n:n;for(var r,s,a,o,h=Math.asin(.5*e),u=0;u<30;u++)if(s=Math.sin(h),a=Math.cos(h),o=t*s,h+=r=Math.pow(1-o*o,2)/(2*a)*(e/(1-t*t)-s/(1-o*o)+.5/t*Math.log((1-o)/(1+o))),Math.abs(r)<=1e-10)return h;return NaN}(this.e,2*t.y*this.k0/this.a),e=I(this.long0+t.x/(this.a*this.k0))),t.x=e,t.y=i,t},names:["cea"]},ie={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Equidistant Cylindrical (Plate Carre)",this.rc=Math.cos(this.lat_ts)},forward:function(t){var e=t.x,i=t.y,r=I(e-this.long0),n=Vt(i-this.lat0);return t.x=this.x0+this.a*r*this.rc,t.y=this.y0+this.a*n,t},inverse:function(t){var e=t.x,i=t.y;return t.x=I(this.long0+(e-this.x0)/(this.a*this.rc)),t.y=Vt(this.lat0+(i-this.y0)/this.a),t},names:["Equirectangular","Equidistant_Cylindrical","eqc"]},re={init:function(){this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.ml0=this.a*Dt(this.e0,this.e1,this.e2,this.e3,this.lat0)},forward:function(t){var e,i,r,n=t.x,a=t.y,o=I(n-this.long0);if(r=o*Math.sin(a),this.sphere)Math.abs(a)<=s?(e=this.a*o,i=-1*this.a*this.lat0):(e=this.a*Math.sin(r)/Math.tan(a),i=this.a*(Vt(a-this.lat0)+(1-Math.cos(r))/Math.tan(a)));else if(Math.abs(a)<=s)e=this.a*o,i=-1*this.ml0;else{var h=Qt(this.a,this.e,Math.sin(a))/Math.tan(a);e=h*Math.sin(r),i=this.a*Dt(this.e0,this.e1,this.e2,this.e3,a)-this.ml0+h*(1-Math.cos(r))}return t.x=e+this.x0,t.y=i+this.y0,t},inverse:function(t){var e,i,r,n,a,o,h,u,l;if(r=t.x-this.x0,n=t.y-this.y0,this.sphere)if(Math.abs(n+this.a*this.lat0)<=s)e=I(r/this.a+this.long0),i=0;else{var c;for(o=this.lat0+n/this.a,h=r*r/this.a/this.a+o*o,u=o,a=20;a;--a)if(u+=l=-1*(o*(u*(c=Math.tan(u))+1)-u-.5*(u*u+h)*c)/((u-o)/c-1),Math.abs(l)<=s){i=u;break}e=I(this.long0+Math.asin(r*Math.tan(u)/this.a)/Math.sin(i))}else if(Math.abs(n+this.ml0)<=s)i=0,e=I(this.long0+r/this.a);else{var f,p,d,y,g;for(o=(this.ml0+n)/this.a,h=r*r/this.a/this.a+o*o,u=o,a=20;a;--a)if(g=this.e*Math.sin(u),f=Math.sqrt(1-g*g)*Math.tan(u),p=this.a*Dt(this.e0,this.e1,this.e2,this.e3,u),d=this.e0-2*this.e1*Math.cos(2*u)+4*this.e2*Math.cos(4*u)-6*this.e3*Math.cos(6*u),u-=l=(o*(f*(y=p/this.a)+1)-y-.5*f*(y*y+h))/(this.es*Math.sin(2*u)*(y*y+h-2*o*y)/(4*f)+(o-y)*(f*d-2/Math.sin(2*u))-d),Math.abs(l)<=s){i=u;break}f=Math.sqrt(1-this.es*Math.pow(Math.sin(i),2))*Math.tan(i),e=I(this.long0+Math.asin(r*f/this.a)/Math.sin(i))}return t.x=e,t.y=i,t},names:["Polyconic","poly"]},ne={init:function(){this.A=[],this.A[1]=.6399175073,this.A[2]=-.1358797613,this.A[3]=.063294409,this.A[4]=-.02526853,this.A[5]=.0117879,this.A[6]=-.0055161,this.A[7]=.0026906,this.A[8]=-.001333,this.A[9]=67e-5,this.A[10]=-34e-5,this.B_re=[],this.B_im=[],this.B_re[1]=.7557853228,this.B_im[1]=0,this.B_re[2]=.249204646,this.B_im[2]=.003371507,this.B_re[3]=-.001541739,this.B_im[3]=.04105856,this.B_re[4]=-.10162907,this.B_im[4]=.01727609,this.B_re[5]=-.26623489,this.B_im[5]=-.36249218,this.B_re[6]=-.6870983,this.B_im[6]=-1.1651967,this.C_re=[],this.C_im=[],this.C_re[1]=1.3231270439,this.C_im[1]=0,this.C_re[2]=-.577245789,this.C_im[2]=-.007809598,this.C_re[3]=.508307513,this.C_im[3]=-.112208952,this.C_re[4]=-.15094762,this.C_im[4]=.18200602,this.C_re[5]=1.01418179,this.C_im[5]=1.64497696,this.C_re[6]=1.9660549,this.C_im[6]=2.5127645,this.D=[],this.D[1]=1.5627014243,this.D[2]=.5185406398,this.D[3]=-.03333098,this.D[4]=-.1052906,this.D[5]=-.0368594,this.D[6]=.007317,this.D[7]=.0122,this.D[8]=.00394,this.D[9]=-.0013},forward:function(t){var e,i=t.x,n=t.y-this.lat0,s=i-this.long0,a=n/r*1e-5,o=s,h=1,u=0;for(e=1;e<=10;e++)h*=a,u+=this.A[e]*h;var l,c=u,f=o,p=1,d=0,y=0,g=0;for(e=1;e<=6;e++)l=d*c+p*f,p=p*c-d*f,d=l,y=y+this.B_re[e]*p-this.B_im[e]*d,g=g+this.B_im[e]*p+this.B_re[e]*d;return t.x=g*this.a+this.x0,t.y=y*this.a+this.y0,t},inverse:function(t){var e,i,n=t.x,s=t.y,a=n-this.x0,o=(s-this.y0)/this.a,h=a/this.a,u=1,l=0,c=0,f=0;for(e=1;e<=6;e++)i=l*o+u*h,u=u*o-l*h,l=i,c=c+this.C_re[e]*u-this.C_im[e]*l,f=f+this.C_im[e]*u+this.C_re[e]*l;for(var p=0;p<this.iterations;p++){var d,y=c,g=f,m=o,M=h;for(e=2;e<=6;e++)d=g*c+y*f,y=y*c-g*f,g=d,m+=(e-1)*(this.B_re[e]*y-this.B_im[e]*g),M+=(e-1)*(this.B_im[e]*y+this.B_re[e]*g);y=1,g=0;var b=this.B_re[1],v=this.B_im[1];for(e=2;e<=6;e++)d=g*c+y*f,y=y*c-g*f,g=d,b+=e*(this.B_re[e]*y-this.B_im[e]*g),v+=e*(this.B_im[e]*y+this.B_re[e]*g);var _=b*b+v*v;c=(m*b+M*v)/_,f=(M*b-m*v)/_}var w=c,x=f,S=1,E=0;for(e=1;e<=9;e++)S*=w,E+=this.D[e]*S;var R=this.lat0+E*r*1e5,P=this.long0+x;return t.x=P,t.y=R,t},names:["New_Zealand_Map_Grid","nzmg"]},se={init:function(){},forward:function(t){var e=t.x,i=t.y,r=I(e-this.long0),n=this.x0+this.a*r,s=this.y0+this.a*Math.log(Math.tan(Math.PI/4+i/2.5))*1.25;return t.x=n,t.y=s,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e=I(this.long0+t.x/this.a),i=2.5*(Math.atan(Math.exp(.8*t.y/this.a))-Math.PI/4);return t.x=e,t.y=i,t},names:["Miller_Cylindrical","mill"]},ae={init:function(){this.sphere?(this.n=1,this.m=0,this.es=0,this.C_y=Math.sqrt((this.m+1)/this.n),this.C_x=this.C_y/(this.m+1)):this.en=xt(this.es)},forward:function(t){var e,i,r=t.x,n=t.y;if(r=I(r-this.long0),this.sphere){if(this.m)for(var a=this.n*Math.sin(n),o=20;o;--o){var h=(this.m*n+Math.sin(n)-a)/(this.m+Math.cos(n));if(n-=h,Math.abs(h)<s)break}else n=1!==this.n?Math.asin(this.n*Math.sin(n)):n;e=this.a*this.C_x*r*(this.m+Math.cos(n)),i=this.a*this.C_y*n}else{var u=Math.sin(n),l=Math.cos(n);i=this.a*St(n,u,l,this.en),e=this.a*r*l/Math.sqrt(1-this.es*u*u)}return t.x=e,t.y=i,t},inverse:function(t){var e,i,r;return t.x-=this.x0,i=t.x/this.a,t.y-=this.y0,e=t.y/this.a,this.sphere?(e/=this.C_y,i/=this.C_x*(this.m+Math.cos(e)),this.m?e=Kt((this.m*e+Math.sin(e))/this.n):1!==this.n&&(e=Kt(Math.sin(e)/this.n)),i=I(i+this.long0),e=Vt(e)):(e=Et(t.y/this.a,this.es,this.en),(r=Math.abs(e))<n?(r=Math.sin(e),i=I(this.long0+t.x*Math.sqrt(1-this.es*r*r)/(this.a*Math.cos(e)))):r-s<n&&(i=this.long0)),t.x=i,t.y=e,t},names:["Sinusoidal","sinu"]},oe={init:function(){},forward:function(t){for(var e=t.x,i=t.y,r=I(e-this.long0),n=i,a=Math.PI*Math.sin(i);;){var o=-(n+Math.sin(n)-a)/(1+Math.cos(n));if(n+=o,Math.abs(o)<s)break}n/=2,Math.PI/2-Math.abs(i)<s&&(r=0);var h=.900316316158*this.a*r*Math.cos(n)+this.x0,u=1.4142135623731*this.a*Math.sin(n)+this.y0;return t.x=h,t.y=u,t},inverse:function(t){var e,i;t.x-=this.x0,t.y-=this.y0,i=t.y/(1.4142135623731*this.a),Math.abs(i)>.999999999999&&(i=.999999999999),e=Math.asin(i);var r=I(this.long0+t.x/(.900316316158*this.a*Math.cos(e)));r<-Math.PI&&(r=-Math.PI),r>Math.PI&&(r=Math.PI),i=(2*e+Math.sin(2*e))/Math.PI,Math.abs(i)>1&&(i=1);var n=Math.asin(i);return t.x=r,t.y=n,t},names:["Mollweide","moll"]},he={init:function(){Math.abs(this.lat1+this.lat2)<s||(this.lat2=this.lat2||this.lat1,this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.sinphi=Math.sin(this.lat1),this.cosphi=Math.cos(this.lat1),this.ms1=A(this.e,this.sinphi,this.cosphi),this.ml1=Dt(this.e0,this.e1,this.e2,this.e3,this.lat1),Math.abs(this.lat1-this.lat2)<s?this.ns=this.sinphi:(this.sinphi=Math.sin(this.lat2),this.cosphi=Math.cos(this.lat2),this.ms2=A(this.e,this.sinphi,this.cosphi),this.ml2=Dt(this.e0,this.e1,this.e2,this.e3,this.lat2),this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)),this.g=this.ml1+this.ms1/this.ns,this.ml0=Dt(this.e0,this.e1,this.e2,this.e3,this.lat0),this.rh=this.a*(this.g-this.ml0))},forward:function(t){var e,i=t.x,r=t.y;if(this.sphere)e=this.a*(this.g-r);else{var n=Dt(this.e0,this.e1,this.e2,this.e3,r);e=this.a*(this.g-n)}var s=this.ns*I(i-this.long0),a=this.x0+e*Math.sin(s),o=this.y0+this.rh-e*Math.cos(s);return t.x=a,t.y=o,t},inverse:function(t){var e,i,r,n;t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns>=0?(i=Math.sqrt(t.x*t.x+t.y*t.y),e=1):(i=-Math.sqrt(t.x*t.x+t.y*t.y),e=-1);var s=0;return 0!==i&&(s=Math.atan2(e*t.x,e*t.y)),this.sphere?(n=I(this.long0+s/this.ns),r=Vt(this.g-i/this.a),t.x=n,t.y=r,t):(r=Xt(this.g-i/this.a,this.e0,this.e1,this.e2,this.e3),n=I(this.long0+s/this.ns),t.x=n,t.y=r,t)},names:["Equidistant_Conic","eqdc"]},ue={init:function(){this.R=this.a},forward:function(t){var e,i,r=t.x,a=t.y,o=I(r-this.long0);Math.abs(a)<=s&&(e=this.x0+this.R*o,i=this.y0);var h=Kt(2*Math.abs(a/Math.PI));(Math.abs(o)<=s||Math.abs(Math.abs(a)-n)<=s)&&(e=this.x0,i=a>=0?this.y0+Math.PI*this.R*Math.tan(.5*h):this.y0+Math.PI*this.R*-Math.tan(.5*h));var u=.5*Math.abs(Math.PI/o-o/Math.PI),l=u*u,c=Math.sin(h),f=Math.cos(h),p=f/(c+f-1),d=p*p,y=p*(2/c-1),g=y*y,m=Math.PI*this.R*(u*(p-g)+Math.sqrt(l*(p-g)*(p-g)-(g+l)*(d-g)))/(g+l);o<0&&(m=-m),e=this.x0+m;var M=l+p;return m=Math.PI*this.R*(y*M-u*Math.sqrt((g+l)*(l+1)-M*M))/(g+l),i=a>=0?this.y0+m:this.y0-m,t.x=e,t.y=i,t},inverse:function(t){var e,i,r,n,a,o,h,u,l,c,f,p;return t.x-=this.x0,t.y-=this.y0,f=Math.PI*this.R,a=(r=t.x/f)*r+(n=t.y/f)*n,f=3*(n*n/(u=-2*(o=-Math.abs(n)*(1+a))+1+2*n*n+a*a)+(2*(h=o-2*n*n+r*r)*h*h/u/u/u-9*o*h/u/u)/27)/(l=(o-h*h/3/u)/u)/(c=2*Math.sqrt(-l/3)),Math.abs(f)>1&&(f=f>=0?1:-1),p=Math.acos(f)/3,i=t.y>=0?(-c*Math.cos(p+Math.PI/3)-h/3/u)*Math.PI:-(-c*Math.cos(p+Math.PI/3)-h/3/u)*Math.PI,e=Math.abs(r)<s?this.long0:I(this.long0+Math.PI*(a-1+Math.sqrt(1+2*(r*r-n*n)+a*a))/2/r),t.x=e,t.y=i,t},names:["Van_der_Grinten_I","VanDerGrinten","vandg"]},le={init:function(){this.sin_p12=Math.sin(this.lat0),this.cos_p12=Math.cos(this.lat0)},forward:function(t){var e,i,r,a,o,h,u,l,c,f,p,d,y,g,m,M,b,v,_,w,x,S,E=t.x,R=t.y,P=Math.sin(t.y),O=Math.cos(t.y),T=I(E-this.long0);return this.sphere?Math.abs(this.sin_p12-1)<=s?(t.x=this.x0+this.a*(n-R)*Math.sin(T),t.y=this.y0-this.a*(n-R)*Math.cos(T),t):Math.abs(this.sin_p12+1)<=s?(t.x=this.x0+this.a*(n+R)*Math.sin(T),t.y=this.y0+this.a*(n+R)*Math.cos(T),t):(v=this.sin_p12*P+this.cos_p12*O*Math.cos(T),b=(M=Math.acos(v))?M/Math.sin(M):1,t.x=this.x0+this.a*b*O*Math.sin(T),t.y=this.y0+this.a*b*(this.cos_p12*P-this.sin_p12*O*Math.cos(T)),t):(e=Ft(this.es),i=Wt(this.es),r=zt(this.es),a=Ht(this.es),Math.abs(this.sin_p12-1)<=s?(o=this.a*Dt(e,i,r,a,n),h=this.a*Dt(e,i,r,a,R),t.x=this.x0+(o-h)*Math.sin(T),t.y=this.y0-(o-h)*Math.cos(T),t):Math.abs(this.sin_p12+1)<=s?(o=this.a*Dt(e,i,r,a,n),h=this.a*Dt(e,i,r,a,R),t.x=this.x0+(o+h)*Math.sin(T),t.y=this.y0+(o+h)*Math.cos(T),t):(u=P/O,l=Qt(this.a,this.e,this.sin_p12),c=Qt(this.a,this.e,P),f=Math.atan((1-this.es)*u+this.es*l*this.sin_p12/(c*O)),_=0===(p=Math.atan2(Math.sin(T),this.cos_p12*Math.tan(f)-this.sin_p12*Math.cos(T)))?Math.asin(this.cos_p12*Math.sin(f)-this.sin_p12*Math.cos(f)):Math.abs(Math.abs(p)-Math.PI)<=s?-Math.asin(this.cos_p12*Math.sin(f)-this.sin_p12*Math.cos(f)):Math.asin(Math.sin(T)*Math.cos(f)/Math.sin(p)),d=this.e*this.sin_p12/Math.sqrt(1-this.es),M=l*_*(1-(w=_*_)*(m=(y=this.e*this.cos_p12*Math.cos(p)/Math.sqrt(1-this.es))*y)*(1-m)/6+(x=w*_)/8*(g=d*y)*(1-2*m)+(S=x*_)/120*(m*(4-7*m)-3*d*d*(1-7*m))-S*_/48*g),t.x=this.x0+M*Math.sin(p),t.y=this.y0+M*Math.cos(p),t))},inverse:function(t){var e,i,r,a,o,h,u,l,c,f,p,d,y,g,m,M,b,v,_,w,x,S,E;if(t.x-=this.x0,t.y-=this.y0,this.sphere){if((e=Math.sqrt(t.x*t.x+t.y*t.y))>2*n*this.a)return;return i=e/this.a,r=Math.sin(i),a=Math.cos(i),o=this.long0,Math.abs(e)<=s?h=this.lat0:(h=Kt(a*this.sin_p12+t.y*r*this.cos_p12/e),u=Math.abs(this.lat0)-n,o=Math.abs(u)<=s?this.lat0>=0?I(this.long0+Math.atan2(t.x,-t.y)):I(this.long0-Math.atan2(-t.x,t.y)):I(this.long0+Math.atan2(t.x*r,e*this.cos_p12*a-t.y*this.sin_p12*r))),t.x=o,t.y=h,t}return l=Ft(this.es),c=Wt(this.es),f=zt(this.es),p=Ht(this.es),Math.abs(this.sin_p12-1)<=s?(h=Xt(((d=this.a*Dt(l,c,f,p,n))-(e=Math.sqrt(t.x*t.x+t.y*t.y)))/this.a,l,c,f,p),o=I(this.long0+Math.atan2(t.x,-1*t.y)),t.x=o,t.y=h,t):Math.abs(this.sin_p12+1)<=s?(d=this.a*Dt(l,c,f,p,n),h=Xt(((e=Math.sqrt(t.x*t.x+t.y*t.y))-d)/this.a,l,c,f,p),o=I(this.long0+Math.atan2(t.x,t.y)),t.x=o,t.y=h,t):(e=Math.sqrt(t.x*t.x+t.y*t.y),m=Math.atan2(t.x,t.y),y=Qt(this.a,this.e,this.sin_p12),M=Math.cos(m),v=-(b=this.e*this.cos_p12*M)*b/(1-this.es),_=3*this.es*(1-v)*this.sin_p12*this.cos_p12*M/(1-this.es),S=1-v*(x=(w=e/y)-v*(1+v)*Math.pow(w,3)/6-_*(1+3*v)*Math.pow(w,4)/24)*x/2-w*x*x*x/6,g=Math.asin(this.sin_p12*Math.cos(x)+this.cos_p12*Math.sin(x)*M),o=I(this.long0+Math.asin(Math.sin(m)*Math.sin(x)/Math.cos(g))),E=Math.sin(g),h=Math.atan2((E-this.es*S*this.sin_p12)*Math.tan(g),E*(1-this.es)),t.x=o,t.y=h,t)},names:["Azimuthal_Equidistant","aeqd"]},ce={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0)},forward:function(t){var e,i,r,n,a,o,h,u=t.x,l=t.y;return r=I(u-this.long0),e=Math.sin(l),i=Math.cos(l),n=Math.cos(r),((a=this.sin_p14*e+this.cos_p14*i*n)>0||Math.abs(a)<=s)&&(o=1*this.a*i*Math.sin(r),h=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*i*n)),t.x=o,t.y=h,t},inverse:function(t){var e,i,r,a,o,h,u;return t.x-=this.x0,t.y-=this.y0,i=Kt((e=Math.sqrt(t.x*t.x+t.y*t.y))/this.a),r=Math.sin(i),a=Math.cos(i),h=this.long0,Math.abs(e)<=s?(u=this.lat0,t.x=h,t.y=u,t):(u=Kt(a*this.sin_p14+t.y*r*this.cos_p14/e),o=Math.abs(this.lat0)-n,Math.abs(o)<=s?(h=this.lat0>=0?I(this.long0+Math.atan2(t.x,-t.y)):I(this.long0-Math.atan2(-t.x,t.y)),t.x=h,t.y=u,t):(h=I(this.long0+Math.atan2(t.x*r,e*this.cos_p14*a-t.y*this.sin_p14*r)),t.x=h,t.y=u,t))},names:["ortho"]};function fe(t,e,i,r){var a;return t<s?(r.value=1,a=0):(a=Math.atan2(e,i),Math.abs(a)<=h?r.value=1:a>h&&a<=n+h?(r.value=2,a-=n):a>n+h||a<=-(n+h)?(r.value=3,a=a>=0?a-l:a+l):(r.value=4,a+=n)),a}function pe(t,e){var i=t+e;return i<-l?i+=u:i>+l&&(i-=u),i}const de={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Quadrilateralized Spherical Cube",this.lat0>=n-h/2?this.face=5:this.lat0<=-(n-h/2)?this.face=6:Math.abs(this.long0)<=h?this.face=1:Math.abs(this.long0)<=n+h?this.face=this.long0>0?2:4:this.face=3,0!==this.es&&(this.one_minus_f=1-(this.a-this.b)/this.a,this.one_minus_f_squared=this.one_minus_f*this.one_minus_f)},forward:function(t){var e,i,r,s,a,o,u={x:0,y:0},c={value:0};if(t.x-=this.long0,e=0!==this.es?Math.atan(this.one_minus_f_squared*Math.tan(t.y)):t.y,i=t.x,5===this.face)s=n-e,i>=h&&i<=n+h?(c.value=1,r=i-n):i>n+h||i<=-(n+h)?(c.value=2,r=i>0?i-l:i+l):i>-(n+h)&&i<=-h?(c.value=3,r=i+n):(c.value=4,r=i);else if(6===this.face)s=n+e,i>=h&&i<=n+h?(c.value=1,r=-i+n):i<h&&i>=-h?(c.value=2,r=-i):i<-h&&i>=-(n+h)?(c.value=3,r=-i-n):(c.value=4,r=i>0?-i+l:-i-l);else{var f,p,d,y,g,m;2===this.face?i=pe(i,+n):3===this.face?i=pe(i,+l):4===this.face&&(i=pe(i,-n)),y=Math.sin(e),g=Math.cos(e),m=Math.sin(i),f=g*Math.cos(i),p=g*m,d=y,1===this.face?r=fe(s=Math.acos(f),d,p,c):2===this.face?r=fe(s=Math.acos(p),d,-f,c):3===this.face?r=fe(s=Math.acos(-f),d,-p,c):4===this.face?r=fe(s=Math.acos(-p),d,f,c):(s=r=0,c.value=1)}return o=Math.atan(12/l*(r+Math.acos(Math.sin(r)*Math.cos(h))-n)),a=Math.sqrt((1-Math.cos(s))/(Math.cos(o)*Math.cos(o))/(1-Math.cos(Math.atan(1/Math.cos(r))))),2===c.value?o+=n:3===c.value?o+=l:4===c.value&&(o+=1.5*l),u.x=a*Math.cos(o),u.y=a*Math.sin(o),u.x=u.x*this.a+this.x0,u.y=u.y*this.a+this.y0,t.x=u.x,t.y=u.y,t},inverse:function(t){var e,i,r,s,a,o,h,u,c,f,p,d,y={lam:0,phi:0},g={value:0};if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,i=Math.atan(Math.sqrt(t.x*t.x+t.y*t.y)),e=Math.atan2(t.y,t.x),t.x>=0&&t.x>=Math.abs(t.y)?g.value=1:t.y>=0&&t.y>=Math.abs(t.x)?(g.value=2,e-=n):t.x<0&&-t.x>=Math.abs(t.y)?(g.value=3,e=e<0?e+l:e-l):(g.value=4,e+=n),c=l/12*Math.tan(e),a=Math.sin(c)/(Math.cos(c)-1/Math.sqrt(2)),o=Math.atan(a),(h=1-(r=Math.cos(e))*r*(s=Math.tan(i))*s*(1-Math.cos(Math.atan(1/Math.cos(o)))))<-1?h=-1:h>1&&(h=1),5===this.face)u=Math.acos(h),y.phi=n-u,1===g.value?y.lam=o+n:2===g.value?y.lam=o<0?o+l:o-l:3===g.value?y.lam=o-n:y.lam=o;else if(6===this.face)u=Math.acos(h),y.phi=u-n,1===g.value?y.lam=-o+n:2===g.value?y.lam=-o:3===g.value?y.lam=-o-n:y.lam=o<0?-o-l:-o+l;else{var m,M,b;c=(m=h)*m,M=(c+=(b=c>=1?0:Math.sqrt(1-c)*Math.sin(o))*b)>=1?0:Math.sqrt(1-c),2===g.value?(c=M,M=-b,b=c):3===g.value?(M=-M,b=-b):4===g.value&&(c=M,M=b,b=-c),2===this.face?(c=m,m=-M,M=c):3===this.face?(m=-m,M=-M):4===this.face&&(c=m,m=M,M=-c),y.phi=Math.acos(-b)-n,y.lam=Math.atan2(M,m),2===this.face?y.lam=pe(y.lam,-n):3===this.face?y.lam=pe(y.lam,-l):4===this.face&&(y.lam=pe(y.lam,+n))}return 0!==this.es&&(f=y.phi<0?1:0,p=Math.tan(y.phi),d=this.b/Math.sqrt(p*p+this.one_minus_f_squared),y.phi=Math.atan(Math.sqrt(this.a*this.a-d*d)/(this.one_minus_f*d)),f&&(y.phi=-y.phi)),y.lam+=this.long0,t.x=y.lam,t.y=y.phi,t},names:["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"]};var ye=[[1,22199e-21,-715515e-10,31103e-10],[.9986,-482243e-9,-24897e-9,-13309e-10],[.9954,-83103e-8,-448605e-10,-9.86701e-7],[.99,-.00135364,-59661e-9,36777e-10],[.9822,-.00167442,-449547e-11,-572411e-11],[.973,-.00214868,-903571e-10,1.8736e-8],[.96,-.00305085,-900761e-10,164917e-11],[.9427,-.00382792,-653386e-10,-26154e-10],[.9216,-.00467746,-10457e-8,481243e-11],[.8962,-.00536223,-323831e-10,-543432e-11],[.8679,-.00609363,-113898e-9,332484e-11],[.835,-.00698325,-640253e-10,9.34959e-7],[.7986,-.00755338,-500009e-10,9.35324e-7],[.7597,-.00798324,-35971e-9,-227626e-11],[.7186,-.00851367,-701149e-10,-86303e-10],[.6732,-.00986209,-199569e-9,191974e-10],[.6213,-.010418,883923e-10,624051e-11],[.5722,-.00906601,182e-6,624051e-11],[.5322,-.00677797,275608e-9,624051e-11]],ge=[[-520417e-23,.0124,121431e-23,-845284e-16],[.062,.0124,-1.26793e-9,4.22642e-10],[.124,.0124,5.07171e-9,-1.60604e-9],[.186,.0123999,-1.90189e-8,6.00152e-9],[.248,.0124002,7.10039e-8,-2.24e-8],[.31,.0123992,-2.64997e-7,8.35986e-8],[.372,.0124029,9.88983e-7,-3.11994e-7],[.434,.0123893,-369093e-11,-4.35621e-7],[.4958,.0123198,-102252e-10,-3.45523e-7],[.5571,.0121916,-154081e-10,-5.82288e-7],[.6176,.0119938,-241424e-10,-5.25327e-7],[.6769,.011713,-320223e-10,-5.16405e-7],[.7346,.0113541,-397684e-10,-6.09052e-7],[.7903,.0109107,-489042e-10,-104739e-11],[.8435,.0103431,-64615e-9,-1.40374e-9],[.8936,.00969686,-64636e-9,-8547e-9],[.9394,.00840947,-192841e-9,-42106e-10],[.9761,.00616527,-256e-6,-42106e-10],[1,.00328947,-319159e-9,-42106e-10]],me=.8487,Me=1.3523,be=function(t,e){return t[0]+e*(t[1]+e*(t[2]+e*t[3]))};const ve={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.long0=this.long0||0,this.es=0,this.title=this.title||"Robinson"},forward:function(t){var e=I(t.x-this.long0),i=Math.abs(t.y),r=Math.floor(11.459155902616464*i);r<0?r=0:r>=18&&(r=17);var n={x:be(ye[r],i=o*(i-.08726646259971647*r))*e,y:be(ge[r],i)};return t.y<0&&(n.y=-n.y),n.x=n.x*this.a*me+this.x0,n.y=n.y*this.a*Me+this.y0,n},inverse:function(t){var e={x:(t.x-this.x0)/(this.a*me),y:Math.abs(t.y-this.y0)/(this.a*Me)};if(e.y>=1)e.x/=ye[18][0],e.y=t.y<0?-n:n;else{var i=Math.floor(18*e.y);for(i<0?i=0:i>=18&&(i=17);;)if(ge[i][0]>e.y)--i;else{if(!(ge[i+1][0]<=e.y))break;++i}var r=ge[i],s=5*(e.y-r[0])/(ge[i+1][0]-r[0]);s=function(t,e,i,r){for(var n=e;r;--r){var s=t(n);if(n-=s,Math.abs(s)<1e-10)break}return n}((function(t){return(be(r,t)-e.y)/function(t,e){return t[1]+e*(2*t[2]+3*e*t[3])}(r,t)}),s,0,100),e.x/=be(ye[i],s),e.y=(5*i+s)*a,t.y<0&&(e.y=-e.y)}return e.x=I(e.x+this.long0),e},names:["Robinson","robin"]},_e={init:function(){this.name="geocent"},forward:function(t){return V(t,this.es,this.a)},inverse:function(t){return X(t,this.es,this.a,this.b)},names:["Geocentric","geocentric","geocent","Geocent"]};var we={h:{def:1e5,num:!0},azi:{def:0,num:!0,degrees:!0},tilt:{def:0,num:!0,degrees:!0},long0:{def:0,num:!0},lat0:{def:0,num:!0}};const xe={init:function(){if(Object.keys(we).forEach(function(t){if(void 0===this[t])this[t]=we[t].def;else{if(we[t].num&&isNaN(this[t]))throw new Error("Invalid parameter value, must be numeric "+t+" = "+this[t]);we[t].num&&(this[t]=parseFloat(this[t]))}we[t].degrees&&(this[t]=this[t]*a)}.bind(this)),Math.abs(Math.abs(this.lat0)-n)<s?this.mode=this.lat0<0?1:0:Math.abs(this.lat0)<s?this.mode=2:(this.mode=3,this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0)),this.pn1=this.h/this.a,this.pn1<=0||this.pn1>1e10)throw new Error("Invalid height");this.p=1+this.pn1,this.rp=1/this.p,this.h1=1/this.pn1,this.pfact=(this.p+1)*this.h1,this.es=0;var t=this.tilt,e=this.azi;this.cg=Math.cos(e),this.sg=Math.sin(e),this.cw=Math.cos(t),this.sw=Math.sin(t)},forward:function(t){t.x-=this.long0;var e,i,r,n,s=Math.sin(t.y),a=Math.cos(t.y),o=Math.cos(t.x);switch(this.mode){case 3:i=this.sinph0*s+this.cosph0*a*o;break;case 2:i=a*o;break;case 1:i=-s;break;case 0:i=s}switch(e=(i=this.pn1/(this.p-i))*a*Math.sin(t.x),this.mode){case 3:i*=this.cosph0*s-this.sinph0*a*o;break;case 2:i*=s;break;case 0:i*=-a*o;break;case 1:i*=a*o}return n=1/((r=i*this.cg+e*this.sg)*this.sw*this.h1+this.cw),e=(e*this.cg-i*this.sg)*this.cw*n,i=r*n,t.x=e*this.a,t.y=i*this.a,t},inverse:function(t){t.x/=this.a,t.y/=this.a;var e,i,r,n={x:t.x,y:t.y};r=1/(this.pn1-t.y*this.sw),e=this.pn1*t.x*r,i=this.pn1*t.y*this.cw*r,t.x=e*this.cg+i*this.sg,t.y=i*this.cg-e*this.sg;var a=Ot(t.x,t.y);if(Math.abs(a)<s)n.x=0,n.y=t.y;else{var o,h;switch(h=1-a*a*this.pfact,h=(this.p-Math.sqrt(h))/(this.pn1/a+a/this.pn1),o=Math.sqrt(1-h*h),this.mode){case 3:n.y=Math.asin(o*this.sinph0+t.y*h*this.cosph0/a),t.y=(o-this.sinph0*Math.sin(n.y))*a,t.x*=h*this.cosph0;break;case 2:n.y=Math.asin(t.y*h/a),t.y=o*a,t.x*=h;break;case 0:n.y=Math.asin(o),t.y=-t.y;break;case 1:n.y=-Math.asin(o)}n.x=Math.atan2(t.x,t.y)}return t.x=n.x+this.long0,t.y=n.y,t},names:["Tilted_Perspective","tpers"]};var Se;rt.defaultDatum="WGS84",rt.Proj=Q,rt.WGS84=new rt.Proj("WGS84"),rt.Point=bt,rt.toPoint=J,rt.defs=P,rt.transform=Z,rt.mgrs=ut,rt.version="__VERSION__",(Se=rt).Proj.projections.add(Rt),Se.Proj.projections.add(At),Se.Proj.projections.add(kt),Se.Proj.projections.add(Lt),Se.Proj.projections.add(jt),Se.Proj.projections.add(Ut),Se.Proj.projections.add(qt),Se.Proj.projections.add(Bt),Se.Proj.projections.add(Gt),Se.Proj.projections.add(Yt),Se.Proj.projections.add(Jt),Se.Proj.projections.add(Zt),Se.Proj.projections.add(te),Se.Proj.projections.add(ee),Se.Proj.projections.add(ie),Se.Proj.projections.add(re),Se.Proj.projections.add(ne),Se.Proj.projections.add(se),Se.Proj.projections.add(ae),Se.Proj.projections.add(oe),Se.Proj.projections.add(he),Se.Proj.projections.add(ue),Se.Proj.projections.add(le),Se.Proj.projections.add(ce),Se.Proj.projections.add(de),Se.Proj.projections.add(ve),Se.Proj.projections.add(_e),Se.Proj.projections.add(xe);const Ee=rt},587:t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,i,r,n){i=i||"&",r=r||"=";var s={};if("string"!=typeof t||0===t.length)return s;var a=/\+/g;t=t.split(i);var o=1e3;n&&"number"==typeof n.maxKeys&&(o=n.maxKeys);var h=t.length;o>0&&h>o&&(h=o);for(var u=0;u<h;++u){var l,c,f,p,d=t[u].replace(a,"%20"),y=d.indexOf(r);y>=0?(l=d.substr(0,y),c=d.substr(y+1)):(l=d,c=""),f=decodeURIComponent(l),p=decodeURIComponent(c),e(s,f)?Array.isArray(s[f])?s[f].push(p):s[f]=[s[f],p]:s[f]=p}return s}},361:t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,i,r,n){return i=i||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(n){var s=encodeURIComponent(e(n))+r;return Array.isArray(t[n])?t[n].map((function(t){return s+encodeURIComponent(e(t))})).join(i):s+encodeURIComponent(e(t[n]))})).join(i):n?encodeURIComponent(e(n))+r+encodeURIComponent(e(t)):""}},673:(t,e,i)=>{"use strict";e.decode=e.parse=i(587),e.encode=e.stringify=i(361)},509:(t,e,i)=>{var r=i(764),n=r.Buffer;function s(t,e){for(var i in t)e[i]=t[i]}function a(t,e,i){return n(t,e,i)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=r:(s(r,e),e.Buffer=a),s(n,a),a.from=function(t,e,i){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,e,i)},a.alloc=function(t,e,i){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=n(t);return void 0!==e?"string"==typeof i?r.fill(e,i):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},501:(t,e,i)=>{var r=i(989),n=i(676),s=i(529),a=i(584),o=i(575),h=e;h.request=function(t,e){t="string"==typeof t?o.parse(t):s(t);var n=-1===i.g.location.protocol.search(/^https?:$/)?"http:":"",a=t.protocol||n,h=t.hostname||t.host,u=t.port,l=t.path||"/";h&&-1!==h.indexOf(":")&&(h="["+h+"]"),t.url=(h?a+"//"+h:"")+(u?":"+u:"")+l,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var c=new r(t);return e&&c.on("response",e),c},h.get=function(t,e){var i=h.request(t,e);return i.end(),i},h.ClientRequest=r,h.IncomingMessage=n.IncomingMessage,h.Agent=function(){},h.Agent.defaultMaxSockets=4,h.globalAgent=new h.Agent,h.STATUS_CODES=a,h.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]},725:(t,e,i)=>{var r;function n(){if(void 0!==r)return r;if(i.g.XMLHttpRequest){r=new i.g.XMLHttpRequest;try{r.open("GET",i.g.XDomainRequest?"/":"https://example.com")}catch(t){r=null}}else r=null;return r}function s(t){var e=n();if(!e)return!1;try{return e.responseType=t,e.responseType===t}catch(t){}return!1}function a(t){return"function"==typeof t}e.fetch=a(i.g.fetch)&&a(i.g.ReadableStream),e.writableStream=a(i.g.WritableStream),e.abortController=a(i.g.AbortController),e.arraybuffer=e.fetch||s("arraybuffer"),e.msstream=!e.fetch&&s("ms-stream"),e.mozchunkedarraybuffer=!e.fetch&&s("moz-chunked-arraybuffer"),e.overrideMimeType=e.fetch||!!n()&&a(n().overrideMimeType),r=null},989:(t,e,i)=>{var r=i(725),n=i(717),s=i(676),a=i(925),o=s.IncomingMessage,h=s.readyStates,u=t.exports=function(t){var e,i=this;a.Writable.call(i),i._opts=t,i._body=[],i._headers={},t.auth&&i.setHeader("Authorization","Basic "+Buffer.from(t.auth).toString("base64")),Object.keys(t.headers).forEach((function(e){i.setHeader(e,t.headers[e])}));var n=!0;if("disable-fetch"===t.mode||"requestTimeout"in t&&!r.abortController)n=!1,e=!0;else if("prefer-streaming"===t.mode)e=!1;else if("allow-wrong-content-type"===t.mode)e=!r.overrideMimeType;else{if(t.mode&&"default"!==t.mode&&"prefer-fast"!==t.mode)throw new Error("Invalid value for opts.mode");e=!0}i._mode=function(t,e){return r.fetch&&e?"fetch":r.mozchunkedarraybuffer?"moz-chunked-arraybuffer":r.msstream?"ms-stream":r.arraybuffer&&t?"arraybuffer":"text"}(e,n),i._fetchTimer=null,i.on("finish",(function(){i._onFinish()}))};n(u,a.Writable),u.prototype.setHeader=function(t,e){var i=t.toLowerCase();-1===l.indexOf(i)&&(this._headers[i]={name:t,value:e})},u.prototype.getHeader=function(t){var e=this._headers[t.toLowerCase()];return e?e.value:null},u.prototype.removeHeader=function(t){delete this._headers[t.toLowerCase()]},u.prototype._onFinish=function(){var t=this;if(!t._destroyed){var e=t._opts,n=t._headers,s=null;"GET"!==e.method&&"HEAD"!==e.method&&(s=new Blob(t._body,{type:(n["content-type"]||{}).value||""}));var a=[];if(Object.keys(n).forEach((function(t){var e=n[t].name,i=n[t].value;Array.isArray(i)?i.forEach((function(t){a.push([e,t])})):a.push([e,i])})),"fetch"===t._mode){var o=null;if(r.abortController){var u=new AbortController;o=u.signal,t._fetchAbortController=u,"requestTimeout"in e&&0!==e.requestTimeout&&(t._fetchTimer=i.g.setTimeout((function(){t.emit("requestTimeout"),t._fetchAbortController&&t._fetchAbortController.abort()}),e.requestTimeout))}i.g.fetch(t._opts.url,{method:t._opts.method,headers:a,body:s||void 0,mode:"cors",credentials:e.withCredentials?"include":"same-origin",signal:o}).then((function(e){t._fetchResponse=e,t._connect()}),(function(e){i.g.clearTimeout(t._fetchTimer),t._destroyed||t.emit("error",e)}))}else{var l=t._xhr=new i.g.XMLHttpRequest;try{l.open(t._opts.method,t._opts.url,!0)}catch(e){return void process.nextTick((function(){t.emit("error",e)}))}"responseType"in l&&(l.responseType=t._mode),"withCredentials"in l&&(l.withCredentials=!!e.withCredentials),"text"===t._mode&&"overrideMimeType"in l&&l.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in e&&(l.timeout=e.requestTimeout,l.ontimeout=function(){t.emit("requestTimeout")}),a.forEach((function(t){l.setRequestHeader(t[0],t[1])})),t._response=null,l.onreadystatechange=function(){switch(l.readyState){case h.LOADING:case h.DONE:t._onXHRProgress()}},"moz-chunked-arraybuffer"===t._mode&&(l.onprogress=function(){t._onXHRProgress()}),l.onerror=function(){t._destroyed||t.emit("error",new Error("XHR error"))};try{l.send(s)}catch(e){return void process.nextTick((function(){t.emit("error",e)}))}}}},u.prototype._onXHRProgress=function(){var t=this;(function(t){try{var e=t.status;return null!==e&&0!==e}catch(t){return!1}})(t._xhr)&&!t._destroyed&&(t._response||t._connect(),t._response._onXHRProgress())},u.prototype._connect=function(){var t=this;t._destroyed||(t._response=new o(t._xhr,t._fetchResponse,t._mode,t._fetchTimer),t._response.on("error",(function(e){t.emit("error",e)})),t.emit("response",t._response))},u.prototype._write=function(t,e,i){this._body.push(t),i()},u.prototype.abort=u.prototype.destroy=function(){var t=this;t._destroyed=!0,i.g.clearTimeout(t._fetchTimer),t._response&&(t._response._destroyed=!0),t._xhr?t._xhr.abort():t._fetchAbortController&&t._fetchAbortController.abort()},u.prototype.end=function(t,e,i){"function"==typeof t&&(i=t,t=void 0),a.Writable.prototype.end.call(this,t,e,i)},u.prototype.flushHeaders=function(){},u.prototype.setTimeout=function(){},u.prototype.setNoDelay=function(){},u.prototype.setSocketKeepAlive=function(){};var l=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]},676:(t,e,i)=>{var r=i(725),n=i(717),s=i(925),a=e.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},o=e.IncomingMessage=function(t,e,n,a){var o=this;if(s.Readable.call(o),o._mode=n,o.headers={},o.rawHeaders=[],o.trailers={},o.rawTrailers=[],o.on("end",(function(){process.nextTick((function(){o.emit("close")}))})),"fetch"===n){if(o._fetchResponse=e,o.url=e.url,o.statusCode=e.status,o.statusMessage=e.statusText,e.headers.forEach((function(t,e){o.headers[e.toLowerCase()]=t,o.rawHeaders.push(e,t)})),r.writableStream){var h=new WritableStream({write:function(t){return new Promise((function(e,i){o._destroyed?i():o.push(Buffer.from(t))?e():o._resumeFetch=e}))},close:function(){i.g.clearTimeout(a),o._destroyed||o.push(null)},abort:function(t){o._destroyed||o.emit("error",t)}});try{return void e.body.pipeTo(h).catch((function(t){i.g.clearTimeout(a),o._destroyed||o.emit("error",t)}))}catch(t){}}var u=e.body.getReader();!function t(){u.read().then((function(e){if(!o._destroyed){if(e.done)return i.g.clearTimeout(a),void o.push(null);o.push(Buffer.from(e.value)),t()}})).catch((function(t){i.g.clearTimeout(a),o._destroyed||o.emit("error",t)}))}()}else if(o._xhr=t,o._pos=0,o.url=t.responseURL,o.statusCode=t.status,o.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach((function(t){var e=t.match(/^([^:]+):\s*(.*)/);if(e){var i=e[1].toLowerCase();"set-cookie"===i?(void 0===o.headers[i]&&(o.headers[i]=[]),o.headers[i].push(e[2])):void 0!==o.headers[i]?o.headers[i]+=", "+e[2]:o.headers[i]=e[2],o.rawHeaders.push(e[1],e[2])}})),o._charset="x-user-defined",!r.overrideMimeType){var l=o.rawHeaders["mime-type"];if(l){var c=l.match(/;\s*charset=([^;])(;|$)/);c&&(o._charset=c[1].toLowerCase())}o._charset||(o._charset="utf-8")}};n(o,s.Readable),o.prototype._read=function(){var t=this._resumeFetch;t&&(this._resumeFetch=null,t())},o.prototype._onXHRProgress=function(){var t=this,e=t._xhr,r=null;switch(t._mode){case"text":if((r=e.responseText).length>t._pos){var n=r.substr(t._pos);if("x-user-defined"===t._charset){for(var s=Buffer.alloc(n.length),o=0;o<n.length;o++)s[o]=255&n.charCodeAt(o);t.push(s)}else t.push(n,t._charset);t._pos=r.length}break;case"arraybuffer":if(e.readyState!==a.DONE||!e.response)break;r=e.response,t.push(Buffer.from(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=e.response,e.readyState!==a.LOADING||!r)break;t.push(Buffer.from(new Uint8Array(r)));break;case"ms-stream":if(r=e.response,e.readyState!==a.LOADING)break;var h=new i.g.MSStreamReader;h.onprogress=function(){h.result.byteLength>t._pos&&(t.push(Buffer.from(new Uint8Array(h.result.slice(t._pos)))),t._pos=h.result.byteLength)},h.onload=function(){t.push(null)},h.readAsArrayBuffer(r)}t._xhr.readyState===a.DONE&&"ms-stream"!==t._mode&&t.push(null)}},303:t=>{"use strict";var e={};function i(t,i,r){r||(r=Error);var n=function(t){var e,r;function n(e,r,n){return t.call(this,function(t,e,r){return"string"==typeof i?i:i(t,e,r)}(e,r,n))||this}return r=t,(e=n).prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r,n}(r);n.prototype.name=r.name,n.prototype.code=t,e[t]=n}function r(t,e){if(Array.isArray(t)){var i=t.length;return t=t.map((function(t){return String(t)})),i>2?"one of ".concat(e," ").concat(t.slice(0,i-1).join(", "),", or ")+t[i-1]:2===i?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}i("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),i("ERR_INVALID_ARG_TYPE",(function(t,e,i){var n,s,a,o,h;if("string"==typeof e&&(s="not ",e.substr(0,s.length)===s)?(n="must not be",e=e.replace(/^not /,"")):n="must be",function(t,e,i){return(void 0===i||i>t.length)&&(i=t.length),t.substring(i-e.length,i)===e}(t," argument"))a="The ".concat(t," ").concat(n," ").concat(r(e,"type"));else{var u=("number"!=typeof h&&(h=0),h+".".length>(o=t).length||-1===o.indexOf(".",h)?"argument":"property");a='The "'.concat(t,'" ').concat(u," ").concat(n," ").concat(r(e,"type"))}return a+". Received type ".concat(typeof i)}),TypeError),i("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),i("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),i("ERR_STREAM_PREMATURE_CLOSE","Premature close"),i("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),i("ERR_STREAM_WRITE_AFTER_END","write after end"),i("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),i("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},560:(t,e,i)=>{"use strict";var r=Object.keys||function(t){var e=[];for(var i in t)e.push(i);return e};t.exports=u;var n=i(2),s=i(313);i(717)(u,n);for(var a=r(s.prototype),o=0;o<a.length;o++){var h=a[o];u.prototype[h]||(u.prototype[h]=s.prototype[h])}function u(t){if(!(this instanceof u))return new u(t);n.call(this,t),s.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",l)))}function l(){this._writableState.ended||process.nextTick(c,this)}function c(t){t.end()}Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(u.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(u.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(u.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},842:(t,e,i)=>{"use strict";t.exports=n;var r=i(846);function n(t){if(!(this instanceof n))return new n(t);r.call(this,t)}i(717)(n,r),n.prototype._transform=function(t,e,i){i(null,t)}},2:(t,e,i)=>{"use strict";var r;t.exports=S,S.ReadableState=x,i(187).EventEmitter;var n,s=function(t,e){return t.listeners(e).length},a=i(463),o=i(764).Buffer,h=i.g.Uint8Array||function(){},u=i(758);n=u&&u.debuglog?u.debuglog("stream"):function(){};var l,c,f,p=i(641),d=i(369),y=i(624).getHighWaterMark,g=i(303).q,m=g.ERR_INVALID_ARG_TYPE,M=g.ERR_STREAM_PUSH_AFTER_EOF,b=g.ERR_METHOD_NOT_IMPLEMENTED,v=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;i(717)(S,a);var _=d.errorOrDestroy,w=["error","close","destroy","pause","resume"];function x(t,e,n){r=r||i(560),t=t||{},"boolean"!=typeof n&&(n=e instanceof r),this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=y(this,t,"readableHighWaterMark",n),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(l||(l=i(553).s),this.decoder=new l(t.encoding),this.encoding=t.encoding)}function S(t){if(r=r||i(560),!(this instanceof S))return new S(t);var e=this instanceof r;this._readableState=new x(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function E(t,e,i,r,s){n("readableAddChunk",e);var a,u=t._readableState;if(null===e)u.reading=!1,function(t,e){if(n("onEofChunk"),!e.ended){if(e.decoder){var i=e.decoder.end();i&&i.length&&(e.buffer.push(i),e.length+=e.objectMode?1:i.length)}e.ended=!0,e.sync?T(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,C(t)))}}(t,u);else if(s||(a=function(t,e){var i,r;return r=e,o.isBuffer(r)||r instanceof h||"string"==typeof e||void 0===e||t.objectMode||(i=new m("chunk",["string","Buffer","Uint8Array"],e)),i}(u,e)),a)_(t,a);else if(u.objectMode||e&&e.length>0)if("string"==typeof e||u.objectMode||Object.getPrototypeOf(e)===o.prototype||(e=function(t){return o.from(t)}(e)),r)u.endEmitted?_(t,new v):R(t,u,e,!0);else if(u.ended)_(t,new M);else{if(u.destroyed)return!1;u.reading=!1,u.decoder&&!i?(e=u.decoder.write(e),u.objectMode||0!==e.length?R(t,u,e,!1):A(t,u)):R(t,u,e,!1)}else r||(u.reading=!1,A(t,u));return!u.ended&&(u.length<u.highWaterMark||0===u.length)}function R(t,e,i,r){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",i)):(e.length+=e.objectMode?1:i.length,r?e.buffer.unshift(i):e.buffer.push(i),e.needReadable&&T(t)),A(t,e)}Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),S.prototype.destroy=d.destroy,S.prototype._undestroy=d.undestroy,S.prototype._destroy=function(t,e){e(t)},S.prototype.push=function(t,e){var i,r=this._readableState;return r.objectMode?i=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=o.from(t,e),e=""),i=!0),E(this,t,e,!1,i)},S.prototype.unshift=function(t){return E(this,t,null,!0,!1)},S.prototype.isPaused=function(){return!1===this._readableState.flowing},S.prototype.setEncoding=function(t){l||(l=i(553).s);var e=new l(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,n="";null!==r;)n+=e.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==n&&this._readableState.buffer.push(n),this._readableState.length=n.length,this};var P=1073741824;function O(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=P?t=P:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function T(t){var e=t._readableState;n("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(n("emitReadable",e.flowing),e.emittedReadable=!0,process.nextTick(C,t))}function C(t){var e=t._readableState;n("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function A(t,e){e.readingMore||(e.readingMore=!0,process.nextTick(k,t,e))}function k(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var i=e.length;if(n("maybeReadMore read 0"),t.read(0),i===e.length)break}e.readingMore=!1}function I(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function N(t){n("readable nexttick read 0"),t.read(0)}function L(t,e){n("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(n("flow",e.flowing);e.flowing&&null!==t.read(););}function U(t,e){return 0===e.length?null:(e.objectMode?i=e.buffer.shift():!t||t>=e.length?(i=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):i=e.buffer.consume(t,e.decoder),i);var i}function q(t){var e=t._readableState;n("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,process.nextTick(B,e,t))}function B(t,e){if(n("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var i=e._writableState;(!i||i.autoDestroy&&i.finished)&&e.destroy()}}function G(t,e){for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i;return-1}S.prototype.read=function(t){n("read",t),t=parseInt(t,10);var e=this._readableState,i=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return n("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?q(this):T(this),null;if(0===(t=O(t,e))&&e.ended)return 0===e.length&&q(this),null;var r,s=e.needReadable;return n("need readable",s),(0===e.length||e.length-t<e.highWaterMark)&&n("length less than watermark",s=!0),e.ended||e.reading?n("reading or ended",s=!1):s&&(n("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=O(i,e))),null===(r=t>0?U(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),i!==t&&e.ended&&q(this)),null!==r&&this.emit("data",r),r},S.prototype._read=function(t){_(this,new b("_read()"))},S.prototype.pipe=function(t,e){var i=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=t;break;case 1:r.pipes=[r.pipes,t];break;default:r.pipes.push(t)}r.pipesCount+=1,n("pipe count=%d opts=%j",r.pipesCount,e);var a=e&&!1===e.end||t===process.stdout||t===process.stderr?d:o;function o(){n("onend"),t.end()}r.endEmitted?process.nextTick(a):i.once("end",a),t.on("unpipe",(function e(s,a){n("onunpipe"),s===i&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,n("cleanup"),t.removeListener("close",f),t.removeListener("finish",p),t.removeListener("drain",h),t.removeListener("error",c),t.removeListener("unpipe",e),i.removeListener("end",o),i.removeListener("end",d),i.removeListener("data",l),u=!0,!r.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}));var h=function(t){return function(){var e=t._readableState;n("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,j(t))}}(i);t.on("drain",h);var u=!1;function l(e){n("ondata");var s=t.write(e);n("dest.write",s),!1===s&&((1===r.pipesCount&&r.pipes===t||r.pipesCount>1&&-1!==G(r.pipes,t))&&!u&&(n("false write response, pause",r.awaitDrain),r.awaitDrain++),i.pause())}function c(e){n("onerror",e),d(),t.removeListener("error",c),0===s(t,"error")&&_(t,e)}function f(){t.removeListener("finish",p),d()}function p(){n("onfinish"),t.removeListener("close",f),d()}function d(){n("unpipe"),i.unpipe(t)}return i.on("data",l),function(t,e,i){if("function"==typeof t.prependListener)return t.prependListener(e,i);t._events&&t._events.error?Array.isArray(t._events.error)?t._events.error.unshift(i):t._events.error=[i,t._events.error]:t.on(e,i)}(t,"error",c),t.once("close",f),t.once("finish",p),t.emit("pipe",i),r.flowing||(n("pipe resume"),i.resume()),t},S.prototype.unpipe=function(t){var e=this._readableState,i={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,i)),this;if(!t){var r=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var s=0;s<n;s++)r[s].emit("unpipe",this,{hasUnpiped:!1});return this}var a=G(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,i)),this},S.prototype.on=function(t,e){var i=a.prototype.on.call(this,t,e),r=this._readableState;return"data"===t?(r.readableListening=this.listenerCount("readable")>0,!1!==r.flowing&&this.resume()):"readable"===t&&(r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.flowing=!1,r.emittedReadable=!1,n("on readable",r.length,r.reading),r.length?T(this):r.reading||process.nextTick(N,this))),i},S.prototype.addListener=S.prototype.on,S.prototype.removeListener=function(t,e){var i=a.prototype.removeListener.call(this,t,e);return"readable"===t&&process.nextTick(I,this),i},S.prototype.removeAllListeners=function(t){var e=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||process.nextTick(I,this),e},S.prototype.resume=function(){var t=this._readableState;return t.flowing||(n("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,process.nextTick(L,t,e))}(this,t)),t.paused=!1,this},S.prototype.pause=function(){return n("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(n("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},S.prototype.wrap=function(t){var e=this,i=this._readableState,r=!1;for(var s in t.on("end",(function(){if(n("wrapped end"),i.decoder&&!i.ended){var t=i.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(s){n("wrapped data"),i.decoder&&(s=i.decoder.write(s)),i.objectMode&&null==s||(i.objectMode||s&&s.length)&&(e.push(s)||(r=!0,t.pause()))})),t)void 0===this[s]&&"function"==typeof t[s]&&(this[s]=function(e){return function(){return t[e].apply(t,arguments)}}(s));for(var a=0;a<w.length;a++)t.on(w[a],this.emit.bind(this,w[a]));return this._read=function(e){n("wrapped _read",e),r&&(r=!1,t.resume())},this},"function"==typeof Symbol&&(S.prototype[Symbol.asyncIterator]=function(){return void 0===c&&(c=i(819)),c(this)}),Object.defineProperty(S.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(S.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(S.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),S._fromList=U,Object.defineProperty(S.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(S.from=function(t,e){return void 0===f&&(f=i(869)),f(S,t,e)})},846:(t,e,i)=>{"use strict";t.exports=l;var r=i(303).q,n=r.ERR_METHOD_NOT_IMPLEMENTED,s=r.ERR_MULTIPLE_CALLBACK,a=r.ERR_TRANSFORM_ALREADY_TRANSFORMING,o=r.ERR_TRANSFORM_WITH_LENGTH_0,h=i(560);function u(t,e){var i=this._transformState;i.transforming=!1;var r=i.writecb;if(null===r)return this.emit("error",new s);i.writechunk=null,i.writecb=null,null!=e&&this.push(e),r(t);var n=this._readableState;n.reading=!1,(n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);h.call(this,t),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",c)}function c(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?f(this,null,null):this._flush((function(e,i){f(t,e,i)}))}function f(t,e,i){if(e)return t.emit("error",e);if(null!=i&&t.push(i),t._writableState.length)throw new o;if(t._transformState.transforming)throw new a;return t.push(null)}i(717)(l,h),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,h.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,i){i(new n("_transform()"))},l.prototype._write=function(t,e,i){var r=this._transformState;if(r.writecb=i,r.writechunk=t,r.writeencoding=e,!r.transforming){var n=this._readableState;(r.needTransform||n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){h.prototype._destroy.call(this,t,(function(t){e(t)}))}},313:(t,e,i)=>{"use strict";function r(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,i){var r=t.entry;for(t.entry=null;r;){var n=r.callback;e.pendingcb--,n(undefined),r=r.next}e.corkedRequestsFree.next=t}(e,t)}}var n;t.exports=S,S.WritableState=x;var s,a={deprecate:i(927)},o=i(463),h=i(764).Buffer,u=i.g.Uint8Array||function(){},l=i(369),c=i(624).getHighWaterMark,f=i(303).q,p=f.ERR_INVALID_ARG_TYPE,d=f.ERR_METHOD_NOT_IMPLEMENTED,y=f.ERR_MULTIPLE_CALLBACK,g=f.ERR_STREAM_CANNOT_PIPE,m=f.ERR_STREAM_DESTROYED,M=f.ERR_STREAM_NULL_VALUES,b=f.ERR_STREAM_WRITE_AFTER_END,v=f.ERR_UNKNOWN_ENCODING,_=l.errorOrDestroy;function w(){}function x(t,e,s){n=n||i(560),t=t||{},"boolean"!=typeof s&&(s=e instanceof n),this.objectMode=!!t.objectMode,s&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=c(this,t,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===t.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var i=t._writableState,r=i.sync,n=i.writecb;if("function"!=typeof n)throw new y;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(i),e)!function(t,e,i,r,n){--e.pendingcb,i?(process.nextTick(n,r),process.nextTick(C,t,e),t._writableState.errorEmitted=!0,_(t,r)):(n(r),t._writableState.errorEmitted=!0,_(t,r),C(t,e))}(t,i,r,e,n);else{var s=O(i)||t.destroyed;s||i.corked||i.bufferProcessing||!i.bufferedRequest||P(t,i),r?process.nextTick(R,t,i,s,n):R(t,i,s,n)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new r(this)}function S(t){var e=this instanceof(n=n||i(560));if(!e&&!s.call(S,this))return new S(t);this._writableState=new x(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),o.call(this)}function E(t,e,i,r,n,s,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new m("write")):i?t._writev(n,e.onwrite):t._write(n,s,e.onwrite),e.sync=!1}function R(t,e,i,r){i||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),C(t,e)}function P(t,e){e.bufferProcessing=!0;var i=e.bufferedRequest;if(t._writev&&i&&i.next){var n=e.bufferedRequestCount,s=new Array(n),a=e.corkedRequestsFree;a.entry=i;for(var o=0,h=!0;i;)s[o]=i,i.isBuf||(h=!1),i=i.next,o+=1;s.allBuffers=h,E(t,e,!0,e.length,s,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new r(e),e.bufferedRequestCount=0}else{for(;i;){var u=i.chunk,l=i.encoding,c=i.callback;if(E(t,e,!1,e.objectMode?1:u.length,u,l,c),i=i.next,e.bufferedRequestCount--,e.writing)break}null===i&&(e.lastBufferedRequest=null)}e.bufferedRequest=i,e.bufferProcessing=!1}function O(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function T(t,e){t._final((function(i){e.pendingcb--,i&&_(t,i),e.prefinished=!0,t.emit("prefinish"),C(t,e)}))}function C(t,e){var i=O(e);if(i&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,process.nextTick(T,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var r=t._readableState;(!r||r.autoDestroy&&r.endEmitted)&&t.destroy()}return i}i(717)(S,o),x.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(x.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(S,Symbol.hasInstance,{value:function(t){return!!s.call(this,t)||this===S&&t&&t._writableState instanceof x}})):s=function(t){return t instanceof this},S.prototype.pipe=function(){_(this,new g)},S.prototype.write=function(t,e,i){var r,n=this._writableState,s=!1,a=!n.objectMode&&(r=t,h.isBuffer(r)||r instanceof u);return a&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(i=e,e=null),a?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof i&&(i=w),n.ending?function(t,e){var i=new b;_(t,i),process.nextTick(e,i)}(this,i):(a||function(t,e,i,r){var n;return null===i?n=new M:"string"==typeof i||e.objectMode||(n=new p("chunk",["string","Buffer"],i)),!n||(_(t,n),process.nextTick(r,n),!1)}(this,n,t,i))&&(n.pendingcb++,s=function(t,e,i,r,n,s){if(!i){var a=function(t,e,i){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,i)),e}(e,r,n);r!==a&&(i=!0,n="buffer",r=a)}var o=e.objectMode?1:r.length;e.length+=o;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:n,isBuf:i,callback:s,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else E(t,e,!1,o,r,n,s);return u}(this,n,a,t,e,i)),s},S.prototype.cork=function(){this._writableState.corked++},S.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||P(this,t))},S.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new v(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(S.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(S.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),S.prototype._write=function(t,e,i){i(new d("_write()"))},S.prototype._writev=null,S.prototype.end=function(t,e,i){var r=this._writableState;return"function"==typeof t?(i=t,t=null,e=null):"function"==typeof e&&(i=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||function(t,e,i){e.ending=!0,C(t,e),i&&(e.finished?process.nextTick(i):t.once("finish",i)),e.ended=!0,t.writable=!1}(this,r,i),this},Object.defineProperty(S.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),S.prototype.destroy=l.destroy,S.prototype._undestroy=l.undestroy,S.prototype._destroy=function(t,e){e(t)}},819:(t,e,i)=>{"use strict";var r;function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var s=i(467),a=Symbol("lastResolve"),o=Symbol("lastReject"),h=Symbol("error"),u=Symbol("ended"),l=Symbol("lastPromise"),c=Symbol("handlePromise"),f=Symbol("stream");function p(t,e){return{value:t,done:e}}function d(t){var e=t[a];if(null!==e){var i=t[f].read();null!==i&&(t[l]=null,t[a]=null,t[o]=null,e(p(i,!1)))}}function y(t){process.nextTick(d,t)}var g=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((n(r={get stream(){return this[f]},next:function(){var t=this,e=this[h];if(null!==e)return Promise.reject(e);if(this[u])return Promise.resolve(p(void 0,!0));if(this[f].destroyed)return new Promise((function(e,i){process.nextTick((function(){t[h]?i(t[h]):e(p(void 0,!0))}))}));var i,r=this[l];if(r)i=new Promise(function(t,e){return function(i,r){t.then((function(){e[u]?i(p(void 0,!0)):e[c](i,r)}),r)}}(r,this));else{var n=this[f].read();if(null!==n)return Promise.resolve(p(n,!1));i=new Promise(this[c])}return this[l]=i,i}},Symbol.asyncIterator,(function(){return this})),n(r,"return",(function(){var t=this;return new Promise((function(e,i){t[f].destroy(null,(function(t){t?i(t):e(p(void 0,!0))}))}))})),r),g);t.exports=function(t){var e,i=Object.create(m,(n(e={},f,{value:t,writable:!0}),n(e,a,{value:null,writable:!0}),n(e,o,{value:null,writable:!0}),n(e,h,{value:null,writable:!0}),n(e,u,{value:t._readableState.endEmitted,writable:!0}),n(e,c,{value:function(t,e){var r=i[f].read();r?(i[l]=null,i[a]=null,i[o]=null,t(p(r,!1))):(i[a]=t,i[o]=e)},writable:!0}),e));return i[l]=null,s(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=i[o];return null!==e&&(i[l]=null,i[a]=null,i[o]=null,e(t)),void(i[h]=t)}var r=i[a];null!==r&&(i[l]=null,i[a]=null,i[o]=null,r(p(void 0,!0))),i[u]=!0})),t.on("readable",y.bind(null,i)),i}},641:(t,e,i)=>{"use strict";function r(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,r)}return i}function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function s(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=i(764).Buffer,o=i(758).inspect,h=o&&o.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,i;return e=t,(i=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,i=""+e.data;e=e.next;)i+=t+e.data;return i}},{key:"concat",value:function(t){if(0===this.length)return a.alloc(0);for(var e,i,r,n=a.allocUnsafe(t>>>0),s=this.head,o=0;s;)e=s.data,i=n,r=o,a.prototype.copy.call(e,i,r),o+=s.data.length,s=s.next;return n}},{key:"consume",value:function(t,e){var i;return t<this.head.data.length?(i=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):i=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),i}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,i=1,r=e.data;for(t-=r.length;e=e.next;){var n=e.data,s=t>n.length?n.length:t;if(s===n.length?r+=n:r+=n.slice(0,t),0==(t-=s)){s===n.length?(++i,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=n.slice(s));break}++i}return this.length-=i,r}},{key:"_getBuffer",value:function(t){var e=a.allocUnsafe(t),i=this.head,r=1;for(i.data.copy(e),t-=i.data.length;i=i.next;){var n=i.data,s=t>n.length?n.length:t;if(n.copy(e,e.length-t,0,s),0==(t-=s)){s===n.length?(++r,i.next?this.head=i.next:this.head=this.tail=null):(this.head=i,i.data=n.slice(s));break}++r}return this.length-=r,e}},{key:h,value:function(t,e){return o(this,function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?r(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}])&&s(e.prototype,i),t}()},369:t=>{"use strict";function e(t,e){r(t,e),i(t)}function i(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function r(t,e){t.emit("error",e)}t.exports={destroy:function(t,n){var s=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(n?n(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(r,this,t)):process.nextTick(r,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!n&&t?s._writableState?s._writableState.errorEmitted?process.nextTick(i,s):(s._writableState.errorEmitted=!0,process.nextTick(e,s,t)):process.nextTick(e,s,t):n?(process.nextTick(i,s),n(t)):process.nextTick(i,s)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var i=t._readableState,r=t._writableState;i&&i.autoDestroy||r&&r.autoDestroy?t.destroy(e):t.emit("error",e)}}},467:(t,e,i)=>{"use strict";var r=i(303).q.ERR_STREAM_PREMATURE_CLOSE;function n(){}t.exports=function t(e,i,s){if("function"==typeof i)return t(e,null,i);i||(i={}),s=function(t){var e=!1;return function(){if(!e){e=!0;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];t.apply(this,r)}}}(s||n);var a=i.readable||!1!==i.readable&&e.readable,o=i.writable||!1!==i.writable&&e.writable,h=function(){e.writable||l()},u=e._writableState&&e._writableState.finished,l=function(){o=!1,u=!0,a||s.call(e)},c=e._readableState&&e._readableState.endEmitted,f=function(){a=!1,c=!0,o||s.call(e)},p=function(t){s.call(e,t)},d=function(){var t;return a&&!c?(e._readableState&&e._readableState.ended||(t=new r),s.call(e,t)):o&&!u?(e._writableState&&e._writableState.ended||(t=new r),s.call(e,t)):void 0},y=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",d),e.req?y():e.on("request",y)):o&&!e._writableState&&(e.on("end",h),e.on("close",h)),e.on("end",f),e.on("finish",l),!1!==i.error&&e.on("error",p),e.on("close",d),function(){e.removeListener("complete",l),e.removeListener("abort",d),e.removeListener("request",y),e.req&&e.req.removeListener("finish",l),e.removeListener("end",h),e.removeListener("close",h),e.removeListener("finish",l),e.removeListener("end",f),e.removeListener("error",p),e.removeListener("close",d)}}},869:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},689:(t,e,i)=>{"use strict";var r,n=i(303).q,s=n.ERR_MISSING_ARGS,a=n.ERR_STREAM_DESTROYED;function o(t){if(t)throw t}function h(t,e,n,s){s=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(s);var o=!1;t.on("close",(function(){o=!0})),void 0===r&&(r=i(467)),r(t,{readable:e,writable:n},(function(t){if(t)return s(t);o=!0,s()}));var h=!1;return function(e){if(!o&&!h)return h=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void s(e||new a("pipe"))}}function u(t){t()}function l(t,e){return t.pipe(e)}function c(t){return t.length?"function"!=typeof t[t.length-1]?o:t.pop():o}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r,n=c(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new s("streams");var a=e.map((function(t,i){var s=i<e.length-1;return h(t,s,i>0,(function(t){r||(r=t),t&&a.forEach(u),s||(a.forEach(u),n(r))}))}));return e.reduce(l)}},624:(t,e,i)=>{"use strict";var r=i(303).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,i,n){var s=function(t,e,i){return null!=t.highWaterMark?t.highWaterMark:e?t[i]:null}(e,n,i);if(null!=s){if(!isFinite(s)||Math.floor(s)!==s||s<0)throw new r(n?i:"highWaterMark",s);return Math.floor(s)}return t.objectMode?16:16384}}},463:(t,e,i)=>{t.exports=i(187).EventEmitter},925:(t,e,i)=>{(e=t.exports=i(2)).Stream=e,e.Readable=e,e.Writable=i(313),e.Duplex=i(560),e.Transform=i(846),e.PassThrough=i(842),e.finished=i(467),e.pipeline=i(689)},553:(t,e,i)=>{"use strict";var r=i(509).Buffer,n=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function s(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===n||!n(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=h,this.end=u,e=4;break;case"utf8":this.fillLast=o,e=4;break;case"base64":this.text=l,this.end=c,e=3;break;default:return this.write=f,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function o(t){var e=this.lastTotal-this.lastNeed,i=function(t,e,i){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==i?i:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function h(t,e){if((t.length-e)%2==0){var i=t.toString("utf16le",e);if(i){var r=i.charCodeAt(i.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],i.slice(0,-1)}return i}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function u(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var i=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,i)}return e}function l(t,e){var i=(t.length-e)%3;return 0===i?t.toString("base64",e):(this.lastNeed=3-i,this.lastTotal=3,1===i?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-i))}function c(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function f(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.s=s,s.prototype.write=function(t){if(0===t.length)return"";var e,i;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";i=this.lastNeed,this.lastNeed=0}else i=0;return i<t.length?e?e+this.text(t,i):this.text(t,i):e||""},s.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},s.prototype.text=function(t,e){var i=function(t,e,i){var r=e.length-1;if(r<i)return 0;var n=a(e[r]);return n>=0?(n>0&&(t.lastNeed=n-1),n):--r<i||-2===n?0:(n=a(e[r]))>=0?(n>0&&(t.lastNeed=n-2),n):--r<i||-2===n?0:(n=a(e[r]))>=0?(n>0&&(2===n?n=0:t.lastNeed=n-3),n):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=i;var r=t.length-(i-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},s.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},741:function(t){t.exports=function(t){function e(r){if(i[r])return i[r].exports;var n=i[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,e),n.l=!0,n.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,r){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=1)}([function(t,e,i){"use strict";var r,n=this&&this.__assign||Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t};Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return r.execute(t)},function(t){t.execute=function(e){var i;return null===e?i=e:e instanceof Date?i=new Date(e.getTime()):Array.isArray(e)?(i=[],e.forEach((function(t,e,r){i.push(t)})),i=i.map((function(e){return t.execute(e)}))):"object"==typeof e&&e!=={}?(i=n({},e),Object.keys(i).forEach((function(e){i[e]=t.execute(i[e])}))):i=e,i},t.isPrimitive=function(){}}(r||(r={}))},function(t,e,i){t.exports=i(0)}])},655:(t,e,i)=>{"use strict";i.r(e),i.d(e,{__extends:()=>n,__assign:()=>s,__rest:()=>a,__decorate:()=>o,__param:()=>h,__metadata:()=>u,__awaiter:()=>l,__generator:()=>c,__createBinding:()=>f,__exportStar:()=>p,__values:()=>d,__read:()=>y,__spread:()=>g,__spreadArrays:()=>m,__await:()=>M,__asyncGenerator:()=>b,__asyncDelegator:()=>v,__asyncValues:()=>_,__makeTemplateObject:()=>w,__importStar:()=>x,__importDefault:()=>S,__classPrivateFieldGet:()=>E,__classPrivateFieldSet:()=>R});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function n(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var s=function(){return(s=Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function a(t,e){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(i[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(t);n<r.length;n++)e.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(t,r[n])&&(i[r[n]]=t[r[n]])}return i}function o(t,e,i,r){var n,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,i,r);else for(var o=t.length-1;o>=0;o--)(n=t[o])&&(a=(s<3?n(a):s>3?n(e,i,a):n(e,i))||a);return s>3&&a&&Object.defineProperty(e,i,a),a}function h(t,e){return function(i,r){e(i,r,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,i,r){return new(i||(i=Promise))((function(n,s){function a(t){try{h(r.next(t))}catch(t){s(t)}}function o(t){try{h(r.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,o)}h((r=r.apply(t,e||[])).next())}))}function c(t,e){var i,r,n,s,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){a.label=s[1];break}if(6===s[0]&&a.label<n[1]){a.label=n[1],n=s;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(s);break}n[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}function f(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}function p(t,e){for(var i in t)"default"===i||e.hasOwnProperty(i)||(e[i]=t[i])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],r=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var r,n,s=i.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=s.next()).done;)a.push(r.value)}catch(t){n={error:t}}finally{try{r&&!r.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}return a}function g(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function m(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var r=Array(t),n=0;for(e=0;e<i;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,n++)r[n]=s[a];return r}function M(t){return this instanceof M?(this.v=t,this):new M(t)}function b(t,e,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,n=i.apply(t,e||[]),s=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){n[t]&&(r[t]=function(e){return new Promise((function(i,r){s.push([t,e,i,r])>1||o(t,e)}))})}function o(t,e){try{(i=n[t](e)).value instanceof M?Promise.resolve(i.value.v).then(h,u):l(s[0][2],i)}catch(t){l(s[0][3],t)}var i}function h(t){o("next",t)}function u(t){o("throw",t)}function l(t,e){t(e),s.shift(),s.length&&o(s[0][0],s[0][1])}}function v(t){var e,i;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,n){e[r]=t[r]?function(e){return(i=!i)?{value:M(t[r](e)),done:"return"===r}:n?n(e):e}:n}}function _(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,i=t[Symbol.asyncIterator];return i?i.call(t):(t=d(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(i){e[i]=t[i]&&function(e){return new Promise((function(r,n){!function(t,e,i,r){Promise.resolve(r).then((function(e){t({value:e,done:i})}),e)}(r,n,(e=t[i](e)).done,e.value)}))}}}function w(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function x(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}function S(t){return t&&t.__esModule?t:{default:t}}function E(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function R(t,e,i){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,i),i}},511:function(t,e,i){var r;t=i.nmd(t),function(n){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof i.g&&i.g;s.global!==s&&s.window!==s&&s.self;var a,o=2147483647,h=36,u=/^xn--/,l=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,d=String.fromCharCode;function y(t){throw RangeError(f[t])}function g(t,e){for(var i=t.length,r=[];i--;)r[i]=e(t[i]);return r}function m(t,e){var i=t.split("@"),r="";return i.length>1&&(r=i[0]+"@",t=i[1]),r+g((t=t.replace(c,".")).split("."),e).join(".")}function M(t){for(var e,i,r=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(i=t.charCodeAt(n++)))?r.push(((1023&e)<<10)+(1023&i)+65536):(r.push(e),n--):r.push(e);return r}function b(t){return g(t,(function(t){var e="";return t>65535&&(e+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+d(t)})).join("")}function v(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function _(t,e,i){var r=0;for(t=i?p(t/700):t>>1,t+=p(t/e);t>455;r+=h)t=p(t/35);return p(r+36*t/(t+38))}function w(t){var e,i,r,n,s,a,u,l,c,f,d,g=[],m=t.length,M=0,v=128,w=72;for((i=t.lastIndexOf("-"))<0&&(i=0),r=0;r<i;++r)t.charCodeAt(r)>=128&&y("not-basic"),g.push(t.charCodeAt(r));for(n=i>0?i+1:0;n<m;){for(s=M,a=1,u=h;n>=m&&y("invalid-input"),((l=(d=t.charCodeAt(n++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:h)>=h||l>p((o-M)/a))&&y("overflow"),M+=l*a,!(l<(c=u<=w?1:u>=w+26?26:u-w));u+=h)a>p(o/(f=h-c))&&y("overflow"),a*=f;w=_(M-s,e=g.length+1,0==s),p(M/e)>o-v&&y("overflow"),v+=p(M/e),M%=e,g.splice(M++,0,v)}return b(g)}function x(t){var e,i,r,n,s,a,u,l,c,f,g,m,b,w,x,S=[];for(m=(t=M(t)).length,e=128,i=0,s=72,a=0;a<m;++a)(g=t[a])<128&&S.push(d(g));for(r=n=S.length,n&&S.push("-");r<m;){for(u=o,a=0;a<m;++a)(g=t[a])>=e&&g<u&&(u=g);for(u-e>p((o-i)/(b=r+1))&&y("overflow"),i+=(u-e)*b,e=u,a=0;a<m;++a)if((g=t[a])<e&&++i>o&&y("overflow"),g==e){for(l=i,c=h;!(l<(f=c<=s?1:c>=s+26?26:c-s));c+=h)x=l-f,w=h-f,S.push(d(v(f+x%w,0))),l=p(x/w);S.push(d(v(l,0))),s=_(i,b,r==n),i=0,++r}++i,++e}return S.join("")}a={version:"1.3.2",ucs2:{decode:M,encode:b},decode:w,encode:x,toASCII:function(t){return m(t,(function(t){return l.test(t)?"xn--"+x(t):t}))},toUnicode:function(t){return m(t,(function(t){return u.test(t)?w(t.slice(4).toLowerCase()):t}))}},void 0===(r=function(){return a}.call(e,i,e,t))||(t.exports=r)}()},575:(t,e,i)=>{"use strict";var r=i(511),n=i(502);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=b,e.resolve=function(t,e){return b(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?b(t,!1,!0).resolveObject(e):e},e.format=function(t){return n.isString(t)&&(t=b(t)),t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var a=/^([a-z0-9.+-]+:)/i,o=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(u),c=["%","/","?",";","#"].concat(l),f=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,y={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},M=i(673);function b(t,e,i){if(t&&n.isObject(t)&&t instanceof s)return t;var r=new s;return r.parse(t,e,i),r}s.prototype.parse=function(t,e,i){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),o=-1!==s&&s<t.indexOf("#")?"?":"#",u=t.split(o);u[0]=u[0].replace(/\\/g,"/");var b=t=u.join(o);if(b=b.trim(),!i&&1===t.split("#").length){var v=h.exec(b);if(v)return this.path=b,this.href=b,this.pathname=v[1],v[2]?(this.search=v[2],this.query=e?M.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var _=a.exec(b);if(_){var w=(_=_[0]).toLowerCase();this.protocol=w,b=b.substr(_.length)}if(i||_||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===b.substr(0,2);!x||_&&g[_]||(b=b.substr(2),this.slashes=!0)}if(!g[_]&&(x||_&&!m[_])){for(var S,E,R=-1,P=0;P<f.length;P++)-1!==(O=b.indexOf(f[P]))&&(-1===R||O<R)&&(R=O);for(-1!==(E=-1===R?b.lastIndexOf("@"):b.lastIndexOf("@",R))&&(S=b.slice(0,E),b=b.slice(E+1),this.auth=decodeURIComponent(S)),R=-1,P=0;P<c.length;P++){var O;-1!==(O=b.indexOf(c[P]))&&(-1===R||O<R)&&(R=O)}-1===R&&(R=b.length),this.host=b.slice(0,R),b=b.slice(R),this.parseHost(),this.hostname=this.hostname||"";var T="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!T)for(var C=this.hostname.split(/\./),A=(P=0,C.length);P<A;P++){var k=C[P];if(k&&!k.match(p)){for(var I="",N=0,L=k.length;N<L;N++)k.charCodeAt(N)>127?I+="x":I+=k[N];if(!I.match(p)){var j=C.slice(0,P),U=C.slice(P+1),q=k.match(d);q&&(j.push(q[1]),U.unshift(q[2])),U.length&&(b="/"+U.join(".")+b),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),T||(this.hostname=r.toASCII(this.hostname));var B=this.port?":"+this.port:"",G=this.hostname||"";this.host=G+B,this.href+=this.host,T&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!y[w])for(P=0,A=l.length;P<A;P++){var D=l[P];if(-1!==b.indexOf(D)){var F=encodeURIComponent(D);F===D&&(F=escape(D)),b=b.split(D).join(F)}}var W=b.indexOf("#");-1!==W&&(this.hash=b.substr(W),b=b.slice(0,W));var z=b.indexOf("?");if(-1!==z?(this.search=b.substr(z),this.query=b.substr(z+1),e&&(this.query=M.parse(this.query)),b=b.slice(0,z)):e&&(this.search="",this.query={}),b&&(this.pathname=b),m[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){B=this.pathname||"";var H=this.search||"";this.path=B+H}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",i=this.pathname||"",r=this.hash||"",s=!1,a="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(a=M.stringify(this.query));var o=this.search||a&&"?"+a||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||m[e])&&!1!==s?(s="//"+(s||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):s||(s=""),r&&"#"!==r.charAt(0)&&(r="#"+r),o&&"?"!==o.charAt(0)&&(o="?"+o),e+s+(i=i.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(o=o.replace("#","%23"))+r},s.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(n.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var i=new s,r=Object.keys(this),a=0;a<r.length;a++){var o=r[a];i[o]=this[o]}if(i.hash=t.hash,""===t.href)return i.href=i.format(),i;if(t.slashes&&!t.protocol){for(var h=Object.keys(t),u=0;u<h.length;u++){var l=h[u];"protocol"!==l&&(i[l]=t[l])}return m[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(t.protocol&&t.protocol!==i.protocol){if(!m[t.protocol]){for(var c=Object.keys(t),f=0;f<c.length;f++){var p=c[f];i[p]=t[p]}return i.href=i.format(),i}if(i.protocol=t.protocol,t.host||g[t.protocol])i.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),i.pathname=d.join("/")}if(i.search=t.search,i.query=t.query,i.host=t.host||"",i.auth=t.auth,i.hostname=t.hostname||t.host,i.port=t.port,i.pathname||i.search){var y=i.pathname||"",M=i.search||"";i.path=y+M}return i.slashes=i.slashes||t.slashes,i.href=i.format(),i}var b=i.pathname&&"/"===i.pathname.charAt(0),v=t.host||t.pathname&&"/"===t.pathname.charAt(0),_=v||b||i.host&&t.pathname,w=_,x=i.pathname&&i.pathname.split("/")||[],S=(d=t.pathname&&t.pathname.split("/")||[],i.protocol&&!m[i.protocol]);if(S&&(i.hostname="",i.port=null,i.host&&(""===x[0]?x[0]=i.host:x.unshift(i.host)),i.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),_=_&&(""===d[0]||""===x[0])),v)i.host=t.host||""===t.host?t.host:i.host,i.hostname=t.hostname||""===t.hostname?t.hostname:i.hostname,i.search=t.search,i.query=t.query,x=d;else if(d.length)x||(x=[]),x.pop(),x=x.concat(d),i.search=t.search,i.query=t.query;else if(!n.isNullOrUndefined(t.search))return S&&(i.hostname=i.host=x.shift(),(T=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=T.shift(),i.host=i.hostname=T.shift())),i.search=t.search,i.query=t.query,n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i;if(!x.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var E=x.slice(-1)[0],R=(i.host||t.host||x.length>1)&&("."===E||".."===E)||""===E,P=0,O=x.length;O>=0;O--)"."===(E=x[O])?x.splice(O,1):".."===E?(x.splice(O,1),P++):P&&(x.splice(O,1),P--);if(!_&&!w)for(;P--;P)x.unshift("..");!_||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),R&&"/"!==x.join("/").substr(-1)&&x.push("");var T,C=""===x[0]||x[0]&&"/"===x[0].charAt(0);return S&&(i.hostname=i.host=C?"":x.length?x.shift():"",(T=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=T.shift(),i.host=i.hostname=T.shift())),(_=_||i.host&&x.length)&&!C&&x.unshift(""),x.length?i.pathname=x.join("/"):(i.pathname=null,i.path=null),n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=t.auth||i.auth,i.slashes=i.slashes||t.slashes,i.href=i.format(),i},s.prototype.parseHost=function(){var t=this.host,e=o.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},502:t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},927:(t,e,i)=>{function r(t){try{if(!i.g.localStorage)return!1}catch(t){return!1}var e=i.g.localStorage[t];return null!=e&&"true"===String(e).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var i=!1;return function(){if(!i){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),i=!0}return t.apply(this,arguments)}}},529:t=>{t.exports=function(){for(var t={},i=0;i<arguments.length;i++){var r=arguments[i];for(var n in r)e.call(r,n)&&(t[n]=r[n])}return t};var e=Object.prototype.hasOwnProperty},758:()=>{}},e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),i(45)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4uL3NyYy9mb3JtYXQtY29udmVydGVyLnRzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi4vc3JjL3JlcHJvamVjdG9yLnRzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi4vc3JjL3NwYXRpYWwtdHJhbnNmb3JtZXJzLnRzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi4vc3JjL3NwYXRpYWwtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9idWlsdGluLXN0YXR1cy1jb2Rlcy9icm93c2VyLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL2h0dHBzLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb25zdGFudHMvdmFsdWVzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbnN0YW50cy9QcmltZU1lcmlkaWFuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbnN0YW50cy91bml0cy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9tYXRjaC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qU3RyaW5nLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvd2t0LXBhcnNlci9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy93a3QtcGFyc2VyL3Byb2Nlc3MuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy93a3QtcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2RlZnMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvZ2xvYmFsLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3BhcnNlQ29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL21zZm56LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9zaWduLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9hZGp1c3RfbG9uLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi90c2Zuei5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vcGhpMnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbG9uZ2xhdC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9tZXJjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbnN0YW50cy9FbGxpcHNvaWQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29uc3RhbnRzL0RhdHVtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL1Byb2ouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvZGVyaXZlQ29uc3RhbnRzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2RhdHVtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2RhdHVtVXRpbHMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvZGF0dW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2FkanVzdF9heGlzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi90b1BvaW50LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NoZWNrU2FuaXR5LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb3JlLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvbWdycy9tZ3JzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL1BvaW50LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9wal9lbmZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9wal9tbGZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9wal9pbnZfbWxmbi5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy90bWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vc2luaC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vaHlwb3QuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL2dhdGcuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL2NsZW5zX2NtcGx4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9jb3NoLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2V0bWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vY2xlbnMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL2FzaW5oeS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vbG9nMXB5LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3V0bS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vYWRqdXN0X3pvbmUuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL3NyYXQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvZ2F1c3MuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvc3RlcmVhLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3N0ZXJlLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3NvbWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9vbWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9sY2MuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMva3JvdmFrLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9tbGZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lMGZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lMWZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lMmZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lM2ZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9nTi5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vYWRqdXN0X2xhdC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vaW1sZm4uanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvY2Fzcy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vcXNmbnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbGFlYS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vYXNpbnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvYWVhLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2dub20uanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvY2VhLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9pcXNmbnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvZXFjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3BvbHkuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbnptZy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9taWxsLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3NpbnUuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbW9sbC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9lcWRjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3ZhbmRnLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2FlcWQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvb3J0aG8uanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvcXNjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3JvYmluLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2dlb2NlbnQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvdHBlcnMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9wcm9qcy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2VuY29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbGliL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvcmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2Vycm9ycy1icm93c2VyLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2J1ZmZlcl9saXN0LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9lbmQtb2Ytc3RyZWFtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9mcm9tLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3BpcGVsaW5lLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy90cy1kZWVwY29weS9kaXN0L2pzL2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3VybC91cmwuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy94dGVuZC9pbW11dGFibGUuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiX2kiLCJ0aGlzIiwiaSIsImdlb21ldHJ5IiwiU3BhdGlhbFRyYW5zZm9ybWVycyIsImMiLCJleHBvcnRzIiwiYnl0ZUxlbmd0aCIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsInRtcCIsImFyciIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsImxlbiIsInJldkxvb2t1cCIsImNoYXJDb2RlQXQiLCJmcm9tQnl0ZUFycmF5IiwidWludDgiLCJsZW5ndGgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJwdXNoIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJqb2luIiwiVWludDhBcnJheSIsIkFycmF5IiwiY29kZSIsIkVycm9yIiwiaW5kZXhPZiIsInN0YXJ0IiwiZW5kIiwibnVtIiwib3V0cHV0IiwiYmFzZTY0IiwiaWVlZTc1NCIsImN1c3RvbUluc3BlY3RTeW1ib2wiLCJTeW1ib2wiLCJCdWZmZXIiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsIktfTUFYX0xFTkdUSCIsImNyZWF0ZUJ1ZmZlciIsIlJhbmdlRXJyb3IiLCJidWYiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJUeXBlRXJyb3IiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJ2YWx1ZSIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJhcnJheVZpZXciLCJpc0luc3RhbmNlIiwiY29weSIsImZyb21BcnJheUJ1ZmZlciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5VmlldyIsIlNoYXJlZEFycmF5QnVmZmVyIiwidmFsdWVPZiIsImIiLCJvYmoiLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJ1bmRlZmluZWQiLCJudW1iZXJJc05hTiIsInR5cGUiLCJpc0FycmF5IiwiZGF0YSIsImZyb21PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsImFzc2VydFNpemUiLCJzaXplIiwiYXJyYXkiLCJ0b1N0cmluZyIsIm11c3RNYXRjaCIsImFyZ3VtZW50cyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsIm4iLCJtIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJ2YWwiLCJkaXIiLCJhcnJheUluZGV4T2YiLCJjYWxsIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJTdHJpbmciLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJNYXRoIiwibWluIiwicmVzIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsImUiLCJ0eXBlZEFycmF5U3VwcG9ydCIsImNvbnNvbGUiLCJlcnJvciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInBvb2xTaXplIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic2V0Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwicmVwbGFjZSIsInRyaW0iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJoZXhTbGljZUxvb2t1cFRhYmxlIiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwid3J0QmlnVUludDY0TEUiLCJjaGVja0ludEJJIiwiQmlnSW50Iiwid3J0QmlnVUludDY0QkUiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInN1YmFycmF5IiwicmVhZFVpbnRMRSIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVWludEJFIiwicmVhZFVJbnRCRSIsInJlYWRVaW50OCIsInJlYWRVSW50OCIsInJlYWRVaW50MTZMRSIsInJlYWRVSW50MTZMRSIsInJlYWRVaW50MTZCRSIsInJlYWRVaW50MzJMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVaW50MzJCRSIsInJlYWRVSW50MzJCRSIsInJlYWRCaWdVSW50NjRMRSIsImRlZmluZUJpZ0ludE1ldGhvZCIsInZhbGlkYXRlTnVtYmVyIiwiZmlyc3QiLCJsYXN0IiwiYm91bmRzRXJyb3IiLCJyZWFkQmlnVUludDY0QkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEJpZ0ludDY0TEUiLCJyZWFkQmlnSW50NjRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVpbnRMRSIsIndyaXRlVUludExFIiwid3JpdGVVaW50QkUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVWludDgiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVaW50MTZMRSIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVpbnQxNkJFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVWludDMyTEUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVaW50MzJCRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUJpZ1VJbnQ2NExFIiwid3JpdGVCaWdVSW50NjRCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUJpZ0ludDY0TEUiLCJ3cml0ZUJpZ0ludDY0QkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29weVdpdGhpbiIsImVycm9ycyIsIkUiLCJzeW0iLCJnZXRNZXNzYWdlIiwiQmFzZSIsInN1cGVyIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJuYW1lIiwic3RhY2siLCJtZXNzYWdlIiwiYWRkTnVtZXJpY2FsU2VwYXJhdG9yIiwicmFuZ2UiLCJFUlJfT1VUX09GX1JBTkdFIiwiY2hlY2tCb3VuZHMiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsImZsb29yIiwiRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTIiwiaW5wdXQiLCJtc2ciLCJyZWNlaXZlZCIsImlzSW50ZWdlciIsImFicyIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwic3BsaXQiLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsImNvbnN0cnVjdG9yIiwiYWxwaGFiZXQiLCJ0YWJsZSIsImkxNiIsImZuIiwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsIm1vZHVsZSIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJvbmNlIiwiZW1pdHRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXZlbnRMaXN0ZW5lciIsImVycm9yTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImVyciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsImNyZWF0ZSIsIm5ld0xpc3RlbmVyIiwiZW1pdCIsInVuc2hpZnQiLCJ3YXJuZWQiLCJ3IiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsImJpbmQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXIiLCJjb250ZXh0IiwiaGFuZGxlciIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwib24iLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInBvcCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleSIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiaHR0cCIsInVybCIsImh0dHBzIiwiaGFzT3duUHJvcGVydHkiLCJ2YWxpZGF0ZVBhcmFtcyIsInBhcmFtcyIsInBhcnNlIiwicHJvdG9jb2wiLCJyZXF1ZXN0IiwiY2IiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImQiLCJzIiwiTmFOIiwicnQiLCJsb2ciLCJMTjIiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJTRUNfVE9fUkFEIiwiSEFMRl9QSSIsIlBJIiwiRVBTTE4iLCJEMlIiLCJSMkQiLCJGT1JUUEkiLCJUV09fUEkiLCJTUEkiLCJmdCIsInRvX21ldGVyIiwiaWdub3JlZENoYXIiLCJtYXRjaCIsInRlc3RrZXkiLCJsa2V5IiwiZGVmRGF0YSIsInBhcmFtTmFtZSIsInBhcmFtVmFsIiwicGFyYW1PdXRuYW1lIiwic2VsZiIsInBhcmFtT2JqIiwibWFwIiwidiIsImZpbHRlciIsInJlZHVjZSIsInAiLCJwcm9qIiwiZGF0dW0iLCJyZiIsInBhcnNlRmxvYXQiLCJsYXRfMCIsImxhdDAiLCJsYXRfMSIsImxhdDEiLCJsYXRfMiIsImxhdDIiLCJsYXRfdHMiLCJsb25fMCIsImxvbmcwIiwibG9uXzEiLCJsb25nMSIsImxvbl8yIiwibG9uZzIiLCJhbHBoYSIsImxvbmMiLCJsb25nYyIsInhfMCIsIngwIiwieV8wIiwieTAiLCJrXzAiLCJrMCIsImsiLCJyX2EiLCJSX0EiLCJ6b25lIiwic291dGgiLCJ1dG1Tb3V0aCIsInRvd2dzODQiLCJkYXR1bV9wYXJhbXMiLCJ1bml0IiwiZnJvbV9ncmVlbndpY2giLCJwbSIsIm5hZGdyaWRzIiwiZGF0dW1Db2RlIiwiYXhpcyIsImxlZ2FsQXhpcyIsIndoaXRlc3BhY2UiLCJsYXRpbiIsImtleXdvcmQiLCJlbmRUaGluZ3MiLCJkaWdldHMiLCJQYXJzZXIiLCJ0ZXh0IiwibGV2ZWwiLCJwbGFjZSIsInJvb3QiLCJjdXJyZW50T2JqZWN0IiwibWFwaXQiLCJ0aGluZyIsIm5ld09iaiIsIml0ZW0iLCJzRXhwciIsImNvbnZlcnQiLCJkMnIiLCJ3a3QiLCJsaXNwIiwicHJvak5hbWUiLCJsb2NhbCIsIlBST0pFQ1RJT04iLCJBWElTIiwiYXhpc09yZGVyIiwiaWkiLCJkZXNjcmlwdG9yIiwiVU5JVCIsIkRBVFVNIiwiU1BIRVJPSUQiLCJnZW9nY3MiLCJHRU9HQ1MiLCJ0b01ldGVyIiwic3BoZXJlIiwiZWxscHMiLCJUT1dHUzg0IiwiZm9yRWFjaCIsIm91dE5hbWUiLCJpbk5hbWUiLCJyZW5hbWUiLCJjbGVhbldLVCIsImRlZnMiLCJkZWYiLCJjaGFyQXQiLCJFUFNHIiwiRVNSSSIsIklBVTIwMDAiLCJyZWFkQ2hhcmljdGVyIiwiY2hhciIsInRlc3QiLCJuZXV0cmFsIiwicXVvdGVkIiwiYWZ0ZXJxdW90ZSIsIm51bWJlciIsIndvcmQiLCJhZnRlckl0ZW0iLCJuZXdPYmplY3RzIiwiV0dTODQiLCJHT09HTEUiLCJnbG9iYWwiLCJjb2RlV29yZHMiLCJjb2RlcyIsImRlc3RpbmF0aW9uIiwic291cmNlIiwicHJvcGVydHkiLCJlY2NlbnQiLCJzaW5waGkiLCJjb3NwaGkiLCJjb24iLCJzcXJ0Iiwic2lnbiIsInBoaSIsImNvbSIsInRhbiIsInRzIiwiZHBoaSIsImVjY250aCIsImF0YW4iLCJzaW4iLCJpZGVudGl0eSIsInB0IiwicHJvanMiLCJlcyIsImNvcyIsIm1zZm56IiwiZm9yd2FyZCIsImxvbiIsImxhdCIsImFkanVzdF9sb24iLCJ0c2ZueiIsImludmVyc2UiLCJleHAiLCJwaGkyeiIsIm5hbWVzIiwicHJvalN0b3JlIiwiYWRkIiwiZWxsaXBzZU5hbWUiLCJlbGxpcHNlIiwiZGF0dW1OYW1lIiwiUHJvamVjdGlvbiIsInNyc0NvZGUiLCJjYWxsYmFjayIsImpzb24iLCJ0ZXN0T2JqIiwidGVzdERlZiIsInNvbWUiLCJ0ZXN0V0tUIiwiYXV0aCIsImNoZWNrTWVyY2F0b3IiLCJtYXliZVByb2pTdHIiLCJjaGVja1Byb2pTdHIiLCJ0ZXN0UHJvaiIsInBhcnNlQ29kZSIsIm91clByb2oiLCJwcm9qZWN0aW9ucyIsImRhdHVtRGVmIiwiYTIiLCJiMiIsInNwaGVyZV8iLCJlY2MiLCJlcDIiLCJkYXR1bU9iaiIsImRhdHVtX3R5cGUiLCJleHRlbmQiLCJnZW9kZXRpY1RvR2VvY2VudHJpYyIsIlJuIiwiU2luX0xhdCIsIlNpbjJfTGF0IiwiQ29zX0xhdCIsIkxvbmdpdHVkZSIsIkxhdGl0dWRlIiwiSGVpZ2h0IiwieiIsImdlb2NlbnRyaWNUb0dlb2RldGljIiwiUCIsIlJSIiwiQ1QiLCJTVCIsIlJYIiwiUksiLCJSTiIsIkNQSEkwIiwiU1BISTAiLCJDUEhJIiwiU1BISSIsIlNEUEhJIiwiaXRlciIsIlgiLCJZIiwiWiIsImF0YW4yIiwiY2hlY2tQYXJhbXMiLCJjcnMiLCJkZW5vcm0iLCJwb2ludCIsInQiLCJ4aW4iLCJ5aW4iLCJ6aW4iLCJjaGVja0Nvb3JkIiwidHJhbnNmb3JtIiwiZGVzdCIsIndnczg0IiwidG9Qb2ludCIsImNoZWNrU2FuaXR5IiwiY2hlY2tOb3RXR1MiLCJhZGp1c3RfYXhpcyIsImNvbXBhcmVEYXR1bXMiLCJEeF9CRiIsIkR5X0JGIiwiRHpfQkYiLCJSeF9CRiIsIlJ5X0JGIiwiUnpfQkYiLCJNX0JGIiwiZ2VvY2VudHJpY1RvV2dzODQiLCJ4X3RtcCIsInlfdG1wIiwiel90bXAiLCJnZW9jZW50cmljRnJvbVdnczg0IiwiZGF0dW1fdHJhbnNmb3JtIiwidHJhbnNmb3JtZXIiLCJ0byIsImNvb3JkcyIsInRyYW5zZm9ybWVkQXJyYXkiLCJzcGxpY2UiLCJjaGVja1Byb2oiLCJvUHJvaiIsImZyb21Qcm9qIiwidG9Qcm9qIiwiY29vcmQiLCJzaW5nbGUiLCJTRVRfT1JJR0lOX0NPTFVNTl9MRVRURVJTIiwiU0VUX09SSUdJTl9ST1dfTEVUVEVSUyIsIkEiLCJJIiwiTyIsIm1ncnMiLCJiYm94IiwiVVRNdG9MTCIsImRlY29kZSIsInRvVXBwZXJDYXNlIiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwidG9wIiwibGwiLCJhY2N1cmFjeSIsInV0bSIsImNvbHVtbiIsInJvdyIsImNvbE9yaWdpbiIsInJvd09yaWdpbiIsImNvbEludCIsInJvd0ludCIsInJvbGxvdmVyIiwiZWFzdGluZyIsIm5vcnRoaW5nIiwic2V0UGFybSIsInNlYXN0aW5nIiwic25vcnRoaW5nIiwiem9uZU51bWJlciIsInpvbmVMZXR0ZXIiLCJnZXQxMDBrU2V0Rm9yWm9uZSIsImVuY29kZSIsImVjY1ByaW1lU3F1YXJlZCIsIk4iLCJUIiwiQyIsIkxvbmdPcmlnaW5SYWQiLCJab25lTnVtYmVyIiwiTGF0IiwiTG9uZyIsImVjY1NxdWFyZWQiLCJMYXRSYWQiLCJkZWdUb1JhZCIsIkxvbmdSYWQiLCJMZXR0ZXJEZXNpZ25hdG9yIiwiVVRNRWFzdGluZyIsIlVUTU5vcnRoaW5nIiwicm91bmQiLCJMTHRvVVRNIiwiZGVnIiwicmFkVG9EZWciLCJyYWQiLCJOMSIsIlQxIiwiQzEiLCJSMSIsIkQiLCJMb25nT3JpZ2luIiwibXUiLCJwaGkxUmFkIiwiZTEiLCJyZXN1bHQiLCJ0b3BSaWdodCIsIm1ncnNTdHJpbmciLCJ0ZXN0Q2hhciIsImh1bksiLCJzYiIsInN1YnN0cmluZyIsImVhc3QxMDBrIiwiY3VyQ29sIiwiZWFzdGluZ1ZhbHVlIiwicmV3aW5kTWFya2VyIiwiZ2V0RWFzdGluZ0Zyb21DaGFyIiwibm9ydGgxMDBrIiwiY3VyUm93Iiwibm9ydGhpbmdWYWx1ZSIsImdldE5vcnRoaW5nRnJvbUNoYXIiLCJnZXRNaW5Ob3J0aGluZyIsInJlbWFpbmRlciIsImFjY3VyYWN5Qm9udXMiLCJzZXBFYXN0aW5nU3RyaW5nIiwic2VwTm9ydGhpbmdTdHJpbmciLCJzZXAiLCJzZXBFYXN0aW5nIiwic2VwTm9ydGhpbmciLCJQb2ludCIsImZyb21NR1JTIiwibWdyc1N0ciIsInRvTUdSUyIsIkMwNCIsIkMwNiIsIkMwOCIsImVuIiwic3BoaSIsImNwaGkiLCJwal9tbGZuIiwicGpfZW5mbiIsIm1sMCIsImRlbHRhX2xvbiIsInNpbl9waGkiLCJjb3NfcGhpIiwiYWwiLCJhbHMiLCJjcyIsInRxIiwibWwiLCJhY29zIiwicGpfaW52X21sZm4iLCJ0YW5fcGhpIiwiZHMiLCJmIiwiZyIsInRlbXAiLCJoIiwiYXNpbiIsInIiLCJwcCIsIkIiLCJjb3NfMkIiLCJoMSIsImgyIiwiYXJnX3IiLCJhcmdfaSIsImhyMiIsImhpMiIsInNpbl9hcmdfciIsImNvc19hcmdfciIsInNpbmhfYXJnX2kiLCJzaW5oIiwiY29zaF9hcmdfaSIsImNvc2giLCJociIsImhpMSIsImhyMSIsImNnYiIsImNiZyIsInV0ZyIsImd0dSIsIm5wIiwiUW4iLCJnYXRnIiwiWmIiLCJjbGVucyIsIkNlIiwiQ24iLCJzaW5fQ24iLCJjb3NfQ24iLCJzaW5fQ2UiLCJjb3NfQ2UiLCJoeXBvdCIsImxvZzFweSIsImFzaW5oeSIsImNsZW5zX2NtcGx4IiwiYWRqdXN0X3pvbmUiLCJldG1lcmMiLCJkZXBlbmRzT24iLCJlc2lucCIsInJjIiwicGhpYzAiLCJyYXRleHAiLCJLIiwic3JhdCIsImdhdXNzIiwic2luYzAiLCJjb3NjMCIsIlIyIiwidGl0bGUiLCJzaW5jIiwiY29zYyIsImNvc2wiLCJyaG8iLCJjb3NsYXQwIiwic2lubGF0MCIsImNvbnMiLCJtczEiLCJYMCIsInNzZm5fIiwiY29zWDAiLCJzaW5YMCIsInNpblgiLCJjb3NYIiwicmgiLCJzaW5sYXQiLCJjb3NsYXQiLCJkbG9uIiwiY2UiLCJDaGkiLCJwaGl0IiwiZWNjZW4iLCJwaHkwIiwibGFtYmRhMCIsInNpblBoeTAiLCJzZW1pTWFqb3JBeGlzIiwiZmxhdHRlbmluZyIsImUyIiwiYjAiLCJrMSIsImsyIiwiazMiLCJTYTEiLCJTYTIiLCJTIiwicm90SSIsInJvdEIiLCJsYW1iZGEiLCJwaHkiLCJwcmV2UGh5IiwiaXRlcmF0aW9uIiwibm9fb2ZmIiwibm9fcm90IiwiYmwiLCJmbCIsImdsIiwidDAiLCJkbCIsInQxIiwidDIiLCJlbCIsImhsIiwiamwiLCJwbCIsImRsb24xMiIsImRsb24xMCIsImdhbW1hMCIsInVjIiwidXMiLCJ2cyIsInFsIiwic2wiLCJ0bCIsInZsIiwidWwiLCJQT1NJVElWRV9JTkZJTklUWSIsInFwIiwic3AiLCJ0cCIsInZwIiwidXAiLCJzaW4xIiwiY29zMSIsInRzMSIsInNpbjIiLCJjb3MyIiwibXMyIiwidHMyIiwidHMwIiwibnMiLCJmMCIsInJoMSIsInRoZXRhIiwiczQ1IiwiczkwIiwiZmkwIiwiYWxmYSIsInVxIiwidTAiLCJuMCIsInMwIiwicm8wIiwiYWQiLCJnZmkiLCJ1IiwiZGVsdGF2IiwiZXBzIiwicm8iLCJjemVjaCIsImZpMSIsIm9rIiwiZTAiLCJlMyIsImUwZm4iLCJlMWZuIiwiZTJmbiIsImUzZm4iLCJtbGZuIiwibGFtIiwibmwiLCJnTiIsImFzcSIsImNsIiwiZGQiLCJwaGkxIiwiaW1sZm4iLCJubDEiLCJybDEiLCJ0bDEiLCJkc3EiLCJhZGp1c3RfbGF0IiwibW9kZSIsIlNfUE9MRSIsIk5fUE9MRSIsIkVRVUlUIiwiT0JMSVEiLCJxc2ZueiIsIm1tZiIsImFwYSIsIkFQQSIsImF1dGhzZXQiLCJycSIsInhtZiIsInltZiIsInNpbmIxIiwiY29zYjEiLCJzaW5waDAiLCJjb3NwaDAiLCJjb3NsYW0iLCJzaW5sYW0iLCJxIiwic2luYiIsImNvc2IiLCJjQ2UiLCJzQ2UiLCJhYiIsImJldGEiLCJjb3N6Iiwic2lueiIsInNpbl9wbyIsImNvc19wbyIsInFzMSIsInFzMiIsInQzIiwicXMwIiwibnMwIiwicXMiLCJwaGkxeiIsImFzaW56IiwiZWNjbnRzIiwic2luX3AxNCIsImNvc19wMTQiLCJpbmZpbml0eV9kaXN0IiwiY29zbG9uIiwiaXFzZm56IiwiZGxhdCIsInRhbnBoaSIsIm1sbiIsIm1sbnAiLCJtYSIsIkJfcmUiLCJCX2ltIiwiQ19yZSIsIkNfaW0iLCJkZWx0YV9sYXQiLCJkX3BoaSIsImRfbGFtYmRhIiwiZF9waGlfbiIsImRfcHNpIiwidGhfbl9pbTEiLCJ0aF9yZSIsInRoX2ltIiwidGhfbl9yZSIsInRoX25faW0iLCJ6X3JlIiwiel9pbSIsInpfbl9pbTEiLCJkZWx0YV94Iiwiel9uX3JlIiwiel9uX2ltIiwiaXRlcmF0aW9ucyIsIm51bV9yZSIsIm51bV9pbSIsImRlbl9yZSIsImRlbl9pbSIsImRlbjIiLCJkX3BzaV9uIiwiQ195IiwiQ194IiwiViIsImRlbHRhX3RoZXRhIiwibWwxIiwibWwyIiwic2ludGgiLCJjb3N0aCIsImdzcSIsIm1zcSIsInh4IiwieXkiLCJ4eXMiLCJjMSIsImMyIiwiYzMiLCJhMSIsIm0xIiwidGgxIiwic2luX3AxMiIsImNvc19wMTIiLCJNbHAiLCJNbCIsIk5sMSIsIk5sIiwicHNpIiwiQXoiLCJHIiwiSCIsIkdIIiwiSHMiLCJrcCIsImNvc19jIiwiczIiLCJzMyIsInM0IiwiY29zQXoiLCJFZSIsIkYiLCJzaW5wc2kiLCJxc2NfZndkX2VxdWF0X2ZhY2VfdGhldGEiLCJhcmVhIiwicXNjX3NoaWZ0X2xvbl9vcmlnaW4iLCJzbG9uIiwiZmFjZSIsIm9uZV9taW51c19mIiwib25lX21pbnVzX2Zfc3F1YXJlZCIsInh5Iiwic2lubG9uIiwibnUiLCJjb3NtdSIsInRhbm51IiwidGFudGhldGEiLCJpbnZlcnRfc2lnbiIsInhhIiwibHAiLCJDT0VGU19YIiwiQ09FRlNfWSIsIkZYQyIsIkZZQyIsInBvbHkzX3ZhbCIsImNvZWZzIiwiTk9ERVMiLCJmX2RmIiwibWF4X2VyciIsIml0ZXJzIiwidXBkIiwibmV3dG9uX3JhcHNob24iLCJwb2x5M19kZXIiLCJhemkiLCJkZWdyZWVzIiwidGlsdCIsInBuMSIsInJwIiwicGZhY3QiLCJvbWVnYSIsImdhbW1hIiwiY2ciLCJzZyIsImN3Iiwic3ciLCJ5dCIsImJhIiwiYm0iLCJicSIsInByb2o0IiwiUHJvaiIsInRtZXJjIiwic3RlcmVhIiwic3RlcmUiLCJzb21lcmMiLCJvbWVyYyIsImxjYyIsImtyb3ZhayIsImNhc3MiLCJsYWVhIiwiYWVhIiwiZ25vbSIsImNlYSIsImVxYyIsInBvbHkiLCJuem1nIiwibWlsbCIsInNpbnUiLCJtb2xsIiwiZXFkYyIsInZhbmRnIiwiYWVxZCIsIm9ydGhvIiwicXNjIiwicm9iaW4iLCJnZW9jZW50IiwidHBlcnMiLCJwcm9wIiwiZXEiLCJvcHRpb25zIiwicmVnZXhwIiwibWF4S2V5cyIsImtzdHIiLCJ2c3RyIiwiaWR4IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3RyaW5naWZ5UHJpbWl0aXZlIiwia3MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnkiLCJjb3B5UHJvcHMiLCJTYWZlQnVmZmVyIiwiQ2xpZW50UmVxdWVzdCIsInJlc3BvbnNlIiwic3RhdHVzQ29kZXMiLCJvcHRzIiwiZGVmYXVsdFByb3RvY29sIiwibG9jYXRpb24iLCJzZWFyY2giLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aCIsIm1ldGhvZCIsImhlYWRlcnMiLCJyZXEiLCJJbmNvbWluZ01lc3NhZ2UiLCJBZ2VudCIsImRlZmF1bHRNYXhTb2NrZXRzIiwiZ2xvYmFsQWdlbnQiLCJTVEFUVVNfQ09ERVMiLCJNRVRIT0RTIiwieGhyIiwiZ2V0WEhSIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJjaGVja1R5cGVTdXBwb3J0IiwicmVzcG9uc2VUeXBlIiwiaXNGdW5jdGlvbiIsImZldGNoIiwiUmVhZGFibGVTdHJlYW0iLCJ3cml0YWJsZVN0cmVhbSIsIldyaXRhYmxlU3RyZWFtIiwiYWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYXJyYXlidWZmZXIiLCJtc3N0cmVhbSIsIm1vemNodW5rZWRhcnJheWJ1ZmZlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJjYXBhYmlsaXR5IiwiaW5oZXJpdHMiLCJzdHJlYW0iLCJyU3RhdGVzIiwicmVhZHlTdGF0ZXMiLCJwcmVmZXJCaW5hcnkiLCJXcml0YWJsZSIsIl9vcHRzIiwiX2JvZHkiLCJfaGVhZGVycyIsInNldEhlYWRlciIsInVzZUZldGNoIiwiX21vZGUiLCJkZWNpZGVNb2RlIiwiX2ZldGNoVGltZXIiLCJfb25GaW5pc2giLCJsb3dlck5hbWUiLCJ1bnNhZmVIZWFkZXJzIiwiZ2V0SGVhZGVyIiwiaGVhZGVyIiwicmVtb3ZlSGVhZGVyIiwiX2Rlc3Ryb3llZCIsImhlYWRlcnNPYmoiLCJib2R5IiwiQmxvYiIsImhlYWRlcnNMaXN0Iiwia2V5TmFtZSIsInNpZ25hbCIsImNvbnRyb2xsZXIiLCJfZmV0Y2hBYm9ydENvbnRyb2xsZXIiLCJyZXF1ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCJhYm9ydCIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwidGhlbiIsIl9mZXRjaFJlc3BvbnNlIiwiX2Nvbm5lY3QiLCJyZWFzb24iLCJjbGVhclRpbWVvdXQiLCJfeGhyIiwicHJvY2VzcyIsIm5leHRUaWNrIiwidGltZW91dCIsIm9udGltZW91dCIsInNldFJlcXVlc3RIZWFkZXIiLCJfcmVzcG9uc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiTE9BRElORyIsIkRPTkUiLCJfb25YSFJQcm9ncmVzcyIsIm9ucHJvZ3Jlc3MiLCJvbmVycm9yIiwic2VuZCIsInN0YXR1cyIsInN0YXR1c1ZhbGlkIiwiX3dyaXRlIiwiY2h1bmsiLCJkZXN0cm95IiwiZmx1c2hIZWFkZXJzIiwic2V0Tm9EZWxheSIsInNldFNvY2tldEtlZXBBbGl2ZSIsIlVOU0VOVCIsIk9QRU5FRCIsIkhFQURFUlNfUkVDRUlWRUQiLCJmZXRjaFRpbWVyIiwiUmVhZGFibGUiLCJyYXdIZWFkZXJzIiwidHJhaWxlcnMiLCJyYXdUcmFpbGVycyIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwic3RhdHVzVGV4dCIsIl9yZXN1bWVGZXRjaCIsImNsb3NlIiwicGlwZVRvIiwiY2F0Y2giLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkb25lIiwiX3BvcyIsInJlc3BvbnNlVVJMIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibWF0Y2hlcyIsIl9jaGFyc2V0IiwibWltZVR5cGUiLCJjaGFyc2V0TWF0Y2giLCJfcmVhZCIsInJlc3BvbnNlVGV4dCIsIm5ld0RhdGEiLCJNU1N0cmVhbVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiY3JlYXRlRXJyb3JUeXBlIiwiTm9kZUVycm9yIiwiX0Jhc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJfX3Byb3RvX18iLCJvbmVPZiIsImV4cGVjdGVkIiwiZGV0ZXJtaW5lciIsInRoaXNfbGVuIiwiZW5kc1dpdGgiLCJvYmplY3RLZXlzIiwiRHVwbGV4IiwiYWxsb3dIYWxmT3BlbiIsInJlYWRhYmxlIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJnZXRCdWZmZXIiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIlBhc3NUaHJvdWdoIiwiVHJhbnNmb3JtIiwiX3RyYW5zZm9ybSIsIlJlYWRhYmxlU3RhdGUiLCJkZWJ1ZyIsIkVFbGlzdGVuZXJDb3VudCIsIlN0cmVhbSIsIk91clVpbnQ4QXJyYXkiLCJkZWJ1Z1V0aWwiLCJkZWJ1Z2xvZyIsIlN0cmluZ0RlY29kZXIiLCJjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IiLCJCdWZmZXJMaXN0IiwiZGVzdHJveUltcGwiLCJnZXRIaWdoV2F0ZXJNYXJrIiwiX3JlcXVpcmUkY29kZXMiLCJFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GIiwiRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQiLCJFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UIiwiZXJyb3JPckRlc3Ryb3kiLCJrUHJveHlFdmVudHMiLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJzeW5jIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJwYXVzZWQiLCJlbWl0Q2xvc2UiLCJhdXRvRGVzdHJveSIsImRlZmF1bHRFbmNvZGluZyIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfZGVzdHJveSIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJlbWl0UmVhZGFibGVfIiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJhZGRDaHVuayIsIm1heWJlUmVhZE1vcmUiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsImVuYyIsImhlYWQiLCJjb250ZW50IiwibmV4dCIsImNsZWFyIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImZsb3ciLCJtYXliZVJlYWRNb3JlXyIsInVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNvbnN1bWUiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ3U3RhdGUiLCJmaW5pc2hlZCIsInhzIiwibCIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZSIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25jbG9zZSIsIm9uZmluaXNoIiwib25kcmFpbiIsIm9uZGF0YSIsImNsZWFuZWRVcCIsIm5lZWREcmFpbiIsInBpcGVPbkRyYWluIiwicGF1c2UiLCJldmVudCIsImRlc3RzIiwiZXYiLCJ3cmFwIiwiX3RoaXMiLCJhc3luY0l0ZXJhdG9yIiwiX2Zyb21MaXN0IiwiaXRlcmFibGUiLCJFUlJfTVVMVElQTEVfQ0FMTEJBQ0siLCJFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HIiwiRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNiIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJmbHVzaCIsIl9mbHVzaCIsInByZWZpbmlzaCIsImVycjIiLCJDb3JrZWRSZXF1ZXN0IiwiZW50cnkiLCJmaW5pc2giLCJjb3JrUmVxIiwicGVuZGluZ2NiIiwib25Db3JrZWRGaW5pc2giLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJXcml0YWJsZVN0YXRlIiwicmVhbEhhc0luc3RhbmNlIiwiaW50ZXJuYWxVdGlsIiwiZGVwcmVjYXRlIiwiRVJSX1NUUkVBTV9DQU5OT1RfUElQRSIsIkVSUl9TVFJFQU1fREVTVFJPWUVEIiwiRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyIsIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EIiwiRVJSX1VOS05PV05fRU5DT0RJTkciLCJub3AiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJmaW5hbENhbGxlZCIsImVuZGluZyIsIm5vRGVjb2RlIiwiZGVjb2RlU3RyaW5ncyIsIndyaXRpbmciLCJjb3JrZWQiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZmluYWwiLCJfZmluYWwiLCJkb1dyaXRlIiwib253cml0ZURyYWluIiwiaG9sZGVyIiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInJTdGF0ZSIsImN1cnJlbnQiLCJfIiwiaGFzSW5zdGFuY2UiLCJvYmplY3QiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX09iamVjdCRzZXRQcm90b3R5cGVPIiwiX2RlZmluZVByb3BlcnR5Iiwia0xhc3RSZXNvbHZlIiwia0xhc3RSZWplY3QiLCJrRXJyb3IiLCJrRW5kZWQiLCJrTGFzdFByb21pc2UiLCJrSGFuZGxlUHJvbWlzZSIsImtTdHJlYW0iLCJjcmVhdGVJdGVyUmVzdWx0IiwicmVhZEFuZFJlc29sdmUiLCJvblJlYWRhYmxlIiwiQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsIlJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsInByb21pc2UiLCJsYXN0UHJvbWlzZSIsIndyYXBGb3JOZXh0IiwiX3RoaXMyIiwiX09iamVjdCRjcmVhdGUiLCJpdGVyYXRvciIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJjdXN0b20iLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGFpbCIsInByb3RvUHJvcHMiLCJoYXNTdHJpbmdzIiwiX2dldFN0cmluZyIsIl9nZXRCdWZmZXIiLCJuYiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX29iamVjdFNwcmVhZCIsImRlcHRoIiwiY3VzdG9tSW5zcGVjdCIsImVtaXRFcnJvckFuZENsb3NlTlQiLCJlbWl0RXJyb3JOVCIsImVtaXRDbG9zZU5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFIiwibm9vcCIsImVvcyIsImNhbGxlZCIsIl9sZW4iLCJfa2V5Iiwib25sZWdhY3lmaW5pc2giLCJ3cml0YWJsZUVuZGVkIiwicmVhZGFibGVFbmRlZCIsIm9ucmVxdWVzdCIsImlzUmVxdWVzdCIsIkVSUl9NSVNTSU5HX0FSR1MiLCJkZXN0cm95ZXIiLCJjbG9zZWQiLCJwb3BDYWxsYmFjayIsInN0cmVhbXMiLCJkZXN0cm95cyIsIkVSUl9JTlZBTElEX09QVF9WQUxVRSIsImR1cGxleEtleSIsImh3bSIsImhpZ2hXYXRlck1hcmtGcm9tIiwicGlwZWxpbmUiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJ0b3RhbCIsInV0ZjhDaGVja0luY29tcGxldGUiLCJvIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfX2Fzc2lnbiIsImFzc2lnbiIsImV4ZWN1dGUiLCJEYXRlIiwiZ2V0VGltZSIsImlzUHJpbWl0aXZlIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX19yZXN0IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJkZWNvcmF0ZSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm1ldGFkYXRhIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJfX2dlbmVyYXRvciIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwib3AiLCJfX2NyZWF0ZUJpbmRpbmciLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsImFyIiwiX19zcHJlYWQiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJmdWxmaWxsIiwic2V0dGxlIiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImNvb2tlZCIsInJhdyIsIl9faW1wb3J0U3RhciIsIm1vZCIsIl9faW1wb3J0RGVmYXVsdCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJwcml2YXRlTWFwIiwiaGFzIiwiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsIm5vZGVUeXBlIiwiZnJlZUdsb2JhbCIsIndpbmRvdyIsInB1bnljb2RlIiwibWF4SW50IiwiYmFzZSIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwibWFwRG9tYWluIiwidWNzMmRlY29kZSIsImV4dHJhIiwiY291bnRlciIsInVjczJlbmNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImZsYWciLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiYmFzZU1pbnVzVE1pbiIsImJhc2ljIiwib2xkaSIsImJhc2VNaW51c1QiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJoYW5kbGVkQ1BDb3VudCIsImJhc2ljTGVuZ3RoIiwiY3VycmVudFZhbHVlIiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicU1pbnVzVCIsInV0aWwiLCJVcmwiLCJzbGFzaGVzIiwiaGFzaCIsInF1ZXJ5IiwicGF0aG5hbWUiLCJocmVmIiwidXJsUGFyc2UiLCJyZWxhdGl2ZSIsInJlc29sdmVPYmplY3QiLCJmb3JtYXQiLCJpc1N0cmluZyIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwicXVlcnlzdHJpbmciLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJpc09iamVjdCIsInF1ZXJ5SW5kZXgiLCJzcGxpdHRlciIsInVTcGxpdCIsInJlc3QiLCJzaW1wbGVQYXRoIiwiZXhlYyIsImxvd2VyUHJvdG8iLCJhdFNpZ24iLCJob3N0RW5kIiwiaGVjIiwicGFyc2VIb3N0IiwiaXB2Nkhvc3RuYW1lIiwiaG9zdHBhcnRzIiwicGFydCIsIm5ld3BhcnQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsInRvQVNDSUkiLCJhZSIsImVzYyIsImVzY2FwZSIsInFtIiwicmVsIiwidGtleXMiLCJ0ayIsInRrZXkiLCJya2V5cyIsInJrIiwicmtleSIsInJlbFBhdGgiLCJpc1NvdXJjZUFicyIsImlzUmVsQWJzIiwibXVzdEVuZEFicyIsInJlbW92ZUFsbERvdHMiLCJzcmNQYXRoIiwicHN5Y2hvdGljIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJhdXRoSW5Ib3N0IiwiaXNOdWxsIiwiaGFzVHJhaWxpbmdTbGFzaCIsImlzQWJzb2x1dGUiLCJjb25maWciLCJsb2NhbFN0b3JhZ2UiLCJ0cmFjZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwidG9TdHJpbmdUYWciLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiO2tIQUNBLEksT0FBQSxTLDJCQVVBLGFBQUUsU0FBRixJQUNVLGVBQTJCLEtBQzNCLGdCQUE0RCxLQXdTdEUsT0FuU2dCLFdBQWQsV0FDRSxPQUFPLElBQUksR0FRTixvQkFBUCxTQUFnQixHQVNkLE9BUkksS0FBQyxVQUFZLEVBQUksT0FFakIsS0FBQyxXQUFhLENBQ2hCLEtBQU0sVUFDTixXQUFZLEdBQ1osU0FBVSxLQUFLLG9CQUdWLE1BTUYsa0JBQVAsU0FBYyxHQUNaLFlBRFksY0FDTCxLQUFLLGFBQWEsSUFPcEIsd0JBQVAsU0FBb0IsR0FFbEIsT0FEQSxLQUFLLFlBQWEsYUFBUyxHQUNwQixNQU1GLHNCQUFQLFdBQ00sT0FBRyxLQUFLLFlBT0osRUFBRiwyQkFBUixXQUNNLElBQUMsS0FBSyxXQUF1QyxJQUExQixLQUFLLFVBQVUsT0FDcEMsTUFBTSxJQUFJLE1BQU0sd0JBR2xCLElBQU0sRUFBTyxLQUFLLFVBQVUsTUFBTSxLQUFLLEdBQUcsT0FBTyxjQUMzQyxFQUFVLEtBQUssVUFBVSxNQUFNLEtBQUssR0FBRyxPQUFPLGNBR2hELEdBRmdCLENBQUMsU0FBUyxTQUFTLEdBRy9CLFlBQU0sa0RBR1YsSUFBRSxFQUFPLEtBQUssVUFBVSxVQUFVLEtBQUssVUFBVSxRQUFRLEtBQU8sRUFBRyxLQUFLLFVBQVUsT0FBUyxHQUUzRixPQUFHLEtBQUssaUJBQWlCLEVBQU0sSUFHM0IsRUFBRiwyQkFBUixTQUEwQixFQUFjLEdBQ2xDLElBQ0ksT0FBRSxHQUNFLElBQUgsUUFDSCxNQUFPLENBQ0wsS0FBTSxRQUNOLFlBQWEsS0FBSyxjQUFjLElBRzVCLElBQUgsYUFFSCxJQUFNLEVBQVMsRUFBSyxPQUFPLFFBQVEsTUFBTyxJQUFJLFFBQVEsTUFBTyxJQUNqRCxNQUFMLENBQ0wsS0FBTSxhQUNO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c0QsT0FBT3FILGVBQWVySyxFQUFTdUMsT0FBT210RCxZQUFhLENBQUVsc0QsTUFBTyxXQUU3RFIsT0FBT3FILGVBQWVySyxFQUFTLGFBQWMsQ0FBRXdELE9BQU8sS0NMdkQyckQsRUFBb0JRLElBQU8zN0MsSUFDMUJBLEVBQU80N0MsTUFBUSxHQUNWNTdDLEVBQU82N0MsV0FBVTc3QyxFQUFPNjdDLFNBQVcsSUFDakM3N0MsR0NEUm03QyxFQUFvQixLIiwiZmlsZSI6InJlcHJvai1oZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVlcENvcHkgZnJvbSBcInRzLWRlZXBjb3B5XCI7XHJcbi8qKlxyXG4gKiBGb3JtYXRDb252ZXJ0ZXIgaXMgYSB1dGlsaXQgY2xhc3MgdGhhdCBhc3Npc3RzIHdpdGggY29udmVydGluZ1xyXG4gKiBzb21lIHNwYXRpYWwgZm9ybWF0cyB0byBvdGhlcnMuXHJcbiAqXHJcbiAqIEN1cnJlbnRseSBzdXBwb3J0cyBjb252ZXJ0aW5nIGZyb20vdG8gV2VsbCBLbm93biBUZXh0IGFuZCBHZW9Kc29uXHJcbiAqIEknbSBzdXJlIHlvdSdyZSBpbW1lZGlhdGVseSB3b25kZXJpbmcgd2h5IEkgZGlkIFdLVCBQYXJzaW5nIHdpdGhvdXQgUmVnZXhcclxuICogTWUgdG9vLi4uIG1lIHRvby4uLlxyXG4gKi9cclxudmFyIEZvcm1hdENvbnZlcnRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZvcm1hdENvbnZlcnRlcigpIHtcclxuICAgICAgICB0aGlzLnNvdXJjZVdrdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VKc29uID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhdGljIGluc3RhbmNlIGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIEZvcm1hdENvbnZlcnRlci5pbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZvcm1hdENvbnZlcnRlcigpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3VwcGx5IGEgV0tUIHN0cmluZyB0byBjb252ZXJ0XHJcbiAgICAgKiBUaGlzIGF1dG9tYXRpY2FsbHkgY29udmVydHMgdG8gR2VvSnNvblxyXG4gICAgICogQHBhcmFtIHdrdCBZb3VyIFdLVCBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5mcm9tV2t0ID0gZnVuY3Rpb24gKHdrdCkge1xyXG4gICAgICAgIHRoaXMuc291cmNlV2t0ID0gd2t0LnRyaW0oKTtcclxuICAgICAgICB0aGlzLnNvdXJjZUpzb24gPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcclxuICAgICAgICAgICAgcHJvcGVydGllczoge30sXHJcbiAgICAgICAgICAgIGdlb21ldHJ5OiB0aGlzLmNvbnZlcnRXa3RUb0pzb24oKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0byBXZWxsIEtub3duIFRleHRcclxuICAgICAqL1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS50b1drdCA9IGZ1bmN0aW9uICh6Q29vcmRDb252ZXJzaW9uKSB7XHJcbiAgICAgICAgaWYgKHpDb29yZENvbnZlcnNpb24gPT09IHZvaWQgMCkgeyB6Q29vcmRDb252ZXJzaW9uID0gZmFsc2U7IH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0VG9Xa3QoekNvb3JkQ29udmVyc2lvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0IGEgZ2VvanNvbiBmZWF0dXJlXHJcbiAgICAgKiBAcGFyYW0ganNvbiBHZW9KU09OIGZlYXR1cmVcclxuICAgICAqL1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5mcm9tR2VvSnNvbiA9IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VKc29uID0gZGVlcENvcHkoanNvbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGNvbnZlcnRlZCBkYXRhIGFzIEdlb0pTT05cclxuICAgICAqL1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS50b0dlb0pzb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlSnNvbjtcclxuICAgIH07XHJcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICAvKiBXS1QgdG8gSlNPTiBjb252ZXJzaW9uICovXHJcbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICBGb3JtYXRDb252ZXJ0ZXIucHJvdG90eXBlLmNvbnZlcnRXa3RUb0pzb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNvdXJjZVdrdCB8fCB0aGlzLnNvdXJjZVdrdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBXS1QgZGF0YSBzdXBwbGllZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdHlwZSA9IHRoaXMuc291cmNlV2t0LnNwbGl0KCcgJylbMF0udHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIHR5cGVNb2QgPSB0aGlzLnNvdXJjZVdrdC5zcGxpdCgnICcpWzFdLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIHZhciB1bnN1cHBvcnRlZCA9IFsnRU1QVFknXS5pbmNsdWRlcyh0eXBlTW9kKTtcclxuICAgICAgICBpZiAodW5zdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0dlb21ldHJ5IGlzIGVtcHR5IG9yIHVzaW5nIGFuIHVudXBwb3J0ZWQgdHlwZSEnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnNvdXJjZVdrdC5zdWJzdHJpbmcodGhpcy5zb3VyY2VXa3QuaW5kZXhPZignKCcpICsgMSwgdGhpcy5zb3VyY2VXa3QubGVuZ3RoIC0gMSk7IC8vIGdldCB0aGUgc3RyaW5nLCBtaW51cyBvcGVuL2Nsb3NlIGJyYWNrZXRzLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkV2t0R2VvbWV0cnkodHlwZSwgZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5idWlsZFdrdEdlb21ldHJ5ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BPSU5UJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQb2ludCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiB0aGlzLnBhcnNlV2t0Q29vcmQoZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTVVMVElQT0lOVCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZXZlcnkgbGFzdCBicmFja2V0IGZyb20gdGhlIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHMgPSBkYXRhLnRyaW0oKS5yZXBsYWNlKC9cXCgvZywgJycpLnJlcGxhY2UoL1xcKS9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ011bHRpUG9pbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlczogdGhpcy5wYXJzZVdrdExpbmUoY29vcmRzKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdMSU5FU1RSSU5HJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHRoaXMucGFyc2VXa3RMaW5lKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ01VTFRJTElORVNUUklORyc6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTXVsdGlMaW5lU3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHRoaXMucGFyc2VXa3RSaW5nKGRhdGEpIC8vIE11bHRpIExpbmVzdHJpbmcgaXMgaWRlbnRpY2FsIHRvIFBvbHlnb25cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnVFJJQU5HTEUnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUE9MWUdPTic6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUG9seWdvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiB0aGlzLnBhcnNlV2t0UmluZyhkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUSU4nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTVVMVElQT0xZR09OJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtdWx0aVBvbHlHZW9tID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTXVsdGlQb2x5Z29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9seWdvbnMgPSBkYXRhLnNwbGl0KCcpKSwnKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHBvbHlnb25zXzEgPSBwb2x5Z29uczsgX2kgPCBwb2x5Z29uc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9seSA9IHBvbHlnb25zXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgZG91YmxlIGJyYWNrZXRzIGFyZSBnb25lLCBhbmQgdGhlIHN0cmluZyBlbmRzIHdpdGggYSBicmFja2V0IChtaWdodCBoYXZlIGJlZW4gdHJpbW1lZCBieSB0aGUgc3BsaXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGVhblBvbHkgPSBwb2x5LnJlcGxhY2UoJygoJywgJygnKSArIChwb2x5LmVuZHNXaXRoKCcpJykgPyAnJyA6ICcpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpUG9seUdlb20uY29vcmRpbmF0ZXMucHVzaCh0aGlzLnBhcnNlV2t0UmluZyhjbGVhblBvbHkudHJpbSgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtdWx0aVBvbHlHZW9tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnR0VPTUVUUllDT0xMRUNUSU9OJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9tQ29sbGVjdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0dlb21ldHJ5Q29sbGVjdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJpZXM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgYSBnZW9tZXRyeSBjb2xsZWN0aW9uLCB3ZSBuZWVkIHRvIHNwbGl0IHVwIHRoZSBnZW9tcyBpbiB0aGUgbGlzdC5cclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCBzcGxpdCBieSAnLCcgb3IgZXZlbiAnKSwnIHRob3VnaCwgYmVjYXVzZSBpdCdzIHBvc3NpYmxlIHRoYXRcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSdkIGhhdmUgbXVsdGlmZWF0dXJlIGdlb21zIG9yIHBvbHkncyB3aXRoIHJpbmdzLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZHhEYXRhID0gZGF0YS50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoL1BPSU5UL2csICctUE9JTlQnKS5yZXBsYWNlKC9MSU5FU1RSSU5HL2csICctTElORVNUUklORycpLnJlcGxhY2UoL1BPTFlHT04vZywgJy1QT0xZR09OJykucmVwbGFjZSgvTVVMVEktL2csICctTVVMVEknKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb21zID0gaWR4RGF0YS5zcGxpdCgnLScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgZ2VvbXNfMSA9IGdlb21zOyBfYSA8IGdlb21zXzEubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW9tID0gZ2VvbXNfMVtfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW9tICYmIGdlb20ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsZWFuR2VvbSA9IGdlb20udHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgYW55IHRyYWlsaW5nIGNvbW1hc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFuR2VvbS5lbmRzV2l0aCgnLCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW5HZW9tID0gY2xlYW5HZW9tLnN1YnN0cmluZygwLCBjbGVhbkdlb20ubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbVR5cGUgPSBjbGVhbkdlb20uc3BsaXQoJyAnKVswXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZU1vZCA9IGNsZWFuR2VvbS5zcGxpdCgnICcpWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bnN1cHBvcnRlZCA9IFsnRU1QVFknLCAnWk0nLCAnTSddLmluY2x1ZGVzKHR5cGVNb2QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuc3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0dlb21ldHJ5IGlzIGVtcHR5IG9yIHVzaW5nIGFuIHVudXBwb3J0ZWQgdHlwZSEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW9tRGF0YSA9IGNsZWFuR2VvbS5zdWJzdHJpbmcoY2xlYW5HZW9tLmluZGV4T2YoJygnKSArIDEsIGNsZWFuR2VvbS5sZW5ndGggLSAxKTsgLy8gZ2V0IHRoZSBzdHJpbmcsIG1pbnVzIG9wZW4vY2xvc2UgYnJhY2tldHMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tQ29sbGVjdGlvbi5nZW9tZXRyaWVzLnB1c2godGhpcy5idWlsZFdrdEdlb21ldHJ5KGdlb21UeXBlLCBnZW9tRGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW9tQ29sbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXS1QgdHlwZSBvZiBcIiArIHR5cGUgKyBcIiBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFBhcnNpbmcgZm9yIFdLVCB0byBqc29uXHJcbiAgICBGb3JtYXRDb252ZXJ0ZXIucHJvdG90eXBlLnBhcnNlV2t0Q29vcmQgPSBmdW5jdGlvbiAoY29vcmQpIHtcclxuICAgICAgICB2YXIgY29vcmRWYWx1ZXMgPSBjb29yZC50cmltKCkuc3BsaXQoJyAnKTtcclxuICAgICAgICB2YXIganNvbkNvb3JkID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb29yZFZhbHVlc18xID0gY29vcmRWYWx1ZXM7IF9pIDwgY29vcmRWYWx1ZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IGNvb3JkVmFsdWVzXzFbX2ldO1xyXG4gICAgICAgICAgICBqc29uQ29vcmQucHVzaChwYXJzZUZsb2F0KHZhbCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ganNvbkNvb3JkO1xyXG4gICAgfTtcclxuICAgIC8vIFBhcnNpbmcgYSBMaW5lIFdLVCB0byBqc29uXHJcbiAgICBGb3JtYXRDb252ZXJ0ZXIucHJvdG90eXBlLnBhcnNlV2t0TGluZSA9IGZ1bmN0aW9uIChsaW5lKSB7XHJcbiAgICAgICAgdmFyIGxpbmVDb29yZHMgPSBbXTtcclxuICAgICAgICB2YXIgY29vcmRzID0gbGluZS50cmltKCkuc3BsaXQoJywnKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvb3Jkc18xID0gY29vcmRzOyBfaSA8IGNvb3Jkc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgY29vcmQgPSBjb29yZHNfMVtfaV07XHJcbiAgICAgICAgICAgIGxpbmVDb29yZHMucHVzaCh0aGlzLnBhcnNlV2t0Q29vcmQoY29vcmQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxpbmVDb29yZHM7XHJcbiAgICB9O1xyXG4gICAgLy8gUGFyc2luZyBhIHJpbmcvcG9seWdvbiBpbnRlcmlvciBvciBleHRlcmlvclxyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5wYXJzZVdrdFJpbmcgPSBmdW5jdGlvbiAocG9seSkge1xyXG4gICAgICAgIHZhciByaW5nQ29vcmRzID0gW107XHJcbiAgICAgICAgdmFyIHJpbmdzID0gcG9seS5zcGxpdCgnKSwnKTtcclxuICAgICAgICB2YXIgaWR4ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHJpbmdzXzEgPSByaW5nczsgX2kgPCByaW5nc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcmluZyA9IHJpbmdzXzFbX2ldO1xyXG4gICAgICAgICAgICAvLyByaW5nIGxlbmd0aCwgYnV0IC0xIGlmIHdlIGVuZCBpbiBhIGJyYWNrZXRcclxuICAgICAgICAgICAgdmFyIGNsZWFuZWRSaW5nID0gcmluZy50cmltKCkuc3Vic3RyaW5nKHJpbmcudHJpbSgpLmluZGV4T2YoJygnKSArIDEsIHJpbmcudHJpbSgpLmxlbmd0aCAtIChyaW5nLmVuZHNXaXRoKCcpJykgPyAxIDogMCkpO1xyXG4gICAgICAgICAgICByaW5nQ29vcmRzW2lkeF0gPSB0aGlzLnBhcnNlV2t0TGluZShjbGVhbmVkUmluZyk7XHJcbiAgICAgICAgICAgIGlkeCArPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmluZ0Nvb3JkcztcclxuICAgIH07XHJcbiAgICAvKioqKioqKioqKioqKioqKipcclxuICAgICAqIEpzb24gdG8gV0tUXHJcbiAgICAgKioqKioqKioqKioqKioqKiovXHJcbiAgICBGb3JtYXRDb252ZXJ0ZXIucHJvdG90eXBlLmNvbnZlcnRUb1drdCA9IGZ1bmN0aW9uICh6Q29vcmRDb252ZXJzaW9uKSB7XHJcbiAgICAgICAgaWYgKHpDb29yZENvbnZlcnNpb24gPT09IHZvaWQgMCkgeyB6Q29vcmRDb252ZXJzaW9uID0gZmFsc2U7IH1cclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VKc29uKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZUpzb24udHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdrdFN0cmluZyA9ICdHRU9NRVRSWUNPTExFQ1RJT04gKCc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zb3VyY2VKc29uLmZlYXR1cmVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEZlYXR1cmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgd2t0U3RyaW5nICs9IHRoaXMud2t0U3RyaW5nRnJvbUdlb21ldHJ5KGNoaWxkRmVhdHVyZS5nZW9tZXRyeSwgekNvb3JkQ29udmVyc2lvbikgKyBcIiwgXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2t0U3RyaW5nLnN1YnN0cmluZygwLCB3a3RTdHJpbmcubGVuZ3RoIC0gMikgKyAnKSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zb3VyY2VKc29uLnR5cGUgPT09ICdGZWF0dXJlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2t0U3RyaW5nRnJvbUdlb21ldHJ5KHRoaXMuc291cmNlSnNvbi5nZW9tZXRyeSwgekNvb3JkQ29udmVyc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53a3RTdHJpbmdGcm9tR2VvbWV0cnkodGhpcy5zb3VyY2VKc29uLCB6Q29vcmRDb252ZXJzaW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9O1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS53a3RTdHJpbmdGcm9tR2VvbWV0cnkgPSBmdW5jdGlvbiAoZ2VvbWV0cnksIHpDb29yZENvbnZlcnNpb24pIHtcclxuICAgICAgICBpZiAoekNvb3JkQ29udmVyc2lvbiA9PT0gdm9pZCAwKSB7IHpDb29yZENvbnZlcnNpb24gPSBmYWxzZTsgfVxyXG4gICAgICAgIHN3aXRjaCAoZ2VvbWV0cnkudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlBPSU5UXCIgKyAoZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoID09PSAyID8gJyAnIDogZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoID09PSAzID8gJyBNICcgOiAnIFpNICcpICsgXCIoXCIgKyB0aGlzLnRvV2t0Q29vcmRTdHJpbmcoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpICsgXCIpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIk1VTFRJUE9JTlQgKFwiICsgdGhpcy5saW5lVG9Xa3RTdHJpbmcoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpICsgXCIpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkxJTkVTVFJJTkcgKFwiICsgdGhpcy5saW5lVG9Xa3RTdHJpbmcoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpICsgXCIpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTVVMVElMSU5FU1RSSU5HIChcIiArIHRoaXMucmluZ1RvV2t0U3RyaW5nKGdlb21ldHJ5LmNvb3JkaW5hdGVzKSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ1BvbHlnb24nOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdWzBdLmxlbmd0aCA9PT0gMyAmJiB6Q29vcmRDb252ZXJzaW9uID8gJ1RSSUFOR0xFJyA6ICdQT0xZR09OJykgKyBcIiAoXCIgKyB0aGlzLnJpbmdUb1drdFN0cmluZyhnZW9tZXRyeS5jb29yZGluYXRlcykgKyBcIilcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdWzBdWzBdLmxlbmd0aCA9PT0gMyAmJiB6Q29vcmRDb252ZXJzaW9uID8gJ1RJTicgOiAnTVVMVElQT0xZR09OJykgKyBcIiAoXCIgKyB0aGlzLnBvbHlnb25Ub1drdFN0cmluZyhnZW9tZXRyeS5jb29yZGluYXRlcykgKyBcIilcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdHZW9tZXRyeUNvbGxlY3Rpb24nOiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgd2t0U3RyaW5nID0gJ0dFT01FVFJZQ09MTEVDVElPTiAoJztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBnZW9tZXRyeS5nZW9tZXRyaWVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEdlb21ldHJ5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHdrdFN0cmluZyArPSB0aGlzLndrdFN0cmluZ0Zyb21HZW9tZXRyeShjaGlsZEdlb21ldHJ5KSArIFwiLCBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB3a3RTdHJpbmcuc3Vic3RyaW5nKDAsIHdrdFN0cmluZy5sZW5ndGggLSAyKSArICcpJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGb3JtYXRDb252ZXJ0ZXIucHJvdG90eXBlLnBvbHlnb25Ub1drdFN0cmluZyA9IGZ1bmN0aW9uIChjb29yZGluYXRlcykge1xyXG4gICAgICAgIHZhciBjb29yZFN0cmluZyA9ICcnO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29vcmRpbmF0ZXNfMSA9IGNvb3JkaW5hdGVzOyBfaSA8IGNvb3JkaW5hdGVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjb29yZCA9IGNvb3JkaW5hdGVzXzFbX2ldO1xyXG4gICAgICAgICAgICBjb29yZFN0cmluZyArPSBcIihcIiArIHRoaXMucmluZ1RvV2t0U3RyaW5nKGNvb3JkKSArIFwiKSwgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb29yZFN0cmluZy5zdWJzdHJpbmcoMCwgY29vcmRTdHJpbmcubGVuZ3RoIC0gMik7XHJcbiAgICB9O1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5yaW5nVG9Xa3RTdHJpbmcgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMpIHtcclxuICAgICAgICB2YXIgY29vcmRTdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvb3JkaW5hdGVzXzIgPSBjb29yZGluYXRlczsgX2kgPCBjb29yZGluYXRlc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgY29vcmQgPSBjb29yZGluYXRlc18yW19pXTtcclxuICAgICAgICAgICAgY29vcmRTdHJpbmcgKz0gXCIoXCIgKyB0aGlzLmxpbmVUb1drdFN0cmluZyhjb29yZCkgKyBcIiksIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29vcmRTdHJpbmcuc3Vic3RyaW5nKDAsIGNvb3JkU3RyaW5nLmxlbmd0aCAtIDIpO1xyXG4gICAgfTtcclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUubGluZVRvV2t0U3RyaW5nID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzKSB7XHJcbiAgICAgICAgdmFyIGNvb3JkU3RyaW5nID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb29yZGluYXRlc18zID0gY29vcmRpbmF0ZXM7IF9pIDwgY29vcmRpbmF0ZXNfMy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGNvb3JkID0gY29vcmRpbmF0ZXNfM1tfaV07XHJcbiAgICAgICAgICAgIGNvb3JkU3RyaW5nICs9IHRoaXMudG9Xa3RDb29yZFN0cmluZyhjb29yZCkgKyBcIiwgXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb29yZFN0cmluZy5zdWJzdHJpbmcoMCwgY29vcmRTdHJpbmcubGVuZ3RoIC0gMik7XHJcbiAgICB9O1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS50b1drdENvb3JkU3RyaW5nID0gZnVuY3Rpb24gKGNvb3JkaW5hdGUpIHtcclxuICAgICAgICB2YXIgY29vcmRTdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvb3JkaW5hdGVfMSA9IGNvb3JkaW5hdGU7IF9pIDwgY29vcmRpbmF0ZV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgY29vcmQgPSBjb29yZGluYXRlXzFbX2ldO1xyXG4gICAgICAgICAgICBjb29yZFN0cmluZyArPSBjb29yZCArIFwiIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29vcmRTdHJpbmcudHJpbSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBGb3JtYXRDb252ZXJ0ZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEZvcm1hdENvbnZlcnRlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXQtY29udmVydGVyLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHByb2o0IGZyb20gXCJwcm9qNFwiO1xyXG5pbXBvcnQgZGVlcENvcHkgZnJvbSBcInRzLWRlZXBjb3B5XCI7XHJcbmltcG9ydCBodHRwcyBmcm9tIFwiaHR0cHNcIjtcclxuLyoqXHJcbiAqIEEgc2ltcGxlIFJlcHJvamVjdGlvbiBjbGFzcyB0aGF0IHdvcmtzIHdpdGggUHJvajQgZm9yXHJcbiAqIHNpbXBsaWZ5aW5nIHJlcHJvamVjdGlvbiBvZiBHZW9Kc29uIG9iamVjdHMuXHJcbiAqXHJcbiAqIERlZmF1bHRzIHRvIEJDIEFsYmVycyBhbmQgV0dTODQsIGJ1dCBhbnkgcHJvamVjdGlvbiBzdHJpbmdcclxuICogUHJvajQgc3VwcG9ydHMgY2FuIGJlIGluY2x1ZGVkLlxyXG4gKlxyXG4gKiBTdXBwb3J0cyBwcm9qZWN0aW5nIEdlb0pTT04gR2VvbWV0cnksIEdlb21ldHJ5Q29sbGVjdGlvbiwgRmVhdHVyZSBhbmQgRmVhdHVyZUNvbGxlY3Rpb24gb2JqZWN0c1xyXG4gKlxyXG4gKiBTdXBwb3J0cyBjaGFpbmluZyBmdW5jdGlvbnMgdG9nZXRoZXIgZm9yIGNvbnZpbmllbmNlLCBpZTpcclxuICogcHJvamVjdG9yLmZyb20oKS50bygpLnNvdXJjZSgpLnByb2plY3QoKTtcclxuICovXHJcbnZhciBSZVByb2plY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgZm9yIFJlUHJvamVjdG9yIGNsYXNzLiBUaGlzIHdpbGwgaW5pdGlhbGl6ZSBhIHNldCBvZiBwcm9lamN0aW9uIGRlZmluaXRpb25zIGFzIHdlbGwuXHJcbiAgICAgKiBEZWZpbml0aW9ucyBpbmNsdWRlOiBbIEVQU0c6MzAwNSwgRVBTRzozODU3LCBFUFNHOjMzNDgsIEVQU0c6Mzk3OSwgRVBTRzozNTc5LCBFUFNHOjM0MDIgXSBhcyB3ZWxsIGFzXHJcbiAgICAgKiBVVE0gem9uZXMgN04gdGhyb3VnaCAxNU4gKEFzIGNvZGVzIFVUTTx6b25lIG51bWJlcj4pXHJcbiAgICAgKiBEZWZhdWx0IEZyb20gUHJvamVjdGlvbiBpcyBFR1NQOjMwMDVcclxuICAgICAqIERlZmF1bHQgVG8gcHJvamVjdGlvbiBpcyBXR1M4NFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZVByb2plY3RvcigpIHtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB0aGlzLnNvdXJjZUZlYXR1cmUgPSBudWxsO1xyXG4gICAgICAgIC8vIERlZmF1bHRzIHRvIHByb2plY3RpbmcgQkMgQWxiZXJzIGludG8gV0dTIDg0LCBvdXIgbW9zdCBjb21tb24gdXNlIGNhc2VcclxuICAgICAgICB0aGlzLmZyb21Qcm9qZWN0aW9uID0gJ0VQU0c6MzAwNSc7XHJcbiAgICAgICAgdGhpcy50b1Byb2plY3Rpb24gPSAnV0dTODQnO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGF0aWMgaW5pdGlhbGl6ZXIgZm9yIGEgUmVQcm9qZWN0b3IgaW5zdGFuY2VcclxuICAgICAqIFVzZWZ1bCBpZiB5b3UgaW50ZW5kIG9uIGNoYWluaW5nLCBpZTpcclxuICAgICAqIFJlUHJvamVjdG9yLmluc3RhbmNlKCkuZmVhdHVyZSh7Li4ufSkuZnJvbSgnRVBTRzozMDA1JykudG8oJ0VQU0c6MzU3OScpLnByb2plY3QoKTtcclxuICAgICAqL1xyXG4gICAgUmVQcm9qZWN0b3IuaW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZVByb2plY3RvcigpO1xyXG4gICAgfTtcclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ0luaXRpYWxpemluZyBSZVByb2plY3RvcicpO1xyXG4gICAgICAgIC8vIExvYWQgYW55IHByZXNldCBwcm9qZWN0aW9uc1xyXG4gICAgICAgIC8vIEJDIEFsYmVyc1xyXG4gICAgICAgIHByb2o0LmRlZnMoJ0VQU0c6MzAwNScsICdQUk9KQ1NbXCJOQUQ4MyAvIEJDIEFsYmVyc1wiLCBHRU9HQ1NbXCJOQUQ4M1wiLCBEQVRVTVtcIk5vcnRoX0FtZXJpY2FuX0RhdHVtXzE5ODNcIiwgU1BIRVJPSURbXCJHUlMgMTk4MFwiLDYzNzgxMzcsMjk4LjI1NzIyMjEwMSwgQVVUSE9SSVRZW1wiRVBTR1wiLFwiNzAxOVwiXV0sIFRPV0dTODRbMCwwLDAsMCwwLDAsMF0sIEFVVEhPUklUWVtcIkVQU0dcIixcIjYyNjlcIl1dLCBQUklNRU1bXCJHcmVlbndpY2hcIiwwLCBBVVRIT1JJVFlbXCJFUFNHXCIsXCI4OTAxXCJdXSwgVU5JVFtcImRlZ3JlZVwiLDAuMDE3NDUzMjkyNTE5OTQzMywgQVVUSE9SSVRZW1wiRVBTR1wiLFwiOTEyMlwiXV0sIEFVVEhPUklUWVtcIkVQU0dcIixcIjQyNjlcIl1dLCBQUk9KRUNUSU9OW1wiQWxiZXJzX0NvbmljX0VxdWFsX0FyZWFcIl0sIFBBUkFNRVRFUltcInN0YW5kYXJkX3BhcmFsbGVsXzFcIiw1MF0sIFBBUkFNRVRFUltcInN0YW5kYXJkX3BhcmFsbGVsXzJcIiw1OC41XSwgUEFSQU1FVEVSW1wibGF0aXR1ZGVfb2ZfY2VudGVyXCIsNDVdLCBQQVJBTUVURVJbXCJsb25naXR1ZGVfb2ZfY2VudGVyXCIsLTEyNl0sIFBBUkFNRVRFUltcImZhbHNlX2Vhc3RpbmdcIiwxMDAwMDAwXSwgUEFSQU1FVEVSW1wiZmFsc2Vfbm9ydGhpbmdcIiwwXSwgVU5JVFtcIm1ldHJlXCIsMSwgQVVUSE9SSVRZW1wiRVBTR1wiLFwiOTAwMVwiXV0sIEFYSVNbXCJFYXN0aW5nXCIsRUFTVF0sIEFYSVNbXCJOb3J0aGluZ1wiLE5PUlRIXSwgQVVUSE9SSVRZW1wiRVBTR1wiLFwiMzAwNVwiXV0nKTtcclxuICAgICAgICAvLyBQc2V1ZG8gTWVyY2F0b3JcclxuICAgICAgICBwcm9qNC5kZWZzKFwiRVBTRzozODU3XCIsIFwiK3Byb2o9bWVyYyArYT02Mzc4MTM3ICtiPTYzNzgxMzcgK2xhdF90cz0wLjAgK2xvbl8wPTAuMCAreF8wPTAuMCAreV8wPTAgK2s9MS4wICt1bml0cz1tICtuYWRncmlkcz1AbnVsbCArd2t0ZXh0ICArbm9fZGVmc1wiKTtcclxuICAgICAgICAvLyBTdGF0c0NhbiBMYW1iZXJ0XHJcbiAgICAgICAgcHJvajQuZGVmcyhcIkVQU0c6MzM0OFwiLCBcIitwcm9qPWxjYyArbGF0XzE9NDkgK2xhdF8yPTc3ICtsYXRfMD02My4zOTA2NzUgK2xvbl8wPS05MS44NjY2NjY2NjY2NjY2NiAreF8wPTYyMDAwMDAgK3lfMD0zMDAwMDAwICtlbGxwcz1HUlM4MCArdG93Z3M4ND0wLDAsMCwwLDAsMCwwICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIC8vIENhbmFkYSBBdGxhcyBMYW1iZXJ0XHJcbiAgICAgICAgcHJvajQuZGVmcyhcIkVQU0c6Mzk3OVwiLCBcIitwcm9qPWxjYyArbGF0XzE9NDkgK2xhdF8yPTc3ICtsYXRfMD00OSArbG9uXzA9LTk1ICt4XzA9MCAreV8wPTAgK2VsbHBzPUdSUzgwICt0b3dnczg0PTAsMCwwLDAsMCwwLDAgK3VuaXRzPW0gK25vX2RlZnNcIik7XHJcbiAgICAgICAgLy8gWXVrb24gQWxiZXJzXHJcbiAgICAgICAgcHJvajQuZGVmcyhcIkVQU0c6MzU3OVwiLCBcIitwcm9qPWFlYSArbGF0XzE9NjEuNjY2NjY2NjY2NjY2NjYgK2xhdF8yPTY4ICtsYXRfMD01OSArbG9uXzA9LTEzMi41ICt4XzA9NTAwMDAwICt5XzA9NTAwMDAwICtlbGxwcz1HUlM4MCArdG93Z3M4ND0wLDAsMCwwLDAsMCwwICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIC8vIEFsYmVydGEgMTAtVE0gRm9yZXN0XHJcbiAgICAgICAgcHJvajQuZGVmcyhcIkVQU0c6MzQwMlwiLCBcIitwcm9qPXRtZXJjICtsYXRfMD0wICtsb25fMD0tMTE1ICtrPTAuOTk5MiAreF8wPTUwMDAwMCAreV8wPTAgK2VsbHBzPUdSUzgwICt0b3dnczg0PTAsMCwwLDAsMCwwLDAgK3VuaXRzPW0gK25vX2RlZnNcIik7XHJcbiAgICAgICAgLy8gdXRtcyA3TiB0aHJvdWdoIDE1blxyXG4gICAgICAgIHByb2o0LmRlZnMoXCJVVE03XCIsIFwiK3Byb2o9dXRtICt6b25lPTcgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIHByb2o0LmRlZnMoXCJVVE04XCIsIFwiK3Byb2o9dXRtICt6b25lPTggK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIHByb2o0LmRlZnMoXCJVVE05XCIsIFwiK3Byb2o9dXRtICt6b25lPTkgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIHByb2o0LmRlZnMoXCJVVE0xMFwiLCBcIitwcm9qPXV0bSArem9uZT0xMCArZGF0dW09V0dTODQgK3VuaXRzPW0gK25vX2RlZnNcIik7XHJcbiAgICAgICAgcHJvajQuZGVmcyhcIlVUTTExXCIsIFwiK3Byb2o9dXRtICt6b25lPTExICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICBwcm9qNC5kZWZzKFwiVVRNMTJcIiwgXCIrcHJvaj11dG0gK3pvbmU9MTIgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIHByb2o0LmRlZnMoXCJVVE0xM1wiLCBcIitwcm9qPXV0bSArem9uZT0xMyArZGF0dW09V0dTODQgK3VuaXRzPW0gK25vX2RlZnNcIik7XHJcbiAgICAgICAgcHJvajQuZGVmcyhcIlVUTTE0XCIsIFwiK3Byb2o9dXRtICt6b25lPTE0ICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICBwcm9qNC5kZWZzKFwiVVRNMTVcIiwgXCIrcHJvaj11dG0gK3pvbmU9MTUgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGRlZmluaXRpb24gc3RyaW5nIHRvIFByb2o0LiBVc2UgdGhlIGRlZmluaXRpb24gYnkgc3BlY2lmeWluZyB0aGVcclxuICAgICAqIGNvZGUgc2V0IGhlcmUgaW4gdGhlIHRvIGFuZCBmcm9tIGZ1bmN0aW9uc1xyXG4gICAgICogQHBhcmFtIGNvZGUgWW91ciBkZXNpcmVkIGNvZGVcclxuICAgICAqIEBwYXJhbSBkZWZpbml0aW9uIFRoZSBwcm9qNCBkZWZpbml0aW9uIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBSZVByb2plY3Rvci5wcm90b3R5cGUuYWRkRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIChjb2RlLCBkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIkFkZGluZyBkZWZpbml0aW9uIFwiICsgY29kZSArIFwiIC0gXCIgKyBkZWZpbml0aW9uKTtcclxuICAgICAgICBwcm9qNC5kZWZzKGNvZGUsIGRlZmluaXRpb24pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBmZWF0dXJlIHlvdSB3aXNoIHRvIHByb2plY3QuIFRoZSBwcm9qZWN0ZWQgZmVhdHVyZSB3aWxsIGJlIGEgZGVlcCBjb3B5XHJcbiAgICAgKiBUaGUgb3JpZ2luYWwgZmVhdHVyZSBwYXNzZWQgaW4gd2lsbCBiZSB1bnRvdWNoZWQuXHJcbiAgICAgKiBAcGFyYW0gZmVhdHVyZSBGZWF0dXJlIFR5cGVcclxuICAgICAqL1xyXG4gICAgUmVQcm9qZWN0b3IucHJvdG90eXBlLmZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ1NvdXJjZSBGZWF0dXJlIHNldCcpO1xyXG4gICAgICAgIHRoaXMuc291cmNlRmVhdHVyZSA9IGZlYXR1cmU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9qZWN0aW9uIGNvZGUgdG8gdXNlIG9uIHRoZSBcImZyb21cIiBwcm9qZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gZnJvbSBDb2RlICh1c3VhbGx5IGFuIEVQU0cgQ29kZSlcclxuICAgICAqL1xyXG4gICAgUmVQcm9qZWN0b3IucHJvdG90eXBlLmZyb20gPSBmdW5jdGlvbiAoZnJvbSkge1xyXG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJQcm9qZWN0aW5nIGZyb20gXCIgKyBmcm9tKTtcclxuICAgICAgICB0aGlzLmZyb21Qcm9qZWN0aW9uID0gZnJvbTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFByb2plY3Rpb24gY29kZSB0byB1c2Ugb24gdGhlIFwiVG9cIiBwcm9qZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gZnJvbSBDb2RlICh1c3VhbGx5IGFuIEVQU0cgQ29kZSlcclxuICAgICAqL1xyXG4gICAgUmVQcm9qZWN0b3IucHJvdG90eXBlLnRvID0gZnVuY3Rpb24gKHRvKSB7XHJcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlByb2plY3RpbmcgdG8gXCIgKyB0byk7XHJcbiAgICAgICAgdGhpcy50b1Byb2plY3Rpb24gPSB0bztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgYXR0ZW1wdCB0byBsb2FkIGEgcHJvajQgZGVmaW5pdGlvbiBmcm9tIGVwc2cuaW9cclxuICAgICAqIEBwYXJhbSBlcHNnQ29kZSBBbiBFUFNHIENvZGUsIDMwMDUgb3IgRVBTRzozMDA1XHJcbiAgICAgKi9cclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS5hZGREZWZpbml0aW9uRnJvbUVwc2dJbyA9IGZ1bmN0aW9uIChlcHNnQ29kZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNvZGUsIG5ld0RlZjtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IGVwc2dDb2RlLnRyaW0oKS5pbmNsdWRlcygnOicpID8gZXBzZ0NvZGUuc3BsaXQoJzonKVsxXS50cmltKCkgOiBlcHNnQ29kZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwcy5nZXQoXCJodHRwczovL2Vwc2cuaW8vXCIgKyBjb2RlICsgXCIucHJvajRcIiwgZnVuY3Rpb24gKHJlc3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcC5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSArPSBjaHVuaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Aub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RlZiA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0RlZiAmJiBuZXdEZWYubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGREZWZpbml0aW9uKGVwc2dDb2RlLCBuZXdEZWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgZGVmaW5pdGlvbiBmb3IgXFxcIlwiICsgZXBzZ0NvZGUgKyBcIlxcXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ld0RlZl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUnVuIHRoZSBwcm9qZWN0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFzeW5jcm9ub3VzIGFuZCB3aWxsXHJcbiAgICAgKiByZXR1cm4gYSBwcm9taXNlIGJ5IGRlZmF1bHQuIFRoZSBzb3VyY2UgZmVhdHVyZSBtdXN0IGJlIHNldCBwcmlvclxyXG4gICAgICogWW91ciBzb3VyY2UgZmVhdHVyZSB3aWxsIGJlIGRlZXAgY2xvbmVkIGFuZCBub3QgbW9kaWZpZWQgYnkgdGhpcyBwcm9jZXNzXHJcbiAgICAgKi9cclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS5wcm9qZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNsb25lZEZlYXR1cmUsIF9pLCBfYSwgZmVhdHVyZSwgX2IsIF9jLCBnZW9tZXRyeSwgX2QsIF9lLCBnZW9tZXRyeSwgX2YsIF9nLCBnZW9tZXRyeTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfaCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnU3RhcnRpbmcgcHJvamVjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNvdXJjZUZlYXR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyBmZWF0dXJlIHRvIHByb2plY3QhIFN0b3BwaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFNvdXJjZSBGZWF0dXJlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjbG9uZWRGZWF0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkRmVhdHVyZSA9IGRlZXBDb3B5KHRoaXMuc291cmNlRmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsb25lZEZlYXR1cmUudHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgX2EgPSBjbG9uZWRGZWF0dXJlLmZlYXR1cmVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfYiA9IDAsIF9jID0gZmVhdHVyZS5nZW9tZXRyeS5nZW9tZXRyaWVzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0R2VvbWV0cnkoZ2VvbWV0cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdEdlb21ldHJ5KGZlYXR1cmUuZ2VvbWV0cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNsb25lZEZlYXR1cmUudHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfZCA9IDAsIF9lID0gY2xvbmVkRmVhdHVyZS5nZW9tZXRyaWVzOyBfZCA8IF9lLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSBfZVtfZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RHZW9tZXRyeShnZW9tZXRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2xvbmVkRmVhdHVyZS50eXBlID09PSAnRmVhdHVyZScgJiYgY2xvbmVkRmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9mID0gMCwgX2cgPSBjbG9uZWRGZWF0dXJlLmdlb21ldHJ5Lmdlb21ldHJpZXM7IF9mIDwgX2cubGVuZ3RoOyBfZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IF9nW19mXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdEdlb21ldHJ5KGdlb21ldHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjbG9uZWRGZWF0dXJlLnR5cGUgPT09ICdGZWF0dXJlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RHZW9tZXRyeShjbG9uZWRGZWF0dXJlLmdlb21ldHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdEdlb21ldHJ5KGNsb25lZEZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHJlcHJvamVjdCBmZWF0dXJlOiBcIiArIGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgY2xvbmVkRmVhdHVyZV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS5wcm9qZWN0R2VvbWV0cnkgPSBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuICAgICAgICBzd2l0Y2ggKGdlb21ldHJ5LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RQb2ludChnZW9tZXRyeS5jb29yZGluYXRlcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdMaW5lU3RyaW5nJzpcclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdExpbmVTdHJpbmcoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnUG9seWdvbic6XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdFBvbHlnb24oZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2x5Z29uJzoge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2x5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdFBvbHlnb24ocG9seSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyB2YWxpZCB0eXBlIGZvdW5kIGZvciB0aGlzIGdlb21ldHJ5LiBQcm9qZWN0aW9uIGNhbmNlbGxlZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihnZW9tZXRyeSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZVByb2plY3Rvci5wcm90b3R5cGUucHJvamVjdFBvbHlnb24gPSBmdW5jdGlvbiAocG9seWdvbikge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9seWdvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3RMaW5lU3RyaW5nKHBvbHlnb25baV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZVByb2plY3Rvci5wcm90b3R5cGUucHJvamVjdExpbmVTdHJpbmcgPSBmdW5jdGlvbiAobGluZVN0cmluZykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZVN0cmluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3RQb2ludChsaW5lU3RyaW5nW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVQcm9qZWN0b3IucHJvdG90eXBlLnByb2plY3RQb2ludCA9IGZ1bmN0aW9uIChjb29yZHMpIHtcclxuICAgICAgICB2YXIgcHJvamVjdGVkQ29vcmRzID0gcHJvajQodGhpcy5mcm9tUHJvamVjdGlvbiwgdGhpcy50b1Byb2plY3Rpb24sIGNvb3Jkcyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9qZWN0ZWRDb29yZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29vcmRzW2ldID0gcHJvamVjdGVkQ29vcmRzW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVQcm9qZWN0b3I7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFJlUHJvamVjdG9yIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcHJvamVjdG9yLmpzLm1hcCIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IGRlZXBDb3B5IGZyb20gXCJ0cy1kZWVwY29weVwiO1xyXG5pbXBvcnQgeyBTcGF0aWFsVXRpbHMgfSBmcm9tICcuL3NwYXRpYWwtdXRpbHMnO1xyXG4vKipcclxuICogQSBTcGF0aWFsIFRyYW5zZm9ybWF0aW9uIGhlbHBlciB0aGF0IHRha2VzIGFuIGlucHV0IGdlb21ldHJ5IG9yIGNvbGxlY3Rpb25cclxuICogb2YgZ2VvbWV0cmllcywgYW5kIHRyYW5zZm9ybXMgdGhlIGRhdGEgaW50byBzb21ldGhpbmcgZWxzZS4gVGhlIGZ1bmN0aW9uc1xyXG4gKiBpbiB0aGlzIGNsYXNzIHdpbGwgYmUgbm9uLWRlc3RydWN0aXZlIHRvIHRoZSBzdXBwbGllZCBmZWF0dXJlcywgYWx3YXlzXHJcbiAqIHJldHVybmluZyBhIG1vZGlmaWVkIGNsb25lIG9mIHRoZSBvcmlnaW5hbC5cclxuICovXHJcbnZhciBTcGF0aWFsVHJhbnNmb3JtZXJzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3BhdGlhbFRyYW5zZm9ybWVycygpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSWRlbnRpZnkgaW50ZXJpb3IgcmluZ3Mgd2l0aGluIGEgcG9seWdvbiBmZWF0dXJlLCBhbmQgZXh0cmFjdCB0aGVtIGFzIHBvbHlnb24gb2JqZWN0c1xyXG4gICAgICogQHBhcmFtIGZlYXR1cmUgVGhlIGZlYXR1cmUgdG8gZmluZCBpbnRlcmlvciByaW5ncyB3aXRoaW5cclxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHBvbHlnb25zIGRlcml2ZWQgZnJvbSB0aGUgaW5wdXQgZmVhdHVyZXMgaW50ZXJpb3IgcmluZ3NcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFRyYW5zZm9ybWVycy5maW5kSW50ZXJpb3JSaW5ncyA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcG9seXMsIGdlb21ldHJ5LCBpLCBfaSwgX2EsIGNoaWxkR2VvbSwgaTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgcG9seXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gZmVhdHVyZS50eXBlID09PSAnRmVhdHVyZScgPyBmZWF0dXJlLmdlb21ldHJ5IDogZmVhdHVyZTtcclxuICAgICAgICAgICAgICAgIGlmIChnZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9seXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUG9seWdvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlczogW2dlb21ldHJ5LmNvb3JkaW5hdGVzW2ldXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChnZW9tZXRyeS50eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfYSA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEdlb20gPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBjaGlsZEdlb20ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlczogW2NoaWxkR2VvbVtpXV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHBvbHlzXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICogR2l2ZW4gYSBHZW9KU09OIHBvbHlnb24gZmVhdHVyZSwgbG9jYXRlIGFuZCBleHRyYWN0IHRoZSBpbnRlcmlvciByaW5nc1xyXG4gICAqIEEgbmV3IGdlb21ldHJ5IHdpdGhvdXQgaW50ZXJpb3IgcmluZ3Mgd2lsbCBiZSByZXR1cm5lZC4gVGhpcyB3aWxsIG5vdCBhbHRlciB0aGUgcHJvdmlkZWQgZ2VvbWV0cnkuXHJcbiAgICogQHBhcmFtIGZlYXR1cmUgVGhlIGZlYXR1cmUgdG8gZmluZCBpbnRlcmlvciByaW5ncyBpblxyXG4gICAqIEByZXR1cm5zIGEgY2xvbmVkIGNvcHkgb2YgdGhlIGlucHV0IGZlYXR1cmUsIHdpdGggaW50ZXJpb3IgcmluZ3MgcmVtb3ZlZFxyXG4gICAqL1xyXG4gICAgU3BhdGlhbFRyYW5zZm9ybWVycy5yZW1vdmVJbnRlcmlvclJpbmdzID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjbG9uZSwgZ2VvbWV0cnksIGk7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGNsb25lID0gZGVlcENvcHkoZmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IGNsb25lLnR5cGUgPT09ICdGZWF0dXJlJyA/IGNsb25lLmdlb21ldHJ5IDogZmVhdHVyZTtcclxuICAgICAgICAgICAgICAgIGlmIChnZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5jb29yZGluYXRlcyA9IFtnZW9tZXRyeS5jb29yZGluYXRlc1swXV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChnZW9tZXRyeS50eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBnZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5jb29yZGluYXRlc1tpXSA9IFtnZW9tZXRyeS5jb29yZGluYXRlc1tpXVswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNsb25lLnR5cGUgPT09ICdGZWF0dXJlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgY2xvbmVdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIHRoZSBib3VuZGluZyBib3ggZm9yIGEgc3VwcGxpZWQgRmVhdHVyZSBvciBGZWF0dXJlQ29sbGVjdGlvblxyXG4gICAgICogQHBhcmFtIGZlYXR1cmVzXHJcbiAgICAgKiBAcmV0dXJucyBhIFBvbHlnb24gcmVwcmVzZW50aW5nIHRoZSBib3VuZGluZyBib3guIFRoZSBiYm94IGF0dHJpYnV0ZSBjb250YWlucyB0aGUgYmJveCBkZWZpbml0aW9uXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxUcmFuc2Zvcm1lcnMuYm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoZmVhdHVyZXMpIHtcclxuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgcGFzcyBpbiBhbiBhcnJheSwgbWFrZSBpdCBvbmUgYW55d2F5XHJcbiAgICAgICAgLy8gc28gd2UgY2FuIHByb2Nlc3MgdGhlIHNhbWUgd2F5IGJlbG93XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZlYXR1cmVzKSkge1xyXG4gICAgICAgICAgICBpZiAoZmVhdHVyZXMudHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgZmVhdHVyZXMgPSBmZWF0dXJlcy5mZWF0dXJlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZlYXR1cmVzID0gW2ZlYXR1cmVzXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWluWCA9IEluZmluaXR5O1xyXG4gICAgICAgIHZhciBtYXhYID0gLUluZmluaXR5O1xyXG4gICAgICAgIHZhciBtaW5ZID0gSW5maW5pdHk7XHJcbiAgICAgICAgdmFyIG1heFkgPSAtSW5maW5pdHk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBmZWF0dXJlc18xID0gZmVhdHVyZXM7IF9pIDwgZmVhdHVyZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlc18xW19pXTtcclxuICAgICAgICAgICAgdmFyIGdlb21ldHJ5IFxyXG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgZ2VvbWV0cnkgY29sbGVjdGlvbiwgdGhlbiBnZXQgaXRzIGJib3ggYXMgYSBwb2x5Z29uXHJcbiAgICAgICAgICAgID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgZ2VvbWV0cnkgY29sbGVjdGlvbiwgdGhlbiBnZXQgaXRzIGJib3ggYXMgYSBwb2x5Z29uXHJcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IHRoaXMuYm91bmRpbmdCb3goZmVhdHVyZS5nZW9tZXRyeS5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbiAoZ2VvbSkgeyByZXR1cm4geyB0eXBlOiAnRmVhdHVyZScsIGdlb21ldHJ5OiBnZW9tLCBwcm9wZXJ0aWVzOiB7fSB9OyB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IGZlYXR1cmUuZ2VvbWV0cnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3dpdGNoIChnZW9tZXRyeS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5YID0gbWluWCA+IGdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdID8gZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0gOiBtaW5YO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heFggPSBtYXhYIDwgZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0gPyBnZW9tZXRyeS5jb29yZGluYXRlc1swXSA6IG1heFg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluWSA9IG1pblkgPiBnZW9tZXRyeS5jb29yZGluYXRlc1sxXSA/IGdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdIDogbWluWTtcclxuICAgICAgICAgICAgICAgICAgICBtYXhZID0gbWF4WSA8IGdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdID8gZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0gOiBtYXhZO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdNdWx0aVBvaW50Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSBnZW9tZXRyeS5jb29yZGluYXRlczsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gX2JbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5YID0gbWluWCA+IGNvb3JkWzBdID8gY29vcmRbMF0gOiBtaW5YO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhYID0gbWF4WCA8IGNvb3JkWzBdID8gY29vcmRbMF0gOiBtYXhYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5ZID0gbWluWSA+IGNvb3JkWzFdID8gY29vcmRbMV0gOiBtaW5ZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhZID0gbWF4WSA8IGNvb3JkWzFdID8gY29vcmRbMV0gOiBtYXhZO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQb2x5Z29uJzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9jID0gMCwgX2QgPSBnZW9tZXRyeS5jb29yZGluYXRlczsgX2MgPCBfZC5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpbmcgPSBfZFtfY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9lID0gMCwgcmluZ18xID0gcmluZzsgX2UgPCByaW5nXzEubGVuZ3RoOyBfZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSByaW5nXzFbX2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluWCA9IG1pblggPiBjb29yZFswXSA/IGNvb3JkWzBdIDogbWluWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFggPSBtYXhYIDwgY29vcmRbMF0gPyBjb29yZFswXSA6IG1heFg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5ZID0gbWluWSA+IGNvb3JkWzFdID8gY29vcmRbMV0gOiBtaW5ZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4WSA9IG1heFkgPCBjb29yZFsxXSA/IGNvb3JkWzFdIDogbWF4WTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ011bHRpUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZiA9IDAsIF9nID0gZ2VvbWV0cnkuY29vcmRpbmF0ZXM7IF9mIDwgX2cubGVuZ3RoOyBfZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb2x5ID0gX2dbX2ZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaCA9IDAsIHBvbHlfMSA9IHBvbHk7IF9oIDwgcG9seV8xLmxlbmd0aDsgX2grKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpbmcgPSBwb2x5XzFbX2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ogPSAwLCByaW5nXzIgPSByaW5nOyBfaiA8IHJpbmdfMi5sZW5ndGg7IF9qKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSByaW5nXzJbX2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblggPSBtaW5YID4gY29vcmRbMF0gPyBjb29yZFswXSA6IG1pblg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4WCA9IG1heFggPCBjb29yZFswXSA/IGNvb3JkWzBdIDogbWF4WDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5ZID0gbWluWSA+IGNvb3JkWzFdID8gY29vcmRbMV0gOiBtaW5ZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFkgPSBtYXhZIDwgY29vcmRbMV0gPyBjb29yZFsxXSA6IG1heFk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogJ1BvbHlnb24nLFxyXG4gICAgICAgICAgICBiYm94OiBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0sXHJcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbW1ttaW5YLCBtYXhZXSwgW21heFgsIG1heFldLCBbbWF4WCwgbWluWV0sIFttaW5YLCBtaW5ZXSwgW21pblgsIG1heFldXV1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgY2VudHJvaWQgZnJvbSB0aGUgc3VwcGxpZWQgZmVhdHVyZVxyXG4gICAgICogQHBhcmFtIGZlYXR1cmUgQSBmZWF0dXJlIHRvIGRlcml2ZSBhIGNlbnRyb2lkIGZyb21cclxuICAgICAqIEByZXR1cm5zIGEgUG9pbnQgZGVmaW5pbmcgdGhlIGNlbnRyb2lkIG9mIHRoZSBzdXBwbGllZCBmZWF0dXJlXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxUcmFuc2Zvcm1lcnMuZmVhdHVyZUNlbnRyb2lkID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcclxuICAgICAgICB2YXIgdG90YWxYID0gMDtcclxuICAgICAgICB2YXIgdG90YWxZID0gMDtcclxuICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgIHN3aXRjaCAoZmVhdHVyZS5nZW9tZXRyeS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ1BvaW50Jzoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmUuZ2VvbWV0cnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxYICs9IGNvb3JkWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsWSArPSBjb29yZFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcclxuICAgICAgICAgICAgY2FzZSAnUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByaW5nID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gMCwgcmluZ18zID0gcmluZzsgX2QgPCByaW5nXzMubGVuZ3RoOyBfZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZCA9IHJpbmdfM1tfZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsWCArPSBjb29yZFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxZICs9IGNvb3JkWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9lID0gMCwgX2YgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfZSA8IF9mLmxlbmd0aDsgX2UrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2x5ID0gX2ZbX2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9nID0gMCwgcG9seV8yID0gcG9seTsgX2cgPCBwb2x5XzIubGVuZ3RoOyBfZysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByaW5nID0gcG9seV8yW19nXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ggPSAwLCByaW5nXzQgPSByaW5nOyBfaCA8IHJpbmdfNC5sZW5ndGg7IF9oKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZCA9IHJpbmdfNFtfaF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFggKz0gY29vcmRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFkgKz0gY29vcmRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnR2VvbWV0cnlDb2xsZWN0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbnRyb2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2ogPSAwLCBfayA9IGZlYXR1cmUuZ2VvbWV0cnkuZ2VvbWV0cmllczsgX2ogPCBfay5sZW5ndGg7IF9qKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSBfa1tfal07XHJcbiAgICAgICAgICAgICAgICAgICAgY2VudHJvaWRzLnB1c2godGhpcy5mZWF0dXJlQ2VudHJvaWQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBnZW9tZXRyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNvb3JkaW5hdGVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZlYXR1cmVDZW50cm9pZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNdWx0aVBvaW50JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IGNlbnRyb2lkc1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogbnVsbFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogJ1BvaW50JyxcclxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFsodG90YWxYIC8gY291bnQpLCAodG90YWxZIC8gY291bnQpXVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWR1Y2UgdGhlIHByZWNpc2lvbiBvZiB0aGUgZmVhdHVyZS4gdXNlcyB0aGUgU3BhdGlhbFV0aWxzLnJlZHVjZUNvb3JkaW5hdGVQcmVjaXNpb24gZnVuY3Rpb25cclxuICAgICAqIEBwYXJhbSBmZWF0dXJlIFRoZSBmZWF0dXJlIHRvIHJlZHVjZSBwcmVjaXNpb24gZm9yXHJcbiAgICAgKiBAcmV0dXJucyBhIGNsb25lZCBjb3B5IG9mIHRoZSBmZWF0dXJlIHdpdGggcHJlY2lzaW9uIHJlZHVjZWRcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFRyYW5zZm9ybWVycy5yZWR1Y2VQcmVjaXNpb24gPSBmdW5jdGlvbiAoZmVhdHVyZSwgcmVkdWNlVG8pIHtcclxuICAgICAgICB2YXIgY2xvbmUgPSBkZWVwQ29weShmZWF0dXJlKTtcclxuICAgICAgICBpZiAoY2xvbmUudHlwZSAhPT0gJ0ZlYXR1cmUnKSB7XHJcbiAgICAgICAgICAgIGNsb25lID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IGNsb25lLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogbnVsbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKGNsb25lLmdlb21ldHJ5LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICBjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlcyA9IFNwYXRpYWxVdGlscy5yZWR1Y2VDb29yZGluYXRlUHJlY2lzaW9uKGNsb25lLmdlb21ldHJ5LmNvb3JkaW5hdGVzLCByZWR1Y2VUbyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdMaW5lU3RyaW5nJzpcclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlc1tpXSA9IFNwYXRpYWxVdGlscy5yZWR1Y2VDb29yZGluYXRlUHJlY2lzaW9uKGNsb25lLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldLCByZWR1Y2VUbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxyXG4gICAgICAgICAgICBjYXNlICdQb2x5Z29uJzoge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNsb25lLmdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByaW5nID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByaW5nW2ldID0gU3BhdGlhbFV0aWxzLnJlZHVjZUNvb3JkaW5hdGVQcmVjaXNpb24ocmluZ1tpXSwgcmVkdWNlVG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSBjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9seSA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIHBvbHlfMyA9IHBvbHk7IF9kIDwgcG9seV8zLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmluZyA9IHBvbHlfM1tfZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmluZ1tpXSA9IFNwYXRpYWxVdGlscy5yZWR1Y2VDb29yZGluYXRlUHJlY2lzaW9uKHJpbmdbaV0sIHJlZHVjZVRvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmUuZ2VvbWV0cnkuZ2VvbWV0cmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmdlb21ldHJ5Lmdlb21ldHJpZXNbaV0gPSB0aGlzLnJlZHVjZVByZWNpc2lvbihjbG9uZS5nZW9tZXRyeS5nZW9tZXRyaWVzW2ldLCByZWR1Y2VUbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZlYXR1cmUudHlwZSAhPT0gJ0ZlYXR1cmUnID8gY2xvbmUuZ2VvbWV0cnkgOiBjbG9uZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYWxsIG9mIHRoZSB2ZXJ0aWNlcyBjb250aWFpbmVkIGluIHRoZSBzdXBwbGllZCBmZWF0dXJlXHJcbiAgICAgKiBAcGFyYW0gZmVhdHVyZSBUaGUgZmVhdHVyZSB0byBleHBsb2RlXHJcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBjb29yZGluYXRlc1xyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVHJhbnNmb3JtZXJzLmV4cGxvZGVWZXJ0aWNlcyA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XHJcbiAgICAgICAgdmFyIGNsb25lID0gZGVlcENvcHkoZmVhdHVyZSk7XHJcbiAgICAgICAgaWYgKGNsb25lLnR5cGUgIT09ICdGZWF0dXJlJykge1xyXG4gICAgICAgICAgICBjbG9uZSA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcclxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBjbG9uZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IG51bGxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvb3JkcyA9IFtdO1xyXG4gICAgICAgIHN3aXRjaCAoY2xvbmUuZ2VvbWV0cnkudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoKGNsb25lLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvaW50Jzoge1xyXG4gICAgICAgICAgICAgICAgY29vcmRzLnB1c2guYXBwbHkoY29vcmRzLCBjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxyXG4gICAgICAgICAgICBjYXNlICdQb2x5Z29uJzoge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNsb25lLmdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByaW5nID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoLmFwcGx5KGNvb3JkcywgcmluZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gY2xvbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvbHkgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2QgPSAwLCBwb2x5XzQgPSBwb2x5OyBfZCA8IHBvbHlfNC5sZW5ndGg7IF9kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpbmcgPSBwb2x5XzRbX2RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaC5hcHBseShjb29yZHMsIHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmUuZ2VvbWV0cnkuZ2VvbWV0cmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoLmFwcGx5KGNvb3JkcywgdGhpcy5leHBsb2RlVmVydGljZXMoY2xvbmUuZ2VvbWV0cnkuZ2VvbWV0cmllc1tpXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb29yZHM7XHJcbiAgICB9O1xyXG4gICAgU3BhdGlhbFRyYW5zZm9ybWVycy5jb252ZXhIdWxsID0gZnVuY3Rpb24gKGZlYXR1cmVzKSB7XHJcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gW107XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZlYXR1cmVzKSAmJiBmZWF0dXJlcy50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBmZWF0dXJlcy5mZWF0dXJlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgdmVydGljZXMucHVzaC5hcHBseSh2ZXJ0aWNlcywgdGhpcy5leHBsb2RlVmVydGljZXMoZmVhdHVyZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGZlYXR1cmVzKSkge1xyXG4gICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoLmFwcGx5KHZlcnRpY2VzLCB0aGlzLmV4cGxvZGVWZXJ0aWNlcyhmZWF0dXJlcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSBoYXZlIGFuIGFycmF5IG9mIEZlYXR1cmVzLCBHZW9tZXRyaWVzLCBvciBQb3NpdGlvbnNcclxuICAgICAgICAgICAgLy8gQnV0IHRoZXNlIGFyZSBpbnRlcmZhY2VzLCBzbyBubyBpbnN0YW5jZW9mIGNoZWNrLiBXZSBjYW4gbG9vcCB0aHJvdWdoXHJcbiAgICAgICAgICAgIC8vIHRoZSBpdGVtcywgYW5kIGp1c3QgZGV0ZXJtaW5lIHdoYXQgd2UgaGF2ZSBiYXNlZCBvbiBwcm9wZXJ0eS5cclxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGdlb21ldHJ5IGF0dHJpYnV0ZSwgaXRzIGEgZmVhdHVyZSwgY29vcmRpbmF0ZXMgbWVhbiBpdHMgYSBnZW9tZXRyeVxyXG4gICAgICAgICAgICAvLyBhbmQgZmluYWxseSwgaXQgbXVzdCBiZSBhIHBvc2l0aW9uIChudW1iZXJbXSlcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBmZWF0dXJlc18yID0gZmVhdHVyZXM7IF9iIDwgZmVhdHVyZXNfMi5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gZmVhdHVyZXNfMltfYl07XHJcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZW0sICdjb29yZGluYXRlcycpIHx8IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCAnZ2VvbWV0cnknKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2guYXBwbHkodmVydGljZXMsIHRoaXMuZXhwbG9kZVZlcnRpY2VzKGl0ZW0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZlcnRpY2VzLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnUG9seWdvbicsXHJcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlczogW11cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm93IHdlIGhhdmUgYSBjb2xsZWN0aW9uIG9mIHZlcnRpY2VzLiBTb3J0XHJcbiAgICAgICAgdmVydGljZXMuc29ydChTcGF0aWFsVXRpbHMuY29tcGFyZUNvb3JkaW5hdGVzKTtcclxuICAgICAgICAvLyBhbmQgcmV0dXJuIHRoZSBodWxsIGFzIGEgcG9seWdvblxyXG4gICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraWJvb2tzLm9yZy93aWtpL0FsZ29yaXRobV9JbXBsZW1lbnRhdGlvbi9HZW9tZXRyeS9Db252ZXhfaHVsbC9Nb25vdG9uZV9jaGFpblxyXG4gICAgICAgIHZhciB1cHBlckh1bGwgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcclxuICAgICAgICAgICAgd2hpbGUgKHVwcGVySHVsbC5sZW5ndGggPj0gMikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCh1cHBlckh1bGxbdXBwZXJIdWxsLmxlbmd0aCAtIDFdWzBdIC0gdXBwZXJIdWxsW3VwcGVySHVsbC5sZW5ndGggLSAyXVswXSkgKiAodmVydGV4WzFdIC0gdXBwZXJIdWxsW3VwcGVySHVsbC5sZW5ndGggLSAyXVsxXSkgPj1cclxuICAgICAgICAgICAgICAgICAgICAodXBwZXJIdWxsW3VwcGVySHVsbC5sZW5ndGggLSAxXVsxXSAtIHVwcGVySHVsbFt1cHBlckh1bGwubGVuZ3RoIC0gMl1bMV0pICogKHZlcnRleFswXSAtIHVwcGVySHVsbFt1cHBlckh1bGwubGVuZ3RoIC0gMl1bMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBwZXJIdWxsLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdXBwZXJIdWxsLnB1c2godmVydGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXBwZXJIdWxsLnBvcCgpO1xyXG4gICAgICAgIHZhciBsb3dlckh1bGwgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gdmVydGljZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgdmFyIHZlcnRleCA9IHZlcnRpY2VzW2ldO1xyXG4gICAgICAgICAgICB3aGlsZSAobG93ZXJIdWxsLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGxvd2VySHVsbFtsb3dlckh1bGwubGVuZ3RoIC0gMV1bMF0gLSBsb3dlckh1bGxbbG93ZXJIdWxsLmxlbmd0aCAtIDJdWzBdKSAqICh2ZXJ0ZXhbMV0gLSBsb3dlckh1bGxbbG93ZXJIdWxsLmxlbmd0aCAtIDJdWzFdKSA+PVxyXG4gICAgICAgICAgICAgICAgICAgIChsb3dlckh1bGxbbG93ZXJIdWxsLmxlbmd0aCAtIDFdWzFdIC0gbG93ZXJIdWxsW2xvd2VySHVsbC5sZW5ndGggLSAyXVsxXSkgKiAodmVydGV4WzBdIC0gbG93ZXJIdWxsW2xvd2VySHVsbC5sZW5ndGggLSAyXVswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb3dlckh1bGwucG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb3dlckh1bGwucHVzaCh2ZXJ0ZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb3dlckh1bGwucG9wKCk7XHJcbiAgICAgICAgaWYgKHVwcGVySHVsbC5sZW5ndGggPT0gMSAmJiBsb3dlckh1bGwubGVuZ3RoID09IDEgJiYgdXBwZXJIdWxsWzBdWzBdID09IGxvd2VySHVsbFswXVswXSAmJiB1cHBlckh1bGxbMF1bMV0gPT0gbG93ZXJIdWxsWzBdWzFdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnUG9seWdvbicsXHJcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlczogW3VwcGVySHVsbF1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnUG9seWdvbicsXHJcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlczogW3VwcGVySHVsbC5jb25jYXQobG93ZXJIdWxsKV1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3BhdGlhbFRyYW5zZm9ybWVycy5SQURJVVMgPSA2Mzc4MTM3O1xyXG4gICAgcmV0dXJuIFNwYXRpYWxUcmFuc2Zvcm1lcnM7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFNwYXRpYWxUcmFuc2Zvcm1lcnMgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhdGlhbC10cmFuc2Zvcm1lcnMuanMubWFwIiwiLyoqXHJcbiAqIEEgVXRpbGl0aWVzIGNsYXNzIGNvbnRhaW5pbmcgZnVuY3Rpb25zIGZvciBwZXJmb3JtaW5nIHZhcmlvdXNcclxuICogaGVscGZ1bCB1dGlsaXRpZXMsIGxpa2UgZGlzdGFuY2UgY2FsY3VsYXRpb25zLCBVVE0gem9uZSBoZWxwZXJzLCBldGMuXHJcbiAqL1xyXG52YXIgU3BhdGlhbFV0aWxzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3BhdGlhbFV0aWxzKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBVVE0gWm9uZSBmb3IgYSBnaXZlbiBsb25naXR1ZGUuIEluY2x1ZGVzIHJ1bGVzIGJleW9uZCBqdXN0IEJDL0NhbmFkYVxyXG4gICAgICogQHBhcmFtIGxhdGl0dWRlIFRoZSBMYXRpdHVkZS4gTmVlZGVkIHRvIGRldGVybWluZSB6b25lcyB3aXRoIHNwZWNpYWwgcnVsZXMgKFN2YWxiYXJkKVxyXG4gICAgICogQHBhcmFtIGxvbmdpdHVkZSBUaGUgTG9uZ2l0dWRlXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy51dG1ab25lID0gZnVuY3Rpb24gKGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcclxuICAgICAgICB2YXIgem9uZU51bWJlciA9IE1hdGguZmxvb3IoKGxvbmdpdHVkZSArIDE4MCkgLyA2KSArIDE7XHJcbiAgICAgICAgaWYgKGxhdGl0dWRlID49IDU2LjAgJiYgbGF0aXR1ZGUgPCA2NC4wICYmIGxvbmdpdHVkZSA+PSAzLjAgJiYgbG9uZ2l0dWRlIDwgMTIuMCkge1xyXG4gICAgICAgICAgICB6b25lTnVtYmVyID0gMzI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNwZWNpYWwgem9uZXMgZm9yIFN2YWxiYXJkXHJcbiAgICAgICAgaWYgKGxhdGl0dWRlID49IDcyLjAgJiYgbGF0aXR1ZGUgPCA4NC4wKSB7XHJcbiAgICAgICAgICAgIGlmIChsb25naXR1ZGUgPj0gMC4wICYmIGxvbmdpdHVkZSA8IDkuMClcclxuICAgICAgICAgICAgICAgIHpvbmVOdW1iZXIgPSAzMTtcclxuICAgICAgICAgICAgZWxzZSBpZiAobG9uZ2l0dWRlID49IDkuMCAmJiBsb25naXR1ZGUgPCAyMS4wKVxyXG4gICAgICAgICAgICAgICAgem9uZU51bWJlciA9IDMzO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChsb25naXR1ZGUgPj0gMjEuMCAmJiBsb25naXR1ZGUgPCAzMy4wKVxyXG4gICAgICAgICAgICAgICAgem9uZU51bWJlciA9IDM1O1xyXG4gICAgICAgICAgICBlbHNlIGlmIChsb25naXR1ZGUgPj0gMzMuMCAmJiBsb25naXR1ZGUgPCA0Mi4wKVxyXG4gICAgICAgICAgICAgICAgem9uZU51bWJlciA9IDM3O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gem9uZU51bWJlcjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZSB0aGUgVVRNIFpvbmUgbGV0dGVyIGNvZGVcclxuICAgICAqIEBwYXJhbSBsYXRpdHVkZSB0aGUgTGF0aXR1ZGVcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLnV0bUxldHRlckRlc2lnbmF0aW9uID0gZnVuY3Rpb24gKGxhdGl0dWRlKSB7XHJcbiAgICAgICAgdmFyIGxldHRlciA9ICcnO1xyXG4gICAgICAgIGlmICgtODAgPD0gbGF0aXR1ZGUgJiYgbGF0aXR1ZGUgPD0gODQpIHtcclxuICAgICAgICAgICAgbGV0dGVyID0gJ0NERUZHSEpLTE1OUFFSU1RVVldYWCdbTWF0aC5mbG9vcigobGF0aXR1ZGUgKyA4MCkgLyA4KV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXR0ZXIgPSAnWic7IC8vIEVycm9yIGZsYWcuIE91dHNpZGUgVVRNIExpbWl0c1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGV0dGVyO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVUTSB6b25lIGFuZCBsZXR0ZXIgY29kZSBmb3IgYSBnaXZlbiBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlXHJcbiAgICAgKiBAcGFyYW0gbGF0aXR1ZGUgVGhlIGxhdGl0dWRlXHJcbiAgICAgKiBAcGFyYW0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGVcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLnV0bVpvbmVTdHJpbmcgPSBmdW5jdGlvbiAobGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xyXG4gICAgICAgIHZhciB6b25lTnVtYmVyID0gdGhpcy51dG1ab25lKGxhdGl0dWRlLCBsb25naXR1ZGUpO1xyXG4gICAgICAgIHZhciB6b25lTGV0dGVyID0gdGhpcy51dG1MZXR0ZXJEZXNpZ25hdGlvbihsYXRpdHVkZSk7XHJcbiAgICAgICAgcmV0dXJuICdVVE0nICsgem9uZU51bWJlciArICcnICsgem9uZUxldHRlcjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIERNUyBzdHJpbmcgZnJvbSBhIGdpdmVuIGRlY2ltYWwgZGVncmVlLlxyXG4gICAgICogQHBhcmFtIGRkIFRoZSBkZWNpbWFsIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSBzaG93TWFya3MgU2hvdyBkZWdyZWUgY2hhcmFjdGVyc1xyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMuZGRUb0Rtc1N0cmluZyA9IGZ1bmN0aW9uIChkZCwgc2hvd01hcmtzLCBtYXhEZWNpbWFscykge1xyXG4gICAgICAgIGlmIChtYXhEZWNpbWFscyA9PT0gdm9pZCAwKSB7IG1heERlY2ltYWxzID0gMjsgfVxyXG4gICAgICAgIHZhciBkID0gTWF0aC50cnVuYyhkZCk7XHJcbiAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKChNYXRoLmFicyhkZCkgLSBNYXRoLmFicyhkKSkgKiA2MCk7XHJcbiAgICAgICAgdmFyIHMgPSB0aGlzLnJlZHVjZVByZWNpc2lvbigoTWF0aC5hYnMoZGQpIC0gTWF0aC5hYnMoZCkgLSBtIC8gNjApICogMzYwMCwgbWF4RGVjaW1hbHMpO1xyXG4gICAgICAgIHJldHVybiBzaG93TWFya3MgPyBkICsgXCJcXHUwMEIwIFwiICsgbSArIFwiJyBcIiArIHMgKyBcIlxcXCJcIiA6IGQgKyBcIiBcIiArIG0gKyBcIiBcIiArIHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgRE1TIHN0cmluZyBmb3IgYSBnaXZlbiBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlXHJcbiAgICAgKiBAcGFyYW0gbGF0aXR1ZGUgVGhlIGxhdGl0dWRlXHJcbiAgICAgKiBAcGFyYW0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGVcclxuICAgICAqIEBwYXJhbSBzaG93TWFya3MgU2hvdyBkZWdyZWUgY2hhcmFjdGVyc1xyXG4gICAgICogQHJldHVybnMgT2JqZWN0IGNvbnRhaW5pbmcgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBhcyBETVMgc3RyaW5nc1xyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMubGF0TG9uVG9EbXNTdHJpbmcgPSBmdW5jdGlvbiAobGF0aXR1ZGUsIGxvbmdpdHVkZSwgc2hvd01hcmtzKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGF0aXR1ZGVETVM6IHRoaXMuZGRUb0Rtc1N0cmluZyhsYXRpdHVkZSwgc2hvd01hcmtzKSArIFwiIFwiICsgKGxhdGl0dWRlIDwgMCA/ICdTJyA6ICdOJyksXHJcbiAgICAgICAgICAgIGxvbmdpdHVkZURNUzogdGhpcy5kZFRvRG1zU3RyaW5nKGxvbmdpdHVkZSwgc2hvd01hcmtzKSArIFwiIFwiICsgKGxvbmdpdHVkZSA8IDAgPyAnVycgOiAnRScpXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzIGluIE1ldHJlcywgdXNpbmcgdGhlIGhhdmVyc2luZSBmb3JtdWxhXHJcbiAgICAgKiBAcGFyYW0gc3RhcnRDb29yZCBTdGFydGluZyBjb29yZGluYXRlc1xyXG4gICAgICogQHBhcmFtIGVuZENvb3JkIEVuZGluZyBjb29yZGluYXRlc1xyXG4gICAgICogQHJldHVybnMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIHN0YXJ0IGNvb3JkaW5hdGUgdG8gdGhlIGVuZCBjb29yZGluYXRlXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5oYXZlcnNpbmVEaXN0YW5jZSA9IGZ1bmN0aW9uIChzdGFydENvb3JkLCBlbmRDb29yZCkge1xyXG4gICAgICAgIHZhciBsYXRSYWRzID0gdGhpcy5kZWdyZWVzVG9SYWRpYW5zKGVuZENvb3JkWzFdIC0gc3RhcnRDb29yZFsxXSk7XHJcbiAgICAgICAgdmFyIGxvblJhZHMgPSB0aGlzLmRlZ3JlZXNUb1JhZGlhbnMoZW5kQ29vcmRbMF0gLSBzdGFydENvb3JkWzBdKTtcclxuICAgICAgICB2YXIgbGF0MVJhZHMgPSB0aGlzLmRlZ3JlZXNUb1JhZGlhbnMoc3RhcnRDb29yZFsxXSk7XHJcbiAgICAgICAgdmFyIGxhdDJSYWRzID0gdGhpcy5kZWdyZWVzVG9SYWRpYW5zKGVuZENvb3JkWzFdKTtcclxuICAgICAgICB2YXIgYSA9IE1hdGguc2luKGxhdFJhZHMgLyAyKSAqIE1hdGguc2luKGxhdFJhZHMgLyAyKSArIE1hdGguY29zKGxhdDFSYWRzKSAqIE1hdGguY29zKGxhdDJSYWRzKSAqIE1hdGguc2luKGxvblJhZHMgLyAyKSAqIE1hdGguc2luKGxvblJhZHMgLyAyKTtcclxuICAgICAgICB2YXIgYyA9IDIgKiBNYXRoLmF0YW4yKE1hdGguc3FydChhKSwgTWF0aC5zcXJ0KDEgLSBhKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuUkFESVVTICogYztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIGEgbGluZXN0cmluZyBpbiBtZXRyZXMsIHVzaW5nIHRoZVxyXG4gICAgICogSGF2ZXJzaW5lIGRpc3RhbmNlIG1ldGhvZC4gTXVsdGlMaW5lc3RyaW5nIGRpc3RhbmNlcyB3aWxsIG5vdCBiZSBzZXBhcmF0ZWRcclxuICAgICAqIEBwYXJhbSBsaW5lIFRoZSBsaW5lc3RyaW5nIHRvIGNhbGN1bGF0ZSBhIGxlbmd0aCBmb3JcclxuICAgICAqIEByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIGxpbmUgaW4gbWV0cmVzXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5saW5lTGVuZ3RoID0gZnVuY3Rpb24gKGxpbmUpIHtcclxuICAgICAgICB2YXIgZGlzdGFuY2UgPSAwO1xyXG4gICAgICAgIHZhciBsaW5lcyA9IGxpbmUudHlwZSA9PT0gJ0xpbmVTdHJpbmcnID8gW2xpbmUuY29vcmRpbmF0ZXNdIDogbGluZS5jb29yZGluYXRlcztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpbmVzXzEgPSBsaW5lczsgX2kgPCBsaW5lc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgbGluZXN0cmluZyA9IGxpbmVzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgbGFzdENvb3JkID0gbnVsbDtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBsaW5lc3RyaW5nXzEgPSBsaW5lc3RyaW5nOyBfYSA8IGxpbmVzdHJpbmdfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb29yZCA9IGxpbmVzdHJpbmdfMVtfYV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RDb29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb29yZCA9IGNvb3JkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgKz0gdGhpcy5oYXZlcnNpbmVEaXN0YW5jZShsYXN0Q29vcmQsIGNvb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29vcmQgPSBjb29yZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlzdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGUgdGhlIHBlcmltZXRyZSBmb3IgYSBwb2x5Z29uIGluIG1ldHJlcywgdXNpbmdcclxuICAgICAqIHRoZSBoYXZlcnNpbmUgbWV0aG9kLiBNdWx0aVBvbHlnb24gcGVyaW1ldHJlcyB3aWxsIG5vdCBiZSBzZXBhcmF0ZWRcclxuICAgICAqIEBwYXJhbSBwb2x5Z29uIHRoZSBwb2x5Z29uIHRvIGNhbGN1bGF0ZSB0aGUgcGVyaW1ldHJlIGZvclxyXG4gICAgICogQHJldHVybnMgdGhlIHBlcmltZXRyZSBvZiB0aGUgcG9seWdvbiBpbiBtZXRyZXNcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLnBvbHlnb25QZXJpbWV0ZXIgPSBmdW5jdGlvbiAocG9seWdvbikge1xyXG4gICAgICAgIHZhciBkaXN0YW5jZSA9IDA7XHJcbiAgICAgICAgdmFyIHBvbHlzID0gcG9seWdvbi50eXBlID09PSAnUG9seWdvbicgPyBbcG9seWdvbi5jb29yZGluYXRlc10gOiBwb2x5Z29uLmNvb3JkaW5hdGVzO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgcG9seXNfMSA9IHBvbHlzOyBfaSA8IHBvbHlzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwb2x5ID0gcG9seXNfMVtfaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcG9seV8xID0gcG9seTsgX2EgPCBwb2x5XzEubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmluZyA9IHBvbHlfMVtfYV07XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RDb29yZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGFzdENvb3JkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgcmluZ18xID0gcmluZzsgX2IgPCByaW5nXzEubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gcmluZ18xW19iXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxhc3RDb29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdENvb3JkID0gY29vcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDb29yZCA9IGNvb3JkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgKz0gdGhpcy5oYXZlcnNpbmVEaXN0YW5jZShsYXN0Q29vcmQsIGNvb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENvb3JkID0gY29vcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGpzb24gZGlkbid0IGluY2x1ZGUgdGhlIGZpbmFsIHBvaW50IGxpbmtpbmcgdG8gdGhlIGZpcnN0IHBvaW50XHJcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdG8gYWRkIHRoYXQgdG8gdGhlIGRpc3RhbmNlLlxyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RDb29yZCAmJiBmaXJzdENvb3JkICYmIChsYXN0Q29vcmRbMF0gIT0gZmlyc3RDb29yZFswXSB8fCBsYXN0Q29vcmRbMV0gIT0gZmlyc3RDb29yZFsxXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSArPSB0aGlzLmhhdmVyc2luZURpc3RhbmNlKGxhc3RDb29yZCwgZmlyc3RDb29yZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgYXJlYSBvZiBhIHBvbHlnb24gaW4gbWV0cmVzIHNxdWFyZWQuXHJcbiAgICAgKiBNdWx0aXBvbHlnb24gZmVhdHVyZXMgd2lsbCBub3QgaGF2ZSB0aGVpciBhcmVhcyBzZXBhcmF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gcG9seWdvbiBUaGUgcG9seWdvbiB0byBjYWxjdWxhdGUgdGhlIGFyZWEgZm9yXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgYXJlYSBvZiB0aGUgcG9seWdvbiBpbiBtZXRyZXMgc3F1YXJlZFxyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMucG9seWdvbkFyZWEgPSBmdW5jdGlvbiAocG9seWdvbikge1xyXG4gICAgICAgIHZhciBhcmVhID0gMDtcclxuICAgICAgICB2YXIgcG9seXMgPSBwb2x5Z29uLnR5cGUgPT09ICdQb2x5Z29uJyA/IFtwb2x5Z29uLmNvb3JkaW5hdGVzXSA6IHBvbHlnb24uY29vcmRpbmF0ZXM7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwb2x5c18yID0gcG9seXM7IF9pIDwgcG9seXNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHBvbHkgPSBwb2x5c18yW19pXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2x5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmluZ0FyZWEgPSBNYXRoLmFicyh0aGlzLnBvbHlnb25SaW5nQXJlYShwb2x5W2ldKSk7XHJcbiAgICAgICAgICAgICAgICBhcmVhICs9IGkgPT09IDAgPyByaW5nQXJlYSA6IC1yaW5nQXJlYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJlYTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBSZWZlcmVuY2U6XHJcbiAgICAgKiBSb2JlcnQuIEcuIENoYW1iZXJsYWluIGFuZCBXaWxsaWFtIEguIER1cXVldHRlLCBcIlNvbWUgQWxnb3JpdGhtcyBmb3IgUG9seWdvbnMgb24gYSBTcGhlcmVcIixcclxuICAgICAqIEpQTCBQdWJsaWNhdGlvbiAwNy0wMywgSmV0IFByb3B1bHNpb25cclxuICAgICAqIExhYm9yYXRvcnksIFBhc2FkZW5hLCBDQSwgSnVuZSAyMDA3IGh0dHBzOi8vdHJzLmpwbC5uYXNhLmdvdi9oYW5kbGUvMjAxNC80MDQwOVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSByaW5nIHRoZSBwb2x5Z29uIHJpbmcgdG8gY2FsY3VsYXRlXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYXJlYSBvZiB0aGUgcmluZyBpbiBtZXRyZXMgc3F1YXJlZFxyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMucG9seWdvblJpbmdBcmVhID0gZnVuY3Rpb24gKHJpbmcpIHtcclxuICAgICAgICB2YXIgYXJlYSA9IDA7XHJcbiAgICAgICAgaWYgKHJpbmcubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb3dlckluZGV4ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1pZGRsZUluZGV4ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHVwcGVySW5kZXggPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gcmluZy5sZW5ndGggLSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IHJpbmcubGVuZ3RoIC0gMjtcclxuICAgICAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IHJpbmcubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB1cHBlckluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IHJpbmcubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSByaW5nLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlSW5kZXggPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB1cHBlckluZGV4ID0gaSArIDI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnQxID0gcmluZ1tsb3dlckluZGV4XTtcclxuICAgICAgICAgICAgICAgIHZhciBwb2ludDIgPSByaW5nW21pZGRsZUluZGV4XTtcclxuICAgICAgICAgICAgICAgIHZhciBwb2ludDMgPSByaW5nW3VwcGVySW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgYXJlYSArPSAodGhpcy5kZWdyZWVzVG9SYWRpYW5zKHBvaW50M1swXSkgLSB0aGlzLmRlZ3JlZXNUb1JhZGlhbnMocG9pbnQxWzBdKSkgKiBNYXRoLnNpbih0aGlzLmRlZ3JlZXNUb1JhZGlhbnMocG9pbnQyWzFdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXJlYSA9IChhcmVhICogdGhpcy5SQURJVVMgKiB0aGlzLlJBRElVUykgLyAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJlYTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnQgZGVjaW1hbCBkZWdyZWVzIHRvIHJhZGlhbnNcclxuICAgICAqIEBwYXJhbSBkZWdyZWVzIHRoZSBkZWNpbWFsIGRlZ3JlZXNcclxuICAgICAqIEByZXR1cm5zIHRoZSBkZWdyZWUgaW4gcmFkaWFuc1xyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMuZGVncmVlc1RvUmFkaWFucyA9IGZ1bmN0aW9uIChkZWdyZWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIChkZWdyZWVzICogTWF0aC5QSSkgLyAxODA7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWR1Y2VzIHRoZSBwcmVjaXNpb24gb2YgYSBudW1iZXJcclxuICAgICAqIEBwYXJhbSBjb29yZCBUaGUgbnVtYmVyIHRvIHJlZHVjZVxyXG4gICAgICogQHBhcmFtIHJlZHVjZVRvIEhvdyBtYW55IGRlY2ltYWxzIHRvIHJlZHVjZSBpdCB0b1xyXG4gICAgICogQHJldHVybnMgYSBwcmVjaXNpb24gcmVkdWNlZCBudW1iZXJcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLnJlZHVjZVByZWNpc2lvbiA9IGZ1bmN0aW9uIChjb29yZCwgcmVkdWNlVG8pIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChjb29yZC50b0ZpeGVkKHJlZHVjZVRvKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWR1Y2UgdGhlIHByZWNpc2lvbiBvZiBhIGNvb3JkaW5hdGUuIFRoaXMgd2lsbCByZXR1cm4gYSBuZXcgY29vcmRpbmF0ZVxyXG4gICAgICogYW5kIG5vdCBhbHRlciB0aGUgc3VwcGxpZWQgY29vcmRpbmF0ZVxyXG4gICAgICogQHBhcmFtIGNvb3JkcyBUaGUgY29vcmRpbmF0ZSB0byByZWR1Y2UgcHJlY2lzaW9uIGZvclxyXG4gICAgICogQHBhcmFtIHJlZHVjZVRvIEhvdyBtYW55IGRlY2ltYWwgcGxhY2VzIHRvIHJlZHVjZSB0b1xyXG4gICAgICogQHJldHVybnMgQSBwcmVjaXNpb24tcmVkdWNlZCBQb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMucmVkdWNlQ29vcmRpbmF0ZVByZWNpc2lvbiA9IGZ1bmN0aW9uIChjb29yZHMsIHJlZHVjZVRvKSB7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLnJlZHVjZVByZWNpc2lvbihjb29yZHNbMF0sIHJlZHVjZVRvKSwgdGhpcy5yZWR1Y2VQcmVjaXNpb24oY29vcmRzWzFdLCByZWR1Y2VUbyldO1xyXG4gICAgfTtcclxuICAgIFNwYXRpYWxVdGlscy5jb21wYXJlQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIGlmIChhWzBdIDwgYlswXSlcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGVsc2UgaWYgKGFbMF0gPiBiWzBdKVxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBlbHNlIGlmIChhWzFdIDwgYlsxXSlcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGVsc2UgaWYgKGFbMV0gPiBiWzFdKVxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgfTtcclxuICAgIFNwYXRpYWxVdGlscy5SQURJVVMgPSA2Mzc4MTM3O1xyXG4gICAgcmV0dXJuIFNwYXRpYWxVdGlscztcclxufSgpKTtcclxuZXhwb3J0IHsgU3BhdGlhbFV0aWxzIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYXRpYWwtdXRpbHMuanMubWFwIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxuY29uc3QgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuY29uc3QgY3VzdG9tSW5zcGVjdFN5bWJvbCA9XG4gICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2xbJ2ZvciddID09PSAnZnVuY3Rpb24nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgID8gU3ltYm9sWydmb3InXSgnbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIDogbnVsbFxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbmNvbnN0IEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmZcbmV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0XG4gKiAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGVcbiAqIHVzaW5nIF9fcHJvdG9fXy4gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWBcbiAqIChTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOCkuIElFIDEwIGxhY2tzIHN1cHBvcnRcbiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBjb25zb2xlLmVycm9yKFxuICAgICdUaGlzIGJyb3dzZXIgbGFja3MgdHlwZWQgYXJyYXkgKFVpbnQ4QXJyYXkpIHN1cHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgJyArXG4gICAgJ2BidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuJ1xuICApXG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgY29uc3QgcHJvdG8gPSB7IGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfSB9XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHByb3RvLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYXJyLCBwcm90bylcbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdwYXJlbnQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgbGVuZ3RoICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5Vmlldyh2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgICApXG4gIH1cblxuICBpZiAoaXNJbnN0YW5jZSh2YWx1ZSwgQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIEFycmF5QnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgKGlzSW5zdGFuY2UodmFsdWUsIFNoYXJlZEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBTaGFyZWRBcnJheUJ1ZmZlcikpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICApXG4gIH1cblxuICBjb25zdCB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBjb25zdCBiID0gZnJvbU9iamVjdCh2YWx1ZSlcbiAgaWYgKGIpIHJldHVybiBiXG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1ByaW1pdGl2ZSAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIucHJvdG90eXBlLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIsIFVpbnQ4QXJyYXkpXG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIGNvbnN0IGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIGxldCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIGNvbnN0IGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHtcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIGNvbnN0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5VmlldyAoYXJyYXlWaWV3KSB7XG4gIGlmIChpc0luc3RhbmNlKGFycmF5VmlldywgVWludDhBcnJheSkpIHtcbiAgICBjb25zdCBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlWaWV3KVxuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIoY29weS5idWZmZXIsIGNvcHkuYnl0ZU9mZnNldCwgY29weS5ieXRlTGVuZ3RoKVxuICB9XG4gIHJldHVybiBmcm9tQXJyYXlMaWtlKGFycmF5Vmlldylcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGxldCBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgY29uc3QgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gIH1cblxuICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlICYmXG4gICAgYiAhPT0gQnVmZmVyLnByb3RvdHlwZSAvLyBzbyBCdWZmZXIuaXNCdWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYSwgVWludDhBcnJheSkpIGEgPSBCdWZmZXIuZnJvbShhLCBhLm9mZnNldCwgYS5ieXRlTGVuZ3RoKVxuICBpZiAoaXNJbnN0YW5jZShiLCBVaW50OEFycmF5KSkgYiA9IEJ1ZmZlci5mcm9tKGIsIGIub2Zmc2V0LCBiLmJ5dGVMZW5ndGgpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknXG4gICAgKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgbGV0IHggPSBhLmxlbmd0aFxuICBsZXQgeSA9IGIubGVuZ3RoXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICBsZXQgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIGxldCBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBpZiAocG9zICsgYnVmLmxlbmd0aCA+IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuICAgICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICBidWYsXG4gICAgICAgICAgcG9zXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgfVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgY29uc3QgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBjb25zdCBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcmNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICBjb25zdCBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmdcblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICBsZXQgc3RyID0gJydcbiAgY29uc3QgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cbmlmIChjdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGVbY3VzdG9tSW5zcGVjdFN5bWJvbF0gPSBCdWZmZXIucHJvdG90eXBlLmluc3BlY3Rcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgbGV0IHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIGxldCB5ID0gZW5kIC0gc3RhcnRcbiAgY29uc3QgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICBjb25zdCB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICBjb25zdCB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgbGV0IGluZGV4U2l6ZSA9IDFcbiAgbGV0IGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgbGV0IHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGRpcikge1xuICAgIGxldCBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgY29uc3QgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICBjb25zdCByZXMgPSBbXVxuXG4gIGxldCBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICBjb25zdCBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICBsZXQgY29kZVBvaW50ID0gbnVsbFxuICAgIGxldCBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpXG4gICAgICA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpXG4gICAgICAgICAgPyAzXG4gICAgICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRilcbiAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgbGV0IHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxuY29uc3QgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIGNvbnN0IGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgbGV0IHJlcyA9ICcnXG4gIGxldCBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBsZXQgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIGxldCBvdXQgPSAnJ1xuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSBoZXhTbGljZUxvb2t1cFRhYmxlW2J1ZltpXV1cbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIGxldCByZXMgPSAnJ1xuICAvLyBJZiBieXRlcy5sZW5ndGggaXMgb2RkLCB0aGUgbGFzdCA4IGJpdHMgbXVzdCBiZSBpZ25vcmVkIChzYW1lIGFzIG5vZGUuanMpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIGNvbnN0IG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG5ld0J1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXRdXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgbGV0IG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0TEUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBsbyA9IGZpcnN0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjRcblxuICBjb25zdCBoaSA9IHRoaXNbKytvZmZzZXRdICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICBsYXN0ICogMiAqKiAyNFxuXG4gIHJldHVybiBCaWdJbnQobG8pICsgKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdVSW50NjRCRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IGhpID0gZmlyc3QgKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIGNvbnN0IGxvID0gdGhpc1srK29mZnNldF0gKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICBsYXN0XG5cbiAgcmV0dXJuIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpICsgQmlnSW50KGxvKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aFxuICBsZXQgbXVsID0gMVxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXQgKyA0XSArXG4gICAgdGhpc1tvZmZzZXQgKyA1XSAqIDIgKiogOCArXG4gICAgdGhpc1tvZmZzZXQgKyA2XSAqIDIgKiogMTYgK1xuICAgIChsYXN0IDw8IDI0KSAvLyBPdmVyZmxvd1xuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludChmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0KVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRCRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IChmaXJzdCA8PCAyNCkgKyAvLyBPdmVyZmxvd1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdXG5cbiAgcmV0dXJuIChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArXG4gICAgQmlnSW50KHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0TEUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxldCBoaSA9IE51bWJlcih2YWx1ZSA+PiBCaWdJbnQoMzIpICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgcmV0dXJuIG9mZnNldFxufVxuXG5mdW5jdGlvbiB3cnRCaWdVSW50NjRCRSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBtaW4sIG1heCkge1xuICBjaGVja0ludEJJKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIDcpXG5cbiAgbGV0IGxvID0gTnVtYmVyKHZhbHVlICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0ICsgN10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDZdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA1XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNF0gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDNdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAyXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMV0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldF0gPSBoaVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRMRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NExFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ1VJbnQ2NEJFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0QkUodGhpcywgdmFsdWUsIG9mZnNldCwgQmlnSW50KDApLCBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICBsZXQgaSA9IDBcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICBsZXQgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIC1CaWdJbnQoJzB4ODAwMDAwMDAwMDAwMDAwMCcpLCBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyJylcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgJiYgY29kZSA8IDEyOCkgfHxcbiAgICAgICAgICBlbmNvZGluZyA9PT0gJ2xhdGluMScpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoOiBJZiBgdmFsYCBmaXRzIGludG8gYSBzaW5nbGUgYnl0ZSwgdXNlIHRoYXQgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdib29sZWFuJykge1xuICAgIHZhbCA9IE51bWJlcih2YWwpXG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgbGV0IGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICAgIGNvbnN0IGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyB2YWwgK1xuICAgICAgICAnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gQ1VTVE9NIEVSUk9SU1xuLy8gPT09PT09PT09PT09PVxuXG4vLyBTaW1wbGlmaWVkIHZlcnNpb25zIGZyb20gTm9kZSwgY2hhbmdlZCBmb3IgQnVmZmVyLW9ubHkgdXNhZ2VcbmNvbnN0IGVycm9ycyA9IHt9XG5mdW5jdGlvbiBFIChzeW0sIGdldE1lc3NhZ2UsIEJhc2UpIHtcbiAgZXJyb3JzW3N5bV0gPSBjbGFzcyBOb2RlRXJyb3IgZXh0ZW5kcyBCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICBzdXBlcigpXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWVzc2FnZScsIHtcbiAgICAgICAgdmFsdWU6IGdldE1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSlcblxuICAgICAgLy8gQWRkIHRoZSBlcnJvciBjb2RlIHRvIHRoZSBuYW1lIHRvIGluY2x1ZGUgaXQgaW4gdGhlIHN0YWNrIHRyYWNlLlxuICAgICAgdGhpcy5uYW1lID0gYCR7dGhpcy5uYW1lfSBbJHtzeW19XWBcbiAgICAgIC8vIEFjY2VzcyB0aGUgc3RhY2sgdG8gZ2VuZXJhdGUgdGhlIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBlcnJvciBjb2RlXG4gICAgICAvLyBmcm9tIHRoZSBuYW1lLlxuICAgICAgdGhpcy5zdGFjayAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgLy8gUmVzZXQgdGhlIG5hbWUgdG8gdGhlIGFjdHVhbCBuYW1lLlxuICAgICAgZGVsZXRlIHRoaXMubmFtZVxuICAgIH1cblxuICAgIGdldCBjb2RlICgpIHtcbiAgICAgIHJldHVybiBzeW1cbiAgICB9XG5cbiAgICBzZXQgY29kZSAodmFsdWUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29kZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKCkge1xuICAgICAgcmV0dXJuIGAke3RoaXMubmFtZX0gWyR7c3ltfV06ICR7dGhpcy5tZXNzYWdlfWBcbiAgICB9XG4gIH1cbn1cblxuRSgnRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTJyxcbiAgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuIGAke25hbWV9IGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kc2BcbiAgICB9XG5cbiAgICByZXR1cm4gJ0F0dGVtcHQgdG8gYWNjZXNzIG1lbW9yeSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnXG4gIH0sIFJhbmdlRXJyb3IpXG5FKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsXG4gIGZ1bmN0aW9uIChuYW1lLCBhY3R1YWwpIHtcbiAgICByZXR1cm4gYFRoZSBcIiR7bmFtZX1cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGFjdHVhbH1gXG4gIH0sIFR5cGVFcnJvcilcbkUoJ0VSUl9PVVRfT0ZfUkFOR0UnLFxuICBmdW5jdGlvbiAoc3RyLCByYW5nZSwgaW5wdXQpIHtcbiAgICBsZXQgbXNnID0gYFRoZSB2YWx1ZSBvZiBcIiR7c3RyfVwiIGlzIG91dCBvZiByYW5nZS5gXG4gICAgbGV0IHJlY2VpdmVkID0gaW5wdXRcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihpbnB1dCkgJiYgTWF0aC5hYnMoaW5wdXQpID4gMiAqKiAzMikge1xuICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IoU3RyaW5nKGlucHV0KSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgIHJlY2VpdmVkID0gU3RyaW5nKGlucHV0KVxuICAgICAgaWYgKGlucHV0ID4gQmlnSW50KDIpICoqIEJpZ0ludCgzMikgfHwgaW5wdXQgPCAtKEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpKSkge1xuICAgICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihyZWNlaXZlZClcbiAgICAgIH1cbiAgICAgIHJlY2VpdmVkICs9ICduJ1xuICAgIH1cbiAgICBtc2cgKz0gYCBJdCBtdXN0IGJlICR7cmFuZ2V9LiBSZWNlaXZlZCAke3JlY2VpdmVkfWBcbiAgICByZXR1cm4gbXNnXG4gIH0sIFJhbmdlRXJyb3IpXG5cbmZ1bmN0aW9uIGFkZE51bWVyaWNhbFNlcGFyYXRvciAodmFsKSB7XG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IHZhbC5sZW5ndGhcbiAgY29uc3Qgc3RhcnQgPSB2YWxbMF0gPT09ICctJyA/IDEgOiAwXG4gIGZvciAoOyBpID49IHN0YXJ0ICsgNDsgaSAtPSAzKSB7XG4gICAgcmVzID0gYF8ke3ZhbC5zbGljZShpIC0gMywgaSl9JHtyZXN9YFxuICB9XG4gIHJldHVybiBgJHt2YWwuc2xpY2UoMCwgaSl9JHtyZXN9YFxufVxuXG4vLyBDSEVDSyBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBjaGVja0JvdW5kcyAoYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgaWYgKGJ1ZltvZmZzZXRdID09PSB1bmRlZmluZWQgfHwgYnVmW29mZnNldCArIGJ5dGVMZW5ndGhdID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIGJ1Zi5sZW5ndGggLSAoYnl0ZUxlbmd0aCArIDEpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50QkkgKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB7XG4gICAgY29uc3QgbiA9IHR5cGVvZiBtaW4gPT09ICdiaWdpbnQnID8gJ24nIDogJydcbiAgICBsZXQgcmFuZ2VcbiAgICBpZiAoYnl0ZUxlbmd0aCA+IDMpIHtcbiAgICAgIGlmIChtaW4gPT09IDAgfHwgbWluID09PSBCaWdJbnQoMCkpIHtcbiAgICAgICAgcmFuZ2UgPSBgPj0gMCR7bn0gYW5kIDwgMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOH0ke259YFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmFuZ2UgPSBgPj0gLSgyJHtufSAqKiAkeyhieXRlTGVuZ3RoICsgMSkgKiA4IC0gMX0ke259KSBhbmQgPCAyICoqIGAgK1xuICAgICAgICAgICAgICAgIGAkeyhieXRlTGVuZ3RoICsgMSkgKiA4IC0gMX0ke259YFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZSA9IGA+PSAke21pbn0ke259IGFuZCA8PSAke21heH0ke259YFxuICAgIH1cbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UoJ3ZhbHVlJywgcmFuZ2UsIHZhbHVlKVxuICB9XG4gIGNoZWNrQm91bmRzKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU51bWJlciAodmFsdWUsIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdudW1iZXInLCB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBib3VuZHNFcnJvciAodmFsdWUsIGxlbmd0aCwgdHlwZSkge1xuICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgIT09IHZhbHVlKSB7XG4gICAgdmFsaWRhdGVOdW1iZXIodmFsdWUsIHR5cGUpXG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKHR5cGUgfHwgJ29mZnNldCcsICdhbiBpbnRlZ2VyJywgdmFsdWUpXG4gIH1cblxuICBpZiAobGVuZ3RoIDwgMCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTKClcbiAgfVxuXG4gIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYD49ICR7dHlwZSA/IDEgOiAwfSBhbmQgPD0gJHtsZW5ndGh9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbmNvbnN0IElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICBsZXQgY29kZVBvaW50XG4gIGNvbnN0IGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgbGV0IGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIGNvbnN0IGJ5dGVzID0gW11cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgY29uc3QgYnl0ZUFycmF5ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICBsZXQgYywgaGksIGxvXG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgbGV0IGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbi8vIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXkgb2JqZWN0cyBmcm9tIG90aGVyIGNvbnRleHRzIChpLmUuIGlmcmFtZXMpIGRvIG5vdCBwYXNzXG4vLyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrIGJ1dCB0aGV5IHNob3VsZCBiZSB0cmVhdGVkIGFzIG9mIHRoYXQgdHlwZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE2NlxuZnVuY3Rpb24gaXNJbnN0YW5jZSAob2JqLCB0eXBlKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiB0eXBlIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9IG51bGwgJiZcbiAgICAgIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSB0eXBlLm5hbWUpXG59XG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIC8vIEZvciBJRTExIHN1cHBvcnRcbiAgcmV0dXJuIG9iaiAhPT0gb2JqIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cbi8vIENyZWF0ZSBsb29rdXAgdGFibGUgZm9yIGB0b1N0cmluZygnaGV4JylgXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8yMTlcbmNvbnN0IGhleFNsaWNlTG9va3VwVGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5YWJjZGVmJ1xuICBjb25zdCB0YWJsZSA9IG5ldyBBcnJheSgyNTYpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgIGNvbnN0IGkxNiA9IGkgKiAxNlxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgdGFibGVbaTE2ICsgal0gPSBhbHBoYWJldFtpXSArIGFscGhhYmV0W2pdXG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJsZVxufSkoKVxuXG4vLyBSZXR1cm4gbm90IGZ1bmN0aW9uIHdpdGggRXJyb3IgaWYgQmlnSW50IG5vdCBzdXBwb3J0ZWRcbmZ1bmN0aW9uIGRlZmluZUJpZ0ludE1ldGhvZCAoZm4pIHtcbiAgcmV0dXJuIHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gQnVmZmVyQmlnSW50Tm90RGVmaW5lZCA6IGZuXG59XG5cbmZ1bmN0aW9uIEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0JpZ0ludCBub3Qgc3VwcG9ydGVkJylcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcIjEwMFwiOiBcIkNvbnRpbnVlXCIsXG4gIFwiMTAxXCI6IFwiU3dpdGNoaW5nIFByb3RvY29sc1wiLFxuICBcIjEwMlwiOiBcIlByb2Nlc3NpbmdcIixcbiAgXCIyMDBcIjogXCJPS1wiLFxuICBcIjIwMVwiOiBcIkNyZWF0ZWRcIixcbiAgXCIyMDJcIjogXCJBY2NlcHRlZFwiLFxuICBcIjIwM1wiOiBcIk5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uXCIsXG4gIFwiMjA0XCI6IFwiTm8gQ29udGVudFwiLFxuICBcIjIwNVwiOiBcIlJlc2V0IENvbnRlbnRcIixcbiAgXCIyMDZcIjogXCJQYXJ0aWFsIENvbnRlbnRcIixcbiAgXCIyMDdcIjogXCJNdWx0aS1TdGF0dXNcIixcbiAgXCIyMDhcIjogXCJBbHJlYWR5IFJlcG9ydGVkXCIsXG4gIFwiMjI2XCI6IFwiSU0gVXNlZFwiLFxuICBcIjMwMFwiOiBcIk11bHRpcGxlIENob2ljZXNcIixcbiAgXCIzMDFcIjogXCJNb3ZlZCBQZXJtYW5lbnRseVwiLFxuICBcIjMwMlwiOiBcIkZvdW5kXCIsXG4gIFwiMzAzXCI6IFwiU2VlIE90aGVyXCIsXG4gIFwiMzA0XCI6IFwiTm90IE1vZGlmaWVkXCIsXG4gIFwiMzA1XCI6IFwiVXNlIFByb3h5XCIsXG4gIFwiMzA3XCI6IFwiVGVtcG9yYXJ5IFJlZGlyZWN0XCIsXG4gIFwiMzA4XCI6IFwiUGVybWFuZW50IFJlZGlyZWN0XCIsXG4gIFwiNDAwXCI6IFwiQmFkIFJlcXVlc3RcIixcbiAgXCI0MDFcIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgXCI0MDJcIjogXCJQYXltZW50IFJlcXVpcmVkXCIsXG4gIFwiNDAzXCI6IFwiRm9yYmlkZGVuXCIsXG4gIFwiNDA0XCI6IFwiTm90IEZvdW5kXCIsXG4gIFwiNDA1XCI6IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCIsXG4gIFwiNDA2XCI6IFwiTm90IEFjY2VwdGFibGVcIixcbiAgXCI0MDdcIjogXCJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiLFxuICBcIjQwOFwiOiBcIlJlcXVlc3QgVGltZW91dFwiLFxuICBcIjQwOVwiOiBcIkNvbmZsaWN0XCIsXG4gIFwiNDEwXCI6IFwiR29uZVwiLFxuICBcIjQxMVwiOiBcIkxlbmd0aCBSZXF1aXJlZFwiLFxuICBcIjQxMlwiOiBcIlByZWNvbmRpdGlvbiBGYWlsZWRcIixcbiAgXCI0MTNcIjogXCJQYXlsb2FkIFRvbyBMYXJnZVwiLFxuICBcIjQxNFwiOiBcIlVSSSBUb28gTG9uZ1wiLFxuICBcIjQxNVwiOiBcIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcIixcbiAgXCI0MTZcIjogXCJSYW5nZSBOb3QgU2F0aXNmaWFibGVcIixcbiAgXCI0MTdcIjogXCJFeHBlY3RhdGlvbiBGYWlsZWRcIixcbiAgXCI0MThcIjogXCJJJ20gYSB0ZWFwb3RcIixcbiAgXCI0MjFcIjogXCJNaXNkaXJlY3RlZCBSZXF1ZXN0XCIsXG4gIFwiNDIyXCI6IFwiVW5wcm9jZXNzYWJsZSBFbnRpdHlcIixcbiAgXCI0MjNcIjogXCJMb2NrZWRcIixcbiAgXCI0MjRcIjogXCJGYWlsZWQgRGVwZW5kZW5jeVwiLFxuICBcIjQyNVwiOiBcIlVub3JkZXJlZCBDb2xsZWN0aW9uXCIsXG4gIFwiNDI2XCI6IFwiVXBncmFkZSBSZXF1aXJlZFwiLFxuICBcIjQyOFwiOiBcIlByZWNvbmRpdGlvbiBSZXF1aXJlZFwiLFxuICBcIjQyOVwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gIFwiNDMxXCI6IFwiUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZVwiLFxuICBcIjQ1MVwiOiBcIlVuYXZhaWxhYmxlIEZvciBMZWdhbCBSZWFzb25zXCIsXG4gIFwiNTAwXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gIFwiNTAxXCI6IFwiTm90IEltcGxlbWVudGVkXCIsXG4gIFwiNTAyXCI6IFwiQmFkIEdhdGV3YXlcIixcbiAgXCI1MDNcIjogXCJTZXJ2aWNlIFVuYXZhaWxhYmxlXCIsXG4gIFwiNTA0XCI6IFwiR2F0ZXdheSBUaW1lb3V0XCIsXG4gIFwiNTA1XCI6IFwiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWRcIixcbiAgXCI1MDZcIjogXCJWYXJpYW50IEFsc28gTmVnb3RpYXRlc1wiLFxuICBcIjUwN1wiOiBcIkluc3VmZmljaWVudCBTdG9yYWdlXCIsXG4gIFwiNTA4XCI6IFwiTG9vcCBEZXRlY3RlZFwiLFxuICBcIjUwOVwiOiBcIkJhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZFwiLFxuICBcIjUxMFwiOiBcIk5vdCBFeHRlbmRlZFwiLFxuICBcIjUxMVwiOiBcIk5ldHdvcmsgQXV0aGVudGljYXRpb24gUmVxdWlyZWRcIlxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcigpIHtcbiAgICAgIGlmIChlcnJvckxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuICAgIHZhciBlcnJvckxpc3RlbmVyO1xuXG4gICAgLy8gQWRkaW5nIGFuIGVycm9yIGxpc3RlbmVyIGlzIG5vdCBvcHRpb25hbCBiZWNhdXNlXG4gICAgLy8gaWYgYW4gZXJyb3IgaXMgdGhyb3duIG9uIGFuIGV2ZW50IGVtaXR0ZXIgd2UgY2Fubm90XG4gICAgLy8gZ3VhcmFudGVlIHRoYXQgdGhlIGFjdHVhbCBldmVudCB3ZSBhcmUgd2FpdGluZyB3aWxsXG4gICAgLy8gYmUgZmlyZWQuIFRoZSByZXN1bHQgY291bGQgYmUgYSBzaWxlbnQgd2F5IHRvIGNyZWF0ZVxuICAgIC8vIG1lbW9yeSBvciBmaWxlIGRlc2NyaXB0b3IgbGVha3MsIHdoaWNoIGlzIHNvbWV0aGluZ1xuICAgIC8vIHdlIHNob3VsZCBhdm9pZC5cbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgZXJyb3JMaXN0ZW5lciA9IGZ1bmN0aW9uIGVycm9yTGlzdGVuZXIoZXJyKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgZXZlbnRMaXN0ZW5lcik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfTtcblxuICAgICAgZW1pdHRlci5vbmNlKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIGVtaXR0ZXIub25jZShuYW1lLCBldmVudExpc3RlbmVyKTtcbiAgfSk7XG59XG4iLCJ2YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKVxudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpXG5cbnZhciBodHRwcyA9IG1vZHVsZS5leHBvcnRzXG5cbmZvciAodmFyIGtleSBpbiBodHRwKSB7XG4gIGlmIChodHRwLmhhc093blByb3BlcnR5KGtleSkpIGh0dHBzW2tleV0gPSBodHRwW2tleV1cbn1cblxuaHR0cHMucmVxdWVzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7XG4gIHBhcmFtcyA9IHZhbGlkYXRlUGFyYW1zKHBhcmFtcylcbiAgcmV0dXJuIGh0dHAucmVxdWVzdC5jYWxsKHRoaXMsIHBhcmFtcywgY2IpXG59XG5cbmh0dHBzLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7XG4gIHBhcmFtcyA9IHZhbGlkYXRlUGFyYW1zKHBhcmFtcylcbiAgcmV0dXJuIGh0dHAuZ2V0LmNhbGwodGhpcywgcGFyYW1zLCBjYilcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVQYXJhbXMgKHBhcmFtcykge1xuICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXJhbXMgPSB1cmwucGFyc2UocGFyYW1zKVxuICB9XG4gIGlmICghcGFyYW1zLnByb3RvY29sKSB7XG4gICAgcGFyYW1zLnByb3RvY29sID0gJ2h0dHBzOidcbiAgfVxuICBpZiAocGFyYW1zLnByb3RvY29sICE9PSAnaHR0cHM6Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvdG9jb2wgXCInICsgcGFyYW1zLnByb3RvY29sICsgJ1wiIG5vdCBzdXBwb3J0ZWQuIEV4cGVjdGVkIFwiaHR0cHM6XCInKVxuICB9XG4gIHJldHVybiBwYXJhbXNcbn1cbiIsIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgdmFyIFBKRF8zUEFSQU0gPSAxO1xuZXhwb3J0IHZhciBQSkRfN1BBUkFNID0gMjtcbmV4cG9ydCB2YXIgUEpEX1dHUzg0ID0gNDsgLy8gV0dTODQgb3IgZXF1aXZhbGVudFxuZXhwb3J0IHZhciBQSkRfTk9EQVRVTSA9IDU7IC8vIFdHUzg0IG9yIGVxdWl2YWxlbnRcbmV4cG9ydCB2YXIgU0VDX1RPX1JBRCA9IDQuODQ4MTM2ODExMDk1MzU5OTM1ODk5MTQxMDIzNTdlLTY7XG5leHBvcnQgdmFyIEhBTEZfUEkgPSBNYXRoLlBJLzI7XG4vLyBlbGxpcG9pZCBwal9zZXRfZWxsLmNcbmV4cG9ydCB2YXIgU0lYVEggPSAwLjE2NjY2NjY2NjY2NjY2NjY2Njc7XG4vKiAxLzYgKi9cbmV4cG9ydCB2YXIgUkE0ID0gMC4wNDcyMjIyMjIyMjIyMjIyMjIyMjtcbi8qIDE3LzM2MCAqL1xuZXhwb3J0IHZhciBSQTYgPSAwLjAyMjE1NjA4NDY1NjA4NDY1NjA4O1xuZXhwb3J0IHZhciBFUFNMTiA9IDEuMGUtMTA7XG4vLyB5b3UnZCB0aGluayB5b3UgY291bGQgdXNlIE51bWJlci5FUFNJTE9OIGFib3ZlIGJ1dCB0aGF0IG1ha2VzXG4vLyBNb2xsd2VpZGUgZ2V0IGludG8gYW4gaW5maW5hdGUgbG9vcC5cblxuZXhwb3J0IHZhciBEMlIgPSAwLjAxNzQ1MzI5MjUxOTk0MzI5NTc3O1xuZXhwb3J0IHZhciBSMkQgPSA1Ny4yOTU3Nzk1MTMwODIzMjA4ODtcbmV4cG9ydCB2YXIgRk9SVFBJID0gTWF0aC5QSS80O1xuZXhwb3J0IHZhciBUV09fUEkgPSBNYXRoLlBJICogMjtcbi8vIFNQSSBpcyBzbGlnaHRseSBncmVhdGVyIHRoYW4gTWF0aC5QSSwgc28gdmFsdWVzIHRoYXQgZXhjZWVkIHRoZSAtMTgwLi4xODBcbi8vIGRlZ3JlZSByYW5nZSBieSBhIHRpbnkgYW1vdW50IGRvbid0IGdldCB3cmFwcGVkLiBUaGlzIHByZXZlbnRzIHBvaW50cyB0aGF0XG4vLyBoYXZlIGRyaWZ0ZWQgZnJvbSB0aGVpciBvcmlnaW5hbCBsb2NhdGlvbiBhbG9uZyB0aGUgMTgwdGggbWVyaWRpYW4gKGR1ZSB0b1xuLy8gZmxvYXRpbmcgcG9pbnQgZXJyb3IpIGZyb20gY2hhbmdpbmcgdGhlaXIgc2lnbi5cbmV4cG9ydCB2YXIgU1BJID0gMy4xNDE1OTI2NTM1OTtcbiIsInZhciBleHBvcnRzID0ge307XG5leHBvcnQge2V4cG9ydHMgYXMgZGVmYXVsdH07XG5cbmV4cG9ydHMuZ3JlZW53aWNoID0gMC4wOyAvL1wiMGRFXCIsXG5leHBvcnRzLmxpc2JvbiA9IC05LjEzMTkwNjExMTExMTsgLy9cIjlkMDcnNTQuODYyXFxcIldcIixcbmV4cG9ydHMucGFyaXMgPSAyLjMzNzIyOTE2NjY2NzsgLy9cIjJkMjAnMTQuMDI1XFxcIkVcIixcbmV4cG9ydHMuYm9nb3RhID0gLTc0LjA4MDkxNjY2NjY2NzsgLy9cIjc0ZDA0JzUxLjNcXFwiV1wiLFxuZXhwb3J0cy5tYWRyaWQgPSAtMy42ODc5Mzg4ODg4ODk7IC8vXCIzZDQxJzE2LjU4XFxcIldcIixcbmV4cG9ydHMucm9tZSA9IDEyLjQ1MjMzMzMzMzMzMzsgLy9cIjEyZDI3JzguNFxcXCJFXCIsXG5leHBvcnRzLmJlcm4gPSA3LjQzOTU4MzMzMzMzMzsgLy9cIjdkMjYnMjIuNVxcXCJFXCIsXG5leHBvcnRzLmpha2FydGEgPSAxMDYuODA3NzE5NDQ0NDQ0OyAvL1wiMTA2ZDQ4JzI3Ljc5XFxcIkVcIixcbmV4cG9ydHMuZmVycm8gPSAtMTcuNjY2NjY2NjY2NjY3OyAvL1wiMTdkNDAnV1wiLFxuZXhwb3J0cy5icnVzc2VscyA9IDQuMzY3OTc1OyAvL1wiNGQyMic0LjcxXFxcIkVcIixcbmV4cG9ydHMuc3RvY2tob2xtID0gMTguMDU4Mjc3Nzc3Nzc4OyAvL1wiMThkMycyOS44XFxcIkVcIixcbmV4cG9ydHMuYXRoZW5zID0gMjMuNzE2MzM3NTsgLy9cIjIzZDQyJzU4LjgxNVxcXCJFXCIsXG5leHBvcnRzLm9zbG8gPSAxMC43MjI5MTY2NjY2Njc7IC8vXCIxMGQ0MycyMi41XFxcIkVcIlxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBmdDoge3RvX21ldGVyOiAwLjMwNDh9LFxuICAndXMtZnQnOiB7dG9fbWV0ZXI6IDEyMDAgLyAzOTM3fVxufTtcbiIsInZhciBpZ25vcmVkQ2hhciA9IC9bXFxzX1xcLVxcL1xcKFxcKV0vZztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hdGNoKG9iaiwga2V5KSB7XG4gIGlmIChvYmpba2V5XSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIHZhciBsa2V5ID0ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZShpZ25vcmVkQ2hhciwgJycpO1xuICB2YXIgaSA9IC0xO1xuICB2YXIgdGVzdGtleSwgcHJvY2Vzc2VkS2V5O1xuICB3aGlsZSAoKytpIDwga2V5cy5sZW5ndGgpIHtcbiAgICB0ZXN0a2V5ID0ga2V5c1tpXTtcbiAgICBwcm9jZXNzZWRLZXkgPSB0ZXN0a2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZShpZ25vcmVkQ2hhciwgJycpO1xuICAgIGlmIChwcm9jZXNzZWRLZXkgPT09IGxrZXkpIHtcbiAgICAgIHJldHVybiBvYmpbdGVzdGtleV07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge0QyUn0gZnJvbSAnLi9jb25zdGFudHMvdmFsdWVzJztcbmltcG9ydCBQcmltZU1lcmlkaWFuIGZyb20gJy4vY29uc3RhbnRzL1ByaW1lTWVyaWRpYW4nO1xuaW1wb3J0IHVuaXRzIGZyb20gJy4vY29uc3RhbnRzL3VuaXRzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL21hdGNoJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVmRGF0YSkge1xuICB2YXIgc2VsZiA9IHt9O1xuICB2YXIgcGFyYW1PYmogPSBkZWZEYXRhLnNwbGl0KCcrJykubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gdi50cmltKCk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0pLnJlZHVjZShmdW5jdGlvbihwLCBhKSB7XG4gICAgdmFyIHNwbGl0ID0gYS5zcGxpdCgnPScpO1xuICAgIHNwbGl0LnB1c2godHJ1ZSk7XG4gICAgcFtzcGxpdFswXS50b0xvd2VyQ2FzZSgpXSA9IHNwbGl0WzFdO1xuICAgIHJldHVybiBwO1xuICB9LCB7fSk7XG4gIHZhciBwYXJhbU5hbWUsIHBhcmFtVmFsLCBwYXJhbU91dG5hbWU7XG4gIHZhciBwYXJhbXMgPSB7XG4gICAgcHJvajogJ3Byb2pOYW1lJyxcbiAgICBkYXR1bTogJ2RhdHVtQ29kZScsXG4gICAgcmY6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYucmYgPSBwYXJzZUZsb2F0KHYpO1xuICAgIH0sXG4gICAgbGF0XzA6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYubGF0MCA9IHYgKiBEMlI7XG4gICAgfSxcbiAgICBsYXRfMTogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5sYXQxID0gdiAqIEQyUjtcbiAgICB9LFxuICAgIGxhdF8yOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmxhdDIgPSB2ICogRDJSO1xuICAgIH0sXG4gICAgbGF0X3RzOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmxhdF90cyA9IHYgKiBEMlI7XG4gICAgfSxcbiAgICBsb25fMDogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5sb25nMCA9IHYgKiBEMlI7XG4gICAgfSxcbiAgICBsb25fMTogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5sb25nMSA9IHYgKiBEMlI7XG4gICAgfSxcbiAgICBsb25fMjogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5sb25nMiA9IHYgKiBEMlI7XG4gICAgfSxcbiAgICBhbHBoYTogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5hbHBoYSA9IHBhcnNlRmxvYXQodikgKiBEMlI7XG4gICAgfSxcbiAgICBsb25jOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmxvbmdjID0gdiAqIEQyUjtcbiAgICB9LFxuICAgIHhfMDogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi54MCA9IHBhcnNlRmxvYXQodik7XG4gICAgfSxcbiAgICB5XzA6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYueTAgPSBwYXJzZUZsb2F0KHYpO1xuICAgIH0sXG4gICAga18wOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmswID0gcGFyc2VGbG9hdCh2KTtcbiAgICB9LFxuICAgIGs6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYuazAgPSBwYXJzZUZsb2F0KHYpO1xuICAgIH0sXG4gICAgYTogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5hID0gcGFyc2VGbG9hdCh2KTtcbiAgICB9LFxuICAgIGI6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYuYiA9IHBhcnNlRmxvYXQodik7XG4gICAgfSxcbiAgICByX2E6IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5SX0EgPSB0cnVlO1xuICAgIH0sXG4gICAgem9uZTogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi56b25lID0gcGFyc2VJbnQodiwgMTApO1xuICAgIH0sXG4gICAgc291dGg6IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi51dG1Tb3V0aCA9IHRydWU7XG4gICAgfSxcbiAgICB0b3dnczg0OiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmRhdHVtX3BhcmFtcyA9IHYuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbihhKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGEpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b19tZXRlcjogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi50b19tZXRlciA9IHBhcnNlRmxvYXQodik7XG4gICAgfSxcbiAgICB1bml0czogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi51bml0cyA9IHY7XG4gICAgICB2YXIgdW5pdCA9IG1hdGNoKHVuaXRzLCB2KTtcbiAgICAgIGlmICh1bml0KSB7XG4gICAgICAgIHNlbGYudG9fbWV0ZXIgPSB1bml0LnRvX21ldGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnJvbV9ncmVlbndpY2g6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYuZnJvbV9ncmVlbndpY2ggPSB2ICogRDJSO1xuICAgIH0sXG4gICAgcG06IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHZhciBwbSA9IG1hdGNoKFByaW1lTWVyaWRpYW4sIHYpO1xuICAgICAgc2VsZi5mcm9tX2dyZWVud2ljaCA9IChwbSA/IHBtIDogcGFyc2VGbG9hdCh2KSkgKiBEMlI7XG4gICAgfSxcbiAgICBuYWRncmlkczogZnVuY3Rpb24odikge1xuICAgICAgaWYgKHYgPT09ICdAbnVsbCcpIHtcbiAgICAgICAgc2VsZi5kYXR1bUNvZGUgPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VsZi5uYWRncmlkcyA9IHY7XG4gICAgICB9XG4gICAgfSxcbiAgICBheGlzOiBmdW5jdGlvbih2KSB7XG4gICAgICB2YXIgbGVnYWxBeGlzID0gXCJld25zdWRcIjtcbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gMyAmJiBsZWdhbEF4aXMuaW5kZXhPZih2LnN1YnN0cigwLCAxKSkgIT09IC0xICYmIGxlZ2FsQXhpcy5pbmRleE9mKHYuc3Vic3RyKDEsIDEpKSAhPT0gLTEgJiYgbGVnYWxBeGlzLmluZGV4T2Yodi5zdWJzdHIoMiwgMSkpICE9PSAtMSkge1xuICAgICAgICBzZWxmLmF4aXMgPSB2O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZm9yIChwYXJhbU5hbWUgaW4gcGFyYW1PYmopIHtcbiAgICBwYXJhbVZhbCA9IHBhcmFtT2JqW3BhcmFtTmFtZV07XG4gICAgaWYgKHBhcmFtTmFtZSBpbiBwYXJhbXMpIHtcbiAgICAgIHBhcmFtT3V0bmFtZSA9IHBhcmFtc1twYXJhbU5hbWVdO1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbU91dG5hbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGFyYW1PdXRuYW1lKHBhcmFtVmFsKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWxmW3BhcmFtT3V0bmFtZV0gPSBwYXJhbVZhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzZWxmW3BhcmFtTmFtZV0gPSBwYXJhbVZhbDtcbiAgICB9XG4gIH1cbiAgaWYodHlwZW9mIHNlbGYuZGF0dW1Db2RlID09PSAnc3RyaW5nJyAmJiBzZWxmLmRhdHVtQ29kZSAhPT0gXCJXR1M4NFwiKXtcbiAgICBzZWxmLmRhdHVtQ29kZSA9IHNlbGYuZGF0dW1Db2RlLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBwYXJzZVN0cmluZztcblxudmFyIE5FVVRSQUwgPSAxO1xudmFyIEtFWVdPUkQgPSAyO1xudmFyIE5VTUJFUiA9IDM7XG52YXIgUVVPVEVEID0gNDtcbnZhciBBRlRFUlFVT1RFID0gNTtcbnZhciBFTkRFRCA9IC0xO1xudmFyIHdoaXRlc3BhY2UgPSAvXFxzLztcbnZhciBsYXRpbiA9IC9bQS1aYS16XS87XG52YXIga2V5d29yZCA9IC9bQS1aYS16ODRdLztcbnZhciBlbmRUaGluZ3MgPSAvWyxcXF1dLztcbnZhciBkaWdldHMgPSAvW1xcZFxcLkVcXC1cXCtdLztcbi8vIGNvbnN0IGlnbm9yZWRDaGFyID0gL1tcXHNfXFwtXFwvXFwoXFwpXS9nO1xuZnVuY3Rpb24gUGFyc2VyKHRleHQpIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGEgc3RyaW5nJyk7XG4gIH1cbiAgdGhpcy50ZXh0ID0gdGV4dC50cmltKCk7XG4gIHRoaXMubGV2ZWwgPSAwO1xuICB0aGlzLnBsYWNlID0gMDtcbiAgdGhpcy5yb290ID0gbnVsbDtcbiAgdGhpcy5zdGFjayA9IFtdO1xuICB0aGlzLmN1cnJlbnRPYmplY3QgPSBudWxsO1xuICB0aGlzLnN0YXRlID0gTkVVVFJBTDtcbn1cblBhcnNlci5wcm90b3R5cGUucmVhZENoYXJpY3RlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2hhciA9IHRoaXMudGV4dFt0aGlzLnBsYWNlKytdO1xuICBpZiAodGhpcy5zdGF0ZSAhPT0gUVVPVEVEKSB7XG4gICAgd2hpbGUgKHdoaXRlc3BhY2UudGVzdChjaGFyKSkge1xuICAgICAgaWYgKHRoaXMucGxhY2UgPj0gdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjaGFyID0gdGhpcy50ZXh0W3RoaXMucGxhY2UrK107XG4gICAgfVxuICB9XG4gIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgIGNhc2UgTkVVVFJBTDpcbiAgICAgIHJldHVybiB0aGlzLm5ldXRyYWwoY2hhcik7XG4gICAgY2FzZSBLRVlXT1JEOlxuICAgICAgcmV0dXJuIHRoaXMua2V5d29yZChjaGFyKVxuICAgIGNhc2UgUVVPVEVEOlxuICAgICAgcmV0dXJuIHRoaXMucXVvdGVkKGNoYXIpO1xuICAgIGNhc2UgQUZURVJRVU9URTpcbiAgICAgIHJldHVybiB0aGlzLmFmdGVycXVvdGUoY2hhcik7XG4gICAgY2FzZSBOVU1CRVI6XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXIoY2hhcik7XG4gICAgY2FzZSBFTkRFRDpcbiAgICAgIHJldHVybjtcbiAgfVxufTtcblBhcnNlci5wcm90b3R5cGUuYWZ0ZXJxdW90ZSA9IGZ1bmN0aW9uKGNoYXIpIHtcbiAgaWYgKGNoYXIgPT09ICdcIicpIHtcbiAgICB0aGlzLndvcmQgKz0gJ1wiJztcbiAgICB0aGlzLnN0YXRlID0gUVVPVEVEO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZW5kVGhpbmdzLnRlc3QoY2hhcikpIHtcbiAgICB0aGlzLndvcmQgPSB0aGlzLndvcmQudHJpbSgpO1xuICAgIHRoaXMuYWZ0ZXJJdGVtKGNoYXIpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ2hhdm5cXCd0IGhhbmRsZWQgXCInICtjaGFyICsgJ1wiIGluIGFmdGVycXVvdGUgeWV0LCBpbmRleCAnICsgdGhpcy5wbGFjZSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5hZnRlckl0ZW0gPSBmdW5jdGlvbihjaGFyKSB7XG4gIGlmIChjaGFyID09PSAnLCcpIHtcbiAgICBpZiAodGhpcy53b3JkICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmN1cnJlbnRPYmplY3QucHVzaCh0aGlzLndvcmQpO1xuICAgIH1cbiAgICB0aGlzLndvcmQgPSBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSBORVVUUkFMO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoY2hhciA9PT0gJ10nKSB7XG4gICAgdGhpcy5sZXZlbC0tO1xuICAgIGlmICh0aGlzLndvcmQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuY3VycmVudE9iamVjdC5wdXNoKHRoaXMud29yZCk7XG4gICAgICB0aGlzLndvcmQgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlID0gTkVVVFJBTDtcbiAgICB0aGlzLmN1cnJlbnRPYmplY3QgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIGlmICghdGhpcy5jdXJyZW50T2JqZWN0KSB7XG4gICAgICB0aGlzLnN0YXRlID0gRU5ERUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG59O1xuUGFyc2VyLnByb3RvdHlwZS5udW1iZXIgPSBmdW5jdGlvbihjaGFyKSB7XG4gIGlmIChkaWdldHMudGVzdChjaGFyKSkge1xuICAgIHRoaXMud29yZCArPSBjaGFyO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZW5kVGhpbmdzLnRlc3QoY2hhcikpIHtcbiAgICB0aGlzLndvcmQgPSBwYXJzZUZsb2F0KHRoaXMud29yZCk7XG4gICAgdGhpcy5hZnRlckl0ZW0oY2hhcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignaGF2blxcJ3QgaGFuZGxlZCBcIicgK2NoYXIgKyAnXCIgaW4gbnVtYmVyIHlldCwgaW5kZXggJyArIHRoaXMucGxhY2UpO1xufTtcblBhcnNlci5wcm90b3R5cGUucXVvdGVkID0gZnVuY3Rpb24oY2hhcikge1xuICBpZiAoY2hhciA9PT0gJ1wiJykge1xuICAgIHRoaXMuc3RhdGUgPSBBRlRFUlFVT1RFO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLndvcmQgKz0gY2hhcjtcbiAgcmV0dXJuO1xufTtcblBhcnNlci5wcm90b3R5cGUua2V5d29yZCA9IGZ1bmN0aW9uKGNoYXIpIHtcbiAgaWYgKGtleXdvcmQudGVzdChjaGFyKSkge1xuICAgIHRoaXMud29yZCArPSBjaGFyO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoY2hhciA9PT0gJ1snKSB7XG4gICAgdmFyIG5ld09iamVjdHMgPSBbXTtcbiAgICBuZXdPYmplY3RzLnB1c2godGhpcy53b3JkKTtcbiAgICB0aGlzLmxldmVsKys7XG4gICAgaWYgKHRoaXMucm9vdCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5yb290ID0gbmV3T2JqZWN0cztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50T2JqZWN0LnB1c2gobmV3T2JqZWN0cyk7XG4gICAgfVxuICAgIHRoaXMuc3RhY2sucHVzaCh0aGlzLmN1cnJlbnRPYmplY3QpO1xuICAgIHRoaXMuY3VycmVudE9iamVjdCA9IG5ld09iamVjdHM7XG4gICAgdGhpcy5zdGF0ZSA9IE5FVVRSQUw7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbmRUaGluZ3MudGVzdChjaGFyKSkge1xuICAgIHRoaXMuYWZ0ZXJJdGVtKGNoYXIpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ2hhdm5cXCd0IGhhbmRsZWQgXCInICtjaGFyICsgJ1wiIGluIGtleXdvcmQgeWV0LCBpbmRleCAnICsgdGhpcy5wbGFjZSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5uZXV0cmFsID0gZnVuY3Rpb24oY2hhcikge1xuICBpZiAobGF0aW4udGVzdChjaGFyKSkge1xuICAgIHRoaXMud29yZCA9IGNoYXI7XG4gICAgdGhpcy5zdGF0ZSA9IEtFWVdPUkQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjaGFyID09PSAnXCInKSB7XG4gICAgdGhpcy53b3JkID0gJyc7XG4gICAgdGhpcy5zdGF0ZSA9IFFVT1RFRDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGRpZ2V0cy50ZXN0KGNoYXIpKSB7XG4gICAgdGhpcy53b3JkID0gY2hhcjtcbiAgICB0aGlzLnN0YXRlID0gTlVNQkVSO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZW5kVGhpbmdzLnRlc3QoY2hhcikpIHtcbiAgICB0aGlzLmFmdGVySXRlbShjaGFyKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdoYXZuXFwndCBoYW5kbGVkIFwiJyArY2hhciArICdcIiBpbiBuZXV0cmFsIHlldCwgaW5kZXggJyArIHRoaXMucGxhY2UpO1xufTtcblBhcnNlci5wcm90b3R5cGUub3V0cHV0ID0gZnVuY3Rpb24oKSB7XG4gIHdoaWxlICh0aGlzLnBsYWNlIDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgIHRoaXMucmVhZENoYXJpY3RlcigpO1xuICB9XG4gIGlmICh0aGlzLnN0YXRlID09PSBFTkRFRCkge1xuICAgIHJldHVybiB0aGlzLnJvb3Q7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gcGFyc2Ugc3RyaW5nIFwiJyArdGhpcy50ZXh0ICsgJ1wiLiBTdGF0ZSBpcyAnICsgdGhpcy5zdGF0ZSk7XG59O1xuXG5mdW5jdGlvbiBwYXJzZVN0cmluZyh0eHQpIHtcbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIodHh0KTtcbiAgcmV0dXJuIHBhcnNlci5vdXRwdXQoKTtcbn1cbiIsIlxuXG5mdW5jdGlvbiBtYXBpdChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgIHZhbHVlLnVuc2hpZnQoa2V5KTtcbiAgICBrZXkgPSBudWxsO1xuICB9XG4gIHZhciB0aGluZyA9IGtleSA/IHt9IDogb2JqO1xuXG4gIHZhciBvdXQgPSB2YWx1ZS5yZWR1Y2UoZnVuY3Rpb24obmV3T2JqLCBpdGVtKSB7XG4gICAgc0V4cHIoaXRlbSwgbmV3T2JqKTtcbiAgICByZXR1cm4gbmV3T2JqXG4gIH0sIHRoaW5nKTtcbiAgaWYgKGtleSkge1xuICAgIG9ialtrZXldID0gb3V0O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzRXhwcih2LCBvYmopIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgb2JqW3ZdID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGtleSA9IHYuc2hpZnQoKTtcbiAgaWYgKGtleSA9PT0gJ1BBUkFNRVRFUicpIHtcbiAgICBrZXkgPSB2LnNoaWZ0KCk7XG4gIH1cbiAgaWYgKHYubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodlswXSkpIHtcbiAgICAgIG9ialtrZXldID0ge307XG4gICAgICBzRXhwcih2WzBdLCBvYmpba2V5XSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9ialtrZXldID0gdlswXTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF2Lmxlbmd0aCkge1xuICAgIG9ialtrZXldID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGtleSA9PT0gJ1RPV0dTODQnKSB7XG4gICAgb2JqW2tleV0gPSB2O1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoa2V5ID09PSAnQVhJUycpIHtcbiAgICBpZiAoIShrZXkgaW4gb2JqKSkge1xuICAgICAgb2JqW2tleV0gPSBbXTtcbiAgICB9XG4gICAgb2JqW2tleV0ucHVzaCh2KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KGtleSkpIHtcbiAgICBvYmpba2V5XSA9IHt9O1xuICB9XG5cbiAgdmFyIGk7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnVU5JVCc6XG4gICAgY2FzZSAnUFJJTUVNJzpcbiAgICBjYXNlICdWRVJUX0RBVFVNJzpcbiAgICAgIG9ialtrZXldID0ge1xuICAgICAgICBuYW1lOiB2WzBdLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIGNvbnZlcnQ6IHZbMV1cbiAgICAgIH07XG4gICAgICBpZiAodi5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgc0V4cHIodlsyXSwgb2JqW2tleV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ1NQSEVST0lEJzpcbiAgICBjYXNlICdFTExJUFNPSUQnOlxuICAgICAgb2JqW2tleV0gPSB7XG4gICAgICAgIG5hbWU6IHZbMF0sXG4gICAgICAgIGE6IHZbMV0sXG4gICAgICAgIHJmOiB2WzJdXG4gICAgICB9O1xuICAgICAgaWYgKHYubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIHNFeHByKHZbM10sIG9ialtrZXldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBjYXNlICdQUk9KRUNURURDUlMnOlxuICAgIGNhc2UgJ1BST0pDUlMnOlxuICAgIGNhc2UgJ0dFT0dDUyc6XG4gICAgY2FzZSAnR0VPQ0NTJzpcbiAgICBjYXNlICdQUk9KQ1MnOlxuICAgIGNhc2UgJ0xPQ0FMX0NTJzpcbiAgICBjYXNlICdHRU9EQ1JTJzpcbiAgICBjYXNlICdHRU9ERVRJQ0NSUyc6XG4gICAgY2FzZSAnR0VPREVUSUNEQVRVTSc6XG4gICAgY2FzZSAnRURBVFVNJzpcbiAgICBjYXNlICdFTkdJTkVFUklOR0RBVFVNJzpcbiAgICBjYXNlICdWRVJUX0NTJzpcbiAgICBjYXNlICdWRVJUQ1JTJzpcbiAgICBjYXNlICdWRVJUSUNBTENSUyc6XG4gICAgY2FzZSAnQ09NUERfQ1MnOlxuICAgIGNhc2UgJ0NPTVBPVU5EQ1JTJzpcbiAgICBjYXNlICdFTkdJTkVFUklOR0NSUyc6XG4gICAgY2FzZSAnRU5HQ1JTJzpcbiAgICBjYXNlICdGSVRURURfQ1MnOlxuICAgIGNhc2UgJ0xPQ0FMX0RBVFVNJzpcbiAgICBjYXNlICdEQVRVTSc6XG4gICAgICB2WzBdID0gWyduYW1lJywgdlswXV07XG4gICAgICBtYXBpdChvYmosIGtleSwgdik7XG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdDpcbiAgICAgIGkgPSAtMTtcbiAgICAgIHdoaWxlICgrK2kgPCB2Lmxlbmd0aCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodltpXSkpIHtcbiAgICAgICAgICByZXR1cm4gc0V4cHIodiwgb2JqW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFwaXQob2JqLCBrZXksIHYpO1xuICB9XG59XG4iLCJ2YXIgRDJSID0gMC4wMTc0NTMyOTI1MTk5NDMyOTU3NztcbmltcG9ydCBwYXJzZXIgZnJvbSAnLi9wYXJzZXInO1xuaW1wb3J0IHtzRXhwcn0gZnJvbSAnLi9wcm9jZXNzJztcblxuXG5cbmZ1bmN0aW9uIHJlbmFtZShvYmosIHBhcmFtcykge1xuICB2YXIgb3V0TmFtZSA9IHBhcmFtc1swXTtcbiAgdmFyIGluTmFtZSA9IHBhcmFtc1sxXTtcbiAgaWYgKCEob3V0TmFtZSBpbiBvYmopICYmIChpbk5hbWUgaW4gb2JqKSkge1xuICAgIG9ialtvdXROYW1lXSA9IG9ialtpbk5hbWVdO1xuICAgIGlmIChwYXJhbXMubGVuZ3RoID09PSAzKSB7XG4gICAgICBvYmpbb3V0TmFtZV0gPSBwYXJhbXNbMl0ob2JqW291dE5hbWVdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZDJyKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dCAqIEQyUjtcbn1cblxuZnVuY3Rpb24gY2xlYW5XS1Qod2t0KSB7XG4gIGlmICh3a3QudHlwZSA9PT0gJ0dFT0dDUycpIHtcbiAgICB3a3QucHJvak5hbWUgPSAnbG9uZ2xhdCc7XG4gIH0gZWxzZSBpZiAod2t0LnR5cGUgPT09ICdMT0NBTF9DUycpIHtcbiAgICB3a3QucHJvak5hbWUgPSAnaWRlbnRpdHknO1xuICAgIHdrdC5sb2NhbCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB3a3QuUFJPSkVDVElPTiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHdrdC5wcm9qTmFtZSA9IE9iamVjdC5rZXlzKHdrdC5QUk9KRUNUSU9OKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2t0LnByb2pOYW1lID0gd2t0LlBST0pFQ1RJT047XG4gICAgfVxuICB9XG4gIGlmICh3a3QuQVhJUykge1xuICAgIHZhciBheGlzT3JkZXIgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB3a3QuQVhJUy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICB2YXIgYXhpcyA9IHdrdC5BWElTW2ldO1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBheGlzWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAoZGVzY3JpcHRvci5pbmRleE9mKCdub3J0aCcpICE9PSAtMSkge1xuICAgICAgICBheGlzT3JkZXIgKz0gJ24nO1xuICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLmluZGV4T2YoJ3NvdXRoJykgIT09IC0xKSB7XG4gICAgICAgIGF4aXNPcmRlciArPSAncyc7XG4gICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IuaW5kZXhPZignZWFzdCcpICE9PSAtMSkge1xuICAgICAgICBheGlzT3JkZXIgKz0gJ2UnO1xuICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLmluZGV4T2YoJ3dlc3QnKSAhPT0gLTEpIHtcbiAgICAgICAgYXhpc09yZGVyICs9ICd3JztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF4aXNPcmRlci5sZW5ndGggPT09IDIpIHtcbiAgICAgIGF4aXNPcmRlciArPSAndSc7XG4gICAgfVxuICAgIGlmIChheGlzT3JkZXIubGVuZ3RoID09PSAzKSB7XG4gICAgICB3a3QuYXhpcyA9IGF4aXNPcmRlcjtcbiAgICB9XG4gIH1cbiAgaWYgKHdrdC5VTklUKSB7XG4gICAgd2t0LnVuaXRzID0gd2t0LlVOSVQubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh3a3QudW5pdHMgPT09ICdtZXRyZScpIHtcbiAgICAgIHdrdC51bml0cyA9ICdtZXRlcic7XG4gICAgfVxuICAgIGlmICh3a3QuVU5JVC5jb252ZXJ0KSB7XG4gICAgICBpZiAod2t0LnR5cGUgPT09ICdHRU9HQ1MnKSB7XG4gICAgICAgIGlmICh3a3QuREFUVU0gJiYgd2t0LkRBVFVNLlNQSEVST0lEKSB7XG4gICAgICAgICAgd2t0LnRvX21ldGVyID0gd2t0LlVOSVQuY29udmVydCp3a3QuREFUVU0uU1BIRVJPSUQuYTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2t0LnRvX21ldGVyID0gd2t0LlVOSVQuY29udmVydDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIGdlb2djcyA9IHdrdC5HRU9HQ1M7XG4gIGlmICh3a3QudHlwZSA9PT0gJ0dFT0dDUycpIHtcbiAgICBnZW9nY3MgPSB3a3Q7XG4gIH1cbiAgaWYgKGdlb2djcykge1xuICAgIC8vaWYod2t0LkdFT0dDUy5QUklNRU0mJndrdC5HRU9HQ1MuUFJJTUVNLmNvbnZlcnQpe1xuICAgIC8vICB3a3QuZnJvbV9ncmVlbndpY2g9d2t0LkdFT0dDUy5QUklNRU0uY29udmVydCpEMlI7XG4gICAgLy99XG4gICAgaWYgKGdlb2djcy5EQVRVTSkge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9IGdlb2djcy5EQVRVTS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdrdC5kYXR1bUNvZGUgPSBnZW9nY3MubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBpZiAod2t0LmRhdHVtQ29kZS5zbGljZSgwLCAyKSA9PT0gJ2RfJykge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9IHdrdC5kYXR1bUNvZGUuc2xpY2UoMik7XG4gICAgfVxuICAgIGlmICh3a3QuZGF0dW1Db2RlID09PSAnbmV3X3plYWxhbmRfZ2VvZGV0aWNfZGF0dW1fMTk0OScgfHwgd2t0LmRhdHVtQ29kZSA9PT0gJ25ld196ZWFsYW5kXzE5NDknKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gJ256Z2Q0OSc7XG4gICAgfVxuICAgIGlmICh3a3QuZGF0dW1Db2RlID09PSAnd2dzXzE5ODQnIHx8IHdrdC5kYXR1bUNvZGUgPT09ICd3b3JsZF9nZW9kZXRpY19zeXN0ZW1fMTk4NCcpIHtcbiAgICAgIGlmICh3a3QuUFJPSkVDVElPTiA9PT0gJ01lcmNhdG9yX0F1eGlsaWFyeV9TcGhlcmUnKSB7XG4gICAgICAgIHdrdC5zcGhlcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgd2t0LmRhdHVtQ29kZSA9ICd3Z3M4NCc7XG4gICAgfVxuICAgIGlmICh3a3QuZGF0dW1Db2RlLnNsaWNlKC02KSA9PT0gJ19mZXJybycpIHtcbiAgICAgIHdrdC5kYXR1bUNvZGUgPSB3a3QuZGF0dW1Db2RlLnNsaWNlKDAsIC0gNik7XG4gICAgfVxuICAgIGlmICh3a3QuZGF0dW1Db2RlLnNsaWNlKC04KSA9PT0gJ19qYWthcnRhJykge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9IHdrdC5kYXR1bUNvZGUuc2xpY2UoMCwgLSA4KTtcbiAgICB9XG4gICAgaWYgKH53a3QuZGF0dW1Db2RlLmluZGV4T2YoJ2JlbGdlJykpIHtcbiAgICAgIHdrdC5kYXR1bUNvZGUgPSAncm5iNzInO1xuICAgIH1cbiAgICBpZiAoZ2VvZ2NzLkRBVFVNICYmIGdlb2djcy5EQVRVTS5TUEhFUk9JRCkge1xuICAgICAgd2t0LmVsbHBzID0gZ2VvZ2NzLkRBVFVNLlNQSEVST0lELm5hbWUucmVwbGFjZSgnXzE5JywgJycpLnJlcGxhY2UoL1tDY11sYXJrZVxcXzE4LywgJ2NscmsnKTtcbiAgICAgIGlmICh3a3QuZWxscHMudG9Mb3dlckNhc2UoKS5zbGljZSgwLCAxMykgPT09ICdpbnRlcm5hdGlvbmFsJykge1xuICAgICAgICB3a3QuZWxscHMgPSAnaW50bCc7XG4gICAgICB9XG5cbiAgICAgIHdrdC5hID0gZ2VvZ2NzLkRBVFVNLlNQSEVST0lELmE7XG4gICAgICB3a3QucmYgPSBwYXJzZUZsb2F0KGdlb2djcy5EQVRVTS5TUEhFUk9JRC5yZiwgMTApO1xuICAgIH1cblxuICAgIGlmIChnZW9nY3MuREFUVU0gJiYgZ2VvZ2NzLkRBVFVNLlRPV0dTODQpIHtcbiAgICAgIHdrdC5kYXR1bV9wYXJhbXMgPSBnZW9nY3MuREFUVU0uVE9XR1M4NDtcbiAgICB9XG4gICAgaWYgKH53a3QuZGF0dW1Db2RlLmluZGV4T2YoJ29zZ2JfMTkzNicpKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gJ29zZ2IzNic7XG4gICAgfVxuICAgIGlmICh+d2t0LmRhdHVtQ29kZS5pbmRleE9mKCdvc25pXzE5NTInKSkge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9ICdvc25pNTInO1xuICAgIH1cbiAgICBpZiAofndrdC5kYXR1bUNvZGUuaW5kZXhPZigndG02NScpXG4gICAgICB8fCB+d2t0LmRhdHVtQ29kZS5pbmRleE9mKCdnZW9kZXRpY19kYXR1bV9vZl8xOTY1JykpIHtcbiAgICAgIHdrdC5kYXR1bUNvZGUgPSAnaXJlNjUnO1xuICAgIH1cbiAgICBpZiAod2t0LmRhdHVtQ29kZSA9PT0gJ2NoMTkwMysnKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gJ2NoMTkwMyc7XG4gICAgfVxuICAgIGlmICh+d2t0LmRhdHVtQ29kZS5pbmRleE9mKCdpc3JhZWwnKSkge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9ICdpc3I5Myc7XG4gICAgfVxuICB9XG4gIGlmICh3a3QuYiAmJiAhaXNGaW5pdGUod2t0LmIpKSB7XG4gICAgd2t0LmIgPSB3a3QuYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvTWV0ZXIoaW5wdXQpIHtcbiAgICB2YXIgcmF0aW8gPSB3a3QudG9fbWV0ZXIgfHwgMTtcbiAgICByZXR1cm4gaW5wdXQgKiByYXRpbztcbiAgfVxuICB2YXIgcmVuYW1lciA9IGZ1bmN0aW9uKGEpIHtcbiAgICByZXR1cm4gcmVuYW1lKHdrdCwgYSk7XG4gIH07XG4gIHZhciBsaXN0ID0gW1xuICAgIFsnc3RhbmRhcmRfcGFyYWxsZWxfMScsICdTdGFuZGFyZF9QYXJhbGxlbF8xJ10sXG4gICAgWydzdGFuZGFyZF9wYXJhbGxlbF8yJywgJ1N0YW5kYXJkX1BhcmFsbGVsXzInXSxcbiAgICBbJ2ZhbHNlX2Vhc3RpbmcnLCAnRmFsc2VfRWFzdGluZyddLFxuICAgIFsnZmFsc2Vfbm9ydGhpbmcnLCAnRmFsc2VfTm9ydGhpbmcnXSxcbiAgICBbJ2NlbnRyYWxfbWVyaWRpYW4nLCAnQ2VudHJhbF9NZXJpZGlhbiddLFxuICAgIFsnbGF0aXR1ZGVfb2Zfb3JpZ2luJywgJ0xhdGl0dWRlX09mX09yaWdpbiddLFxuICAgIFsnbGF0aXR1ZGVfb2Zfb3JpZ2luJywgJ0NlbnRyYWxfUGFyYWxsZWwnXSxcbiAgICBbJ3NjYWxlX2ZhY3RvcicsICdTY2FsZV9GYWN0b3InXSxcbiAgICBbJ2swJywgJ3NjYWxlX2ZhY3RvciddLFxuICAgIFsnbGF0aXR1ZGVfb2ZfY2VudGVyJywgJ0xhdGl0dWRlX09mX0NlbnRlciddLFxuICAgIFsnbGF0aXR1ZGVfb2ZfY2VudGVyJywgJ0xhdGl0dWRlX29mX2NlbnRlciddLFxuICAgIFsnbGF0MCcsICdsYXRpdHVkZV9vZl9jZW50ZXInLCBkMnJdLFxuICAgIFsnbG9uZ2l0dWRlX29mX2NlbnRlcicsICdMb25naXR1ZGVfT2ZfQ2VudGVyJ10sXG4gICAgWydsb25naXR1ZGVfb2ZfY2VudGVyJywgJ0xvbmdpdHVkZV9vZl9jZW50ZXInXSxcbiAgICBbJ2xvbmdjJywgJ2xvbmdpdHVkZV9vZl9jZW50ZXInLCBkMnJdLFxuICAgIFsneDAnLCAnZmFsc2VfZWFzdGluZycsIHRvTWV0ZXJdLFxuICAgIFsneTAnLCAnZmFsc2Vfbm9ydGhpbmcnLCB0b01ldGVyXSxcbiAgICBbJ2xvbmcwJywgJ2NlbnRyYWxfbWVyaWRpYW4nLCBkMnJdLFxuICAgIFsnbGF0MCcsICdsYXRpdHVkZV9vZl9vcmlnaW4nLCBkMnJdLFxuICAgIFsnbGF0MCcsICdzdGFuZGFyZF9wYXJhbGxlbF8xJywgZDJyXSxcbiAgICBbJ2xhdDEnLCAnc3RhbmRhcmRfcGFyYWxsZWxfMScsIGQycl0sXG4gICAgWydsYXQyJywgJ3N0YW5kYXJkX3BhcmFsbGVsXzInLCBkMnJdLFxuICAgIFsnYXppbXV0aCcsICdBemltdXRoJ10sXG4gICAgWydhbHBoYScsICdhemltdXRoJywgZDJyXSxcbiAgICBbJ3Nyc0NvZGUnLCAnbmFtZSddXG4gIF07XG4gIGxpc3QuZm9yRWFjaChyZW5hbWVyKTtcbiAgaWYgKCF3a3QubG9uZzAgJiYgd2t0LmxvbmdjICYmICh3a3QucHJvak5hbWUgPT09ICdBbGJlcnNfQ29uaWNfRXF1YWxfQXJlYScgfHwgd2t0LnByb2pOYW1lID09PSAnTGFtYmVydF9BemltdXRoYWxfRXF1YWxfQXJlYScpKSB7XG4gICAgd2t0LmxvbmcwID0gd2t0LmxvbmdjO1xuICB9XG4gIGlmICghd2t0LmxhdF90cyAmJiB3a3QubGF0MSAmJiAod2t0LnByb2pOYW1lID09PSAnU3RlcmVvZ3JhcGhpY19Tb3V0aF9Qb2xlJyB8fCB3a3QucHJvak5hbWUgPT09ICdQb2xhciBTdGVyZW9ncmFwaGljICh2YXJpYW50IEIpJykpIHtcbiAgICB3a3QubGF0MCA9IGQycih3a3QubGF0MSA+IDAgPyA5MCA6IC05MCk7XG4gICAgd2t0LmxhdF90cyA9IHdrdC5sYXQxO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih3a3QpIHtcbiAgdmFyIGxpc3AgPSBwYXJzZXIod2t0KTtcbiAgdmFyIHR5cGUgPSBsaXNwLnNoaWZ0KCk7XG4gIHZhciBuYW1lID0gbGlzcC5zaGlmdCgpO1xuICBsaXNwLnVuc2hpZnQoWyduYW1lJywgbmFtZV0pO1xuICBsaXNwLnVuc2hpZnQoWyd0eXBlJywgdHlwZV0pO1xuICB2YXIgb2JqID0ge307XG4gIHNFeHByKGxpc3AsIG9iaik7XG4gIGNsZWFuV0tUKG9iaik7XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgZ2xvYmFscyBmcm9tICcuL2dsb2JhbCc7XG5pbXBvcnQgcGFyc2VQcm9qIGZyb20gJy4vcHJvalN0cmluZyc7XG5pbXBvcnQgd2t0IGZyb20gJ3drdC1wYXJzZXInO1xuXG5mdW5jdGlvbiBkZWZzKG5hbWUpIHtcbiAgLypnbG9iYWwgY29uc29sZSovXG4gIHZhciB0aGF0ID0gdGhpcztcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YXIgZGVmID0gYXJndW1lbnRzWzFdO1xuICAgIGlmICh0eXBlb2YgZGVmID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGRlZi5jaGFyQXQoMCkgPT09ICcrJykge1xuICAgICAgICBkZWZzW25hbWVdID0gcGFyc2VQcm9qKGFyZ3VtZW50c1sxXSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZGVmc1tuYW1lXSA9IHdrdChhcmd1bWVudHNbMV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWZzW25hbWVdID0gZGVmO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgIHJldHVybiBuYW1lLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgZGVmcy5hcHBseSh0aGF0LCB2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWZzKHYpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAobmFtZSBpbiBkZWZzKSB7XG4gICAgICAgIHJldHVybiBkZWZzW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgnRVBTRycgaW4gbmFtZSkge1xuICAgICAgZGVmc1snRVBTRzonICsgbmFtZS5FUFNHXSA9IG5hbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKCdFU1JJJyBpbiBuYW1lKSB7XG4gICAgICBkZWZzWydFU1JJOicgKyBuYW1lLkVTUkldID0gbmFtZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoJ0lBVTIwMDAnIGluIG5hbWUpIHtcbiAgICAgIGRlZnNbJ0lBVTIwMDA6JyArIG5hbWUuSUFVMjAwMF0gPSBuYW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuXG59XG5nbG9iYWxzKGRlZnMpO1xuZXhwb3J0IGRlZmF1bHQgZGVmcztcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZnMpIHtcbiAgZGVmcygnRVBTRzo0MzI2JywgXCIrdGl0bGU9V0dTIDg0IChsb25nL2xhdCkgK3Byb2o9bG9uZ2xhdCArZWxscHM9V0dTODQgK2RhdHVtPVdHUzg0ICt1bml0cz1kZWdyZWVzXCIpO1xuICBkZWZzKCdFUFNHOjQyNjknLCBcIit0aXRsZT1OQUQ4MyAobG9uZy9sYXQpICtwcm9qPWxvbmdsYXQgK2E9NjM3ODEzNy4wICtiPTYzNTY3NTIuMzE0MTQwMzYgK2VsbHBzPUdSUzgwICtkYXR1bT1OQUQ4MyArdW5pdHM9ZGVncmVlc1wiKTtcbiAgZGVmcygnRVBTRzozODU3JywgXCIrdGl0bGU9V0dTIDg0IC8gUHNldWRvLU1lcmNhdG9yICtwcm9qPW1lcmMgK2E9NjM3ODEzNyArYj02Mzc4MTM3ICtsYXRfdHM9MC4wICtsb25fMD0wLjAgK3hfMD0wLjAgK3lfMD0wICtrPTEuMCArdW5pdHM9bSArbmFkZ3JpZHM9QG51bGwgK25vX2RlZnNcIik7XG5cbiAgZGVmcy5XR1M4NCA9IGRlZnNbJ0VQU0c6NDMyNiddO1xuICBkZWZzWydFUFNHOjM3ODUnXSA9IGRlZnNbJ0VQU0c6Mzg1NyddOyAvLyBtYWludGFpbiBiYWNrd2FyZCBjb21wYXQsIG9mZmljaWFsIGNvZGUgaXMgMzg1N1xuICBkZWZzLkdPT0dMRSA9IGRlZnNbJ0VQU0c6Mzg1NyddO1xuICBkZWZzWydFUFNHOjkwMDkxMyddID0gZGVmc1snRVBTRzozODU3J107XG4gIGRlZnNbJ0VQU0c6MTAyMTEzJ10gPSBkZWZzWydFUFNHOjM4NTcnXTtcbn1cbiIsImltcG9ydCBkZWZzIGZyb20gJy4vZGVmcyc7XG5pbXBvcnQgd2t0IGZyb20gJ3drdC1wYXJzZXInO1xuaW1wb3J0IHByb2pTdHIgZnJvbSAnLi9wcm9qU3RyaW5nJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL21hdGNoJztcbmZ1bmN0aW9uIHRlc3RPYmooY29kZSl7XG4gIHJldHVybiB0eXBlb2YgY29kZSA9PT0gJ3N0cmluZyc7XG59XG5mdW5jdGlvbiB0ZXN0RGVmKGNvZGUpe1xuICByZXR1cm4gY29kZSBpbiBkZWZzO1xufVxuIHZhciBjb2RlV29yZHMgPSBbJ1BST0pFQ1RFRENSUycsICdQUk9KQ1JTJywgJ0dFT0dDUycsJ0dFT0NDUycsJ1BST0pDUycsJ0xPQ0FMX0NTJywgJ0dFT0RDUlMnLCAnR0VPREVUSUNDUlMnLCAnR0VPREVUSUNEQVRVTScsICdFTkdDUlMnLCAnRU5HSU5FRVJJTkdDUlMnXTtcbmZ1bmN0aW9uIHRlc3RXS1QoY29kZSl7XG4gIHJldHVybiBjb2RlV29yZHMuc29tZShmdW5jdGlvbiAod29yZCkge1xuICAgIHJldHVybiBjb2RlLmluZGV4T2Yod29yZCkgPiAtMTtcbiAgfSk7XG59XG52YXIgY29kZXMgPSBbJzM4NTcnLCAnOTAwOTEzJywgJzM3ODUnLCAnMTAyMTEzJ107XG5mdW5jdGlvbiBjaGVja01lcmNhdG9yKGl0ZW0pIHtcbiAgdmFyIGF1dGggPSBtYXRjaChpdGVtLCAnYXV0aG9yaXR5Jyk7XG4gIGlmICghYXV0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY29kZSA9IG1hdGNoKGF1dGgsICdlcHNnJyk7XG4gIHJldHVybiBjb2RlICYmIGNvZGVzLmluZGV4T2YoY29kZSkgPiAtMTtcbn1cbmZ1bmN0aW9uIGNoZWNrUHJvalN0cihpdGVtKSB7XG4gIHZhciBleHQgPSBtYXRjaChpdGVtLCAnZXh0ZW5zaW9uJyk7XG4gIGlmICghZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBtYXRjaChleHQsICdwcm9qNCcpO1xufVxuZnVuY3Rpb24gdGVzdFByb2ooY29kZSl7XG4gIHJldHVybiBjb2RlWzBdID09PSAnKyc7XG59XG5mdW5jdGlvbiBwYXJzZShjb2RlKXtcbiAgaWYgKHRlc3RPYmooY29kZSkpIHtcbiAgICAvL2NoZWNrIHRvIHNlZSBpZiB0aGlzIGlzIGEgV0tUIHN0cmluZ1xuICAgIGlmICh0ZXN0RGVmKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZGVmc1tjb2RlXTtcbiAgICB9XG4gICAgaWYgKHRlc3RXS1QoY29kZSkpIHtcbiAgICAgIHZhciBvdXQgPSB3a3QoY29kZSk7XG4gICAgICAvLyB0ZXN0IG9mIHNwZXRpYWwgY2FzZSwgZHVlIHRvIHRoaXMgYmVpbmcgYSB2ZXJ5IGNvbW1vbiBhbmQgb2Z0ZW4gbWFsZm9ybWVkXG4gICAgICBpZiAoY2hlY2tNZXJjYXRvcihvdXQpKSB7XG4gICAgICAgIHJldHVybiBkZWZzWydFUFNHOjM4NTcnXTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXliZVByb2pTdHIgPSBjaGVja1Byb2pTdHIob3V0KTtcbiAgICAgIGlmIChtYXliZVByb2pTdHIpIHtcbiAgICAgICAgcmV0dXJuIHByb2pTdHIobWF5YmVQcm9qU3RyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGlmICh0ZXN0UHJvaihjb2RlKSkge1xuICAgICAgcmV0dXJuIHByb2pTdHIoY29kZSk7XG4gICAgfVxuICB9ZWxzZXtcbiAgICByZXR1cm4gY29kZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbiB8fCB7fTtcbiAgdmFyIHZhbHVlLCBwcm9wZXJ0eTtcbiAgaWYgKCFzb3VyY2UpIHtcbiAgICByZXR1cm4gZGVzdGluYXRpb247XG4gIH1cbiAgZm9yIChwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICB2YWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVzdGluYXRpb247XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlY2NlbnQsIHNpbnBoaSwgY29zcGhpKSB7XG4gIHZhciBjb24gPSBlY2NlbnQgKiBzaW5waGk7XG4gIHJldHVybiBjb3NwaGkgLyAoTWF0aC5zcXJ0KDEgLSBjb24gKiBjb24pKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4PDAgPyAtMSA6IDE7XG59IiwiXG5pbXBvcnQge1RXT19QSSwgU1BJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcbmltcG9ydCBzaWduIGZyb20gJy4vc2lnbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIChNYXRoLmFicyh4KSA8PSBTUEkpID8geCA6ICh4IC0gKHNpZ24oeCkgKiBUV09fUEkpKTtcbn1cbiIsImltcG9ydCB7SEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVjY2VudCwgcGhpLCBzaW5waGkpIHtcbiAgdmFyIGNvbiA9IGVjY2VudCAqIHNpbnBoaTtcbiAgdmFyIGNvbSA9IDAuNSAqIGVjY2VudDtcbiAgY29uID0gTWF0aC5wb3coKCgxIC0gY29uKSAvICgxICsgY29uKSksIGNvbSk7XG4gIHJldHVybiAoTWF0aC50YW4oMC41ICogKEhBTEZfUEkgLSBwaGkpKSAvIGNvbik7XG59XG4iLCJpbXBvcnQge0hBTEZfUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlY2NlbnQsIHRzKSB7XG4gIHZhciBlY2NudGggPSAwLjUgKiBlY2NlbnQ7XG4gIHZhciBjb24sIGRwaGk7XG4gIHZhciBwaGkgPSBIQUxGX1BJIC0gMiAqIE1hdGguYXRhbih0cyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IDE1OyBpKyspIHtcbiAgICBjb24gPSBlY2NlbnQgKiBNYXRoLnNpbihwaGkpO1xuICAgIGRwaGkgPSBIQUxGX1BJIC0gMiAqIE1hdGguYXRhbih0cyAqIChNYXRoLnBvdygoKDEgLSBjb24pIC8gKDEgKyBjb24pKSwgZWNjbnRoKSkpIC0gcGhpO1xuICAgIHBoaSArPSBkcGhpO1xuICAgIGlmIChNYXRoLmFicyhkcGhpKSA8PSAwLjAwMDAwMDAwMDEpIHtcbiAgICAgIHJldHVybiBwaGk7XG4gICAgfVxuICB9XG4gIC8vY29uc29sZS5sb2coXCJwaGkyeiBoYXMgTm9Db252ZXJnZW5jZVwiKTtcbiAgcmV0dXJuIC05OTk5O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIC8vbm8tb3AgZm9yIGxvbmdsYXRcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkocHQpIHtcbiAgcmV0dXJuIHB0O1xufVxuZXhwb3J0IHtpZGVudGl0eSBhcyBmb3J3YXJkfTtcbmV4cG9ydCB7aWRlbnRpdHkgYXMgaW52ZXJzZX07XG5leHBvcnQgdmFyIG5hbWVzID0gW1wibG9uZ2xhdFwiLCBcImlkZW50aXR5XCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBpZGVudGl0eSxcbiAgaW52ZXJzZTogaWRlbnRpdHksXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBtZXJjIGZyb20gXCIuL3Byb2plY3Rpb25zL21lcmNcIjtcbmltcG9ydCBsb25nbGF0IGZyb20gXCIuL3Byb2plY3Rpb25zL2xvbmdsYXRcIjtcbnZhciBwcm9qcyA9IFttZXJjLCBsb25nbGF0XTtcbnZhciBuYW1lcyA9IHt9O1xudmFyIHByb2pTdG9yZSA9IFtdO1xuXG5mdW5jdGlvbiBhZGQocHJvaiwgaSkge1xuICB2YXIgbGVuID0gcHJvalN0b3JlLmxlbmd0aDtcbiAgaWYgKCFwcm9qLm5hbWVzKSB7XG4gICAgY29uc29sZS5sb2coaSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcHJvalN0b3JlW2xlbl0gPSBwcm9qO1xuICBwcm9qLm5hbWVzLmZvckVhY2goZnVuY3Rpb24obikge1xuICAgIG5hbWVzW24udG9Mb3dlckNhc2UoKV0gPSBsZW47XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IHthZGR9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgaWYgKCFuYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBuID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAodHlwZW9mIG5hbWVzW25dICE9PSAndW5kZWZpbmVkJyAmJiBwcm9qU3RvcmVbbmFtZXNbbl1dKSB7XG4gICAgcmV0dXJuIHByb2pTdG9yZVtuYW1lc1tuXV07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICBwcm9qcy5mb3JFYWNoKGFkZCk7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIHN0YXJ0OiBzdGFydCxcbiAgYWRkOiBhZGQsXG4gIGdldDogZ2V0XG59O1xuIiwiaW1wb3J0IG1zZm56IGZyb20gJy4uL2NvbW1vbi9tc2Zueic7XG5cbmltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCB0c2ZueiBmcm9tICcuLi9jb21tb24vdHNmbnonO1xuaW1wb3J0IHBoaTJ6IGZyb20gJy4uL2NvbW1vbi9waGkyeic7XG5pbXBvcnQge0ZPUlRQSSwgUjJELCBFUFNMTiwgSEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgdmFyIGNvbiA9IHRoaXMuYiAvIHRoaXMuYTtcbiAgdGhpcy5lcyA9IDEgLSBjb24gKiBjb247XG4gIGlmKCEoJ3gwJyBpbiB0aGlzKSl7XG4gICAgdGhpcy54MCA9IDA7XG4gIH1cbiAgaWYoISgneTAnIGluIHRoaXMpKXtcbiAgICB0aGlzLnkwID0gMDtcbiAgfVxuICB0aGlzLmUgPSBNYXRoLnNxcnQodGhpcy5lcyk7XG4gIGlmICh0aGlzLmxhdF90cykge1xuICAgIGlmICh0aGlzLnNwaGVyZSkge1xuICAgICAgdGhpcy5rMCA9IE1hdGguY29zKHRoaXMubGF0X3RzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmswID0gbXNmbnoodGhpcy5lLCBNYXRoLnNpbih0aGlzLmxhdF90cyksIE1hdGguY29zKHRoaXMubGF0X3RzKSk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmICghdGhpcy5rMCkge1xuICAgICAgaWYgKHRoaXMuaykge1xuICAgICAgICB0aGlzLmswID0gdGhpcy5rO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuazAgPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiBNZXJjYXRvciBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIC8vIGNvbnZlcnQgdG8gcmFkaWFuc1xuICBpZiAobGF0ICogUjJEID4gOTAgJiYgbGF0ICogUjJEIDwgLTkwICYmIGxvbiAqIFIyRCA+IDE4MCAmJiBsb24gKiBSMkQgPCAtMTgwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgeCwgeTtcbiAgaWYgKE1hdGguYWJzKE1hdGguYWJzKGxhdCkgLSBIQUxGX1BJKSA8PSBFUFNMTikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGVsc2Uge1xuICAgIGlmICh0aGlzLnNwaGVyZSkge1xuICAgICAgeCA9IHRoaXMueDAgKyB0aGlzLmEgKiB0aGlzLmswICogYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgICAgIHkgPSB0aGlzLnkwICsgdGhpcy5hICogdGhpcy5rMCAqIE1hdGgubG9nKE1hdGgudGFuKEZPUlRQSSArIDAuNSAqIGxhdCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBzaW5waGkgPSBNYXRoLnNpbihsYXQpO1xuICAgICAgdmFyIHRzID0gdHNmbnoodGhpcy5lLCBsYXQsIHNpbnBoaSk7XG4gICAgICB4ID0gdGhpcy54MCArIHRoaXMuYSAqIHRoaXMuazAgKiBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICAgICAgeSA9IHRoaXMueTAgLSB0aGlzLmEgKiB0aGlzLmswICogTWF0aC5sb2codHMpO1xuICAgIH1cbiAgICBwLnggPSB4O1xuICAgIHAueSA9IHk7XG4gICAgcmV0dXJuIHA7XG4gIH1cbn1cblxuLyogTWVyY2F0b3IgaW52ZXJzZSBlcXVhdGlvbnMtLW1hcHBpbmcgeCx5IHRvIGxhdC9sb25nXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcblxuICB2YXIgeCA9IHAueCAtIHRoaXMueDA7XG4gIHZhciB5ID0gcC55IC0gdGhpcy55MDtcbiAgdmFyIGxvbiwgbGF0O1xuXG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGxhdCA9IEhBTEZfUEkgLSAyICogTWF0aC5hdGFuKE1hdGguZXhwKC15IC8gKHRoaXMuYSAqIHRoaXMuazApKSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIHRzID0gTWF0aC5leHAoLXkgLyAodGhpcy5hICogdGhpcy5rMCkpO1xuICAgIGxhdCA9IHBoaTJ6KHRoaXMuZSwgdHMpO1xuICAgIGlmIChsYXQgPT09IC05OTk5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgeCAvICh0aGlzLmEgKiB0aGlzLmswKSk7XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiTWVyY2F0b3JcIiwgXCJQb3B1bGFyIFZpc3VhbGlzYXRpb24gUHNldWRvIE1lcmNhdG9yXCIsIFwiTWVyY2F0b3JfMVNQXCIsIFwiTWVyY2F0b3JfQXV4aWxpYXJ5X1NwaGVyZVwiLCBcIm1lcmNcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsInZhciBleHBvcnRzID0ge307XG5leHBvcnQge2V4cG9ydHMgYXMgZGVmYXVsdH07XG5leHBvcnRzLk1FUklUID0ge1xuICBhOiA2Mzc4MTM3LjAsXG4gIHJmOiAyOTguMjU3LFxuICBlbGxpcHNlTmFtZTogXCJNRVJJVCAxOTgzXCJcbn07XG5cbmV4cG9ydHMuU0dTODUgPSB7XG4gIGE6IDYzNzgxMzYuMCxcbiAgcmY6IDI5OC4yNTcsXG4gIGVsbGlwc2VOYW1lOiBcIlNvdmlldCBHZW9kZXRpYyBTeXN0ZW0gODVcIlxufTtcblxuZXhwb3J0cy5HUlM4MCA9IHtcbiAgYTogNjM3ODEzNy4wLFxuICByZjogMjk4LjI1NzIyMjEwMSxcbiAgZWxsaXBzZU5hbWU6IFwiR1JTIDE5ODAoSVVHRywgMTk4MClcIlxufTtcblxuZXhwb3J0cy5JQVU3NiA9IHtcbiAgYTogNjM3ODE0MC4wLFxuICByZjogMjk4LjI1NyxcbiAgZWxsaXBzZU5hbWU6IFwiSUFVIDE5NzZcIlxufTtcblxuZXhwb3J0cy5haXJ5ID0ge1xuICBhOiA2Mzc3NTYzLjM5NixcbiAgYjogNjM1NjI1Ni45MTAsXG4gIGVsbGlwc2VOYW1lOiBcIkFpcnkgMTgzMFwiXG59O1xuXG5leHBvcnRzLkFQTDQgPSB7XG4gIGE6IDYzNzgxMzcsXG4gIHJmOiAyOTguMjUsXG4gIGVsbGlwc2VOYW1lOiBcIkFwcGwuIFBoeXNpY3MuIDE5NjVcIlxufTtcblxuZXhwb3J0cy5OV0w5RCA9IHtcbiAgYTogNjM3ODE0NS4wLFxuICByZjogMjk4LjI1LFxuICBlbGxpcHNlTmFtZTogXCJOYXZhbCBXZWFwb25zIExhYi4sIDE5NjVcIlxufTtcblxuZXhwb3J0cy5tb2RfYWlyeSA9IHtcbiAgYTogNjM3NzM0MC4xODksXG4gIGI6IDYzNTYwMzQuNDQ2LFxuICBlbGxpcHNlTmFtZTogXCJNb2RpZmllZCBBaXJ5XCJcbn07XG5cbmV4cG9ydHMuYW5kcmFlID0ge1xuICBhOiA2Mzc3MTA0LjQzLFxuICByZjogMzAwLjAsXG4gIGVsbGlwc2VOYW1lOiBcIkFuZHJhZSAxODc2IChEZW4uLCBJY2xuZC4pXCJcbn07XG5cbmV4cG9ydHMuYXVzdF9TQSA9IHtcbiAgYTogNjM3ODE2MC4wLFxuICByZjogMjk4LjI1LFxuICBlbGxpcHNlTmFtZTogXCJBdXN0cmFsaWFuIE5hdGwgJiBTLiBBbWVyLiAxOTY5XCJcbn07XG5cbmV4cG9ydHMuR1JTNjcgPSB7XG4gIGE6IDYzNzgxNjAuMCxcbiAgcmY6IDI5OC4yNDcxNjc0MjcwLFxuICBlbGxpcHNlTmFtZTogXCJHUlMgNjcoSVVHRyAxOTY3KVwiXG59O1xuXG5leHBvcnRzLmJlc3NlbCA9IHtcbiAgYTogNjM3NzM5Ny4xNTUsXG4gIHJmOiAyOTkuMTUyODEyOCxcbiAgZWxsaXBzZU5hbWU6IFwiQmVzc2VsIDE4NDFcIlxufTtcblxuZXhwb3J0cy5iZXNzX25hbSA9IHtcbiAgYTogNjM3NzQ4My44NjUsXG4gIHJmOiAyOTkuMTUyODEyOCxcbiAgZWxsaXBzZU5hbWU6IFwiQmVzc2VsIDE4NDEgKE5hbWliaWEpXCJcbn07XG5cbmV4cG9ydHMuY2xyazY2ID0ge1xuICBhOiA2Mzc4MjA2LjQsXG4gIGI6IDYzNTY1ODMuOCxcbiAgZWxsaXBzZU5hbWU6IFwiQ2xhcmtlIDE4NjZcIlxufTtcblxuZXhwb3J0cy5jbHJrODAgPSB7XG4gIGE6IDYzNzgyNDkuMTQ1LFxuICByZjogMjkzLjQ2NjMsXG4gIGVsbGlwc2VOYW1lOiBcIkNsYXJrZSAxODgwIG1vZC5cIlxufTtcblxuZXhwb3J0cy5jbHJrNTggPSB7XG4gIGE6IDYzNzgyOTMuNjQ1MjA4NzU5LFxuICByZjogMjk0LjI2MDY3NjM2OTI2NTQsXG4gIGVsbGlwc2VOYW1lOiBcIkNsYXJrZSAxODU4XCJcbn07XG5cbmV4cG9ydHMuQ1BNID0ge1xuICBhOiA2Mzc1NzM4LjcsXG4gIHJmOiAzMzQuMjksXG4gIGVsbGlwc2VOYW1lOiBcIkNvbW0uIGRlcyBQb2lkcyBldCBNZXN1cmVzIDE3OTlcIlxufTtcblxuZXhwb3J0cy5kZWxtYnIgPSB7XG4gIGE6IDYzNzY0MjguMCxcbiAgcmY6IDMxMS41LFxuICBlbGxpcHNlTmFtZTogXCJEZWxhbWJyZSAxODEwIChCZWxnaXVtKVwiXG59O1xuXG5leHBvcnRzLmVuZ2VsaXMgPSB7XG4gIGE6IDYzNzgxMzYuMDUsXG4gIHJmOiAyOTguMjU2NixcbiAgZWxsaXBzZU5hbWU6IFwiRW5nZWxpcyAxOTg1XCJcbn07XG5cbmV4cG9ydHMuZXZyc3QzMCA9IHtcbiAgYTogNjM3NzI3Ni4zNDUsXG4gIHJmOiAzMDAuODAxNyxcbiAgZWxsaXBzZU5hbWU6IFwiRXZlcmVzdCAxODMwXCJcbn07XG5cbmV4cG9ydHMuZXZyc3Q0OCA9IHtcbiAgYTogNjM3NzMwNC4wNjMsXG4gIHJmOiAzMDAuODAxNyxcbiAgZWxsaXBzZU5hbWU6IFwiRXZlcmVzdCAxOTQ4XCJcbn07XG5cbmV4cG9ydHMuZXZyc3Q1NiA9IHtcbiAgYTogNjM3NzMwMS4yNDMsXG4gIHJmOiAzMDAuODAxNyxcbiAgZWxsaXBzZU5hbWU6IFwiRXZlcmVzdCAxOTU2XCJcbn07XG5cbmV4cG9ydHMuZXZyc3Q2OSA9IHtcbiAgYTogNjM3NzI5NS42NjQsXG4gIHJmOiAzMDAuODAxNyxcbiAgZWxsaXBzZU5hbWU6IFwiRXZlcmVzdCAxOTY5XCJcbn07XG5cbmV4cG9ydHMuZXZyc3RTUyA9IHtcbiAgYTogNjM3NzI5OC41NTYsXG4gIHJmOiAzMDAuODAxNyxcbiAgZWxsaXBzZU5hbWU6IFwiRXZlcmVzdCAoU2FiYWggJiBTYXJhd2FrKVwiXG59O1xuXG5leHBvcnRzLmZzY2hyNjAgPSB7XG4gIGE6IDYzNzgxNjYuMCxcbiAgcmY6IDI5OC4zLFxuICBlbGxpcHNlTmFtZTogXCJGaXNjaGVyIChNZXJjdXJ5IERhdHVtKSAxOTYwXCJcbn07XG5cbmV4cG9ydHMuZnNjaHI2MG0gPSB7XG4gIGE6IDYzNzgxNTUuMCxcbiAgcmY6IDI5OC4zLFxuICBlbGxpcHNlTmFtZTogXCJGaXNjaGVyIDE5NjBcIlxufTtcblxuZXhwb3J0cy5mc2NocjY4ID0ge1xuICBhOiA2Mzc4MTUwLjAsXG4gIHJmOiAyOTguMyxcbiAgZWxsaXBzZU5hbWU6IFwiRmlzY2hlciAxOTY4XCJcbn07XG5cbmV4cG9ydHMuaGVsbWVydCA9IHtcbiAgYTogNjM3ODIwMC4wLFxuICByZjogMjk4LjMsXG4gIGVsbGlwc2VOYW1lOiBcIkhlbG1lcnQgMTkwNlwiXG59O1xuXG5leHBvcnRzLmhvdWdoID0ge1xuICBhOiA2Mzc4MjcwLjAsXG4gIHJmOiAyOTcuMCxcbiAgZWxsaXBzZU5hbWU6IFwiSG91Z2hcIlxufTtcblxuZXhwb3J0cy5pbnRsID0ge1xuICBhOiA2Mzc4Mzg4LjAsXG4gIHJmOiAyOTcuMCxcbiAgZWxsaXBzZU5hbWU6IFwiSW50ZXJuYXRpb25hbCAxOTA5IChIYXlmb3JkKVwiXG59O1xuXG5leHBvcnRzLmthdWxhID0ge1xuICBhOiA2Mzc4MTYzLjAsXG4gIHJmOiAyOTguMjQsXG4gIGVsbGlwc2VOYW1lOiBcIkthdWxhIDE5NjFcIlxufTtcblxuZXhwb3J0cy5sZXJjaCA9IHtcbiAgYTogNjM3ODEzOS4wLFxuICByZjogMjk4LjI1NyxcbiAgZWxsaXBzZU5hbWU6IFwiTGVyY2ggMTk3OVwiXG59O1xuXG5leHBvcnRzLm1wcnRzID0ge1xuICBhOiA2Mzk3MzAwLjAsXG4gIHJmOiAxOTEuMCxcbiAgZWxsaXBzZU5hbWU6IFwiTWF1cGVydGl1cyAxNzM4XCJcbn07XG5cbmV4cG9ydHMubmV3X2ludGwgPSB7XG4gIGE6IDYzNzgxNTcuNSxcbiAgYjogNjM1Njc3Mi4yLFxuICBlbGxpcHNlTmFtZTogXCJOZXcgSW50ZXJuYXRpb25hbCAxOTY3XCJcbn07XG5cbmV4cG9ydHMucGxlc3NpcyA9IHtcbiAgYTogNjM3NjUyMy4wLFxuICByZjogNjM1NTg2My4wLFxuICBlbGxpcHNlTmFtZTogXCJQbGVzc2lzIDE4MTcgKEZyYW5jZSlcIlxufTtcblxuZXhwb3J0cy5rcmFzcyA9IHtcbiAgYTogNjM3ODI0NS4wLFxuICByZjogMjk4LjMsXG4gIGVsbGlwc2VOYW1lOiBcIktyYXNzb3Zza3ksIDE5NDJcIlxufTtcblxuZXhwb3J0cy5TRWFzaWEgPSB7XG4gIGE6IDYzNzgxNTUuMCxcbiAgYjogNjM1Njc3My4zMjA1LFxuICBlbGxpcHNlTmFtZTogXCJTb3V0aGVhc3QgQXNpYVwiXG59O1xuXG5leHBvcnRzLndhbGJlY2sgPSB7XG4gIGE6IDYzNzY4OTYuMCxcbiAgYjogNjM1NTgzNC44NDY3LFxuICBlbGxpcHNlTmFtZTogXCJXYWxiZWNrXCJcbn07XG5cbmV4cG9ydHMuV0dTNjAgPSB7XG4gIGE6IDYzNzgxNjUuMCxcbiAgcmY6IDI5OC4zLFxuICBlbGxpcHNlTmFtZTogXCJXR1MgNjBcIlxufTtcblxuZXhwb3J0cy5XR1M2NiA9IHtcbiAgYTogNjM3ODE0NS4wLFxuICByZjogMjk4LjI1LFxuICBlbGxpcHNlTmFtZTogXCJXR1MgNjZcIlxufTtcblxuZXhwb3J0cy5XR1M3ID0ge1xuICBhOiA2Mzc4MTM1LjAsXG4gIHJmOiAyOTguMjYsXG4gIGVsbGlwc2VOYW1lOiBcIldHUyA3MlwiXG59O1xuXG5leHBvcnQgdmFyIFdHUzg0ID0gZXhwb3J0cy5XR1M4NCA9IHtcbiAgYTogNjM3ODEzNy4wLFxuICByZjogMjk4LjI1NzIyMzU2MyxcbiAgZWxsaXBzZU5hbWU6IFwiV0dTIDg0XCJcbn07XG5cbmV4cG9ydHMuc3BoZXJlID0ge1xuICBhOiA2MzcwOTk3LjAsXG4gIGI6IDYzNzA5OTcuMCxcbiAgZWxsaXBzZU5hbWU6IFwiTm9ybWFsIFNwaGVyZSAocj02MzcwOTk3KVwiXG59O1xuIiwidmFyIGV4cG9ydHMgPSB7fTtcbmV4cG9ydCB7ZXhwb3J0cyBhcyBkZWZhdWx0fTtcbmV4cG9ydHMud2dzODQgPSB7XG4gIHRvd2dzODQ6IFwiMCwwLDBcIixcbiAgZWxsaXBzZTogXCJXR1M4NFwiLFxuICBkYXR1bU5hbWU6IFwiV0dTODRcIlxufTtcblxuZXhwb3J0cy5jaDE5MDMgPSB7XG4gIHRvd2dzODQ6IFwiNjc0LjM3NCwxNS4wNTYsNDA1LjM0NlwiLFxuICBlbGxpcHNlOiBcImJlc3NlbFwiLFxuICBkYXR1bU5hbWU6IFwic3dpc3NcIlxufTtcblxuZXhwb3J0cy5nZ3JzODcgPSB7XG4gIHRvd2dzODQ6IFwiLTE5OS44Nyw3NC43OSwyNDYuNjJcIixcbiAgZWxsaXBzZTogXCJHUlM4MFwiLFxuICBkYXR1bU5hbWU6IFwiR3JlZWtfR2VvZGV0aWNfUmVmZXJlbmNlX1N5c3RlbV8xOTg3XCJcbn07XG5cbmV4cG9ydHMubmFkODMgPSB7XG4gIHRvd2dzODQ6IFwiMCwwLDBcIixcbiAgZWxsaXBzZTogXCJHUlM4MFwiLFxuICBkYXR1bU5hbWU6IFwiTm9ydGhfQW1lcmljYW5fRGF0dW1fMTk4M1wiXG59O1xuXG5leHBvcnRzLm5hZDI3ID0ge1xuICBuYWRncmlkczogXCJAY29udXMsQGFsYXNrYSxAbnR2Ml8wLmdzYixAbnR2MV9jYW4uZGF0XCIsXG4gIGVsbGlwc2U6IFwiY2xyazY2XCIsXG4gIGRhdHVtTmFtZTogXCJOb3J0aF9BbWVyaWNhbl9EYXR1bV8xOTI3XCJcbn07XG5cbmV4cG9ydHMucG90c2RhbSA9IHtcbiAgdG93Z3M4NDogXCI2MDYuMCwyMy4wLDQxMy4wXCIsXG4gIGVsbGlwc2U6IFwiYmVzc2VsXCIsXG4gIGRhdHVtTmFtZTogXCJQb3RzZGFtIFJhdWVuYmVyZyAxOTUwIERIRE5cIlxufTtcblxuZXhwb3J0cy5jYXJ0aGFnZSA9IHtcbiAgdG93Z3M4NDogXCItMjYzLjAsNi4wLDQzMS4wXCIsXG4gIGVsbGlwc2U6IFwiY2xhcms4MFwiLFxuICBkYXR1bU5hbWU6IFwiQ2FydGhhZ2UgMTkzNCBUdW5pc2lhXCJcbn07XG5cbmV4cG9ydHMuaGVybWFubnNrb2dlbCA9IHtcbiAgdG93Z3M4NDogXCI2NTMuMCwtMjEyLjAsNDQ5LjBcIixcbiAgZWxsaXBzZTogXCJiZXNzZWxcIixcbiAgZGF0dW1OYW1lOiBcIkhlcm1hbm5za29nZWxcIlxufTtcblxuZXhwb3J0cy5vc25pNTIgPSB7XG4gIHRvd2dzODQ6IFwiNDgyLjUzMCwtMTMwLjU5Niw1NjQuNTU3LC0xLjA0MiwtMC4yMTQsLTAuNjMxLDguMTVcIixcbiAgZWxsaXBzZTogXCJhaXJ5XCIsXG4gIGRhdHVtTmFtZTogXCJJcmlzaCBOYXRpb25hbFwiXG59O1xuXG5leHBvcnRzLmlyZTY1ID0ge1xuICB0b3dnczg0OiBcIjQ4Mi41MzAsLTEzMC41OTYsNTY0LjU1NywtMS4wNDIsLTAuMjE0LC0wLjYzMSw4LjE1XCIsXG4gIGVsbGlwc2U6IFwibW9kX2FpcnlcIixcbiAgZGF0dW1OYW1lOiBcIklyZWxhbmQgMTk2NVwiXG59O1xuXG5leHBvcnRzLnJhc3NhZGlyYW4gPSB7XG4gIHRvd2dzODQ6IFwiLTEzMy42MywtMTU3LjUsLTE1OC42MlwiLFxuICBlbGxpcHNlOiBcImludGxcIixcbiAgZGF0dW1OYW1lOiBcIlJhc3NhZGlyYW5cIlxufTtcblxuZXhwb3J0cy5uemdkNDkgPSB7XG4gIHRvd2dzODQ6IFwiNTkuNDcsLTUuMDQsMTg3LjQ0LDAuNDcsLTAuMSwxLjAyNCwtNC41OTkzXCIsXG4gIGVsbGlwc2U6IFwiaW50bFwiLFxuICBkYXR1bU5hbWU6IFwiTmV3IFplYWxhbmQgR2VvZGV0aWMgRGF0dW0gMTk0OVwiXG59O1xuXG5leHBvcnRzLm9zZ2IzNiA9IHtcbiAgdG93Z3M4NDogXCI0NDYuNDQ4LC0xMjUuMTU3LDU0Mi4wNjAsMC4xNTAyLDAuMjQ3MCwwLjg0MjEsLTIwLjQ4OTRcIixcbiAgZWxsaXBzZTogXCJhaXJ5XCIsXG4gIGRhdHVtTmFtZTogXCJBaXJ5IDE4MzBcIlxufTtcblxuZXhwb3J0cy5zX2p0c2sgPSB7XG4gIHRvd2dzODQ6IFwiNTg5LDc2LDQ4MFwiLFxuICBlbGxpcHNlOiAnYmVzc2VsJyxcbiAgZGF0dW1OYW1lOiAnUy1KVFNLIChGZXJybyknXG59O1xuXG5leHBvcnRzLmJlZHVhcmFtID0ge1xuICB0b3dnczg0OiAnLTEwNiwtODcsMTg4JyxcbiAgZWxsaXBzZTogJ2Nscms4MCcsXG4gIGRhdHVtTmFtZTogJ0JlZHVhcmFtJ1xufTtcblxuZXhwb3J0cy5ndW51bmdfc2VnYXJhID0ge1xuICB0b3dnczg0OiAnLTQwMyw2ODQsNDEnLFxuICBlbGxpcHNlOiAnYmVzc2VsJyxcbiAgZGF0dW1OYW1lOiAnR3VudW5nIFNlZ2FyYSBKYWthcnRhJ1xufTtcblxuZXhwb3J0cy5ybmI3MiA9IHtcbiAgdG93Z3M4NDogXCIxMDYuODY5LC01Mi4yOTc4LDEwMy43MjQsLTAuMzM2NTcsMC40NTY5NTUsLTEuODQyMTgsMVwiLFxuICBlbGxpcHNlOiBcImludGxcIixcbiAgZGF0dW1OYW1lOiBcIlJlc2VhdSBOYXRpb25hbCBCZWxnZSAxOTcyXCJcbn07XG4iLCJpbXBvcnQgcGFyc2VDb2RlIGZyb20gJy4vcGFyc2VDb2RlJztcbmltcG9ydCBleHRlbmQgZnJvbSAnLi9leHRlbmQnO1xuaW1wb3J0IHByb2plY3Rpb25zIGZyb20gJy4vcHJvamVjdGlvbnMnO1xuaW1wb3J0IHtzcGhlcmUgYXMgZGNfc3BoZXJlLCBlY2NlbnRyaWNpdHkgYXMgZGNfZWNjZW50cmljaXR5fSBmcm9tICcuL2Rlcml2ZUNvbnN0YW50cyc7XG5pbXBvcnQgRGF0dW0gZnJvbSAnLi9jb25zdGFudHMvRGF0dW0nO1xuaW1wb3J0IGRhdHVtIGZyb20gJy4vZGF0dW0nO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vbWF0Y2gnO1xuXG5mdW5jdGlvbiBQcm9qZWN0aW9uKHNyc0NvZGUsY2FsbGJhY2spIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb2plY3Rpb24pKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9qZWN0aW9uKHNyc0NvZGUpO1xuICB9XG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyb3Ipe1xuICAgIGlmKGVycm9yKXtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbiAgdmFyIGpzb24gPSBwYXJzZUNvZGUoc3JzQ29kZSk7XG4gIGlmKHR5cGVvZiBqc29uICE9PSAnb2JqZWN0Jyl7XG4gICAgY2FsbGJhY2soc3JzQ29kZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBvdXJQcm9qID0gUHJvamVjdGlvbi5wcm9qZWN0aW9ucy5nZXQoanNvbi5wcm9qTmFtZSk7XG4gIGlmKCFvdXJQcm9qKXtcbiAgICBjYWxsYmFjayhzcnNDb2RlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGpzb24uZGF0dW1Db2RlICYmIGpzb24uZGF0dW1Db2RlICE9PSAnbm9uZScpIHtcbiAgICB2YXIgZGF0dW1EZWYgPSBtYXRjaChEYXR1bSwganNvbi5kYXR1bUNvZGUpO1xuICAgIGlmIChkYXR1bURlZikge1xuICAgICAganNvbi5kYXR1bV9wYXJhbXMgPSBkYXR1bURlZi50b3dnczg0ID8gZGF0dW1EZWYudG93Z3M4NC5zcGxpdCgnLCcpIDogbnVsbDtcbiAgICAgIGpzb24uZWxscHMgPSBkYXR1bURlZi5lbGxpcHNlO1xuICAgICAganNvbi5kYXR1bU5hbWUgPSBkYXR1bURlZi5kYXR1bU5hbWUgPyBkYXR1bURlZi5kYXR1bU5hbWUgOiBqc29uLmRhdHVtQ29kZTtcbiAgICB9XG4gIH1cbiAganNvbi5rMCA9IGpzb24uazAgfHwgMS4wO1xuICBqc29uLmF4aXMgPSBqc29uLmF4aXMgfHwgJ2VudSc7XG4gIGpzb24uZWxscHMgPSBqc29uLmVsbHBzIHx8ICd3Z3M4NCc7XG4gIHZhciBzcGhlcmVfID0gZGNfc3BoZXJlKGpzb24uYSwganNvbi5iLCBqc29uLnJmLCBqc29uLmVsbHBzLCBqc29uLnNwaGVyZSk7XG4gIHZhciBlY2MgPSBkY19lY2NlbnRyaWNpdHkoc3BoZXJlXy5hLCBzcGhlcmVfLmIsIHNwaGVyZV8ucmYsIGpzb24uUl9BKTtcbiAgdmFyIGRhdHVtT2JqID0ganNvbi5kYXR1bSB8fCBkYXR1bShqc29uLmRhdHVtQ29kZSwganNvbi5kYXR1bV9wYXJhbXMsIHNwaGVyZV8uYSwgc3BoZXJlXy5iLCBlY2MuZXMsIGVjYy5lcDIpO1xuXG4gIGV4dGVuZCh0aGlzLCBqc29uKTsgLy8gdHJhbnNmZXIgZXZlcnl0aGluZyBvdmVyIGZyb20gdGhlIHByb2plY3Rpb24gYmVjYXVzZSB3ZSBkb24ndCBrbm93IHdoYXQgd2UnbGwgbmVlZFxuICBleHRlbmQodGhpcywgb3VyUHJvaik7IC8vIHRyYW5zZmVyIGFsbCB0aGUgbWV0aG9kcyBmcm9tIHRoZSBwcm9qZWN0aW9uXG5cbiAgLy8gY29weSB0aGUgNCB0aGluZ3Mgb3ZlciB3ZSBjYWx1bGF0ZWQgaW4gZGVyaXZlQ29uc3RhbnRzLnNwaGVyZVxuICB0aGlzLmEgPSBzcGhlcmVfLmE7XG4gIHRoaXMuYiA9IHNwaGVyZV8uYjtcbiAgdGhpcy5yZiA9IHNwaGVyZV8ucmY7XG4gIHRoaXMuc3BoZXJlID0gc3BoZXJlXy5zcGhlcmU7XG5cbiAgLy8gY29weSB0aGUgMyB0aGluZ3Mgd2UgY2FsY3VsYXRlZCBpbiBkZXJpdmVDb25zdGFudHMuZWNjZW50cmljaXR5XG4gIHRoaXMuZXMgPSBlY2MuZXM7XG4gIHRoaXMuZSA9IGVjYy5lO1xuICB0aGlzLmVwMiA9IGVjYy5lcDI7XG5cbiAgLy8gYWRkIGluIHRoZSBkYXR1bSBvYmplY3RcbiAgdGhpcy5kYXR1bSA9IGRhdHVtT2JqO1xuXG4gIC8vIGluaXQgdGhlIHByb2plY3Rpb25cbiAgdGhpcy5pbml0KCk7XG5cbiAgLy8gbGVnZWN5IGNhbGxiYWNrIGZyb20gYmFjayBpbiB0aGUgZGF5IHdoZW4gaXQgd2VudCB0byBzcGF0aWFscmVmZXJlbmNlLm9yZ1xuICBjYWxsYmFjayhudWxsLCB0aGlzKTtcblxufVxuUHJvamVjdGlvbi5wcm9qZWN0aW9ucyA9IHByb2plY3Rpb25zO1xuUHJvamVjdGlvbi5wcm9qZWN0aW9ucy5zdGFydCgpO1xuZXhwb3J0IGRlZmF1bHQgUHJvamVjdGlvbjtcbiIsImltcG9ydCB7U0lYVEgsIFJBNCwgUkE2LCBFUFNMTn0gZnJvbSAnLi9jb25zdGFudHMvdmFsdWVzJztcbmltcG9ydCB7ZGVmYXVsdCBhcyBFbGxpcHNvaWQsIFdHUzg0fSBmcm9tICcuL2NvbnN0YW50cy9FbGxpcHNvaWQnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vbWF0Y2gnO1xuXG5leHBvcnQgZnVuY3Rpb24gZWNjZW50cmljaXR5KGEsIGIsIHJmLCBSX0EpIHtcbiAgdmFyIGEyID0gYSAqIGE7IC8vIHVzZWQgaW4gZ2VvY2VudHJpY1xuICB2YXIgYjIgPSBiICogYjsgLy8gdXNlZCBpbiBnZW9jZW50cmljXG4gIHZhciBlcyA9IChhMiAtIGIyKSAvIGEyOyAvLyBlIF4gMlxuICB2YXIgZSA9IDA7XG4gIGlmIChSX0EpIHtcbiAgICBhICo9IDEgLSBlcyAqIChTSVhUSCArIGVzICogKFJBNCArIGVzICogUkE2KSk7XG4gICAgYTIgPSBhICogYTtcbiAgICBlcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguc3FydChlcyk7IC8vIGVjY2VudHJpY2l0eVxuICB9XG4gIHZhciBlcDIgPSAoYTIgLSBiMikgLyBiMjsgLy8gdXNlZCBpbiBnZW9jZW50cmljXG4gIHJldHVybiB7XG4gICAgZXM6IGVzLFxuICAgIGU6IGUsXG4gICAgZXAyOiBlcDJcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzcGhlcmUoYSwgYiwgcmYsIGVsbHBzLCBzcGhlcmUpIHtcbiAgaWYgKCFhKSB7IC8vIGRvIHdlIGhhdmUgYW4gZWxsaXBzb2lkP1xuICAgIHZhciBlbGxpcHNlID0gbWF0Y2goRWxsaXBzb2lkLCBlbGxwcyk7XG4gICAgaWYgKCFlbGxpcHNlKSB7XG4gICAgICBlbGxpcHNlID0gV0dTODQ7XG4gICAgfVxuICAgIGEgPSBlbGxpcHNlLmE7XG4gICAgYiA9IGVsbGlwc2UuYjtcbiAgICByZiA9IGVsbGlwc2UucmY7XG4gIH1cblxuICBpZiAocmYgJiYgIWIpIHtcbiAgICBiID0gKDEuMCAtIDEuMCAvIHJmKSAqIGE7XG4gIH1cbiAgaWYgKHJmID09PSAwIHx8IE1hdGguYWJzKGEgLSBiKSA8IEVQU0xOKSB7XG4gICAgc3BoZXJlID0gdHJ1ZTtcbiAgICBiID0gYTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGE6IGEsXG4gICAgYjogYixcbiAgICByZjogcmYsXG4gICAgc3BoZXJlOiBzcGhlcmVcbiAgfTtcbn1cbiIsImltcG9ydCB7UEpEXzNQQVJBTSwgUEpEXzdQQVJBTSwgUEpEX1dHUzg0LCBQSkRfTk9EQVRVTSwgU0VDX1RPX1JBRH0gZnJvbSAnLi9jb25zdGFudHMvdmFsdWVzJztcblxuZnVuY3Rpb24gZGF0dW0oZGF0dW1Db2RlLCBkYXR1bV9wYXJhbXMsIGEsIGIsIGVzLCBlcDIpIHtcbiAgdmFyIG91dCA9IHt9O1xuXG4gIGlmIChkYXR1bUNvZGUgPT09IHVuZGVmaW5lZCB8fCBkYXR1bUNvZGUgPT09ICdub25lJykge1xuICAgIG91dC5kYXR1bV90eXBlID0gUEpEX05PREFUVU07XG4gIH0gZWxzZSB7XG4gICAgb3V0LmRhdHVtX3R5cGUgPSBQSkRfV0dTODQ7XG4gIH1cblxuICBpZiAoZGF0dW1fcGFyYW1zKSB7XG4gICAgb3V0LmRhdHVtX3BhcmFtcyA9IGRhdHVtX3BhcmFtcy5tYXAocGFyc2VGbG9hdCk7XG4gICAgaWYgKG91dC5kYXR1bV9wYXJhbXNbMF0gIT09IDAgfHwgb3V0LmRhdHVtX3BhcmFtc1sxXSAhPT0gMCB8fCBvdXQuZGF0dW1fcGFyYW1zWzJdICE9PSAwKSB7XG4gICAgICBvdXQuZGF0dW1fdHlwZSA9IFBKRF8zUEFSQU07XG4gICAgfVxuICAgIGlmIChvdXQuZGF0dW1fcGFyYW1zLmxlbmd0aCA+IDMpIHtcbiAgICAgIGlmIChvdXQuZGF0dW1fcGFyYW1zWzNdICE9PSAwIHx8IG91dC5kYXR1bV9wYXJhbXNbNF0gIT09IDAgfHwgb3V0LmRhdHVtX3BhcmFtc1s1XSAhPT0gMCB8fCBvdXQuZGF0dW1fcGFyYW1zWzZdICE9PSAwKSB7XG4gICAgICAgIG91dC5kYXR1bV90eXBlID0gUEpEXzdQQVJBTTtcbiAgICAgICAgb3V0LmRhdHVtX3BhcmFtc1szXSAqPSBTRUNfVE9fUkFEO1xuICAgICAgICBvdXQuZGF0dW1fcGFyYW1zWzRdICo9IFNFQ19UT19SQUQ7XG4gICAgICAgIG91dC5kYXR1bV9wYXJhbXNbNV0gKj0gU0VDX1RPX1JBRDtcbiAgICAgICAgb3V0LmRhdHVtX3BhcmFtc1s2XSA9IChvdXQuZGF0dW1fcGFyYW1zWzZdIC8gMTAwMDAwMC4wKSArIDEuMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvdXQuYSA9IGE7IC8vZGF0dW0gb2JqZWN0IGFsc28gdXNlcyB0aGVzZSB2YWx1ZXNcbiAgb3V0LmIgPSBiO1xuICBvdXQuZXMgPSBlcztcbiAgb3V0LmVwMiA9IGVwMjtcbiAgcmV0dXJuIG91dDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGF0dW07XG4iLCIndXNlIHN0cmljdCc7XG5pbXBvcnQge1BKRF8zUEFSQU0sIFBKRF83UEFSQU0sIEhBTEZfUEl9IGZyb20gJy4vY29uc3RhbnRzL3ZhbHVlcyc7XG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZURhdHVtcyhzb3VyY2UsIGRlc3QpIHtcbiAgaWYgKHNvdXJjZS5kYXR1bV90eXBlICE9PSBkZXN0LmRhdHVtX3R5cGUpIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIGZhbHNlLCBkYXR1bXMgYXJlIG5vdCBlcXVhbFxuICB9IGVsc2UgaWYgKHNvdXJjZS5hICE9PSBkZXN0LmEgfHwgTWF0aC5hYnMoc291cmNlLmVzIC0gZGVzdC5lcykgPiAwLjAwMDAwMDAwMDA1MCkge1xuICAgIC8vIHRoZSB0b2xlcmFuY2UgZm9yIGVzIGlzIHRvIGVuc3VyZSB0aGF0IEdSUzgwIGFuZCBXR1M4NFxuICAgIC8vIGFyZSBjb25zaWRlcmVkIGlkZW50aWNhbFxuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChzb3VyY2UuZGF0dW1fdHlwZSA9PT0gUEpEXzNQQVJBTSkge1xuICAgIHJldHVybiAoc291cmNlLmRhdHVtX3BhcmFtc1swXSA9PT0gZGVzdC5kYXR1bV9wYXJhbXNbMF0gJiYgc291cmNlLmRhdHVtX3BhcmFtc1sxXSA9PT0gZGVzdC5kYXR1bV9wYXJhbXNbMV0gJiYgc291cmNlLmRhdHVtX3BhcmFtc1syXSA9PT0gZGVzdC5kYXR1bV9wYXJhbXNbMl0pO1xuICB9IGVsc2UgaWYgKHNvdXJjZS5kYXR1bV90eXBlID09PSBQSkRfN1BBUkFNKSB7XG4gICAgcmV0dXJuIChzb3VyY2UuZGF0dW1fcGFyYW1zWzBdID09PSBkZXN0LmRhdHVtX3BhcmFtc1swXSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzFdID09PSBkZXN0LmRhdHVtX3BhcmFtc1sxXSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzJdID09PSBkZXN0LmRhdHVtX3BhcmFtc1syXSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzNdID09PSBkZXN0LmRhdHVtX3BhcmFtc1szXSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzRdID09PSBkZXN0LmRhdHVtX3BhcmFtc1s0XSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzVdID09PSBkZXN0LmRhdHVtX3BhcmFtc1s1XSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzZdID09PSBkZXN0LmRhdHVtX3BhcmFtc1s2XSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIGRhdHVtcyBhcmUgZXF1YWxcbiAgfVxufSAvLyBjc19jb21wYXJlX2RhdHVtcygpXG5cbi8qXG4gKiBUaGUgZnVuY3Rpb24gQ29udmVydF9HZW9kZXRpY19Ub19HZW9jZW50cmljIGNvbnZlcnRzIGdlb2RldGljIGNvb3JkaW5hdGVzXG4gKiAobGF0aXR1ZGUsIGxvbmdpdHVkZSwgYW5kIGhlaWdodCkgdG8gZ2VvY2VudHJpYyBjb29yZGluYXRlcyAoWCwgWSwgWiksXG4gKiBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgZWxsaXBzb2lkIHBhcmFtZXRlcnMuXG4gKlxuICogICAgTGF0aXR1ZGUgIDogR2VvZGV0aWMgbGF0aXR1ZGUgaW4gcmFkaWFucyAgICAgICAgICAgICAgICAgICAgIChpbnB1dClcbiAqICAgIExvbmdpdHVkZSA6IEdlb2RldGljIGxvbmdpdHVkZSBpbiByYWRpYW5zICAgICAgICAgICAgICAgICAgICAoaW5wdXQpXG4gKiAgICBIZWlnaHQgICAgOiBHZW9kZXRpYyBoZWlnaHQsIGluIG1ldGVycyAgICAgICAgICAgICAgICAgICAgICAgKGlucHV0KVxuICogICAgWCAgICAgICAgIDogQ2FsY3VsYXRlZCBHZW9jZW50cmljIFggY29vcmRpbmF0ZSwgaW4gbWV0ZXJzICAgIChvdXRwdXQpXG4gKiAgICBZICAgICAgICAgOiBDYWxjdWxhdGVkIEdlb2NlbnRyaWMgWSBjb29yZGluYXRlLCBpbiBtZXRlcnMgICAgKG91dHB1dClcbiAqICAgIFogICAgICAgICA6IENhbGN1bGF0ZWQgR2VvY2VudHJpYyBaIGNvb3JkaW5hdGUsIGluIG1ldGVycyAgICAob3V0cHV0KVxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlb2RldGljVG9HZW9jZW50cmljKHAsIGVzLCBhKSB7XG4gIHZhciBMb25naXR1ZGUgPSBwLng7XG4gIHZhciBMYXRpdHVkZSA9IHAueTtcbiAgdmFyIEhlaWdodCA9IHAueiA/IHAueiA6IDA7IC8vWiB2YWx1ZSBub3QgYWx3YXlzIHN1cHBsaWVkXG5cbiAgdmFyIFJuOyAvKiAgRWFydGggcmFkaXVzIGF0IGxvY2F0aW9uICAqL1xuICB2YXIgU2luX0xhdDsgLyogIE1hdGguc2luKExhdGl0dWRlKSAgKi9cbiAgdmFyIFNpbjJfTGF0OyAvKiAgU3F1YXJlIG9mIE1hdGguc2luKExhdGl0dWRlKSAgKi9cbiAgdmFyIENvc19MYXQ7IC8qICBNYXRoLmNvcyhMYXRpdHVkZSkgICovXG5cbiAgLypcbiAgICoqIERvbid0IGJsb3cgdXAgaWYgTGF0aXR1ZGUgaXMganVzdCBhIGxpdHRsZSBvdXQgb2YgdGhlIHZhbHVlXG4gICAqKiByYW5nZSBhcyBpdCBtYXkganVzdCBiZSBhIHJvdW5kaW5nIGlzc3VlLiAgQWxzbyByZW1vdmVkIGxvbmdpdHVkZVxuICAgKiogdGVzdCwgaXQgc2hvdWxkIGJlIHdyYXBwZWQgYnkgTWF0aC5jb3MoKSBhbmQgTWF0aC5zaW4oKS4gIE5GVyBmb3IgUFJPSi40LCBTZXAvMjAwMS5cbiAgICovXG4gIGlmIChMYXRpdHVkZSA8IC1IQUxGX1BJICYmIExhdGl0dWRlID4gLTEuMDAxICogSEFMRl9QSSkge1xuICAgIExhdGl0dWRlID0gLUhBTEZfUEk7XG4gIH0gZWxzZSBpZiAoTGF0aXR1ZGUgPiBIQUxGX1BJICYmIExhdGl0dWRlIDwgMS4wMDEgKiBIQUxGX1BJKSB7XG4gICAgTGF0aXR1ZGUgPSBIQUxGX1BJO1xuICB9IGVsc2UgaWYgKExhdGl0dWRlIDwgLUhBTEZfUEkpIHtcbiAgICAvKiBMYXRpdHVkZSBvdXQgb2YgcmFuZ2UgKi9cbiAgICAvLy4ucmVwb3J0RXJyb3IoJ2dlb2NlbnQ6bGF0IG91dCBvZiByYW5nZTonICsgTGF0aXR1ZGUpO1xuICAgIHJldHVybiB7IHg6IC1JbmZpbml0eSwgeTogLUluZmluaXR5LCB6OiBwLnogfTtcbiAgfSBlbHNlIGlmIChMYXRpdHVkZSA+IEhBTEZfUEkpIHtcbiAgICAvKiBMYXRpdHVkZSBvdXQgb2YgcmFuZ2UgKi9cbiAgICByZXR1cm4geyB4OiBJbmZpbml0eSwgeTogSW5maW5pdHksIHo6IHAueiB9O1xuICB9XG5cbiAgaWYgKExvbmdpdHVkZSA+IE1hdGguUEkpIHtcbiAgICBMb25naXR1ZGUgLT0gKDIgKiBNYXRoLlBJKTtcbiAgfVxuICBTaW5fTGF0ID0gTWF0aC5zaW4oTGF0aXR1ZGUpO1xuICBDb3NfTGF0ID0gTWF0aC5jb3MoTGF0aXR1ZGUpO1xuICBTaW4yX0xhdCA9IFNpbl9MYXQgKiBTaW5fTGF0O1xuICBSbiA9IGEgLyAoTWF0aC5zcXJ0KDEuMGUwIC0gZXMgKiBTaW4yX0xhdCkpO1xuICByZXR1cm4ge1xuICAgIHg6IChSbiArIEhlaWdodCkgKiBDb3NfTGF0ICogTWF0aC5jb3MoTG9uZ2l0dWRlKSxcbiAgICB5OiAoUm4gKyBIZWlnaHQpICogQ29zX0xhdCAqIE1hdGguc2luKExvbmdpdHVkZSksXG4gICAgejogKChSbiAqICgxIC0gZXMpKSArIEhlaWdodCkgKiBTaW5fTGF0XG4gIH07XG59IC8vIGNzX2dlb2RldGljX3RvX2dlb2NlbnRyaWMoKVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VvY2VudHJpY1RvR2VvZGV0aWMocCwgZXMsIGEsIGIpIHtcbiAgLyogbG9jYWwgZGVmaW50aW9ucyBhbmQgdmFyaWFibGVzICovXG4gIC8qIGVuZC1jcml0ZXJpdW0gb2YgbG9vcCwgYWNjdXJhY3kgb2Ygc2luKExhdGl0dWRlKSAqL1xuICB2YXIgZ2VuYXUgPSAxZS0xMjtcbiAgdmFyIGdlbmF1MiA9IChnZW5hdSAqIGdlbmF1KTtcbiAgdmFyIG1heGl0ZXIgPSAzMDtcblxuICB2YXIgUDsgLyogZGlzdGFuY2UgYmV0d2VlbiBzZW1pLW1pbm9yIGF4aXMgYW5kIGxvY2F0aW9uICovXG4gIHZhciBSUjsgLyogZGlzdGFuY2UgYmV0d2VlbiBjZW50ZXIgYW5kIGxvY2F0aW9uICovXG4gIHZhciBDVDsgLyogc2luIG9mIGdlb2NlbnRyaWMgbGF0aXR1ZGUgKi9cbiAgdmFyIFNUOyAvKiBjb3Mgb2YgZ2VvY2VudHJpYyBsYXRpdHVkZSAqL1xuICB2YXIgUlg7XG4gIHZhciBSSztcbiAgdmFyIFJOOyAvKiBFYXJ0aCByYWRpdXMgYXQgbG9jYXRpb24gKi9cbiAgdmFyIENQSEkwOyAvKiBjb3Mgb2Ygc3RhcnQgb3Igb2xkIGdlb2RldGljIGxhdGl0dWRlIGluIGl0ZXJhdGlvbnMgKi9cbiAgdmFyIFNQSEkwOyAvKiBzaW4gb2Ygc3RhcnQgb3Igb2xkIGdlb2RldGljIGxhdGl0dWRlIGluIGl0ZXJhdGlvbnMgKi9cbiAgdmFyIENQSEk7IC8qIGNvcyBvZiBzZWFyY2hlZCBnZW9kZXRpYyBsYXRpdHVkZSAqL1xuICB2YXIgU1BISTsgLyogc2luIG9mIHNlYXJjaGVkIGdlb2RldGljIGxhdGl0dWRlICovXG4gIHZhciBTRFBISTsgLyogZW5kLWNyaXRlcml1bTogYWRkaXRpb24tdGhlb3JlbSBvZiBzaW4oTGF0aXR1ZGUoaXRlciktTGF0aXR1ZGUoaXRlci0xKSkgKi9cbiAgdmFyIGl0ZXI7IC8qICMgb2YgY29udGlub3VzIGl0ZXJhdGlvbiwgbWF4LiAzMCBpcyBhbHdheXMgZW5vdWdoIChzLmEuKSAqL1xuXG4gIHZhciBYID0gcC54O1xuICB2YXIgWSA9IHAueTtcbiAgdmFyIFogPSBwLnogPyBwLnogOiAwLjA7IC8vWiB2YWx1ZSBub3QgYWx3YXlzIHN1cHBsaWVkXG4gIHZhciBMb25naXR1ZGU7XG4gIHZhciBMYXRpdHVkZTtcbiAgdmFyIEhlaWdodDtcblxuICBQID0gTWF0aC5zcXJ0KFggKiBYICsgWSAqIFkpO1xuICBSUiA9IE1hdGguc3FydChYICogWCArIFkgKiBZICsgWiAqIFopO1xuXG4gIC8qICAgICAgc3BlY2lhbCBjYXNlcyBmb3IgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSAqL1xuICBpZiAoUCAvIGEgPCBnZW5hdSkge1xuXG4gICAgLyogIHNwZWNpYWwgY2FzZSwgaWYgUD0wLiAoWD0wLiwgWT0wLikgKi9cbiAgICBMb25naXR1ZGUgPSAwLjA7XG5cbiAgICAvKiAgaWYgKFgsWSxaKT0oMC4sMC4sMC4pIHRoZW4gSGVpZ2h0IGJlY29tZXMgc2VtaS1taW5vciBheGlzXG4gICAgICogIG9mIGVsbGlwc29pZCAoPWNlbnRlciBvZiBtYXNzKSwgTGF0aXR1ZGUgYmVjb21lcyBQSS8yICovXG4gICAgaWYgKFJSIC8gYSA8IGdlbmF1KSB7XG4gICAgICBMYXRpdHVkZSA9IEhBTEZfUEk7XG4gICAgICBIZWlnaHQgPSAtYjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHAueCxcbiAgICAgICAgeTogcC55LFxuICAgICAgICB6OiBwLnpcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8qICBlbGxpcHNvaWRhbCAoZ2VvZGV0aWMpIGxvbmdpdHVkZVxuICAgICAqICBpbnRlcnZhbDogLVBJIDwgTG9uZ2l0dWRlIDw9ICtQSSAqL1xuICAgIExvbmdpdHVkZSA9IE1hdGguYXRhbjIoWSwgWCk7XG4gIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBGb2xsb3dpbmcgaXRlcmF0aXZlIGFsZ29yaXRobSB3YXMgZGV2ZWxvcHBlZCBieVxuICAgKiBcIkluc3RpdHV0IGZvciBFcmRtZXNzdW5nXCIsIFVuaXZlcnNpdHkgb2YgSGFubm92ZXIsIEp1bHkgMTk4OC5cbiAgICogSW50ZXJuZXQ6IHd3dy5pZmUudW5pLWhhbm5vdmVyLmRlXG4gICAqIEl0ZXJhdGl2ZSBjb21wdXRhdGlvbiBvZiBDUEhJLFNQSEkgYW5kIEhlaWdodC5cbiAgICogSXRlcmF0aW9uIG9mIENQSEkgYW5kIFNQSEkgdG8gMTAqKi0xMiByYWRpYW4gcmVzcC5cbiAgICogMioxMCoqLTcgYXJjc2VjLlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgQ1QgPSBaIC8gUlI7XG4gIFNUID0gUCAvIFJSO1xuICBSWCA9IDEuMCAvIE1hdGguc3FydCgxLjAgLSBlcyAqICgyLjAgLSBlcykgKiBTVCAqIFNUKTtcbiAgQ1BISTAgPSBTVCAqICgxLjAgLSBlcykgKiBSWDtcbiAgU1BISTAgPSBDVCAqIFJYO1xuICBpdGVyID0gMDtcblxuICAvKiBsb29wIHRvIGZpbmQgc2luKExhdGl0dWRlKSByZXNwLiBMYXRpdHVkZVxuICAgKiB1bnRpbCB8c2luKExhdGl0dWRlKGl0ZXIpLUxhdGl0dWRlKGl0ZXItMSkpfCA8IGdlbmF1ICovXG4gIGRvIHtcbiAgICBpdGVyKys7XG4gICAgUk4gPSBhIC8gTWF0aC5zcXJ0KDEuMCAtIGVzICogU1BISTAgKiBTUEhJMCk7XG5cbiAgICAvKiAgZWxsaXBzb2lkYWwgKGdlb2RldGljKSBoZWlnaHQgKi9cbiAgICBIZWlnaHQgPSBQICogQ1BISTAgKyBaICogU1BISTAgLSBSTiAqICgxLjAgLSBlcyAqIFNQSEkwICogU1BISTApO1xuXG4gICAgUksgPSBlcyAqIFJOIC8gKFJOICsgSGVpZ2h0KTtcbiAgICBSWCA9IDEuMCAvIE1hdGguc3FydCgxLjAgLSBSSyAqICgyLjAgLSBSSykgKiBTVCAqIFNUKTtcbiAgICBDUEhJID0gU1QgKiAoMS4wIC0gUkspICogUlg7XG4gICAgU1BISSA9IENUICogUlg7XG4gICAgU0RQSEkgPSBTUEhJICogQ1BISTAgLSBDUEhJICogU1BISTA7XG4gICAgQ1BISTAgPSBDUEhJO1xuICAgIFNQSEkwID0gU1BISTtcbiAgfVxuICB3aGlsZSAoU0RQSEkgKiBTRFBISSA+IGdlbmF1MiAmJiBpdGVyIDwgbWF4aXRlcik7XG5cbiAgLyogICAgICBlbGxpcHNvaWRhbCAoZ2VvZGV0aWMpIGxhdGl0dWRlICovXG4gIExhdGl0dWRlID0gTWF0aC5hdGFuKFNQSEkgLyBNYXRoLmFicyhDUEhJKSk7XG4gIHJldHVybiB7XG4gICAgeDogTG9uZ2l0dWRlLFxuICAgIHk6IExhdGl0dWRlLFxuICAgIHo6IEhlaWdodFxuICB9O1xufSAvLyBjc19nZW9jZW50cmljX3RvX2dlb2RldGljKClcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vLyBwal9nZW9jZW50aWNfdG9fd2dzODQoIHAgKVxuLy8gIHAgPSBwb2ludCB0byB0cmFuc2Zvcm0gaW4gZ2VvY2VudHJpYyBjb29yZGluYXRlcyAoeCx5LHopXG5cblxuLyoqIHBvaW50IG9iamVjdCwgbm90aGluZyBmYW5jeSwganVzdCBhbGxvd3MgdmFsdWVzIHRvIGJlXG4gICAgcGFzc2VkIGJhY2sgYW5kIGZvcnRoIGJ5IHJlZmVyZW5jZSByYXRoZXIgdGhhbiBieSB2YWx1ZS5cbiAgICBPdGhlciBwb2ludCBjbGFzc2VzIG1heSBiZSB1c2VkIGFzIGxvbmcgYXMgdGhleSBoYXZlXG4gICAgeCBhbmQgeSBwcm9wZXJ0aWVzLCB3aGljaCB3aWxsIGdldCBtb2RpZmllZCBpbiB0aGUgdHJhbnNmb3JtIG1ldGhvZC5cbiovXG5leHBvcnQgZnVuY3Rpb24gZ2VvY2VudHJpY1RvV2dzODQocCwgZGF0dW1fdHlwZSwgZGF0dW1fcGFyYW1zKSB7XG5cbiAgaWYgKGRhdHVtX3R5cGUgPT09IFBKRF8zUEFSQU0pIHtcbiAgICAvLyBpZiggeFtpb10gPT09IEhVR0VfVkFMIClcbiAgICAvLyAgICBjb250aW51ZTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogcC54ICsgZGF0dW1fcGFyYW1zWzBdLFxuICAgICAgeTogcC55ICsgZGF0dW1fcGFyYW1zWzFdLFxuICAgICAgejogcC56ICsgZGF0dW1fcGFyYW1zWzJdLFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZGF0dW1fdHlwZSA9PT0gUEpEXzdQQVJBTSkge1xuICAgIHZhciBEeF9CRiA9IGRhdHVtX3BhcmFtc1swXTtcbiAgICB2YXIgRHlfQkYgPSBkYXR1bV9wYXJhbXNbMV07XG4gICAgdmFyIER6X0JGID0gZGF0dW1fcGFyYW1zWzJdO1xuICAgIHZhciBSeF9CRiA9IGRhdHVtX3BhcmFtc1szXTtcbiAgICB2YXIgUnlfQkYgPSBkYXR1bV9wYXJhbXNbNF07XG4gICAgdmFyIFJ6X0JGID0gZGF0dW1fcGFyYW1zWzVdO1xuICAgIHZhciBNX0JGID0gZGF0dW1fcGFyYW1zWzZdO1xuICAgIC8vIGlmKCB4W2lvXSA9PT0gSFVHRV9WQUwgKVxuICAgIC8vICAgIGNvbnRpbnVlO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBNX0JGICogKHAueCAtIFJ6X0JGICogcC55ICsgUnlfQkYgKiBwLnopICsgRHhfQkYsXG4gICAgICB5OiBNX0JGICogKFJ6X0JGICogcC54ICsgcC55IC0gUnhfQkYgKiBwLnopICsgRHlfQkYsXG4gICAgICB6OiBNX0JGICogKC1SeV9CRiAqIHAueCArIFJ4X0JGICogcC55ICsgcC56KSArIER6X0JGXG4gICAgfTtcbiAgfVxufSAvLyBjc19nZW9jZW50cmljX3RvX3dnczg0XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLy8gcGpfZ2VvY2VudGljX2Zyb21fd2dzODQoKVxuLy8gIGNvb3JkaW5hdGUgc3lzdGVtIGRlZmluaXRpb24sXG4vLyAgcG9pbnQgdG8gdHJhbnNmb3JtIGluIGdlb2NlbnRyaWMgY29vcmRpbmF0ZXMgKHgseSx6KVxuZXhwb3J0IGZ1bmN0aW9uIGdlb2NlbnRyaWNGcm9tV2dzODQocCwgZGF0dW1fdHlwZSwgZGF0dW1fcGFyYW1zKSB7XG5cbiAgaWYgKGRhdHVtX3R5cGUgPT09IFBKRF8zUEFSQU0pIHtcbiAgICAvL2lmKCB4W2lvXSA9PT0gSFVHRV9WQUwgKVxuICAgIC8vICAgIGNvbnRpbnVlO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBwLnggLSBkYXR1bV9wYXJhbXNbMF0sXG4gICAgICB5OiBwLnkgLSBkYXR1bV9wYXJhbXNbMV0sXG4gICAgICB6OiBwLnogLSBkYXR1bV9wYXJhbXNbMl0sXG4gICAgfTtcblxuICB9IGVsc2UgaWYgKGRhdHVtX3R5cGUgPT09IFBKRF83UEFSQU0pIHtcbiAgICB2YXIgRHhfQkYgPSBkYXR1bV9wYXJhbXNbMF07XG4gICAgdmFyIER5X0JGID0gZGF0dW1fcGFyYW1zWzFdO1xuICAgIHZhciBEel9CRiA9IGRhdHVtX3BhcmFtc1syXTtcbiAgICB2YXIgUnhfQkYgPSBkYXR1bV9wYXJhbXNbM107XG4gICAgdmFyIFJ5X0JGID0gZGF0dW1fcGFyYW1zWzRdO1xuICAgIHZhciBSel9CRiA9IGRhdHVtX3BhcmFtc1s1XTtcbiAgICB2YXIgTV9CRiA9IGRhdHVtX3BhcmFtc1s2XTtcbiAgICB2YXIgeF90bXAgPSAocC54IC0gRHhfQkYpIC8gTV9CRjtcbiAgICB2YXIgeV90bXAgPSAocC55IC0gRHlfQkYpIC8gTV9CRjtcbiAgICB2YXIgel90bXAgPSAocC56IC0gRHpfQkYpIC8gTV9CRjtcbiAgICAvL2lmKCB4W2lvXSA9PT0gSFVHRV9WQUwgKVxuICAgIC8vICAgIGNvbnRpbnVlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHhfdG1wICsgUnpfQkYgKiB5X3RtcCAtIFJ5X0JGICogel90bXAsXG4gICAgICB5OiAtUnpfQkYgKiB4X3RtcCArIHlfdG1wICsgUnhfQkYgKiB6X3RtcCxcbiAgICAgIHo6IFJ5X0JGICogeF90bXAgLSBSeF9CRiAqIHlfdG1wICsgel90bXBcbiAgICB9O1xuICB9IC8vY3NfZ2VvY2VudHJpY19mcm9tX3dnczg0KClcbn1cbiIsImltcG9ydCB7UEpEXzNQQVJBTSwgUEpEXzdQQVJBTSwgUEpEX05PREFUVU19IGZyb20gJy4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbmltcG9ydCB7Z2VvZGV0aWNUb0dlb2NlbnRyaWMsIGdlb2NlbnRyaWNUb0dlb2RldGljLCBnZW9jZW50cmljVG9XZ3M4NCwgZ2VvY2VudHJpY0Zyb21XZ3M4NCwgY29tcGFyZURhdHVtc30gZnJvbSAnLi9kYXR1bVV0aWxzJztcbmZ1bmN0aW9uIGNoZWNrUGFyYW1zKHR5cGUpIHtcbiAgcmV0dXJuICh0eXBlID09PSBQSkRfM1BBUkFNIHx8IHR5cGUgPT09IFBKRF83UEFSQU0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzb3VyY2UsIGRlc3QsIHBvaW50KSB7XG4gIC8vIFNob3J0IGN1dCBpZiB0aGUgZGF0dW1zIGFyZSBpZGVudGljYWwuXG4gIGlmIChjb21wYXJlRGF0dW1zKHNvdXJjZSwgZGVzdCkpIHtcbiAgICByZXR1cm4gcG9pbnQ7IC8vIGluIHRoaXMgY2FzZSwgemVybyBpcyBzdWNlc3MsXG4gICAgLy8gd2hlcmVhcyBjc19jb21wYXJlX2RhdHVtcyByZXR1cm5zIDEgdG8gaW5kaWNhdGUgVFJVRVxuICAgIC8vIGNvbmZ1c2luZywgc2hvdWxkIGZpeCB0aGlzXG4gIH1cblxuICAvLyBFeHBsaWNpdGx5IHNraXAgZGF0dW0gdHJhbnNmb3JtIGJ5IHNldHRpbmcgJ2RhdHVtPW5vbmUnIGFzIHBhcmFtZXRlciBmb3IgZWl0aGVyIHNvdXJjZSBvciBkZXN0XG4gIGlmIChzb3VyY2UuZGF0dW1fdHlwZSA9PT0gUEpEX05PREFUVU0gfHwgZGVzdC5kYXR1bV90eXBlID09PSBQSkRfTk9EQVRVTSkge1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIC8vIElmIHRoaXMgZGF0dW0gcmVxdWlyZXMgZ3JpZCBzaGlmdHMsIHRoZW4gYXBwbHkgaXQgdG8gZ2VvZGV0aWMgY29vcmRpbmF0ZXMuXG5cbiAgLy8gRG8gd2UgbmVlZCB0byBnbyB0aHJvdWdoIGdlb2NlbnRyaWMgY29vcmRpbmF0ZXM/XG4gIGlmIChzb3VyY2UuZXMgPT09IGRlc3QuZXMgJiYgc291cmNlLmEgPT09IGRlc3QuYSAmJiAhY2hlY2tQYXJhbXMoc291cmNlLmRhdHVtX3R5cGUpICYmICAhY2hlY2tQYXJhbXMoZGVzdC5kYXR1bV90eXBlKSkge1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIC8vIENvbnZlcnQgdG8gZ2VvY2VudHJpYyBjb29yZGluYXRlcy5cbiAgcG9pbnQgPSBnZW9kZXRpY1RvR2VvY2VudHJpYyhwb2ludCwgc291cmNlLmVzLCBzb3VyY2UuYSk7XG4gIC8vIENvbnZlcnQgYmV0d2VlbiBkYXR1bXNcbiAgaWYgKGNoZWNrUGFyYW1zKHNvdXJjZS5kYXR1bV90eXBlKSkge1xuICAgIHBvaW50ID0gZ2VvY2VudHJpY1RvV2dzODQocG9pbnQsIHNvdXJjZS5kYXR1bV90eXBlLCBzb3VyY2UuZGF0dW1fcGFyYW1zKTtcbiAgfVxuICBpZiAoY2hlY2tQYXJhbXMoZGVzdC5kYXR1bV90eXBlKSkge1xuICAgIHBvaW50ID0gZ2VvY2VudHJpY0Zyb21XZ3M4NChwb2ludCwgZGVzdC5kYXR1bV90eXBlLCBkZXN0LmRhdHVtX3BhcmFtcyk7XG4gIH1cbiAgcmV0dXJuIGdlb2NlbnRyaWNUb0dlb2RldGljKHBvaW50LCBkZXN0LmVzLCBkZXN0LmEsIGRlc3QuYik7XG5cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNycywgZGVub3JtLCBwb2ludCkge1xuICB2YXIgeGluID0gcG9pbnQueCxcbiAgICB5aW4gPSBwb2ludC55LFxuICAgIHppbiA9IHBvaW50LnogfHwgMC4wO1xuICB2YXIgdiwgdCwgaTtcbiAgdmFyIG91dCA9IHt9O1xuICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgaWYgKGRlbm9ybSAmJiBpID09PSAyICYmIHBvaW50LnogPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICB2ID0geGluO1xuICAgICAgaWYgKFwiZXdcIi5pbmRleE9mKGNycy5heGlzW2ldKSAhPT0gLTEpIHtcbiAgICAgICAgdCA9ICd4JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQgPSAneSc7XG4gICAgICB9XG5cbiAgICB9XG4gICAgZWxzZSBpZiAoaSA9PT0gMSkge1xuICAgICAgdiA9IHlpbjtcbiAgICAgIGlmIChcIm5zXCIuaW5kZXhPZihjcnMuYXhpc1tpXSkgIT09IC0xKSB7XG4gICAgICAgIHQgPSAneSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ID0gJ3gnO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHYgPSB6aW47XG4gICAgICB0ID0gJ3onO1xuICAgIH1cbiAgICBzd2l0Y2ggKGNycy5heGlzW2ldKSB7XG4gICAgY2FzZSAnZSc6XG4gICAgICBvdXRbdF0gPSB2O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndyc6XG4gICAgICBvdXRbdF0gPSAtdjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ24nOlxuICAgICAgb3V0W3RdID0gdjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3MnOlxuICAgICAgb3V0W3RdID0gLXY7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1JzpcbiAgICAgIGlmIChwb2ludFt0XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG91dC56ID0gdjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2QnOlxuICAgICAgaWYgKHBvaW50W3RdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0LnogPSAtdjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICAvL2NvbnNvbGUubG9nKFwiRVJST1I6IHVua25vdyBheGlzIChcIitjcnMuYXhpc1tpXStcIikgLSBjaGVjayBkZWZpbml0aW9uIG9mIFwiK2Nycy5wcm9qTmFtZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChhcnJheSl7XG4gIHZhciBvdXQgPSB7XG4gICAgeDogYXJyYXlbMF0sXG4gICAgeTogYXJyYXlbMV1cbiAgfTtcbiAgaWYgKGFycmF5Lmxlbmd0aD4yKSB7XG4gICAgb3V0LnogPSBhcnJheVsyXTtcbiAgfVxuICBpZiAoYXJyYXkubGVuZ3RoPjMpIHtcbiAgICBvdXQubSA9IGFycmF5WzNdO1xuICB9XG4gIHJldHVybiBvdXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHBvaW50KSB7XG4gIGNoZWNrQ29vcmQocG9pbnQueCk7XG4gIGNoZWNrQ29vcmQocG9pbnQueSk7XG59XG5mdW5jdGlvbiBjaGVja0Nvb3JkKG51bSkge1xuICBpZiAodHlwZW9mIE51bWJlci5pc0Zpbml0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUobnVtKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb29yZGluYXRlcyBtdXN0IGJlIGZpbml0ZSBudW1iZXJzJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInIHx8IG51bSAhPT0gbnVtIHx8ICFpc0Zpbml0ZShudW0pKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29vcmRpbmF0ZXMgbXVzdCBiZSBmaW5pdGUgbnVtYmVycycpO1xuICB9XG59XG4iLCJpbXBvcnQge0QyUiwgUjJELCBQSkRfM1BBUkFNLCBQSkRfN1BBUkFNfSBmcm9tICcuL2NvbnN0YW50cy92YWx1ZXMnO1xuaW1wb3J0IGRhdHVtX3RyYW5zZm9ybSBmcm9tICcuL2RhdHVtX3RyYW5zZm9ybSc7XG5pbXBvcnQgYWRqdXN0X2F4aXMgZnJvbSAnLi9hZGp1c3RfYXhpcyc7XG5pbXBvcnQgcHJvaiBmcm9tICcuL1Byb2onO1xuaW1wb3J0IHRvUG9pbnQgZnJvbSAnLi9jb21tb24vdG9Qb2ludCc7XG5pbXBvcnQgY2hlY2tTYW5pdHkgZnJvbSAnLi9jaGVja1Nhbml0eSc7XG5cbmZ1bmN0aW9uIGNoZWNrTm90V0dTKHNvdXJjZSwgZGVzdCkge1xuICByZXR1cm4gKChzb3VyY2UuZGF0dW0uZGF0dW1fdHlwZSA9PT0gUEpEXzNQQVJBTSB8fCBzb3VyY2UuZGF0dW0uZGF0dW1fdHlwZSA9PT0gUEpEXzdQQVJBTSkgJiYgZGVzdC5kYXR1bUNvZGUgIT09ICdXR1M4NCcpIHx8ICgoZGVzdC5kYXR1bS5kYXR1bV90eXBlID09PSBQSkRfM1BBUkFNIHx8IGRlc3QuZGF0dW0uZGF0dW1fdHlwZSA9PT0gUEpEXzdQQVJBTSkgJiYgc291cmNlLmRhdHVtQ29kZSAhPT0gJ1dHUzg0Jyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybShzb3VyY2UsIGRlc3QsIHBvaW50KSB7XG4gIHZhciB3Z3M4NDtcbiAgaWYgKEFycmF5LmlzQXJyYXkocG9pbnQpKSB7XG4gICAgcG9pbnQgPSB0b1BvaW50KHBvaW50KTtcbiAgfVxuICBjaGVja1Nhbml0eShwb2ludCk7XG4gIC8vIFdvcmthcm91bmQgZm9yIGRhdHVtIHNoaWZ0cyB0b3dnczg0LCBpZiBlaXRoZXIgc291cmNlIG9yIGRlc3RpbmF0aW9uIHByb2plY3Rpb24gaXMgbm90IHdnczg0XG4gIGlmIChzb3VyY2UuZGF0dW0gJiYgZGVzdC5kYXR1bSAmJiBjaGVja05vdFdHUyhzb3VyY2UsIGRlc3QpKSB7XG4gICAgd2dzODQgPSBuZXcgcHJvaignV0dTODQnKTtcbiAgICBwb2ludCA9IHRyYW5zZm9ybShzb3VyY2UsIHdnczg0LCBwb2ludCk7XG4gICAgc291cmNlID0gd2dzODQ7XG4gIH1cbiAgLy8gREdSLCAyMDEwLzExLzEyXG4gIGlmIChzb3VyY2UuYXhpcyAhPT0gJ2VudScpIHtcbiAgICBwb2ludCA9IGFkanVzdF9heGlzKHNvdXJjZSwgZmFsc2UsIHBvaW50KTtcbiAgfVxuICAvLyBUcmFuc2Zvcm0gc291cmNlIHBvaW50cyB0byBsb25nL2xhdCwgaWYgdGhleSBhcmVuJ3QgYWxyZWFkeS5cbiAgaWYgKHNvdXJjZS5wcm9qTmFtZSA9PT0gJ2xvbmdsYXQnKSB7XG4gICAgcG9pbnQgPSB7XG4gICAgICB4OiBwb2ludC54ICogRDJSLFxuICAgICAgeTogcG9pbnQueSAqIEQyUixcbiAgICAgIHo6IHBvaW50LnogfHwgMFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNvdXJjZS50b19tZXRlcikge1xuICAgICAgcG9pbnQgPSB7XG4gICAgICAgIHg6IHBvaW50LnggKiBzb3VyY2UudG9fbWV0ZXIsXG4gICAgICAgIHk6IHBvaW50LnkgKiBzb3VyY2UudG9fbWV0ZXIsXG4gICAgICAgIHo6IHBvaW50LnogfHwgMFxuICAgICAgfTtcbiAgICB9XG4gICAgcG9pbnQgPSBzb3VyY2UuaW52ZXJzZShwb2ludCk7IC8vIENvbnZlcnQgQ2FydGVzaWFuIHRvIGxvbmdsYXRcbiAgICBpZiAoIXBvaW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIC8vIEFkanVzdCBmb3IgdGhlIHByaW1lIG1lcmlkaWFuIGlmIG5lY2Vzc2FyeVxuICBpZiAoc291cmNlLmZyb21fZ3JlZW53aWNoKSB7XG4gICAgcG9pbnQueCArPSBzb3VyY2UuZnJvbV9ncmVlbndpY2g7XG4gIH1cblxuICAvLyBDb252ZXJ0IGRhdHVtcyBpZiBuZWVkZWQsIGFuZCBpZiBwb3NzaWJsZS5cbiAgcG9pbnQgPSBkYXR1bV90cmFuc2Zvcm0oc291cmNlLmRhdHVtLCBkZXN0LmRhdHVtLCBwb2ludCk7XG5cbiAgLy8gQWRqdXN0IGZvciB0aGUgcHJpbWUgbWVyaWRpYW4gaWYgbmVjZXNzYXJ5XG4gIGlmIChkZXN0LmZyb21fZ3JlZW53aWNoKSB7XG4gICAgcG9pbnQgPSB7XG4gICAgICB4OiBwb2ludC54IC0gZGVzdC5mcm9tX2dyZWVud2ljaCxcbiAgICAgIHk6IHBvaW50LnksXG4gICAgICB6OiBwb2ludC56IHx8IDBcbiAgICB9O1xuICB9XG5cbiAgaWYgKGRlc3QucHJvak5hbWUgPT09ICdsb25nbGF0Jykge1xuICAgIC8vIGNvbnZlcnQgcmFkaWFucyB0byBkZWNpbWFsIGRlZ3JlZXNcbiAgICBwb2ludCA9IHtcbiAgICAgIHg6IHBvaW50LnggKiBSMkQsXG4gICAgICB5OiBwb2ludC55ICogUjJELFxuICAgICAgejogcG9pbnQueiB8fCAwXG4gICAgfTtcbiAgfSBlbHNlIHsgLy8gZWxzZSBwcm9qZWN0XG4gICAgcG9pbnQgPSBkZXN0LmZvcndhcmQocG9pbnQpO1xuICAgIGlmIChkZXN0LnRvX21ldGVyKSB7XG4gICAgICBwb2ludCA9IHtcbiAgICAgICAgeDogcG9pbnQueCAvIGRlc3QudG9fbWV0ZXIsXG4gICAgICAgIHk6IHBvaW50LnkgLyBkZXN0LnRvX21ldGVyLFxuICAgICAgICB6OiBwb2ludC56IHx8IDBcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gREdSLCAyMDEwLzExLzEyXG4gIGlmIChkZXN0LmF4aXMgIT09ICdlbnUnKSB7XG4gICAgcmV0dXJuIGFkanVzdF9heGlzKGRlc3QsIHRydWUsIHBvaW50KTtcbiAgfVxuXG4gIHJldHVybiBwb2ludDtcbn1cbiIsImltcG9ydCBwcm9qIGZyb20gJy4vUHJvaic7XG5pbXBvcnQgdHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3JtJztcbnZhciB3Z3M4NCA9IHByb2ooJ1dHUzg0Jyk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKGZyb20sIHRvLCBjb29yZHMpIHtcbiAgdmFyIHRyYW5zZm9ybWVkQXJyYXksIG91dCwga2V5cztcbiAgaWYgKEFycmF5LmlzQXJyYXkoY29vcmRzKSkge1xuICAgIHRyYW5zZm9ybWVkQXJyYXkgPSB0cmFuc2Zvcm0oZnJvbSwgdG8sIGNvb3JkcykgfHwge3g6IE5hTiwgeTogTmFOfTtcbiAgICBpZiAoY29vcmRzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgodHlwZW9mIGZyb20ubmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZnJvbS5uYW1lID09PSAnZ2VvY2VudCcpIHx8ICh0eXBlb2YgdG8ubmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG8ubmFtZSA9PT0gJ2dlb2NlbnQnKSkge1xuICAgICAgICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkQXJyYXkueiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZXR1cm4gW3RyYW5zZm9ybWVkQXJyYXkueCwgdHJhbnNmb3JtZWRBcnJheS55LCB0cmFuc2Zvcm1lZEFycmF5LnpdLmNvbmNhdChjb29yZHMuc3BsaWNlKDMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW3RyYW5zZm9ybWVkQXJyYXkueCwgdHJhbnNmb3JtZWRBcnJheS55LCBjb29yZHNbMl1dLmNvbmNhdChjb29yZHMuc3BsaWNlKDMpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFt0cmFuc2Zvcm1lZEFycmF5LngsIHRyYW5zZm9ybWVkQXJyYXkueV0uY29uY2F0KGNvb3Jkcy5zcGxpY2UoMikpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3RyYW5zZm9ybWVkQXJyYXkueCwgdHJhbnNmb3JtZWRBcnJheS55XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ID0gdHJhbnNmb3JtKGZyb20sIHRvLCBjb29yZHMpO1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyhjb29yZHMpO1xuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICgodHlwZW9mIGZyb20ubmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZnJvbS5uYW1lID09PSAnZ2VvY2VudCcpIHx8ICh0eXBlb2YgdG8ubmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG8ubmFtZSA9PT0gJ2dlb2NlbnQnKSkge1xuICAgICAgICBpZiAoa2V5ID09PSAneCcgfHwga2V5ID09PSAneScgfHwga2V5ID09PSAneicpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrZXkgPT09ICd4JyB8fCBrZXkgPT09ICd5Jykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0W2tleV0gPSBjb29yZHNba2V5XTtcbiAgICB9KTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvaihpdGVtKSB7XG4gIGlmIChpdGVtIGluc3RhbmNlb2YgcHJvaikge1xuICAgIHJldHVybiBpdGVtO1xuICB9XG4gIGlmIChpdGVtLm9Qcm9qKSB7XG4gICAgcmV0dXJuIGl0ZW0ub1Byb2o7XG4gIH1cbiAgcmV0dXJuIHByb2ooaXRlbSk7XG59XG5cbmZ1bmN0aW9uIHByb2o0KGZyb21Qcm9qLCB0b1Byb2osIGNvb3JkKSB7XG4gIGZyb21Qcm9qID0gY2hlY2tQcm9qKGZyb21Qcm9qKTtcbiAgdmFyIHNpbmdsZSA9IGZhbHNlO1xuICB2YXIgb2JqO1xuICBpZiAodHlwZW9mIHRvUHJvaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0b1Byb2ogPSBmcm9tUHJvajtcbiAgICBmcm9tUHJvaiA9IHdnczg0O1xuICAgIHNpbmdsZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRvUHJvai54ICE9PSAndW5kZWZpbmVkJyB8fCBBcnJheS5pc0FycmF5KHRvUHJvaikpIHtcbiAgICBjb29yZCA9IHRvUHJvajtcbiAgICB0b1Byb2ogPSBmcm9tUHJvajtcbiAgICBmcm9tUHJvaiA9IHdnczg0O1xuICAgIHNpbmdsZSA9IHRydWU7XG4gIH1cbiAgdG9Qcm9qID0gY2hlY2tQcm9qKHRvUHJvaik7XG4gIGlmIChjb29yZCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lcihmcm9tUHJvaiwgdG9Qcm9qLCBjb29yZCk7XG4gIH0gZWxzZSB7XG4gICAgb2JqID0ge1xuICAgICAgZm9yd2FyZDogZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZXIoZnJvbVByb2osIHRvUHJvaiwgY29vcmRzKTtcbiAgICAgIH0sXG4gICAgICBpbnZlcnNlOiBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lcih0b1Byb2osIGZyb21Qcm9qLCBjb29yZHMpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHNpbmdsZSkge1xuICAgICAgb2JqLm9Qcm9qID0gdG9Qcm9qO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBwcm9qNDsiLCJcblxuXG4vKipcbiAqIFVUTSB6b25lcyBhcmUgZ3JvdXBlZCwgYW5kIGFzc2lnbmVkIHRvIG9uZSBvZiBhIGdyb3VwIG9mIDZcbiAqIHNldHMuXG4gKlxuICoge2ludH0gQHByaXZhdGVcbiAqL1xudmFyIE5VTV8xMDBLX1NFVFMgPSA2O1xuXG4vKipcbiAqIFRoZSBjb2x1bW4gbGV0dGVycyAoZm9yIGVhc3RpbmcpIG9mIHRoZSBsb3dlciBsZWZ0IHZhbHVlLCBwZXJcbiAqIHNldC5cbiAqXG4gKiB7c3RyaW5nfSBAcHJpdmF0ZVxuICovXG52YXIgU0VUX09SSUdJTl9DT0xVTU5fTEVUVEVSUyA9ICdBSlNBSlMnO1xuXG4vKipcbiAqIFRoZSByb3cgbGV0dGVycyAoZm9yIG5vcnRoaW5nKSBvZiB0aGUgbG93ZXIgbGVmdCB2YWx1ZSwgcGVyXG4gKiBzZXQuXG4gKlxuICoge3N0cmluZ30gQHByaXZhdGVcbiAqL1xudmFyIFNFVF9PUklHSU5fUk9XX0xFVFRFUlMgPSAnQUZBRkFGJztcblxudmFyIEEgPSA2NTsgLy8gQVxudmFyIEkgPSA3MzsgLy8gSVxudmFyIE8gPSA3OTsgLy8gT1xudmFyIFYgPSA4NjsgLy8gVlxudmFyIFogPSA5MDsgLy8gWlxuZXhwb3J0IGRlZmF1bHQge1xuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICB0b1BvaW50OiB0b1BvaW50XG59O1xuLyoqXG4gKiBDb252ZXJzaW9uIG9mIGxhdC9sb24gdG8gTUdSUy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbGwgT2JqZWN0IGxpdGVyYWwgd2l0aCBsYXQgYW5kIGxvbiBwcm9wZXJ0aWVzIG9uIGFcbiAqICAgICBXR1M4NCBlbGxpcHNvaWQuXG4gKiBAcGFyYW0ge2ludH0gYWNjdXJhY3kgQWNjdXJhY3kgaW4gZGlnaXRzICg1IGZvciAxIG0sIDQgZm9yIDEwIG0sIDMgZm9yXG4gKiAgICAgIDEwMCBtLCAyIGZvciAxMDAwIG0gb3IgMSBmb3IgMTAwMDAgbSkuIE9wdGlvbmFsLCBkZWZhdWx0IGlzIDUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBNR1JTIHN0cmluZyBmb3IgdGhlIGdpdmVuIGxvY2F0aW9uIGFuZCBhY2N1cmFjeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQobGwsIGFjY3VyYWN5KSB7XG4gIGFjY3VyYWN5ID0gYWNjdXJhY3kgfHwgNTsgLy8gZGVmYXVsdCBhY2N1cmFjeSAxbVxuICByZXR1cm4gZW5jb2RlKExMdG9VVE0oe1xuICAgIGxhdDogbGxbMV0sXG4gICAgbG9uOiBsbFswXVxuICB9KSwgYWNjdXJhY3kpO1xufTtcblxuLyoqXG4gKiBDb252ZXJzaW9uIG9mIE1HUlMgdG8gbGF0L2xvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWdycyBNR1JTIHN0cmluZy5cbiAqIEByZXR1cm4ge2FycmF5fSBBbiBhcnJheSB3aXRoIGxlZnQgKGxvbmdpdHVkZSksIGJvdHRvbSAobGF0aXR1ZGUpLCByaWdodFxuICogICAgIChsb25naXR1ZGUpIGFuZCB0b3AgKGxhdGl0dWRlKSB2YWx1ZXMgaW4gV0dTODQsIHJlcHJlc2VudGluZyB0aGVcbiAqICAgICBib3VuZGluZyBib3ggZm9yIHRoZSBwcm92aWRlZCBNR1JTIHJlZmVyZW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UobWdycykge1xuICB2YXIgYmJveCA9IFVUTXRvTEwoZGVjb2RlKG1ncnMudG9VcHBlckNhc2UoKSkpO1xuICBpZiAoYmJveC5sYXQgJiYgYmJveC5sb24pIHtcbiAgICByZXR1cm4gW2Jib3gubG9uLCBiYm94LmxhdCwgYmJveC5sb24sIGJib3gubGF0XTtcbiAgfVxuICByZXR1cm4gW2Jib3gubGVmdCwgYmJveC5ib3R0b20sIGJib3gucmlnaHQsIGJib3gudG9wXTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1BvaW50KG1ncnMpIHtcbiAgdmFyIGJib3ggPSBVVE10b0xMKGRlY29kZShtZ3JzLnRvVXBwZXJDYXNlKCkpKTtcbiAgaWYgKGJib3gubGF0ICYmIGJib3gubG9uKSB7XG4gICAgcmV0dXJuIFtiYm94LmxvbiwgYmJveC5sYXRdO1xuICB9XG4gIHJldHVybiBbKGJib3gubGVmdCArIGJib3gucmlnaHQpIC8gMiwgKGJib3gudG9wICsgYmJveC5ib3R0b20pIC8gMl07XG59O1xuLyoqXG4gKiBDb252ZXJzaW9uIGZyb20gZGVncmVlcyB0byByYWRpYW5zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gZGVnIHRoZSBhbmdsZSBpbiBkZWdyZWVzLlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgYW5nbGUgaW4gcmFkaWFucy5cbiAqL1xuZnVuY3Rpb24gZGVnVG9SYWQoZGVnKSB7XG4gIHJldHVybiAoZGVnICogKE1hdGguUEkgLyAxODAuMCkpO1xufVxuXG4vKipcbiAqIENvbnZlcnNpb24gZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgdGhlIGFuZ2xlIGluIHJhZGlhbnMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBhbmdsZSBpbiBkZWdyZWVzLlxuICovXG5mdW5jdGlvbiByYWRUb0RlZyhyYWQpIHtcbiAgcmV0dXJuICgxODAuMCAqIChyYWQgLyBNYXRoLlBJKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzZXQgb2YgTG9uZ2l0dWRlIGFuZCBMYXRpdHVkZSBjby1vcmRpbmF0ZXMgdG8gVVRNXG4gKiB1c2luZyB0aGUgV0dTODQgZWxsaXBzb2lkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gbGwgT2JqZWN0IGxpdGVyYWwgd2l0aCBsYXQgYW5kIGxvbiBwcm9wZXJ0aWVzXG4gKiAgICAgcmVwcmVzZW50aW5nIHRoZSBXR1M4NCBjb29yZGluYXRlIHRvIGJlIGNvbnZlcnRlZC5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGxpdGVyYWwgY29udGFpbmluZyB0aGUgVVRNIHZhbHVlIHdpdGggZWFzdGluZyxcbiAqICAgICBub3J0aGluZywgem9uZU51bWJlciBhbmQgem9uZUxldHRlciBwcm9wZXJ0aWVzLCBhbmQgYW4gb3B0aW9uYWxcbiAqICAgICBhY2N1cmFjeSBwcm9wZXJ0eSBpbiBkaWdpdHMuIFJldHVybnMgbnVsbCBpZiB0aGUgY29udmVyc2lvbiBmYWlsZWQuXG4gKi9cbmZ1bmN0aW9uIExMdG9VVE0obGwpIHtcbiAgdmFyIExhdCA9IGxsLmxhdDtcbiAgdmFyIExvbmcgPSBsbC5sb247XG4gIHZhciBhID0gNjM3ODEzNy4wOyAvL2VsbGlwLnJhZGl1cztcbiAgdmFyIGVjY1NxdWFyZWQgPSAwLjAwNjY5NDM4OyAvL2VsbGlwLmVjY3NxO1xuICB2YXIgazAgPSAwLjk5OTY7XG4gIHZhciBMb25nT3JpZ2luO1xuICB2YXIgZWNjUHJpbWVTcXVhcmVkO1xuICB2YXIgTiwgVCwgQywgQSwgTTtcbiAgdmFyIExhdFJhZCA9IGRlZ1RvUmFkKExhdCk7XG4gIHZhciBMb25nUmFkID0gZGVnVG9SYWQoTG9uZyk7XG4gIHZhciBMb25nT3JpZ2luUmFkO1xuICB2YXIgWm9uZU51bWJlcjtcbiAgLy8gKGludClcbiAgWm9uZU51bWJlciA9IE1hdGguZmxvb3IoKExvbmcgKyAxODApIC8gNikgKyAxO1xuXG4gIC8vTWFrZSBzdXJlIHRoZSBsb25naXR1ZGUgMTgwLjAwIGlzIGluIFpvbmUgNjBcbiAgaWYgKExvbmcgPT09IDE4MCkge1xuICAgIFpvbmVOdW1iZXIgPSA2MDtcbiAgfVxuXG4gIC8vIFNwZWNpYWwgem9uZSBmb3IgTm9yd2F5XG4gIGlmIChMYXQgPj0gNTYuMCAmJiBMYXQgPCA2NC4wICYmIExvbmcgPj0gMy4wICYmIExvbmcgPCAxMi4wKSB7XG4gICAgWm9uZU51bWJlciA9IDMyO1xuICB9XG5cbiAgLy8gU3BlY2lhbCB6b25lcyBmb3IgU3ZhbGJhcmRcbiAgaWYgKExhdCA+PSA3Mi4wICYmIExhdCA8IDg0LjApIHtcbiAgICBpZiAoTG9uZyA+PSAwLjAgJiYgTG9uZyA8IDkuMCkge1xuICAgICAgWm9uZU51bWJlciA9IDMxO1xuICAgIH1cbiAgICBlbHNlIGlmIChMb25nID49IDkuMCAmJiBMb25nIDwgMjEuMCkge1xuICAgICAgWm9uZU51bWJlciA9IDMzO1xuICAgIH1cbiAgICBlbHNlIGlmIChMb25nID49IDIxLjAgJiYgTG9uZyA8IDMzLjApIHtcbiAgICAgIFpvbmVOdW1iZXIgPSAzNTtcbiAgICB9XG4gICAgZWxzZSBpZiAoTG9uZyA+PSAzMy4wICYmIExvbmcgPCA0Mi4wKSB7XG4gICAgICBab25lTnVtYmVyID0gMzc7XG4gICAgfVxuICB9XG5cbiAgTG9uZ09yaWdpbiA9IChab25lTnVtYmVyIC0gMSkgKiA2IC0gMTgwICsgMzsgLy8rMyBwdXRzIG9yaWdpblxuICAvLyBpbiBtaWRkbGUgb2ZcbiAgLy8gem9uZVxuICBMb25nT3JpZ2luUmFkID0gZGVnVG9SYWQoTG9uZ09yaWdpbik7XG5cbiAgZWNjUHJpbWVTcXVhcmVkID0gKGVjY1NxdWFyZWQpIC8gKDEgLSBlY2NTcXVhcmVkKTtcblxuICBOID0gYSAvIE1hdGguc3FydCgxIC0gZWNjU3F1YXJlZCAqIE1hdGguc2luKExhdFJhZCkgKiBNYXRoLnNpbihMYXRSYWQpKTtcbiAgVCA9IE1hdGgudGFuKExhdFJhZCkgKiBNYXRoLnRhbihMYXRSYWQpO1xuICBDID0gZWNjUHJpbWVTcXVhcmVkICogTWF0aC5jb3MoTGF0UmFkKSAqIE1hdGguY29zKExhdFJhZCk7XG4gIEEgPSBNYXRoLmNvcyhMYXRSYWQpICogKExvbmdSYWQgLSBMb25nT3JpZ2luUmFkKTtcblxuICBNID0gYSAqICgoMSAtIGVjY1NxdWFyZWQgLyA0IC0gMyAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkIC8gNjQgLSA1ICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkIC8gMjU2KSAqIExhdFJhZCAtICgzICogZWNjU3F1YXJlZCAvIDggKyAzICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyAzMiArIDQ1ICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkIC8gMTAyNCkgKiBNYXRoLnNpbigyICogTGF0UmFkKSArICgxNSAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkIC8gMjU2ICsgNDUgKiBlY2NTcXVhcmVkICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyAxMDI0KSAqIE1hdGguc2luKDQgKiBMYXRSYWQpIC0gKDM1ICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkIC8gMzA3MikgKiBNYXRoLnNpbig2ICogTGF0UmFkKSk7XG5cbiAgdmFyIFVUTUVhc3RpbmcgPSAoazAgKiBOICogKEEgKyAoMSAtIFQgKyBDKSAqIEEgKiBBICogQSAvIDYuMCArICg1IC0gMTggKiBUICsgVCAqIFQgKyA3MiAqIEMgLSA1OCAqIGVjY1ByaW1lU3F1YXJlZCkgKiBBICogQSAqIEEgKiBBICogQSAvIDEyMC4wKSArIDUwMDAwMC4wKTtcblxuICB2YXIgVVRNTm9ydGhpbmcgPSAoazAgKiAoTSArIE4gKiBNYXRoLnRhbihMYXRSYWQpICogKEEgKiBBIC8gMiArICg1IC0gVCArIDkgKiBDICsgNCAqIEMgKiBDKSAqIEEgKiBBICogQSAqIEEgLyAyNC4wICsgKDYxIC0gNTggKiBUICsgVCAqIFQgKyA2MDAgKiBDIC0gMzMwICogZWNjUHJpbWVTcXVhcmVkKSAqIEEgKiBBICogQSAqIEEgKiBBICogQSAvIDcyMC4wKSkpO1xuICBpZiAoTGF0IDwgMC4wKSB7XG4gICAgVVRNTm9ydGhpbmcgKz0gMTAwMDAwMDAuMDsgLy8xMDAwMDAwMCBtZXRlciBvZmZzZXQgZm9yXG4gICAgLy8gc291dGhlcm4gaGVtaXNwaGVyZVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBub3J0aGluZzogTWF0aC5yb3VuZChVVE1Ob3J0aGluZyksXG4gICAgZWFzdGluZzogTWF0aC5yb3VuZChVVE1FYXN0aW5nKSxcbiAgICB6b25lTnVtYmVyOiBab25lTnVtYmVyLFxuICAgIHpvbmVMZXR0ZXI6IGdldExldHRlckRlc2lnbmF0b3IoTGF0KVxuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIFVUTSBjb29yZHMgdG8gbGF0L2xvbmcsIHVzaW5nIHRoZSBXR1M4NCBlbGxpcHNvaWQuIFRoaXMgaXMgYSBjb252ZW5pZW5jZVxuICogY2xhc3Mgd2hlcmUgdGhlIFpvbmUgY2FuIGJlIHNwZWNpZmllZCBhcyBhIHNpbmdsZSBzdHJpbmcgZWcuXCI2ME5cIiB3aGljaFxuICogaXMgdGhlbiBicm9rZW4gZG93biBpbnRvIHRoZSBab25lTnVtYmVyIGFuZCBab25lTGV0dGVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gdXRtIEFuIG9iamVjdCBsaXRlcmFsIHdpdGggbm9ydGhpbmcsIGVhc3RpbmcsIHpvbmVOdW1iZXJcbiAqICAgICBhbmQgem9uZUxldHRlciBwcm9wZXJ0aWVzLiBJZiBhbiBvcHRpb25hbCBhY2N1cmFjeSBwcm9wZXJ0eSBpc1xuICogICAgIHByb3ZpZGVkIChpbiBtZXRlcnMpLCBhIGJvdW5kaW5nIGJveCB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2ZcbiAqICAgICBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLlxuICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3QgbGl0ZXJhbCBjb250YWluaW5nIGVpdGhlciBsYXQgYW5kIGxvbiB2YWx1ZXNcbiAqICAgICAoaWYgbm8gYWNjdXJhY3kgd2FzIHByb3ZpZGVkKSwgb3IgdG9wLCByaWdodCwgYm90dG9tIGFuZCBsZWZ0IHZhbHVlc1xuICogICAgIGZvciB0aGUgYm91bmRpbmcgYm94IGNhbGN1bGF0ZWQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCBhY2N1cmFjeS5cbiAqICAgICBSZXR1cm5zIG51bGwgaWYgdGhlIGNvbnZlcnNpb24gZmFpbGVkLlxuICovXG5mdW5jdGlvbiBVVE10b0xMKHV0bSkge1xuXG4gIHZhciBVVE1Ob3J0aGluZyA9IHV0bS5ub3J0aGluZztcbiAgdmFyIFVUTUVhc3RpbmcgPSB1dG0uZWFzdGluZztcbiAgdmFyIHpvbmVMZXR0ZXIgPSB1dG0uem9uZUxldHRlcjtcbiAgdmFyIHpvbmVOdW1iZXIgPSB1dG0uem9uZU51bWJlcjtcbiAgLy8gY2hlY2sgdGhlIFpvbmVOdW1tYmVyIGlzIHZhbGlkXG4gIGlmICh6b25lTnVtYmVyIDwgMCB8fCB6b25lTnVtYmVyID4gNjApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBrMCA9IDAuOTk5NjtcbiAgdmFyIGEgPSA2Mzc4MTM3LjA7IC8vZWxsaXAucmFkaXVzO1xuICB2YXIgZWNjU3F1YXJlZCA9IDAuMDA2Njk0Mzg7IC8vZWxsaXAuZWNjc3E7XG4gIHZhciBlY2NQcmltZVNxdWFyZWQ7XG4gIHZhciBlMSA9ICgxIC0gTWF0aC5zcXJ0KDEgLSBlY2NTcXVhcmVkKSkgLyAoMSArIE1hdGguc3FydCgxIC0gZWNjU3F1YXJlZCkpO1xuICB2YXIgTjEsIFQxLCBDMSwgUjEsIEQsIE07XG4gIHZhciBMb25nT3JpZ2luO1xuICB2YXIgbXUsIHBoaTFSYWQ7XG5cbiAgLy8gcmVtb3ZlIDUwMCwwMDAgbWV0ZXIgb2Zmc2V0IGZvciBsb25naXR1ZGVcbiAgdmFyIHggPSBVVE1FYXN0aW5nIC0gNTAwMDAwLjA7XG4gIHZhciB5ID0gVVRNTm9ydGhpbmc7XG5cbiAgLy8gV2UgbXVzdCBrbm93IHNvbWVob3cgaWYgd2UgYXJlIGluIHRoZSBOb3J0aGVybiBvciBTb3V0aGVyblxuICAvLyBoZW1pc3BoZXJlLCB0aGlzIGlzIHRoZSBvbmx5IHRpbWUgd2UgdXNlIHRoZSBsZXR0ZXIgU28gZXZlblxuICAvLyBpZiB0aGUgWm9uZSBsZXR0ZXIgaXNuJ3QgZXhhY3RseSBjb3JyZWN0IGl0IHNob3VsZCBpbmRpY2F0ZVxuICAvLyB0aGUgaGVtaXNwaGVyZSBjb3JyZWN0bHlcbiAgaWYgKHpvbmVMZXR0ZXIgPCAnTicpIHtcbiAgICB5IC09IDEwMDAwMDAwLjA7IC8vIHJlbW92ZSAxMCwwMDAsMDAwIG1ldGVyIG9mZnNldCB1c2VkXG4gICAgLy8gZm9yIHNvdXRoZXJuIGhlbWlzcGhlcmVcbiAgfVxuXG4gIC8vIFRoZXJlIGFyZSA2MCB6b25lcyB3aXRoIHpvbmUgMSBiZWluZyBhdCBXZXN0IC0xODAgdG8gLTE3NFxuICBMb25nT3JpZ2luID0gKHpvbmVOdW1iZXIgLSAxKSAqIDYgLSAxODAgKyAzOyAvLyArMyBwdXRzIG9yaWdpblxuICAvLyBpbiBtaWRkbGUgb2ZcbiAgLy8gem9uZVxuXG4gIGVjY1ByaW1lU3F1YXJlZCA9IChlY2NTcXVhcmVkKSAvICgxIC0gZWNjU3F1YXJlZCk7XG5cbiAgTSA9IHkgLyBrMDtcbiAgbXUgPSBNIC8gKGEgKiAoMSAtIGVjY1NxdWFyZWQgLyA0IC0gMyAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkIC8gNjQgLSA1ICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkIC8gMjU2KSk7XG5cbiAgcGhpMVJhZCA9IG11ICsgKDMgKiBlMSAvIDIgLSAyNyAqIGUxICogZTEgKiBlMSAvIDMyKSAqIE1hdGguc2luKDIgKiBtdSkgKyAoMjEgKiBlMSAqIGUxIC8gMTYgLSA1NSAqIGUxICogZTEgKiBlMSAqIGUxIC8gMzIpICogTWF0aC5zaW4oNCAqIG11KSArICgxNTEgKiBlMSAqIGUxICogZTEgLyA5NikgKiBNYXRoLnNpbig2ICogbXUpO1xuICAvLyBkb3VibGUgcGhpMSA9IFByb2pNYXRoLnJhZFRvRGVnKHBoaTFSYWQpO1xuXG4gIE4xID0gYSAvIE1hdGguc3FydCgxIC0gZWNjU3F1YXJlZCAqIE1hdGguc2luKHBoaTFSYWQpICogTWF0aC5zaW4ocGhpMVJhZCkpO1xuICBUMSA9IE1hdGgudGFuKHBoaTFSYWQpICogTWF0aC50YW4ocGhpMVJhZCk7XG4gIEMxID0gZWNjUHJpbWVTcXVhcmVkICogTWF0aC5jb3MocGhpMVJhZCkgKiBNYXRoLmNvcyhwaGkxUmFkKTtcbiAgUjEgPSBhICogKDEgLSBlY2NTcXVhcmVkKSAvIE1hdGgucG93KDEgLSBlY2NTcXVhcmVkICogTWF0aC5zaW4ocGhpMVJhZCkgKiBNYXRoLnNpbihwaGkxUmFkKSwgMS41KTtcbiAgRCA9IHggLyAoTjEgKiBrMCk7XG5cbiAgdmFyIGxhdCA9IHBoaTFSYWQgLSAoTjEgKiBNYXRoLnRhbihwaGkxUmFkKSAvIFIxKSAqIChEICogRCAvIDIgLSAoNSArIDMgKiBUMSArIDEwICogQzEgLSA0ICogQzEgKiBDMSAtIDkgKiBlY2NQcmltZVNxdWFyZWQpICogRCAqIEQgKiBEICogRCAvIDI0ICsgKDYxICsgOTAgKiBUMSArIDI5OCAqIEMxICsgNDUgKiBUMSAqIFQxIC0gMjUyICogZWNjUHJpbWVTcXVhcmVkIC0gMyAqIEMxICogQzEpICogRCAqIEQgKiBEICogRCAqIEQgKiBEIC8gNzIwKTtcbiAgbGF0ID0gcmFkVG9EZWcobGF0KTtcblxuICB2YXIgbG9uID0gKEQgLSAoMSArIDIgKiBUMSArIEMxKSAqIEQgKiBEICogRCAvIDYgKyAoNSAtIDIgKiBDMSArIDI4ICogVDEgLSAzICogQzEgKiBDMSArIDggKiBlY2NQcmltZVNxdWFyZWQgKyAyNCAqIFQxICogVDEpICogRCAqIEQgKiBEICogRCAqIEQgLyAxMjApIC8gTWF0aC5jb3MocGhpMVJhZCk7XG4gIGxvbiA9IExvbmdPcmlnaW4gKyByYWRUb0RlZyhsb24pO1xuXG4gIHZhciByZXN1bHQ7XG4gIGlmICh1dG0uYWNjdXJhY3kpIHtcbiAgICB2YXIgdG9wUmlnaHQgPSBVVE10b0xMKHtcbiAgICAgIG5vcnRoaW5nOiB1dG0ubm9ydGhpbmcgKyB1dG0uYWNjdXJhY3ksXG4gICAgICBlYXN0aW5nOiB1dG0uZWFzdGluZyArIHV0bS5hY2N1cmFjeSxcbiAgICAgIHpvbmVMZXR0ZXI6IHV0bS56b25lTGV0dGVyLFxuICAgICAgem9uZU51bWJlcjogdXRtLnpvbmVOdW1iZXJcbiAgICB9KTtcbiAgICByZXN1bHQgPSB7XG4gICAgICB0b3A6IHRvcFJpZ2h0LmxhdCxcbiAgICAgIHJpZ2h0OiB0b3BSaWdodC5sb24sXG4gICAgICBib3R0b206IGxhdCxcbiAgICAgIGxlZnQ6IGxvblxuICAgIH07XG4gIH1cbiAgZWxzZSB7XG4gICAgcmVzdWx0ID0ge1xuICAgICAgbGF0OiBsYXQsXG4gICAgICBsb246IGxvblxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBNR1JTIGxldHRlciBkZXNpZ25hdG9yIGZvciB0aGUgZ2l2ZW4gbGF0aXR1ZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsYXQgVGhlIGxhdGl0dWRlIGluIFdHUzg0IHRvIGdldCB0aGUgbGV0dGVyIGRlc2lnbmF0b3JcbiAqICAgICBmb3IuXG4gKiBAcmV0dXJuIHtjaGFyfSBUaGUgbGV0dGVyIGRlc2lnbmF0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldExldHRlckRlc2lnbmF0b3IobGF0KSB7XG4gIC8vVGhpcyBpcyBoZXJlIGFzIGFuIGVycm9yIGZsYWcgdG8gc2hvdyB0aGF0IHRoZSBMYXRpdHVkZSBpc1xuICAvL291dHNpZGUgTUdSUyBsaW1pdHNcbiAgdmFyIExldHRlckRlc2lnbmF0b3IgPSAnWic7XG5cbiAgaWYgKCg4NCA+PSBsYXQpICYmIChsYXQgPj0gNzIpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdYJztcbiAgfVxuICBlbHNlIGlmICgoNzIgPiBsYXQpICYmIChsYXQgPj0gNjQpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdXJztcbiAgfVxuICBlbHNlIGlmICgoNjQgPiBsYXQpICYmIChsYXQgPj0gNTYpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdWJztcbiAgfVxuICBlbHNlIGlmICgoNTYgPiBsYXQpICYmIChsYXQgPj0gNDgpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdVJztcbiAgfVxuICBlbHNlIGlmICgoNDggPiBsYXQpICYmIChsYXQgPj0gNDApKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdUJztcbiAgfVxuICBlbHNlIGlmICgoNDAgPiBsYXQpICYmIChsYXQgPj0gMzIpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdTJztcbiAgfVxuICBlbHNlIGlmICgoMzIgPiBsYXQpICYmIChsYXQgPj0gMjQpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdSJztcbiAgfVxuICBlbHNlIGlmICgoMjQgPiBsYXQpICYmIChsYXQgPj0gMTYpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdRJztcbiAgfVxuICBlbHNlIGlmICgoMTYgPiBsYXQpICYmIChsYXQgPj0gOCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1AnO1xuICB9XG4gIGVsc2UgaWYgKCg4ID4gbGF0KSAmJiAobGF0ID49IDApKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdOJztcbiAgfVxuICBlbHNlIGlmICgoMCA+IGxhdCkgJiYgKGxhdCA+PSAtOCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ00nO1xuICB9XG4gIGVsc2UgaWYgKCgtOCA+IGxhdCkgJiYgKGxhdCA+PSAtMTYpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdMJztcbiAgfVxuICBlbHNlIGlmICgoLTE2ID4gbGF0KSAmJiAobGF0ID49IC0yNCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ0snO1xuICB9XG4gIGVsc2UgaWYgKCgtMjQgPiBsYXQpICYmIChsYXQgPj0gLTMyKSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnSic7XG4gIH1cbiAgZWxzZSBpZiAoKC0zMiA+IGxhdCkgJiYgKGxhdCA+PSAtNDApKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdIJztcbiAgfVxuICBlbHNlIGlmICgoLTQwID4gbGF0KSAmJiAobGF0ID49IC00OCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ0cnO1xuICB9XG4gIGVsc2UgaWYgKCgtNDggPiBsYXQpICYmIChsYXQgPj0gLTU2KSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnRic7XG4gIH1cbiAgZWxzZSBpZiAoKC01NiA+IGxhdCkgJiYgKGxhdCA+PSAtNjQpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdFJztcbiAgfVxuICBlbHNlIGlmICgoLTY0ID4gbGF0KSAmJiAobGF0ID49IC03MikpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ0QnO1xuICB9XG4gIGVsc2UgaWYgKCgtNzIgPiBsYXQpICYmIChsYXQgPj0gLTgwKSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnQyc7XG4gIH1cbiAgcmV0dXJuIExldHRlckRlc2lnbmF0b3I7XG59XG5cbi8qKlxuICogRW5jb2RlcyBhIFVUTSBsb2NhdGlvbiBhcyBNR1JTIHN0cmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtvYmplY3R9IHV0bSBBbiBvYmplY3QgbGl0ZXJhbCB3aXRoIGVhc3RpbmcsIG5vcnRoaW5nLFxuICogICAgIHpvbmVMZXR0ZXIsIHpvbmVOdW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhY2N1cmFjeSBBY2N1cmFjeSBpbiBkaWdpdHMgKDEtNSkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE1HUlMgc3RyaW5nIGZvciB0aGUgZ2l2ZW4gVVRNIGxvY2F0aW9uLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodXRtLCBhY2N1cmFjeSkge1xuICAvLyBwcmVwZW5kIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgdmFyIHNlYXN0aW5nID0gXCIwMDAwMFwiICsgdXRtLmVhc3RpbmcsXG4gICAgc25vcnRoaW5nID0gXCIwMDAwMFwiICsgdXRtLm5vcnRoaW5nO1xuXG4gIHJldHVybiB1dG0uem9uZU51bWJlciArIHV0bS56b25lTGV0dGVyICsgZ2V0MTAwa0lEKHV0bS5lYXN0aW5nLCB1dG0ubm9ydGhpbmcsIHV0bS56b25lTnVtYmVyKSArIHNlYXN0aW5nLnN1YnN0cihzZWFzdGluZy5sZW5ndGggLSA1LCBhY2N1cmFjeSkgKyBzbm9ydGhpbmcuc3Vic3RyKHNub3J0aGluZy5sZW5ndGggLSA1LCBhY2N1cmFjeSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSB0d28gbGV0dGVyIDEwMGsgZGVzaWduYXRvciBmb3IgYSBnaXZlbiBVVE0gZWFzdGluZyxcbiAqIG5vcnRoaW5nIGFuZCB6b25lIG51bWJlciB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGVhc3RpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBub3J0aGluZ1xuICogQHBhcmFtIHtudW1iZXJ9IHpvbmVOdW1iZXJcbiAqIEByZXR1cm4gdGhlIHR3byBsZXR0ZXIgMTAwayBkZXNpZ25hdG9yIGZvciB0aGUgZ2l2ZW4gVVRNIGxvY2F0aW9uLlxuICovXG5mdW5jdGlvbiBnZXQxMDBrSUQoZWFzdGluZywgbm9ydGhpbmcsIHpvbmVOdW1iZXIpIHtcbiAgdmFyIHNldFBhcm0gPSBnZXQxMDBrU2V0Rm9yWm9uZSh6b25lTnVtYmVyKTtcbiAgdmFyIHNldENvbHVtbiA9IE1hdGguZmxvb3IoZWFzdGluZyAvIDEwMDAwMCk7XG4gIHZhciBzZXRSb3cgPSBNYXRoLmZsb29yKG5vcnRoaW5nIC8gMTAwMDAwKSAlIDIwO1xuICByZXR1cm4gZ2V0TGV0dGVyMTAwa0lEKHNldENvbHVtbiwgc2V0Um93LCBzZXRQYXJtKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIFVUTSB6b25lIG51bWJlciwgZmlndXJlIG91dCB0aGUgTUdSUyAxMDBLIHNldCBpdCBpcyBpbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGkgQW4gVVRNIHpvbmUgbnVtYmVyLlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgMTAwayBzZXQgdGhlIFVUTSB6b25lIGlzIGluLlxuICovXG5mdW5jdGlvbiBnZXQxMDBrU2V0Rm9yWm9uZShpKSB7XG4gIHZhciBzZXRQYXJtID0gaSAlIE5VTV8xMDBLX1NFVFM7XG4gIGlmIChzZXRQYXJtID09PSAwKSB7XG4gICAgc2V0UGFybSA9IE5VTV8xMDBLX1NFVFM7XG4gIH1cblxuICByZXR1cm4gc2V0UGFybTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHR3by1sZXR0ZXIgTUdSUyAxMDBrIGRlc2lnbmF0b3IgZ2l2ZW4gaW5mb3JtYXRpb25cbiAqIHRyYW5zbGF0ZWQgZnJvbSB0aGUgVVRNIG5vcnRoaW5nLCBlYXN0aW5nIGFuZCB6b25lIG51bWJlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbiB0aGUgY29sdW1uIGluZGV4IGFzIGl0IHJlbGF0ZXMgdG8gdGhlIE1HUlNcbiAqICAgICAgICAxMDBrIHNldCBzcHJlYWRzaGVldCwgY3JlYXRlZCBmcm9tIHRoZSBVVE0gZWFzdGluZy5cbiAqICAgICAgICBWYWx1ZXMgYXJlIDEtOC5cbiAqIEBwYXJhbSB7bnVtYmVyfSByb3cgdGhlIHJvdyBpbmRleCBhcyBpdCByZWxhdGVzIHRvIHRoZSBNR1JTIDEwMGsgc2V0XG4gKiAgICAgICAgc3ByZWFkc2hlZXQsIGNyZWF0ZWQgZnJvbSB0aGUgVVRNIG5vcnRoaW5nIHZhbHVlLiBWYWx1ZXNcbiAqICAgICAgICBhcmUgZnJvbSAwLTE5LlxuICogQHBhcmFtIHtudW1iZXJ9IHBhcm0gdGhlIHNldCBibG9jaywgYXMgaXQgcmVsYXRlcyB0byB0aGUgTUdSUyAxMDBrIHNldFxuICogICAgICAgIHNwcmVhZHNoZWV0LCBjcmVhdGVkIGZyb20gdGhlIFVUTSB6b25lLiBWYWx1ZXMgYXJlIGZyb21cbiAqICAgICAgICAxLTYwLlxuICogQHJldHVybiB0d28gbGV0dGVyIE1HUlMgMTAwayBjb2RlLlxuICovXG5mdW5jdGlvbiBnZXRMZXR0ZXIxMDBrSUQoY29sdW1uLCByb3csIHBhcm0pIHtcbiAgLy8gY29sT3JpZ2luIGFuZCByb3dPcmlnaW4gYXJlIHRoZSBsZXR0ZXJzIGF0IHRoZSBvcmlnaW4gb2YgdGhlIHNldFxuICB2YXIgaW5kZXggPSBwYXJtIC0gMTtcbiAgdmFyIGNvbE9yaWdpbiA9IFNFVF9PUklHSU5fQ09MVU1OX0xFVFRFUlMuY2hhckNvZGVBdChpbmRleCk7XG4gIHZhciByb3dPcmlnaW4gPSBTRVRfT1JJR0lOX1JPV19MRVRURVJTLmNoYXJDb2RlQXQoaW5kZXgpO1xuXG4gIC8vIGNvbEludCBhbmQgcm93SW50IGFyZSB0aGUgbGV0dGVycyB0byBidWlsZCB0byByZXR1cm5cbiAgdmFyIGNvbEludCA9IGNvbE9yaWdpbiArIGNvbHVtbiAtIDE7XG4gIHZhciByb3dJbnQgPSByb3dPcmlnaW4gKyByb3c7XG4gIHZhciByb2xsb3ZlciA9IGZhbHNlO1xuXG4gIGlmIChjb2xJbnQgPiBaKSB7XG4gICAgY29sSW50ID0gY29sSW50IC0gWiArIEEgLSAxO1xuICAgIHJvbGxvdmVyID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjb2xJbnQgPT09IEkgfHwgKGNvbE9yaWdpbiA8IEkgJiYgY29sSW50ID4gSSkgfHwgKChjb2xJbnQgPiBJIHx8IGNvbE9yaWdpbiA8IEkpICYmIHJvbGxvdmVyKSkge1xuICAgIGNvbEludCsrO1xuICB9XG5cbiAgaWYgKGNvbEludCA9PT0gTyB8fCAoY29sT3JpZ2luIDwgTyAmJiBjb2xJbnQgPiBPKSB8fCAoKGNvbEludCA+IE8gfHwgY29sT3JpZ2luIDwgTykgJiYgcm9sbG92ZXIpKSB7XG4gICAgY29sSW50Kys7XG5cbiAgICBpZiAoY29sSW50ID09PSBJKSB7XG4gICAgICBjb2xJbnQrKztcbiAgICB9XG4gIH1cblxuICBpZiAoY29sSW50ID4gWikge1xuICAgIGNvbEludCA9IGNvbEludCAtIFogKyBBIC0gMTtcbiAgfVxuXG4gIGlmIChyb3dJbnQgPiBWKSB7XG4gICAgcm93SW50ID0gcm93SW50IC0gViArIEEgLSAxO1xuICAgIHJvbGxvdmVyID0gdHJ1ZTtcbiAgfVxuICBlbHNlIHtcbiAgICByb2xsb3ZlciA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCgocm93SW50ID09PSBJKSB8fCAoKHJvd09yaWdpbiA8IEkpICYmIChyb3dJbnQgPiBJKSkpIHx8ICgoKHJvd0ludCA+IEkpIHx8IChyb3dPcmlnaW4gPCBJKSkgJiYgcm9sbG92ZXIpKSB7XG4gICAgcm93SW50Kys7XG4gIH1cblxuICBpZiAoKChyb3dJbnQgPT09IE8pIHx8ICgocm93T3JpZ2luIDwgTykgJiYgKHJvd0ludCA+IE8pKSkgfHwgKCgocm93SW50ID4gTykgfHwgKHJvd09yaWdpbiA8IE8pKSAmJiByb2xsb3ZlcikpIHtcbiAgICByb3dJbnQrKztcblxuICAgIGlmIChyb3dJbnQgPT09IEkpIHtcbiAgICAgIHJvd0ludCsrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyb3dJbnQgPiBWKSB7XG4gICAgcm93SW50ID0gcm93SW50IC0gViArIEEgLSAxO1xuICB9XG5cbiAgdmFyIHR3b0xldHRlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29sSW50KSArIFN0cmluZy5mcm9tQ2hhckNvZGUocm93SW50KTtcbiAgcmV0dXJuIHR3b0xldHRlcjtcbn1cblxuLyoqXG4gKiBEZWNvZGUgdGhlIFVUTSBwYXJhbWV0ZXJzIGZyb20gYSBNR1JTIHN0cmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IG1ncnNTdHJpbmcgYW4gVVBQRVJDQVNFIGNvb3JkaW5hdGUgc3RyaW5nIGlzIGV4cGVjdGVkLlxuICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3QgbGl0ZXJhbCB3aXRoIGVhc3RpbmcsIG5vcnRoaW5nLCB6b25lTGV0dGVyLFxuICogICAgIHpvbmVOdW1iZXIgYW5kIGFjY3VyYWN5IChpbiBtZXRlcnMpIHByb3BlcnRpZXMuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShtZ3JzU3RyaW5nKSB7XG5cbiAgaWYgKG1ncnNTdHJpbmcgJiYgbWdyc1N0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyAoXCJNR1JTUG9pbnQgY292ZXJ0aW5nIGZyb20gbm90aGluZ1wiKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBtZ3JzU3RyaW5nLmxlbmd0aDtcblxuICB2YXIgaHVuSyA9IG51bGw7XG4gIHZhciBzYiA9IFwiXCI7XG4gIHZhciB0ZXN0Q2hhcjtcbiAgdmFyIGkgPSAwO1xuXG4gIC8vIGdldCBab25lIG51bWJlclxuICB3aGlsZSAoISgvW0EtWl0vKS50ZXN0KHRlc3RDaGFyID0gbWdyc1N0cmluZy5jaGFyQXQoaSkpKSB7XG4gICAgaWYgKGkgPj0gMikge1xuICAgICAgdGhyb3cgKFwiTUdSU1BvaW50IGJhZCBjb252ZXJzaW9uIGZyb206IFwiICsgbWdyc1N0cmluZyk7XG4gICAgfVxuICAgIHNiICs9IHRlc3RDaGFyO1xuICAgIGkrKztcbiAgfVxuXG4gIHZhciB6b25lTnVtYmVyID0gcGFyc2VJbnQoc2IsIDEwKTtcblxuICBpZiAoaSA9PT0gMCB8fCBpICsgMyA+IGxlbmd0aCkge1xuICAgIC8vIEEgZ29vZCBNR1JTIHN0cmluZyBoYXMgdG8gYmUgNC01IGRpZ2l0cyBsb25nLFxuICAgIC8vICMjQUFBLyNBQUEgYXQgbGVhc3QuXG4gICAgdGhyb3cgKFwiTUdSU1BvaW50IGJhZCBjb252ZXJzaW9uIGZyb206IFwiICsgbWdyc1N0cmluZyk7XG4gIH1cblxuICB2YXIgem9uZUxldHRlciA9IG1ncnNTdHJpbmcuY2hhckF0KGkrKyk7XG5cbiAgLy8gU2hvdWxkIHdlIGNoZWNrIHRoZSB6b25lIGxldHRlciBoZXJlPyBXaHkgbm90LlxuICBpZiAoem9uZUxldHRlciA8PSAnQScgfHwgem9uZUxldHRlciA9PT0gJ0InIHx8IHpvbmVMZXR0ZXIgPT09ICdZJyB8fCB6b25lTGV0dGVyID49ICdaJyB8fCB6b25lTGV0dGVyID09PSAnSScgfHwgem9uZUxldHRlciA9PT0gJ08nKSB7XG4gICAgdGhyb3cgKFwiTUdSU1BvaW50IHpvbmUgbGV0dGVyIFwiICsgem9uZUxldHRlciArIFwiIG5vdCBoYW5kbGVkOiBcIiArIG1ncnNTdHJpbmcpO1xuICB9XG5cbiAgaHVuSyA9IG1ncnNTdHJpbmcuc3Vic3RyaW5nKGksIGkgKz0gMik7XG5cbiAgdmFyIHNldCA9IGdldDEwMGtTZXRGb3Jab25lKHpvbmVOdW1iZXIpO1xuXG4gIHZhciBlYXN0MTAwayA9IGdldEVhc3RpbmdGcm9tQ2hhcihodW5LLmNoYXJBdCgwKSwgc2V0KTtcbiAgdmFyIG5vcnRoMTAwayA9IGdldE5vcnRoaW5nRnJvbUNoYXIoaHVuSy5jaGFyQXQoMSksIHNldCk7XG5cbiAgLy8gV2UgaGF2ZSBhIGJ1ZyB3aGVyZSB0aGUgbm9ydGhpbmcgbWF5IGJlIDIwMDAwMDAgdG9vIGxvdy5cbiAgLy8gSG93XG4gIC8vIGRvIHdlIGtub3cgd2hlbiB0byByb2xsIG92ZXI/XG5cbiAgd2hpbGUgKG5vcnRoMTAwayA8IGdldE1pbk5vcnRoaW5nKHpvbmVMZXR0ZXIpKSB7XG4gICAgbm9ydGgxMDBrICs9IDIwMDAwMDA7XG4gIH1cblxuICAvLyBjYWxjdWxhdGUgdGhlIGNoYXIgaW5kZXggZm9yIGVhc3Rpbmcvbm9ydGhpbmcgc2VwYXJhdG9yXG4gIHZhciByZW1haW5kZXIgPSBsZW5ndGggLSBpO1xuXG4gIGlmIChyZW1haW5kZXIgJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgKFwiTUdSU1BvaW50IGhhcyB0byBoYXZlIGFuIGV2ZW4gbnVtYmVyIFxcbm9mIGRpZ2l0cyBhZnRlciB0aGUgem9uZSBsZXR0ZXIgYW5kIHR3byAxMDBrbSBsZXR0ZXJzIC0gZnJvbnQgXFxuaGFsZiBmb3IgZWFzdGluZyBtZXRlcnMsIHNlY29uZCBoYWxmIGZvciBcXG5ub3J0aGluZyBtZXRlcnNcIiArIG1ncnNTdHJpbmcpO1xuICB9XG5cbiAgdmFyIHNlcCA9IHJlbWFpbmRlciAvIDI7XG5cbiAgdmFyIHNlcEVhc3RpbmcgPSAwLjA7XG4gIHZhciBzZXBOb3J0aGluZyA9IDAuMDtcbiAgdmFyIGFjY3VyYWN5Qm9udXMsIHNlcEVhc3RpbmdTdHJpbmcsIHNlcE5vcnRoaW5nU3RyaW5nLCBlYXN0aW5nLCBub3J0aGluZztcbiAgaWYgKHNlcCA+IDApIHtcbiAgICBhY2N1cmFjeUJvbnVzID0gMTAwMDAwLjAgLyBNYXRoLnBvdygxMCwgc2VwKTtcbiAgICBzZXBFYXN0aW5nU3RyaW5nID0gbWdyc1N0cmluZy5zdWJzdHJpbmcoaSwgaSArIHNlcCk7XG4gICAgc2VwRWFzdGluZyA9IHBhcnNlRmxvYXQoc2VwRWFzdGluZ1N0cmluZykgKiBhY2N1cmFjeUJvbnVzO1xuICAgIHNlcE5vcnRoaW5nU3RyaW5nID0gbWdyc1N0cmluZy5zdWJzdHJpbmcoaSArIHNlcCk7XG4gICAgc2VwTm9ydGhpbmcgPSBwYXJzZUZsb2F0KHNlcE5vcnRoaW5nU3RyaW5nKSAqIGFjY3VyYWN5Qm9udXM7XG4gIH1cblxuICBlYXN0aW5nID0gc2VwRWFzdGluZyArIGVhc3QxMDBrO1xuICBub3J0aGluZyA9IHNlcE5vcnRoaW5nICsgbm9ydGgxMDBrO1xuXG4gIHJldHVybiB7XG4gICAgZWFzdGluZzogZWFzdGluZyxcbiAgICBub3J0aGluZzogbm9ydGhpbmcsXG4gICAgem9uZUxldHRlcjogem9uZUxldHRlcixcbiAgICB6b25lTnVtYmVyOiB6b25lTnVtYmVyLFxuICAgIGFjY3VyYWN5OiBhY2N1cmFjeUJvbnVzXG4gIH07XG59XG5cbi8qKlxuICogR2l2ZW4gdGhlIGZpcnN0IGxldHRlciBmcm9tIGEgdHdvLWxldHRlciBNR1JTIDEwMGsgem9uZSwgYW5kIGdpdmVuIHRoZVxuICogTUdSUyB0YWJsZSBzZXQgZm9yIHRoZSB6b25lIG51bWJlciwgZmlndXJlIG91dCB0aGUgZWFzdGluZyB2YWx1ZSB0aGF0XG4gKiBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIG90aGVyLCBzZWNvbmRhcnkgZWFzdGluZyB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtjaGFyfSBlIFRoZSBmaXJzdCBsZXR0ZXIgZnJvbSBhIHR3by1sZXR0ZXIgTUdSUyAxMDDCtGsgem9uZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzZXQgVGhlIE1HUlMgdGFibGUgc2V0IGZvciB0aGUgem9uZSBudW1iZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlYXN0aW5nIHZhbHVlIGZvciB0aGUgZ2l2ZW4gbGV0dGVyIGFuZCBzZXQuXG4gKi9cbmZ1bmN0aW9uIGdldEVhc3RpbmdGcm9tQ2hhcihlLCBzZXQpIHtcbiAgLy8gY29sT3JpZ2luIGlzIHRoZSBsZXR0ZXIgYXQgdGhlIG9yaWdpbiBvZiB0aGUgc2V0IGZvciB0aGVcbiAgLy8gY29sdW1uXG4gIHZhciBjdXJDb2wgPSBTRVRfT1JJR0lOX0NPTFVNTl9MRVRURVJTLmNoYXJDb2RlQXQoc2V0IC0gMSk7XG4gIHZhciBlYXN0aW5nVmFsdWUgPSAxMDAwMDAuMDtcbiAgdmFyIHJld2luZE1hcmtlciA9IGZhbHNlO1xuXG4gIHdoaWxlIChjdXJDb2wgIT09IGUuY2hhckNvZGVBdCgwKSkge1xuICAgIGN1ckNvbCsrO1xuICAgIGlmIChjdXJDb2wgPT09IEkpIHtcbiAgICAgIGN1ckNvbCsrO1xuICAgIH1cbiAgICBpZiAoY3VyQ29sID09PSBPKSB7XG4gICAgICBjdXJDb2wrKztcbiAgICB9XG4gICAgaWYgKGN1ckNvbCA+IFopIHtcbiAgICAgIGlmIChyZXdpbmRNYXJrZXIpIHtcbiAgICAgICAgdGhyb3cgKFwiQmFkIGNoYXJhY3RlcjogXCIgKyBlKTtcbiAgICAgIH1cbiAgICAgIGN1ckNvbCA9IEE7XG4gICAgICByZXdpbmRNYXJrZXIgPSB0cnVlO1xuICAgIH1cbiAgICBlYXN0aW5nVmFsdWUgKz0gMTAwMDAwLjA7XG4gIH1cblxuICByZXR1cm4gZWFzdGluZ1ZhbHVlO1xufVxuXG4vKipcbiAqIEdpdmVuIHRoZSBzZWNvbmQgbGV0dGVyIGZyb20gYSB0d28tbGV0dGVyIE1HUlMgMTAwayB6b25lLCBhbmQgZ2l2ZW4gdGhlXG4gKiBNR1JTIHRhYmxlIHNldCBmb3IgdGhlIHpvbmUgbnVtYmVyLCBmaWd1cmUgb3V0IHRoZSBub3J0aGluZyB2YWx1ZSB0aGF0XG4gKiBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIG90aGVyLCBzZWNvbmRhcnkgbm9ydGhpbmcgdmFsdWUuIFlvdSBoYXZlIHRvXG4gKiByZW1lbWJlciB0aGF0IE5vcnRoaW5ncyBhcmUgZGV0ZXJtaW5lZCBmcm9tIHRoZSBlcXVhdG9yLCBhbmQgdGhlIHZlcnRpY2FsXG4gKiBjeWNsZSBvZiBsZXR0ZXJzIG1lYW4gYSAyMDAwMDAwIGFkZGl0aW9uYWwgbm9ydGhpbmcgbWV0ZXJzLiBUaGlzIGhhcHBlbnNcbiAqIGFwcHJveC4gZXZlcnkgMTggZGVncmVlcyBvZiBsYXRpdHVkZS4gVGhpcyBtZXRob2QgZG9lcyAqTk9UKiBjb3VudCBhbnlcbiAqIGFkZGl0aW9uYWwgbm9ydGhpbmdzLiBZb3UgaGF2ZSB0byBmaWd1cmUgb3V0IGhvdyBtYW55IDIwMDAwMDAgbWV0ZXJzIG5lZWRcbiAqIHRvIGJlIGFkZGVkIGZvciB0aGUgem9uZSBsZXR0ZXIgb2YgdGhlIE1HUlMgY29vcmRpbmF0ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtjaGFyfSBuIFNlY29uZCBsZXR0ZXIgb2YgdGhlIE1HUlMgMTAwayB6b25lXG4gKiBAcGFyYW0ge251bWJlcn0gc2V0IFRoZSBNR1JTIHRhYmxlIHNldCBudW1iZXIsIHdoaWNoIGlzIGRlcGVuZGVudCBvbiB0aGVcbiAqICAgICBVVE0gem9uZSBudW1iZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBub3J0aGluZyB2YWx1ZSBmb3IgdGhlIGdpdmVuIGxldHRlciBhbmQgc2V0LlxuICovXG5mdW5jdGlvbiBnZXROb3J0aGluZ0Zyb21DaGFyKG4sIHNldCkge1xuXG4gIGlmIChuID4gJ1YnKSB7XG4gICAgdGhyb3cgKFwiTUdSU1BvaW50IGdpdmVuIGludmFsaWQgTm9ydGhpbmcgXCIgKyBuKTtcbiAgfVxuXG4gIC8vIHJvd09yaWdpbiBpcyB0aGUgbGV0dGVyIGF0IHRoZSBvcmlnaW4gb2YgdGhlIHNldCBmb3IgdGhlXG4gIC8vIGNvbHVtblxuICB2YXIgY3VyUm93ID0gU0VUX09SSUdJTl9ST1dfTEVUVEVSUy5jaGFyQ29kZUF0KHNldCAtIDEpO1xuICB2YXIgbm9ydGhpbmdWYWx1ZSA9IDAuMDtcbiAgdmFyIHJld2luZE1hcmtlciA9IGZhbHNlO1xuXG4gIHdoaWxlIChjdXJSb3cgIT09IG4uY2hhckNvZGVBdCgwKSkge1xuICAgIGN1clJvdysrO1xuICAgIGlmIChjdXJSb3cgPT09IEkpIHtcbiAgICAgIGN1clJvdysrO1xuICAgIH1cbiAgICBpZiAoY3VyUm93ID09PSBPKSB7XG4gICAgICBjdXJSb3crKztcbiAgICB9XG4gICAgLy8gZml4aW5nIGEgYnVnIG1ha2luZyB3aG9sZSBhcHBsaWNhdGlvbiBoYW5nIGluIHRoaXMgbG9vcFxuICAgIC8vIHdoZW4gJ24nIGlzIGEgd3JvbmcgY2hhcmFjdGVyXG4gICAgaWYgKGN1clJvdyA+IFYpIHtcbiAgICAgIGlmIChyZXdpbmRNYXJrZXIpIHsgLy8gbWFraW5nIHN1cmUgdGhhdCB0aGlzIGxvb3AgZW5kc1xuICAgICAgICB0aHJvdyAoXCJCYWQgY2hhcmFjdGVyOiBcIiArIG4pO1xuICAgICAgfVxuICAgICAgY3VyUm93ID0gQTtcbiAgICAgIHJld2luZE1hcmtlciA9IHRydWU7XG4gICAgfVxuICAgIG5vcnRoaW5nVmFsdWUgKz0gMTAwMDAwLjA7XG4gIH1cblxuICByZXR1cm4gbm9ydGhpbmdWYWx1ZTtcbn1cblxuLyoqXG4gKiBUaGUgZnVuY3Rpb24gZ2V0TWluTm9ydGhpbmcgcmV0dXJucyB0aGUgbWluaW11bSBub3J0aGluZyB2YWx1ZSBvZiBhIE1HUlNcbiAqIHpvbmUuXG4gKlxuICogUG9ydGVkIGZyb20gR2VvdHJhbnMnIGMgTGF0dGl0dWRlX0JhbmRfVmFsdWUgc3RydWN0dXJlIHRhYmxlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2NoYXJ9IHpvbmVMZXR0ZXIgVGhlIE1HUlMgem9uZSB0byBnZXQgdGhlIG1pbiBub3J0aGluZyBmb3IuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldE1pbk5vcnRoaW5nKHpvbmVMZXR0ZXIpIHtcbiAgdmFyIG5vcnRoaW5nO1xuICBzd2l0Y2ggKHpvbmVMZXR0ZXIpIHtcbiAgY2FzZSAnQyc6XG4gICAgbm9ydGhpbmcgPSAxMTAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ0QnOlxuICAgIG5vcnRoaW5nID0gMjAwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdFJzpcbiAgICBub3J0aGluZyA9IDI4MDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnRic6XG4gICAgbm9ydGhpbmcgPSAzNzAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ0cnOlxuICAgIG5vcnRoaW5nID0gNDYwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdIJzpcbiAgICBub3J0aGluZyA9IDU1MDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnSic6XG4gICAgbm9ydGhpbmcgPSA2NDAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ0snOlxuICAgIG5vcnRoaW5nID0gNzMwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdMJzpcbiAgICBub3J0aGluZyA9IDgyMDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnTSc6XG4gICAgbm9ydGhpbmcgPSA5MTAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ04nOlxuICAgIG5vcnRoaW5nID0gMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdQJzpcbiAgICBub3J0aGluZyA9IDgwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdRJzpcbiAgICBub3J0aGluZyA9IDE3MDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnUic6XG4gICAgbm9ydGhpbmcgPSAyNjAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ1MnOlxuICAgIG5vcnRoaW5nID0gMzUwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdUJzpcbiAgICBub3J0aGluZyA9IDQ0MDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnVSc6XG4gICAgbm9ydGhpbmcgPSA1MzAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ1YnOlxuICAgIG5vcnRoaW5nID0gNjIwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdXJzpcbiAgICBub3J0aGluZyA9IDcwMDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnWCc6XG4gICAgbm9ydGhpbmcgPSA3OTAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGRlZmF1bHQ6XG4gICAgbm9ydGhpbmcgPSAtMS4wO1xuICB9XG4gIGlmIChub3J0aGluZyA+PSAwLjApIHtcbiAgICByZXR1cm4gbm9ydGhpbmc7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgKFwiSW52YWxpZCB6b25lIGxldHRlcjogXCIgKyB6b25lTGV0dGVyKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQge3RvUG9pbnQsIGZvcndhcmR9IGZyb20gJ21ncnMnO1xuXG5mdW5jdGlvbiBQb2ludCh4LCB5LCB6KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQb2ludCkpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHgsIHksIHopO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgdGhpcy54ID0geFswXTtcbiAgICB0aGlzLnkgPSB4WzFdO1xuICAgIHRoaXMueiA9IHhbMl0gfHwgMC4wO1xuICB9IGVsc2UgaWYodHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG4gICAgdGhpcy54ID0geC54O1xuICAgIHRoaXMueSA9IHgueTtcbiAgICB0aGlzLnogPSB4LnogfHwgMC4wO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB4ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgY29vcmRzID0geC5zcGxpdCgnLCcpO1xuICAgIHRoaXMueCA9IHBhcnNlRmxvYXQoY29vcmRzWzBdLCAxMCk7XG4gICAgdGhpcy55ID0gcGFyc2VGbG9hdChjb29yZHNbMV0sIDEwKTtcbiAgICB0aGlzLnogPSBwYXJzZUZsb2F0KGNvb3Jkc1syXSwgMTApIHx8IDAuMDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy56ID0geiB8fCAwLjA7XG4gIH1cbiAgY29uc29sZS53YXJuKCdwcm9qNC5Qb2ludCB3aWxsIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiAzLCB1c2UgcHJvajQudG9Qb2ludCcpO1xufVxuXG5Qb2ludC5mcm9tTUdSUyA9IGZ1bmN0aW9uKG1ncnNTdHIpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0b1BvaW50KG1ncnNTdHIpKTtcbn07XG5Qb2ludC5wcm90b3R5cGUudG9NR1JTID0gZnVuY3Rpb24oYWNjdXJhY3kpIHtcbiAgcmV0dXJuIGZvcndhcmQoW3RoaXMueCwgdGhpcy55XSwgYWNjdXJhY3kpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFBvaW50O1xuIiwidmFyIEMwMCA9IDE7XG52YXIgQzAyID0gMC4yNTtcbnZhciBDMDQgPSAwLjA0Njg3NTtcbnZhciBDMDYgPSAwLjAxOTUzMTI1O1xudmFyIEMwOCA9IDAuMDEwNjgxMTUyMzQzNzU7XG52YXIgQzIyID0gMC43NTtcbnZhciBDNDQgPSAwLjQ2ODc1O1xudmFyIEM0NiA9IDAuMDEzMDIwODMzMzMzMzMzMzMzMzM7XG52YXIgQzQ4ID0gMC4wMDcxMjA3NjgyMjkxNjY2NjY2NjtcbnZhciBDNjYgPSAwLjM2NDU4MzMzMzMzMzMzMzMzMzMzO1xudmFyIEM2OCA9IDAuMDA1Njk2NjE0NTgzMzMzMzMzMzM7XG52YXIgQzg4ID0gMC4zMDc2MTcxODc1O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlcykge1xuICB2YXIgZW4gPSBbXTtcbiAgZW5bMF0gPSBDMDAgLSBlcyAqIChDMDIgKyBlcyAqIChDMDQgKyBlcyAqIChDMDYgKyBlcyAqIEMwOCkpKTtcbiAgZW5bMV0gPSBlcyAqIChDMjIgLSBlcyAqIChDMDQgKyBlcyAqIChDMDYgKyBlcyAqIEMwOCkpKTtcbiAgdmFyIHQgPSBlcyAqIGVzO1xuICBlblsyXSA9IHQgKiAoQzQ0IC0gZXMgKiAoQzQ2ICsgZXMgKiBDNDgpKTtcbiAgdCAqPSBlcztcbiAgZW5bM10gPSB0ICogKEM2NiAtIGVzICogQzY4KTtcbiAgZW5bNF0gPSB0ICogZXMgKiBDODg7XG4gIHJldHVybiBlbjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwaGksIHNwaGksIGNwaGksIGVuKSB7XG4gIGNwaGkgKj0gc3BoaTtcbiAgc3BoaSAqPSBzcGhpO1xuICByZXR1cm4gKGVuWzBdICogcGhpIC0gY3BoaSAqIChlblsxXSArIHNwaGkgKiAoZW5bMl0gKyBzcGhpICogKGVuWzNdICsgc3BoaSAqIGVuWzRdKSkpKTtcbn0iLCJpbXBvcnQgcGpfbWxmbiBmcm9tIFwiLi9wal9tbGZuXCI7XG5pbXBvcnQge0VQU0xOfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxudmFyIE1BWF9JVEVSID0gMjA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyZywgZXMsIGVuKSB7XG4gIHZhciBrID0gMSAvICgxIC0gZXMpO1xuICB2YXIgcGhpID0gYXJnO1xuICBmb3IgKHZhciBpID0gTUFYX0lURVI7IGk7IC0taSkgeyAvKiByYXJlbHkgZ29lcyBvdmVyIDIgaXRlcmF0aW9ucyAqL1xuICAgIHZhciBzID0gTWF0aC5zaW4ocGhpKTtcbiAgICB2YXIgdCA9IDEgLSBlcyAqIHMgKiBzO1xuICAgIC8vdCA9IHRoaXMucGpfbWxmbihwaGksIHMsIE1hdGguY29zKHBoaSksIGVuKSAtIGFyZztcbiAgICAvL3BoaSAtPSB0ICogKHQgKiBNYXRoLnNxcnQodCkpICogaztcbiAgICB0ID0gKHBqX21sZm4ocGhpLCBzLCBNYXRoLmNvcyhwaGkpLCBlbikgLSBhcmcpICogKHQgKiBNYXRoLnNxcnQodCkpICogaztcbiAgICBwaGkgLT0gdDtcbiAgICBpZiAoTWF0aC5hYnModCkgPCBFUFNMTikge1xuICAgICAgcmV0dXJuIHBoaTtcbiAgICB9XG4gIH1cbiAgLy8uLnJlcG9ydEVycm9yKFwiY2Fzczpwal9pbnZfbWxmbjogQ29udmVyZ2VuY2UgZXJyb3JcIik7XG4gIHJldHVybiBwaGk7XG59XG4iLCIvLyBIZWF2aWx5IGJhc2VkIG9uIHRoaXMgdG1lcmMgcHJvamVjdGlvbiBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21ibG9jaC9tYXBzaGFwZXItcHJvai9ibG9iL21hc3Rlci9zcmMvcHJvamVjdGlvbnMvdG1lcmMuanNcblxuaW1wb3J0IHBqX2VuZm4gZnJvbSAnLi4vY29tbW9uL3BqX2VuZm4nO1xuaW1wb3J0IHBqX21sZm4gZnJvbSAnLi4vY29tbW9uL3BqX21sZm4nO1xuaW1wb3J0IHBqX2ludl9tbGZuIGZyb20gJy4uL2NvbW1vbi9wal9pbnZfbWxmbic7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbmltcG9ydCB7RVBTTE4sIEhBTEZfUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuaW1wb3J0IHNpZ24gZnJvbSAnLi4vY29tbW9uL3NpZ24nO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgdGhpcy54MCA9IHRoaXMueDAgIT09IHVuZGVmaW5lZCA/IHRoaXMueDAgOiAwO1xuICB0aGlzLnkwID0gdGhpcy55MCAhPT0gdW5kZWZpbmVkID8gdGhpcy55MCA6IDA7XG4gIHRoaXMubG9uZzAgPSB0aGlzLmxvbmcwICE9PSB1bmRlZmluZWQgPyB0aGlzLmxvbmcwIDogMDtcbiAgdGhpcy5sYXQwID0gdGhpcy5sYXQwICE9PSB1bmRlZmluZWQgPyB0aGlzLmxhdDAgOiAwO1xuXG4gIGlmICh0aGlzLmVzKSB7XG4gICAgdGhpcy5lbiA9IHBqX2VuZm4odGhpcy5lcyk7XG4gICAgdGhpcy5tbDAgPSBwal9tbGZuKHRoaXMubGF0MCwgTWF0aC5zaW4odGhpcy5sYXQwKSwgTWF0aC5jb3ModGhpcy5sYXQwKSwgdGhpcy5lbik7XG4gIH1cbn1cblxuLyoqXG4gICAgVHJhbnN2ZXJzZSBNZXJjYXRvciBGb3J3YXJkICAtIGxvbmcvbGF0IHRvIHgveVxuICAgIGxvbmcvbGF0IGluIHJhZGlhbnNcbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcblxuICB2YXIgZGVsdGFfbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgdmFyIGNvbjtcbiAgdmFyIHgsIHk7XG4gIHZhciBzaW5fcGhpID0gTWF0aC5zaW4obGF0KTtcbiAgdmFyIGNvc19waGkgPSBNYXRoLmNvcyhsYXQpO1xuXG4gIGlmICghdGhpcy5lcykge1xuICAgIHZhciBiID0gY29zX3BoaSAqIE1hdGguc2luKGRlbHRhX2xvbik7XG5cbiAgICBpZiAoKE1hdGguYWJzKE1hdGguYWJzKGIpIC0gMSkpIDwgRVBTTE4pIHtcbiAgICAgIHJldHVybiAoOTMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHggPSAwLjUgKiB0aGlzLmEgKiB0aGlzLmswICogTWF0aC5sb2coKDEgKyBiKSAvICgxIC0gYikpICsgdGhpcy54MDtcbiAgICAgIHkgPSBjb3NfcGhpICogTWF0aC5jb3MoZGVsdGFfbG9uKSAvIE1hdGguc3FydCgxIC0gTWF0aC5wb3coYiwgMikpO1xuICAgICAgYiA9IE1hdGguYWJzKHkpO1xuXG4gICAgICBpZiAoYiA+PSAxKSB7XG4gICAgICAgIGlmICgoYiAtIDEpID4gRVBTTE4pIHtcbiAgICAgICAgICByZXR1cm4gKDkzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB5ID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHkgPSBNYXRoLmFjb3MoeSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXQgPCAwKSB7XG4gICAgICAgIHkgPSAteTtcbiAgICAgIH1cblxuICAgICAgeSA9IHRoaXMuYSAqIHRoaXMuazAgKiAoeSAtIHRoaXMubGF0MCkgKyB0aGlzLnkwO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgYWwgPSBjb3NfcGhpICogZGVsdGFfbG9uO1xuICAgIHZhciBhbHMgPSBNYXRoLnBvdyhhbCwgMik7XG4gICAgdmFyIGMgPSB0aGlzLmVwMiAqIE1hdGgucG93KGNvc19waGksIDIpO1xuICAgIHZhciBjcyA9IE1hdGgucG93KGMsIDIpO1xuICAgIHZhciB0cSA9IE1hdGguYWJzKGNvc19waGkpID4gRVBTTE4gPyBNYXRoLnRhbihsYXQpIDogMDtcbiAgICB2YXIgdCA9IE1hdGgucG93KHRxLCAyKTtcbiAgICB2YXIgdHMgPSBNYXRoLnBvdyh0LCAyKTtcbiAgICBjb24gPSAxIC0gdGhpcy5lcyAqIE1hdGgucG93KHNpbl9waGksIDIpO1xuICAgIGFsID0gYWwgLyBNYXRoLnNxcnQoY29uKTtcbiAgICB2YXIgbWwgPSBwal9tbGZuKGxhdCwgc2luX3BoaSwgY29zX3BoaSwgdGhpcy5lbik7XG5cbiAgICB4ID0gdGhpcy5hICogKHRoaXMuazAgKiBhbCAqICgxICtcbiAgICAgIGFscyAvIDYgKiAoMSAtIHQgKyBjICtcbiAgICAgIGFscyAvIDIwICogKDUgLSAxOCAqIHQgKyB0cyArIDE0ICogYyAtIDU4ICogdCAqIGMgK1xuICAgICAgYWxzIC8gNDIgKiAoNjEgKyAxNzkgKiB0cyAtIHRzICogdCAtIDQ3OSAqIHQpKSkpKSArXG4gICAgICB0aGlzLngwO1xuXG4gICAgeSA9IHRoaXMuYSAqICh0aGlzLmswICogKG1sIC0gdGhpcy5tbDAgK1xuICAgICAgc2luX3BoaSAqIGRlbHRhX2xvbiAqIGFsIC8gMiAqICgxICtcbiAgICAgIGFscyAvIDEyICogKDUgLSB0ICsgOSAqIGMgKyA0ICogY3MgK1xuICAgICAgYWxzIC8gMzAgKiAoNjEgKyB0cyAtIDU4ICogdCArIDI3MCAqIGMgLSAzMzAgKiB0ICogYyArXG4gICAgICBhbHMgLyA1NiAqICgxMzg1ICsgNTQzICogdHMgLSB0cyAqIHQgLSAzMTExICogdCkpKSkpKSArXG4gICAgICB0aGlzLnkwO1xuICB9XG5cbiAgcC54ID0geDtcbiAgcC55ID0geTtcblxuICByZXR1cm4gcDtcbn1cblxuLyoqXG4gICAgVHJhbnN2ZXJzZSBNZXJjYXRvciBJbnZlcnNlICAtICB4L3kgdG8gbG9uZy9sYXRcbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIGNvbiwgcGhpO1xuICB2YXIgbGF0LCBsb247XG4gIHZhciB4ID0gKHAueCAtIHRoaXMueDApICogKDEgLyB0aGlzLmEpO1xuICB2YXIgeSA9IChwLnkgLSB0aGlzLnkwKSAqICgxIC8gdGhpcy5hKTtcblxuICBpZiAoIXRoaXMuZXMpIHtcbiAgICB2YXIgZiA9IE1hdGguZXhwKHggLyB0aGlzLmswKTtcbiAgICB2YXIgZyA9IDAuNSAqIChmIC0gMSAvIGYpO1xuICAgIHZhciB0ZW1wID0gdGhpcy5sYXQwICsgeSAvIHRoaXMuazA7XG4gICAgdmFyIGggPSBNYXRoLmNvcyh0ZW1wKTtcbiAgICBjb24gPSBNYXRoLnNxcnQoKDEgLSBNYXRoLnBvdyhoLCAyKSkgLyAoMSArIE1hdGgucG93KGcsIDIpKSk7XG4gICAgbGF0ID0gTWF0aC5hc2luKGNvbik7XG5cbiAgICBpZiAoeSA8IDApIHtcbiAgICAgIGxhdCA9IC1sYXQ7XG4gICAgfVxuXG4gICAgaWYgKChnID09PSAwKSAmJiAoaCA9PT0gMCkpIHtcbiAgICAgIGxvbiA9IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbG9uID0gYWRqdXN0X2xvbihNYXRoLmF0YW4yKGcsIGgpICsgdGhpcy5sb25nMCk7XG4gICAgfVxuICB9XG4gIGVsc2UgeyAvLyBlbGxpcHNvaWRhbCBmb3JtXG4gICAgY29uID0gdGhpcy5tbDAgKyB5IC8gdGhpcy5rMDtcbiAgICBwaGkgPSBwal9pbnZfbWxmbihjb24sIHRoaXMuZXMsIHRoaXMuZW4pO1xuXG4gICAgaWYgKE1hdGguYWJzKHBoaSkgPCBIQUxGX1BJKSB7XG4gICAgICB2YXIgc2luX3BoaSA9IE1hdGguc2luKHBoaSk7XG4gICAgICB2YXIgY29zX3BoaSA9IE1hdGguY29zKHBoaSk7XG4gICAgICB2YXIgdGFuX3BoaSA9IE1hdGguYWJzKGNvc19waGkpID4gRVBTTE4gPyBNYXRoLnRhbihwaGkpIDogMDtcbiAgICAgIHZhciBjID0gdGhpcy5lcDIgKiBNYXRoLnBvdyhjb3NfcGhpLCAyKTtcbiAgICAgIHZhciBjcyA9IE1hdGgucG93KGMsIDIpO1xuICAgICAgdmFyIHQgPSBNYXRoLnBvdyh0YW5fcGhpLCAyKTtcbiAgICAgIHZhciB0cyA9IE1hdGgucG93KHQsIDIpO1xuICAgICAgY29uID0gMSAtIHRoaXMuZXMgKiBNYXRoLnBvdyhzaW5fcGhpLCAyKTtcbiAgICAgIHZhciBkID0geCAqIE1hdGguc3FydChjb24pIC8gdGhpcy5rMDtcbiAgICAgIHZhciBkcyA9IE1hdGgucG93KGQsIDIpO1xuICAgICAgY29uID0gY29uICogdGFuX3BoaTtcblxuICAgICAgbGF0ID0gcGhpIC0gKGNvbiAqIGRzIC8gKDEgLSB0aGlzLmVzKSkgKiAwLjUgKiAoMSAtXG4gICAgICAgIGRzIC8gMTIgKiAoNSArIDMgKiB0IC0gOSAqIGMgKiB0ICsgYyAtIDQgKiBjcyAtXG4gICAgICAgIGRzIC8gMzAgKiAoNjEgKyA5MCAqIHQgLSAyNTIgKiBjICogdCArIDQ1ICogdHMgKyA0NiAqIGMgLVxuICAgICAgICBkcyAvIDU2ICogKDEzODUgKyAzNjMzICogdCArIDQwOTUgKiB0cyArIDE1NzQgKiB0cyAqIHQpKSkpO1xuXG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyAoZCAqICgxIC1cbiAgICAgICAgZHMgLyA2ICogKDEgKyAyICogdCArIGMgLVxuICAgICAgICBkcyAvIDIwICogKDUgKyAyOCAqIHQgKyAyNCAqIHRzICsgOCAqIGMgKiB0ICsgNiAqIGMgLVxuICAgICAgICBkcyAvIDQyICogKDYxICsgNjYyICogdCArIDEzMjAgKiB0cyArIDcyMCAqIHRzICogdCkpKSkgLyBjb3NfcGhpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbGF0ID0gSEFMRl9QSSAqIHNpZ24oeSk7XG4gICAgICBsb24gPSAwO1xuICAgIH1cbiAgfVxuXG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuXG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiVHJhbnN2ZXJzZV9NZXJjYXRvclwiLCBcIlRyYW5zdmVyc2UgTWVyY2F0b3JcIiwgXCJ0bWVyY1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICB2YXIgciA9IE1hdGguZXhwKHgpO1xuICByID0gKHIgLSAxIC8gcikgLyAyO1xuICByZXR1cm4gcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIHggPSBNYXRoLmFicyh4KTtcbiAgeSA9IE1hdGguYWJzKHkpO1xuICB2YXIgYSA9IE1hdGgubWF4KHgsIHkpO1xuICB2YXIgYiA9IE1hdGgubWluKHgsIHkpIC8gKGEgPyBhIDogMSk7XG5cbiAgcmV0dXJuIGEgKiBNYXRoLnNxcnQoMSArIE1hdGgucG93KGIsIDIpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBwLCBCKSB7XG4gIHZhciBjb3NfMkIgPSAyICogTWF0aC5jb3MoMiAqIEIpO1xuICB2YXIgaSA9IHBwLmxlbmd0aCAtIDE7XG4gIHZhciBoMSA9IHBwW2ldO1xuICB2YXIgaDIgPSAwO1xuICB2YXIgaDtcblxuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBoID0gLWgyICsgY29zXzJCICogaDEgKyBwcFtpXTtcbiAgICBoMiA9IGgxO1xuICAgIGgxID0gaDtcbiAgfVxuXG4gIHJldHVybiAoQiArIGggKiBNYXRoLnNpbigyICogQikpO1xufVxuIiwiaW1wb3J0IHNpbmggZnJvbSAnLi9zaW5oJztcbmltcG9ydCBjb3NoIGZyb20gJy4vY29zaCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBwLCBhcmdfciwgYXJnX2kpIHtcbiAgdmFyIHNpbl9hcmdfciA9IE1hdGguc2luKGFyZ19yKTtcbiAgdmFyIGNvc19hcmdfciA9IE1hdGguY29zKGFyZ19yKTtcbiAgdmFyIHNpbmhfYXJnX2kgPSBzaW5oKGFyZ19pKTtcbiAgdmFyIGNvc2hfYXJnX2kgPSBjb3NoKGFyZ19pKTtcbiAgdmFyIHIgPSAyICogY29zX2FyZ19yICogY29zaF9hcmdfaTtcbiAgdmFyIGkgPSAtMiAqIHNpbl9hcmdfciAqIHNpbmhfYXJnX2k7XG4gIHZhciBqID0gcHAubGVuZ3RoIC0gMTtcbiAgdmFyIGhyID0gcHBbal07XG4gIHZhciBoaTEgPSAwO1xuICB2YXIgaHIxID0gMDtcbiAgdmFyIGhpID0gMDtcbiAgdmFyIGhyMjtcbiAgdmFyIGhpMjtcblxuICB3aGlsZSAoLS1qID49IDApIHtcbiAgICBocjIgPSBocjE7XG4gICAgaGkyID0gaGkxO1xuICAgIGhyMSA9IGhyO1xuICAgIGhpMSA9IGhpO1xuICAgIGhyID0gLWhyMiArIHIgKiBocjEgLSBpICogaGkxICsgcHBbal07XG4gICAgaGkgPSAtaGkyICsgaSAqIGhyMSArIHIgKiBoaTE7XG4gIH1cblxuICByID0gc2luX2FyZ19yICogY29zaF9hcmdfaTtcbiAgaSA9IGNvc19hcmdfciAqIHNpbmhfYXJnX2k7XG5cbiAgcmV0dXJuIFtyICogaHIgLSBpICogaGksIHIgKiBoaSArIGkgKiBocl07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHZhciByID0gTWF0aC5leHAoeCk7XG4gIHIgPSAociArIDEgLyByKSAvIDI7XG4gIHJldHVybiByO1xufSIsIi8vIEhlYXZpbHkgYmFzZWQgb24gdGhpcyBldG1lcmMgcHJvamVjdGlvbiBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21ibG9jaC9tYXBzaGFwZXItcHJvai9ibG9iL21hc3Rlci9zcmMvcHJvamVjdGlvbnMvZXRtZXJjLmpzXG5cbmltcG9ydCBzaW5oIGZyb20gJy4uL2NvbW1vbi9zaW5oJztcbmltcG9ydCBoeXBvdCBmcm9tICcuLi9jb21tb24vaHlwb3QnO1xuaW1wb3J0IGFzaW5oeSBmcm9tICcuLi9jb21tb24vYXNpbmh5JztcbmltcG9ydCBnYXRnIGZyb20gJy4uL2NvbW1vbi9nYXRnJztcbmltcG9ydCBjbGVucyBmcm9tICcuLi9jb21tb24vY2xlbnMnO1xuaW1wb3J0IGNsZW5zX2NtcGx4IGZyb20gJy4uL2NvbW1vbi9jbGVuc19jbXBseCc7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICBpZiAodGhpcy5lcyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuZXMgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW5jb3JyZWN0IGVsbGlwdGljYWwgdXNhZ2UnKTtcbiAgfVxuXG4gIHRoaXMueDAgPSB0aGlzLngwICE9PSB1bmRlZmluZWQgPyB0aGlzLngwIDogMDtcbiAgdGhpcy55MCA9IHRoaXMueTAgIT09IHVuZGVmaW5lZCA/IHRoaXMueTAgOiAwO1xuICB0aGlzLmxvbmcwID0gdGhpcy5sb25nMCAhPT0gdW5kZWZpbmVkID8gdGhpcy5sb25nMCA6IDA7XG4gIHRoaXMubGF0MCA9IHRoaXMubGF0MCAhPT0gdW5kZWZpbmVkID8gdGhpcy5sYXQwIDogMDtcblxuICB0aGlzLmNnYiA9IFtdO1xuICB0aGlzLmNiZyA9IFtdO1xuICB0aGlzLnV0ZyA9IFtdO1xuICB0aGlzLmd0dSA9IFtdO1xuXG4gIHZhciBmID0gdGhpcy5lcyAvICgxICsgTWF0aC5zcXJ0KDEgLSB0aGlzLmVzKSk7XG4gIHZhciBuID0gZiAvICgyIC0gZik7XG4gIHZhciBucCA9IG47XG5cbiAgdGhpcy5jZ2JbMF0gPSBuICogKDIgKyBuICogKC0yIC8gMyArIG4gKiAoLTIgKyBuICogKDExNiAvIDQ1ICsgbiAqICgyNiAvIDQ1ICsgbiAqICgtMjg1NCAvIDY3NSApKSkpKSk7XG4gIHRoaXMuY2JnWzBdID0gbiAqICgtMiArIG4gKiAoIDIgLyAzICsgbiAqICggNCAvIDMgKyBuICogKC04MiAvIDQ1ICsgbiAqICgzMiAvIDQ1ICsgbiAqICg0NjQyIC8gNDcyNSkpKSkpKTtcblxuICBucCA9IG5wICogbjtcbiAgdGhpcy5jZ2JbMV0gPSBucCAqICg3IC8gMyArIG4gKiAoLTggLyA1ICsgbiAqICgtMjI3IC8gNDUgKyBuICogKDI3MDQgLyAzMTUgKyBuICogKDIzMjMgLyA5NDUpKSkpKTtcbiAgdGhpcy5jYmdbMV0gPSBucCAqICg1IC8gMyArIG4gKiAoLTE2IC8gMTUgKyBuICogKCAtMTMgLyA5ICsgbiAqICg5MDQgLyAzMTUgKyBuICogKC0xNTIyIC8gOTQ1KSkpKSk7XG5cbiAgbnAgPSBucCAqIG47XG4gIHRoaXMuY2diWzJdID0gbnAgKiAoNTYgLyAxNSArIG4gKiAoLTEzNiAvIDM1ICsgbiAqICgtMTI2MiAvIDEwNSArIG4gKiAoNzM4MTQgLyAyODM1KSkpKTtcbiAgdGhpcy5jYmdbMl0gPSBucCAqICgtMjYgLyAxNSArIG4gKiAoMzQgLyAyMSArIG4gKiAoOCAvIDUgKyBuICogKC0xMjY4NiAvIDI4MzUpKSkpO1xuXG4gIG5wID0gbnAgKiBuO1xuICB0aGlzLmNnYlszXSA9IG5wICogKDQyNzkgLyA2MzAgKyBuICogKC0zMzIgLyAzNSArIG4gKiAoLTM5OTU3MiAvIDE0MTc1KSkpO1xuICB0aGlzLmNiZ1szXSA9IG5wICogKDEyMzcgLyA2MzAgKyBuICogKC0xMiAvIDUgKyBuICogKCAtMjQ4MzIgLyAxNDE3NSkpKTtcblxuICBucCA9IG5wICogbjtcbiAgdGhpcy5jZ2JbNF0gPSBucCAqICg0MTc0IC8gMzE1ICsgbiAqICgtMTQ0ODM4IC8gNjIzNykpO1xuICB0aGlzLmNiZ1s0XSA9IG5wICogKC03MzQgLyAzMTUgKyBuICogKDEwOTU5OCAvIDMxMTg1KSk7XG5cbiAgbnAgPSBucCAqIG47XG4gIHRoaXMuY2diWzVdID0gbnAgKiAoNjAxNjc2IC8gMjIyNzUpO1xuICB0aGlzLmNiZ1s1XSA9IG5wICogKDQ0NDMzNyAvIDE1NTkyNSk7XG5cbiAgbnAgPSBNYXRoLnBvdyhuLCAyKTtcbiAgdGhpcy5RbiA9IHRoaXMuazAgLyAoMSArIG4pICogKDEgKyBucCAqICgxIC8gNCArIG5wICogKDEgLyA2NCArIG5wIC8gMjU2KSkpO1xuXG4gIHRoaXMudXRnWzBdID0gbiAqICgtMC41ICsgbiAqICggMiAvIDMgKyBuICogKC0zNyAvIDk2ICsgbiAqICggMSAvIDM2MCArIG4gKiAoODEgLyA1MTIgKyBuICogKC05NjE5OSAvIDYwNDgwMCkpKSkpKTtcbiAgdGhpcy5ndHVbMF0gPSBuICogKDAuNSArIG4gKiAoLTIgLyAzICsgbiAqICg1IC8gMTYgKyBuICogKDQxIC8gMTgwICsgbiAqICgtMTI3IC8gMjg4ICsgbiAqICg3ODkxIC8gMzc4MDApKSkpKSk7XG5cbiAgdGhpcy51dGdbMV0gPSBucCAqICgtMSAvIDQ4ICsgbiAqICgtMSAvIDE1ICsgbiAqICg0MzcgLyAxNDQwICsgbiAqICgtNDYgLyAxMDUgKyBuICogKDExMTg3MTEgLyAzODcwNzIwKSkpKSk7XG4gIHRoaXMuZ3R1WzFdID0gbnAgKiAoMTMgLyA0OCArIG4gKiAoLTMgLyA1ICsgbiAqICg1NTcgLyAxNDQwICsgbiAqICgyODEgLyA2MzAgKyBuICogKC0xOTgzNDMzIC8gMTkzNTM2MCkpKSkpO1xuXG4gIG5wID0gbnAgKiBuO1xuICB0aGlzLnV0Z1syXSA9IG5wICogKC0xNyAvIDQ4MCArIG4gKiAoMzcgLyA4NDAgKyBuICogKDIwOSAvIDQ0ODAgKyBuICogKC01NTY5IC8gOTA3MjAgKSkpKTtcbiAgdGhpcy5ndHVbMl0gPSBucCAqICg2MSAvIDI0MCArIG4gKiAoLTEwMyAvIDE0MCArIG4gKiAoMTUwNjEgLyAyNjg4MCArIG4gKiAoMTY3NjAzIC8gMTgxNDQwKSkpKTtcblxuICBucCA9IG5wICogbjtcbiAgdGhpcy51dGdbM10gPSBucCAqICgtNDM5NyAvIDE2MTI4MCArIG4gKiAoMTEgLyA1MDQgKyBuICogKDgzMDI1MSAvIDcyNTc2MDApKSk7XG4gIHRoaXMuZ3R1WzNdID0gbnAgKiAoNDk1NjEgLyAxNjEyODAgKyBuICogKC0xNzkgLyAxNjggKyBuICogKDY2MDE2NjEgLyA3MjU3NjAwKSkpO1xuXG4gIG5wID0gbnAgKiBuO1xuICB0aGlzLnV0Z1s0XSA9IG5wICogKC00NTgzIC8gMTYxMjgwICsgbiAqICgxMDg4NDcgLyAzOTkxNjgwKSk7XG4gIHRoaXMuZ3R1WzRdID0gbnAgKiAoMzQ3MjkgLyA4MDY0MCArIG4gKiAoLTM0MTg4ODkgLyAxOTk1ODQwKSk7XG5cbiAgbnAgPSBucCAqIG47XG4gIHRoaXMudXRnWzVdID0gbnAgKiAoLTIwNjQ4NjkzIC8gNjM4NjY4ODAwKTtcbiAgdGhpcy5ndHVbNV0gPSBucCAqICgyMTIzNzg5NDEgLyAzMTkzMzQ0MDApO1xuXG4gIHZhciBaID0gZ2F0Zyh0aGlzLmNiZywgdGhpcy5sYXQwKTtcbiAgdGhpcy5aYiA9IC10aGlzLlFuICogKFogKyBjbGVucyh0aGlzLmd0dSwgMiAqIFopKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgQ2UgPSBhZGp1c3RfbG9uKHAueCAtIHRoaXMubG9uZzApO1xuICB2YXIgQ24gPSBwLnk7XG5cbiAgQ24gPSBnYXRnKHRoaXMuY2JnLCBDbik7XG4gIHZhciBzaW5fQ24gPSBNYXRoLnNpbihDbik7XG4gIHZhciBjb3NfQ24gPSBNYXRoLmNvcyhDbik7XG4gIHZhciBzaW5fQ2UgPSBNYXRoLnNpbihDZSk7XG4gIHZhciBjb3NfQ2UgPSBNYXRoLmNvcyhDZSk7XG5cbiAgQ24gPSBNYXRoLmF0YW4yKHNpbl9DbiwgY29zX0NlICogY29zX0NuKTtcbiAgQ2UgPSBNYXRoLmF0YW4yKHNpbl9DZSAqIGNvc19DbiwgaHlwb3Qoc2luX0NuLCBjb3NfQ24gKiBjb3NfQ2UpKTtcbiAgQ2UgPSBhc2luaHkoTWF0aC50YW4oQ2UpKTtcblxuICB2YXIgdG1wID0gY2xlbnNfY21wbHgodGhpcy5ndHUsIDIgKiBDbiwgMiAqIENlKTtcblxuICBDbiA9IENuICsgdG1wWzBdO1xuICBDZSA9IENlICsgdG1wWzFdO1xuXG4gIHZhciB4O1xuICB2YXIgeTtcblxuICBpZiAoTWF0aC5hYnMoQ2UpIDw9IDIuNjIzMzk1MTYyNzc4KSB7XG4gICAgeCA9IHRoaXMuYSAqICh0aGlzLlFuICogQ2UpICsgdGhpcy54MDtcbiAgICB5ID0gdGhpcy5hICogKHRoaXMuUW4gKiBDbiArIHRoaXMuWmIpICsgdGhpcy55MDtcbiAgfVxuICBlbHNlIHtcbiAgICB4ID0gSW5maW5pdHk7XG4gICAgeSA9IEluZmluaXR5O1xuICB9XG5cbiAgcC54ID0geDtcbiAgcC55ID0geTtcblxuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgQ2UgPSAocC54IC0gdGhpcy54MCkgKiAoMSAvIHRoaXMuYSk7XG4gIHZhciBDbiA9IChwLnkgLSB0aGlzLnkwKSAqICgxIC8gdGhpcy5hKTtcblxuICBDbiA9IChDbiAtIHRoaXMuWmIpIC8gdGhpcy5RbjtcbiAgQ2UgPSBDZSAvIHRoaXMuUW47XG5cbiAgdmFyIGxvbjtcbiAgdmFyIGxhdDtcblxuICBpZiAoTWF0aC5hYnMoQ2UpIDw9IDIuNjIzMzk1MTYyNzc4KSB7XG4gICAgdmFyIHRtcCA9IGNsZW5zX2NtcGx4KHRoaXMudXRnLCAyICogQ24sIDIgKiBDZSk7XG5cbiAgICBDbiA9IENuICsgdG1wWzBdO1xuICAgIENlID0gQ2UgKyB0bXBbMV07XG4gICAgQ2UgPSBNYXRoLmF0YW4oc2luaChDZSkpO1xuXG4gICAgdmFyIHNpbl9DbiA9IE1hdGguc2luKENuKTtcbiAgICB2YXIgY29zX0NuID0gTWF0aC5jb3MoQ24pO1xuICAgIHZhciBzaW5fQ2UgPSBNYXRoLnNpbihDZSk7XG4gICAgdmFyIGNvc19DZSA9IE1hdGguY29zKENlKTtcblxuICAgIENuID0gTWF0aC5hdGFuMihzaW5fQ24gKiBjb3NfQ2UsIGh5cG90KHNpbl9DZSwgY29zX0NlICogY29zX0NuKSk7XG4gICAgQ2UgPSBNYXRoLmF0YW4yKHNpbl9DZSwgY29zX0NlICogY29zX0NuKTtcblxuICAgIGxvbiA9IGFkanVzdF9sb24oQ2UgKyB0aGlzLmxvbmcwKTtcbiAgICBsYXQgPSBnYXRnKHRoaXMuY2diLCBDbik7XG4gIH1cbiAgZWxzZSB7XG4gICAgbG9uID0gSW5maW5pdHk7XG4gICAgbGF0ID0gSW5maW5pdHk7XG4gIH1cblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcblxuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIkV4dGVuZGVkX1RyYW5zdmVyc2VfTWVyY2F0b3JcIiwgXCJFeHRlbmRlZCBUcmFuc3ZlcnNlIE1lcmNhdG9yXCIsIFwiZXRtZXJjXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcCwgYXJnX3IpIHtcbiAgdmFyIHIgPSAyICogTWF0aC5jb3MoYXJnX3IpO1xuICB2YXIgaSA9IHBwLmxlbmd0aCAtIDE7XG4gIHZhciBocjEgPSBwcFtpXTtcbiAgdmFyIGhyMiA9IDA7XG4gIHZhciBocjtcblxuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBociA9IC1ocjIgKyByICogaHIxICsgcHBbaV07XG4gICAgaHIyID0gaHIxO1xuICAgIGhyMSA9IGhyO1xuICB9XG5cbiAgcmV0dXJuIE1hdGguc2luKGFyZ19yKSAqIGhyO1xufVxuIiwiaW1wb3J0IGh5cG90IGZyb20gJy4vaHlwb3QnO1xuaW1wb3J0IGxvZzFweSBmcm9tICcuL2xvZzFweSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHkgPSBNYXRoLmFicyh4KTtcbiAgeSA9IGxvZzFweSh5ICogKDEgKyB5IC8gKGh5cG90KDEsIHkpICsgMSkpKTtcblxuICByZXR1cm4geCA8IDAgPyAteSA6IHk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHZhciB5ID0gMSArIHg7XG4gIHZhciB6ID0geSAtIDE7XG5cbiAgcmV0dXJuIHogPT09IDAgPyB4IDogeCAqIE1hdGgubG9nKHkpIC8gejtcbn1cbiIsImltcG9ydCBhZGp1c3Rfem9uZSBmcm9tICcuLi9jb21tb24vYWRqdXN0X3pvbmUnO1xuaW1wb3J0IGV0bWVyYyBmcm9tICcuL2V0bWVyYyc7XG5leHBvcnQgdmFyIGRlcGVuZHNPbiA9ICdldG1lcmMnO1xuaW1wb3J0IHtEMlJ9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB2YXIgem9uZSA9IGFkanVzdF96b25lKHRoaXMuem9uZSwgdGhpcy5sb25nMCk7XG4gIGlmICh6b25lID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gdXRtIHpvbmUnKTtcbiAgfVxuICB0aGlzLmxhdDAgPSAwO1xuICB0aGlzLmxvbmcwID0gICgoNiAqIE1hdGguYWJzKHpvbmUpKSAtIDE4MykgKiBEMlI7XG4gIHRoaXMueDAgPSA1MDAwMDA7XG4gIHRoaXMueTAgPSB0aGlzLnV0bVNvdXRoID8gMTAwMDAwMDAgOiAwO1xuICB0aGlzLmswID0gMC45OTk2O1xuXG4gIGV0bWVyYy5pbml0LmFwcGx5KHRoaXMpO1xuICB0aGlzLmZvcndhcmQgPSBldG1lcmMuZm9yd2FyZDtcbiAgdGhpcy5pbnZlcnNlID0gZXRtZXJjLmludmVyc2U7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJVbml2ZXJzYWwgVHJhbnN2ZXJzZSBNZXJjYXRvciBTeXN0ZW1cIiwgXCJ1dG1cIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIG5hbWVzOiBuYW1lcyxcbiAgZGVwZW5kc09uOiBkZXBlbmRzT25cbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuL2FkanVzdF9sb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih6b25lLCBsb24pIHtcbiAgaWYgKHpvbmUgPT09IHVuZGVmaW5lZCkge1xuICAgIHpvbmUgPSBNYXRoLmZsb29yKChhZGp1c3RfbG9uKGxvbikgKyBNYXRoLlBJKSAqIDMwIC8gTWF0aC5QSSkgKyAxO1xuXG4gICAgaWYgKHpvbmUgPCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYgKHpvbmUgPiA2MCkge1xuICAgICAgcmV0dXJuIDYwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gem9uZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVzaW5wLCBleHApIHtcbiAgcmV0dXJuIChNYXRoLnBvdygoMSAtIGVzaW5wKSAvICgxICsgZXNpbnApLCBleHApKTtcbn0iLCJpbXBvcnQgc3JhdCBmcm9tICcuLi9jb21tb24vc3JhdCc7XG52YXIgTUFYX0lURVIgPSAyMDtcbmltcG9ydCB7SEFMRl9QSSwgRk9SVFBJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIHZhciBzcGhpID0gTWF0aC5zaW4odGhpcy5sYXQwKTtcbiAgdmFyIGNwaGkgPSBNYXRoLmNvcyh0aGlzLmxhdDApO1xuICBjcGhpICo9IGNwaGk7XG4gIHRoaXMucmMgPSBNYXRoLnNxcnQoMSAtIHRoaXMuZXMpIC8gKDEgLSB0aGlzLmVzICogc3BoaSAqIHNwaGkpO1xuICB0aGlzLkMgPSBNYXRoLnNxcnQoMSArIHRoaXMuZXMgKiBjcGhpICogY3BoaSAvICgxIC0gdGhpcy5lcykpO1xuICB0aGlzLnBoaWMwID0gTWF0aC5hc2luKHNwaGkgLyB0aGlzLkMpO1xuICB0aGlzLnJhdGV4cCA9IDAuNSAqIHRoaXMuQyAqIHRoaXMuZTtcbiAgdGhpcy5LID0gTWF0aC50YW4oMC41ICogdGhpcy5waGljMCArIEZPUlRQSSkgLyAoTWF0aC5wb3coTWF0aC50YW4oMC41ICogdGhpcy5sYXQwICsgRk9SVFBJKSwgdGhpcy5DKSAqIHNyYXQodGhpcy5lICogc3BoaSwgdGhpcy5yYXRleHApKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuXG4gIHAueSA9IDIgKiBNYXRoLmF0YW4odGhpcy5LICogTWF0aC5wb3coTWF0aC50YW4oMC41ICogbGF0ICsgRk9SVFBJKSwgdGhpcy5DKSAqIHNyYXQodGhpcy5lICogTWF0aC5zaW4obGF0KSwgdGhpcy5yYXRleHApKSAtIEhBTEZfUEk7XG4gIHAueCA9IHRoaXMuQyAqIGxvbjtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIERFTF9UT0wgPSAxZS0xNDtcbiAgdmFyIGxvbiA9IHAueCAvIHRoaXMuQztcbiAgdmFyIGxhdCA9IHAueTtcbiAgdmFyIG51bSA9IE1hdGgucG93KE1hdGgudGFuKDAuNSAqIGxhdCArIEZPUlRQSSkgLyB0aGlzLkssIDEgLyB0aGlzLkMpO1xuICBmb3IgKHZhciBpID0gTUFYX0lURVI7IGkgPiAwOyAtLWkpIHtcbiAgICBsYXQgPSAyICogTWF0aC5hdGFuKG51bSAqIHNyYXQodGhpcy5lICogTWF0aC5zaW4ocC55KSwgLSAwLjUgKiB0aGlzLmUpKSAtIEhBTEZfUEk7XG4gICAgaWYgKE1hdGguYWJzKGxhdCAtIHAueSkgPCBERUxfVE9MKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcC55ID0gbGF0O1xuICB9XG4gIC8qIGNvbnZlcmdlbmNlIGZhaWxlZCAqL1xuICBpZiAoIWkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJnYXVzc1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IGdhdXNzIGZyb20gJy4vZ2F1c3MnO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgZ2F1c3MuaW5pdC5hcHBseSh0aGlzKTtcbiAgaWYgKCF0aGlzLnJjKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuc2luYzAgPSBNYXRoLnNpbih0aGlzLnBoaWMwKTtcbiAgdGhpcy5jb3NjMCA9IE1hdGguY29zKHRoaXMucGhpYzApO1xuICB0aGlzLlIyID0gMiAqIHRoaXMucmM7XG4gIGlmICghdGhpcy50aXRsZSkge1xuICAgIHRoaXMudGl0bGUgPSBcIk9ibGlxdWUgU3RlcmVvZ3JhcGhpYyBBbHRlcm5hdGl2ZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIHNpbmMsIGNvc2MsIGNvc2wsIGs7XG4gIHAueCA9IGFkanVzdF9sb24ocC54IC0gdGhpcy5sb25nMCk7XG4gIGdhdXNzLmZvcndhcmQuYXBwbHkodGhpcywgW3BdKTtcbiAgc2luYyA9IE1hdGguc2luKHAueSk7XG4gIGNvc2MgPSBNYXRoLmNvcyhwLnkpO1xuICBjb3NsID0gTWF0aC5jb3MocC54KTtcbiAgayA9IHRoaXMuazAgKiB0aGlzLlIyIC8gKDEgKyB0aGlzLnNpbmMwICogc2luYyArIHRoaXMuY29zYzAgKiBjb3NjICogY29zbCk7XG4gIHAueCA9IGsgKiBjb3NjICogTWF0aC5zaW4ocC54KTtcbiAgcC55ID0gayAqICh0aGlzLmNvc2MwICogc2luYyAtIHRoaXMuc2luYzAgKiBjb3NjICogY29zbCk7XG4gIHAueCA9IHRoaXMuYSAqIHAueCArIHRoaXMueDA7XG4gIHAueSA9IHRoaXMuYSAqIHAueSArIHRoaXMueTA7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciBzaW5jLCBjb3NjLCBsb24sIGxhdCwgcmhvO1xuICBwLnggPSAocC54IC0gdGhpcy54MCkgLyB0aGlzLmE7XG4gIHAueSA9IChwLnkgLSB0aGlzLnkwKSAvIHRoaXMuYTtcblxuICBwLnggLz0gdGhpcy5rMDtcbiAgcC55IC89IHRoaXMuazA7XG4gIGlmICgocmhvID0gTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSkpKSB7XG4gICAgdmFyIGMgPSAyICogTWF0aC5hdGFuMihyaG8sIHRoaXMuUjIpO1xuICAgIHNpbmMgPSBNYXRoLnNpbihjKTtcbiAgICBjb3NjID0gTWF0aC5jb3MoYyk7XG4gICAgbGF0ID0gTWF0aC5hc2luKGNvc2MgKiB0aGlzLnNpbmMwICsgcC55ICogc2luYyAqIHRoaXMuY29zYzAgLyByaG8pO1xuICAgIGxvbiA9IE1hdGguYXRhbjIocC54ICogc2luYywgcmhvICogdGhpcy5jb3NjMCAqIGNvc2MgLSBwLnkgKiB0aGlzLnNpbmMwICogc2luYyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgbGF0ID0gdGhpcy5waGljMDtcbiAgICBsb24gPSAwO1xuICB9XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIGdhdXNzLmludmVyc2UuYXBwbHkodGhpcywgW3BdKTtcbiAgcC54ID0gYWRqdXN0X2xvbihwLnggKyB0aGlzLmxvbmcwKTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJTdGVyZW9ncmFwaGljX05vcnRoX1BvbGVcIiwgXCJPYmxpcXVlX1N0ZXJlb2dyYXBoaWNcIiwgXCJQb2xhcl9TdGVyZW9ncmFwaGljXCIsIFwic3RlcmVhXCIsXCJPYmxpcXVlIFN0ZXJlb2dyYXBoaWMgQWx0ZXJuYXRpdmVcIixcIkRvdWJsZV9TdGVyZW9ncmFwaGljXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQge0VQU0xOLCBIQUxGX1BJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuaW1wb3J0IHNpZ24gZnJvbSAnLi4vY29tbW9uL3NpZ24nO1xuaW1wb3J0IG1zZm56IGZyb20gJy4uL2NvbW1vbi9tc2Zueic7XG5pbXBvcnQgdHNmbnogZnJvbSAnLi4vY29tbW9uL3RzZm56JztcbmltcG9ydCBwaGkyeiBmcm9tICcuLi9jb21tb24vcGhpMnonO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gc3Nmbl8ocGhpdCwgc2lucGhpLCBlY2Nlbikge1xuICBzaW5waGkgKj0gZWNjZW47XG4gIHJldHVybiAoTWF0aC50YW4oMC41ICogKEhBTEZfUEkgKyBwaGl0KSkgKiBNYXRoLnBvdygoMSAtIHNpbnBoaSkgLyAoMSArIHNpbnBoaSksIDAuNSAqIGVjY2VuKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLmNvc2xhdDAgPSBNYXRoLmNvcyh0aGlzLmxhdDApO1xuICB0aGlzLnNpbmxhdDAgPSBNYXRoLnNpbih0aGlzLmxhdDApO1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBpZiAodGhpcy5rMCA9PT0gMSAmJiAhaXNOYU4odGhpcy5sYXRfdHMpICYmIE1hdGguYWJzKHRoaXMuY29zbGF0MCkgPD0gRVBTTE4pIHtcbiAgICAgIHRoaXMuazAgPSAwLjUgKiAoMSArIHNpZ24odGhpcy5sYXQwKSAqIE1hdGguc2luKHRoaXMubGF0X3RzKSk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmIChNYXRoLmFicyh0aGlzLmNvc2xhdDApIDw9IEVQU0xOKSB7XG4gICAgICBpZiAodGhpcy5sYXQwID4gMCkge1xuICAgICAgICAvL05vcnRoIHBvbGVcbiAgICAgICAgLy90cmFjZSgnc3RlcmU6bm9ydGggcG9sZScpO1xuICAgICAgICB0aGlzLmNvbiA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy9Tb3V0aCBwb2xlXG4gICAgICAgIC8vdHJhY2UoJ3N0ZXJlOnNvdXRoIHBvbGUnKTtcbiAgICAgICAgdGhpcy5jb24gPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb25zID0gTWF0aC5zcXJ0KE1hdGgucG93KDEgKyB0aGlzLmUsIDEgKyB0aGlzLmUpICogTWF0aC5wb3coMSAtIHRoaXMuZSwgMSAtIHRoaXMuZSkpO1xuICAgIGlmICh0aGlzLmswID09PSAxICYmICFpc05hTih0aGlzLmxhdF90cykgJiYgTWF0aC5hYnModGhpcy5jb3NsYXQwKSA8PSBFUFNMTikge1xuICAgICAgdGhpcy5rMCA9IDAuNSAqIHRoaXMuY29ucyAqIG1zZm56KHRoaXMuZSwgTWF0aC5zaW4odGhpcy5sYXRfdHMpLCBNYXRoLmNvcyh0aGlzLmxhdF90cykpIC8gdHNmbnoodGhpcy5lLCB0aGlzLmNvbiAqIHRoaXMubGF0X3RzLCB0aGlzLmNvbiAqIE1hdGguc2luKHRoaXMubGF0X3RzKSk7XG4gICAgfVxuICAgIHRoaXMubXMxID0gbXNmbnoodGhpcy5lLCB0aGlzLnNpbmxhdDAsIHRoaXMuY29zbGF0MCk7XG4gICAgdGhpcy5YMCA9IDIgKiBNYXRoLmF0YW4odGhpcy5zc2ZuXyh0aGlzLmxhdDAsIHRoaXMuc2lubGF0MCwgdGhpcy5lKSkgLSBIQUxGX1BJO1xuICAgIHRoaXMuY29zWDAgPSBNYXRoLmNvcyh0aGlzLlgwKTtcbiAgICB0aGlzLnNpblgwID0gTWF0aC5zaW4odGhpcy5YMCk7XG4gIH1cbn1cblxuLy8gU3RlcmVvZ3JhcGhpYyBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgdmFyIHNpbmxhdCA9IE1hdGguc2luKGxhdCk7XG4gIHZhciBjb3NsYXQgPSBNYXRoLmNvcyhsYXQpO1xuICB2YXIgQSwgWCwgc2luWCwgY29zWCwgdHMsIHJoO1xuICB2YXIgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG5cbiAgaWYgKE1hdGguYWJzKE1hdGguYWJzKGxvbiAtIHRoaXMubG9uZzApIC0gTWF0aC5QSSkgPD0gRVBTTE4gJiYgTWF0aC5hYnMobGF0ICsgdGhpcy5sYXQwKSA8PSBFUFNMTikge1xuICAgIC8vY2FzZSBvZiB0aGUgb3JpZ2luZSBwb2ludFxuICAgIC8vdHJhY2UoJ3N0ZXJlOnRoaXMgaXMgdGhlIG9yaWdpbiBwb2ludCcpO1xuICAgIHAueCA9IE5hTjtcbiAgICBwLnkgPSBOYU47XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgLy90cmFjZSgnc3RlcmU6c3BoZXJlIGNhc2UnKTtcbiAgICBBID0gMiAqIHRoaXMuazAgLyAoMSArIHRoaXMuc2lubGF0MCAqIHNpbmxhdCArIHRoaXMuY29zbGF0MCAqIGNvc2xhdCAqIE1hdGguY29zKGRsb24pKTtcbiAgICBwLnggPSB0aGlzLmEgKiBBICogY29zbGF0ICogTWF0aC5zaW4oZGxvbikgKyB0aGlzLngwO1xuICAgIHAueSA9IHRoaXMuYSAqIEEgKiAodGhpcy5jb3NsYXQwICogc2lubGF0IC0gdGhpcy5zaW5sYXQwICogY29zbGF0ICogTWF0aC5jb3MoZGxvbikpICsgdGhpcy55MDtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBlbHNlIHtcbiAgICBYID0gMiAqIE1hdGguYXRhbih0aGlzLnNzZm5fKGxhdCwgc2lubGF0LCB0aGlzLmUpKSAtIEhBTEZfUEk7XG4gICAgY29zWCA9IE1hdGguY29zKFgpO1xuICAgIHNpblggPSBNYXRoLnNpbihYKTtcbiAgICBpZiAoTWF0aC5hYnModGhpcy5jb3NsYXQwKSA8PSBFUFNMTikge1xuICAgICAgdHMgPSB0c2Zueih0aGlzLmUsIGxhdCAqIHRoaXMuY29uLCB0aGlzLmNvbiAqIHNpbmxhdCk7XG4gICAgICByaCA9IDIgKiB0aGlzLmEgKiB0aGlzLmswICogdHMgLyB0aGlzLmNvbnM7XG4gICAgICBwLnggPSB0aGlzLngwICsgcmggKiBNYXRoLnNpbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgICAgIHAueSA9IHRoaXMueTAgLSB0aGlzLmNvbiAqIHJoICogTWF0aC5jb3MobG9uIC0gdGhpcy5sb25nMCk7XG4gICAgICAvL3RyYWNlKHAudG9TdHJpbmcoKSk7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5zaW5sYXQwKSA8IEVQU0xOKSB7XG4gICAgICAvL0VxXG4gICAgICAvL3RyYWNlKCdzdGVyZTplcXVhdGV1cicpO1xuICAgICAgQSA9IDIgKiB0aGlzLmEgKiB0aGlzLmswIC8gKDEgKyBjb3NYICogTWF0aC5jb3MoZGxvbikpO1xuICAgICAgcC55ID0gQSAqIHNpblg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy9vdGhlciBjYXNlXG4gICAgICAvL3RyYWNlKCdzdGVyZTpub3JtYWwgY2FzZScpO1xuICAgICAgQSA9IDIgKiB0aGlzLmEgKiB0aGlzLmswICogdGhpcy5tczEgLyAodGhpcy5jb3NYMCAqICgxICsgdGhpcy5zaW5YMCAqIHNpblggKyB0aGlzLmNvc1gwICogY29zWCAqIE1hdGguY29zKGRsb24pKSk7XG4gICAgICBwLnkgPSBBICogKHRoaXMuY29zWDAgKiBzaW5YIC0gdGhpcy5zaW5YMCAqIGNvc1ggKiBNYXRoLmNvcyhkbG9uKSkgKyB0aGlzLnkwO1xuICAgIH1cbiAgICBwLnggPSBBICogY29zWCAqIE1hdGguc2luKGRsb24pICsgdGhpcy54MDtcbiAgfVxuICAvL3RyYWNlKHAudG9TdHJpbmcoKSk7XG4gIHJldHVybiBwO1xufVxuXG4vLyogU3RlcmVvZ3JhcGhpYyBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmdcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuICB2YXIgbG9uLCBsYXQsIHRzLCBjZSwgQ2hpO1xuICB2YXIgcmggPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgdmFyIGMgPSAyICogTWF0aC5hdGFuKHJoIC8gKDIgKiB0aGlzLmEgKiB0aGlzLmswKSk7XG4gICAgbG9uID0gdGhpcy5sb25nMDtcbiAgICBsYXQgPSB0aGlzLmxhdDA7XG4gICAgaWYgKHJoIDw9IEVQU0xOKSB7XG4gICAgICBwLnggPSBsb247XG4gICAgICBwLnkgPSBsYXQ7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgbGF0ID0gTWF0aC5hc2luKE1hdGguY29zKGMpICogdGhpcy5zaW5sYXQwICsgcC55ICogTWF0aC5zaW4oYykgKiB0aGlzLmNvc2xhdDAgLyByaCk7XG4gICAgaWYgKE1hdGguYWJzKHRoaXMuY29zbGF0MCkgPCBFUFNMTikge1xuICAgICAgaWYgKHRoaXMubGF0MCA+IDApIHtcbiAgICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hdGFuMihwLngsIC0gMSAqIHAueSkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIE1hdGguYXRhbjIocC54LCBwLnkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCAqIE1hdGguc2luKGMpLCByaCAqIHRoaXMuY29zbGF0MCAqIE1hdGguY29zKGMpIC0gcC55ICogdGhpcy5zaW5sYXQwICogTWF0aC5zaW4oYykpKTtcbiAgICB9XG4gICAgcC54ID0gbG9uO1xuICAgIHAueSA9IGxhdDtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiAoTWF0aC5hYnModGhpcy5jb3NsYXQwKSA8PSBFUFNMTikge1xuICAgICAgaWYgKHJoIDw9IEVQU0xOKSB7XG4gICAgICAgIGxhdCA9IHRoaXMubGF0MDtcbiAgICAgICAgbG9uID0gdGhpcy5sb25nMDtcbiAgICAgICAgcC54ID0gbG9uO1xuICAgICAgICBwLnkgPSBsYXQ7XG4gICAgICAgIC8vdHJhY2UocC50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9XG4gICAgICBwLnggKj0gdGhpcy5jb247XG4gICAgICBwLnkgKj0gdGhpcy5jb247XG4gICAgICB0cyA9IHJoICogdGhpcy5jb25zIC8gKDIgKiB0aGlzLmEgKiB0aGlzLmswKTtcbiAgICAgIGxhdCA9IHRoaXMuY29uICogcGhpMnoodGhpcy5lLCB0cyk7XG4gICAgICBsb24gPSB0aGlzLmNvbiAqIGFkanVzdF9sb24odGhpcy5jb24gKiB0aGlzLmxvbmcwICsgTWF0aC5hdGFuMihwLngsIC0gMSAqIHAueSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNlID0gMiAqIE1hdGguYXRhbihyaCAqIHRoaXMuY29zWDAgLyAoMiAqIHRoaXMuYSAqIHRoaXMuazAgKiB0aGlzLm1zMSkpO1xuICAgICAgbG9uID0gdGhpcy5sb25nMDtcbiAgICAgIGlmIChyaCA8PSBFUFNMTikge1xuICAgICAgICBDaGkgPSB0aGlzLlgwO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIENoaSA9IE1hdGguYXNpbihNYXRoLmNvcyhjZSkgKiB0aGlzLnNpblgwICsgcC55ICogTWF0aC5zaW4oY2UpICogdGhpcy5jb3NYMCAvIHJoKTtcbiAgICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hdGFuMihwLnggKiBNYXRoLnNpbihjZSksIHJoICogdGhpcy5jb3NYMCAqIE1hdGguY29zKGNlKSAtIHAueSAqIHRoaXMuc2luWDAgKiBNYXRoLnNpbihjZSkpKTtcbiAgICAgIH1cbiAgICAgIGxhdCA9IC0xICogcGhpMnoodGhpcy5lLCBNYXRoLnRhbigwLjUgKiAoSEFMRl9QSSArIENoaSkpKTtcbiAgICB9XG4gIH1cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG5cbiAgLy90cmFjZShwLnRvU3RyaW5nKCkpO1xuICByZXR1cm4gcDtcblxufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wic3RlcmVcIiwgXCJTdGVyZW9ncmFwaGljX1NvdXRoX1BvbGVcIiwgXCJQb2xhciBTdGVyZW9ncmFwaGljICh2YXJpYW50IEIpXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXMsXG4gIHNzZm5fOiBzc2ZuX1xufTtcbiIsIi8qXG4gIHJlZmVyZW5jZXM6XG4gICAgRm9ybXVsZXMgZXQgY29uc3RhbnRlcyBwb3VyIGxlIENhbGN1bCBwb3VyIGxhXG4gICAgcHJvamVjdGlvbiBjeWxpbmRyaXF1ZSBjb25mb3JtZSDDoCBheGUgb2JsaXF1ZSBldCBwb3VyIGxhIHRyYW5zZm9ybWF0aW9uIGVudHJlXG4gICAgZGVzIHN5c3TDqG1lcyBkZSByw6lmw6lyZW5jZS5cbiAgICBodHRwOi8vd3d3LnN3aXNzdG9wby5hZG1pbi5jaC9pbnRlcm5ldC9zd2lzc3RvcG8vZnIvaG9tZS90b3BpY3Mvc3VydmV5L3N5cy9yZWZzeXMvc3dpdHplcmxhbmQucGFyc3lzcmVsYXRlZDEuMzEyMTYuZG93bmxvYWRMaXN0Ljc3MDA0LkRvd25sb2FkRmlsZS50bXAvc3dpc3Nwcm9qZWN0aW9uZnIucGRmXG4gICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB2YXIgcGh5MCA9IHRoaXMubGF0MDtcbiAgdGhpcy5sYW1iZGEwID0gdGhpcy5sb25nMDtcbiAgdmFyIHNpblBoeTAgPSBNYXRoLnNpbihwaHkwKTtcbiAgdmFyIHNlbWlNYWpvckF4aXMgPSB0aGlzLmE7XG4gIHZhciBpbnZGID0gdGhpcy5yZjtcbiAgdmFyIGZsYXR0ZW5pbmcgPSAxIC8gaW52RjtcbiAgdmFyIGUyID0gMiAqIGZsYXR0ZW5pbmcgLSBNYXRoLnBvdyhmbGF0dGVuaW5nLCAyKTtcbiAgdmFyIGUgPSB0aGlzLmUgPSBNYXRoLnNxcnQoZTIpO1xuICB0aGlzLlIgPSB0aGlzLmswICogc2VtaU1ham9yQXhpcyAqIE1hdGguc3FydCgxIC0gZTIpIC8gKDEgLSBlMiAqIE1hdGgucG93KHNpblBoeTAsIDIpKTtcbiAgdGhpcy5hbHBoYSA9IE1hdGguc3FydCgxICsgZTIgLyAoMSAtIGUyKSAqIE1hdGgucG93KE1hdGguY29zKHBoeTApLCA0KSk7XG4gIHRoaXMuYjAgPSBNYXRoLmFzaW4oc2luUGh5MCAvIHRoaXMuYWxwaGEpO1xuICB2YXIgazEgPSBNYXRoLmxvZyhNYXRoLnRhbihNYXRoLlBJIC8gNCArIHRoaXMuYjAgLyAyKSk7XG4gIHZhciBrMiA9IE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0ICsgcGh5MCAvIDIpKTtcbiAgdmFyIGszID0gTWF0aC5sb2coKDEgKyBlICogc2luUGh5MCkgLyAoMSAtIGUgKiBzaW5QaHkwKSk7XG4gIHRoaXMuSyA9IGsxIC0gdGhpcy5hbHBoYSAqIGsyICsgdGhpcy5hbHBoYSAqIGUgLyAyICogazM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIFNhMSA9IE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0IC0gcC55IC8gMikpO1xuICB2YXIgU2EyID0gdGhpcy5lIC8gMiAqIE1hdGgubG9nKCgxICsgdGhpcy5lICogTWF0aC5zaW4ocC55KSkgLyAoMSAtIHRoaXMuZSAqIE1hdGguc2luKHAueSkpKTtcbiAgdmFyIFMgPSAtdGhpcy5hbHBoYSAqIChTYTEgKyBTYTIpICsgdGhpcy5LO1xuXG4gIC8vIHNwaGVyaWMgbGF0aXR1ZGVcbiAgdmFyIGIgPSAyICogKE1hdGguYXRhbihNYXRoLmV4cChTKSkgLSBNYXRoLlBJIC8gNCk7XG5cbiAgLy8gc3BoZXJpYyBsb25naXR1ZGVcbiAgdmFyIEkgPSB0aGlzLmFscGhhICogKHAueCAtIHRoaXMubGFtYmRhMCk7XG5cbiAgLy8gcHNvZXVkbyBlcXVhdG9yaWFsIHJvdGF0aW9uXG4gIHZhciByb3RJID0gTWF0aC5hdGFuKE1hdGguc2luKEkpIC8gKE1hdGguc2luKHRoaXMuYjApICogTWF0aC50YW4oYikgKyBNYXRoLmNvcyh0aGlzLmIwKSAqIE1hdGguY29zKEkpKSk7XG5cbiAgdmFyIHJvdEIgPSBNYXRoLmFzaW4oTWF0aC5jb3ModGhpcy5iMCkgKiBNYXRoLnNpbihiKSAtIE1hdGguc2luKHRoaXMuYjApICogTWF0aC5jb3MoYikgKiBNYXRoLmNvcyhJKSk7XG5cbiAgcC55ID0gdGhpcy5SIC8gMiAqIE1hdGgubG9nKCgxICsgTWF0aC5zaW4ocm90QikpIC8gKDEgLSBNYXRoLnNpbihyb3RCKSkpICsgdGhpcy55MDtcbiAgcC54ID0gdGhpcy5SICogcm90SSArIHRoaXMueDA7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciBZID0gcC54IC0gdGhpcy54MDtcbiAgdmFyIFggPSBwLnkgLSB0aGlzLnkwO1xuXG4gIHZhciByb3RJID0gWSAvIHRoaXMuUjtcbiAgdmFyIHJvdEIgPSAyICogKE1hdGguYXRhbihNYXRoLmV4cChYIC8gdGhpcy5SKSkgLSBNYXRoLlBJIC8gNCk7XG5cbiAgdmFyIGIgPSBNYXRoLmFzaW4oTWF0aC5jb3ModGhpcy5iMCkgKiBNYXRoLnNpbihyb3RCKSArIE1hdGguc2luKHRoaXMuYjApICogTWF0aC5jb3Mocm90QikgKiBNYXRoLmNvcyhyb3RJKSk7XG4gIHZhciBJID0gTWF0aC5hdGFuKE1hdGguc2luKHJvdEkpIC8gKE1hdGguY29zKHRoaXMuYjApICogTWF0aC5jb3Mocm90SSkgLSBNYXRoLnNpbih0aGlzLmIwKSAqIE1hdGgudGFuKHJvdEIpKSk7XG5cbiAgdmFyIGxhbWJkYSA9IHRoaXMubGFtYmRhMCArIEkgLyB0aGlzLmFscGhhO1xuXG4gIHZhciBTID0gMDtcbiAgdmFyIHBoeSA9IGI7XG4gIHZhciBwcmV2UGh5ID0gLTEwMDA7XG4gIHZhciBpdGVyYXRpb24gPSAwO1xuICB3aGlsZSAoTWF0aC5hYnMocGh5IC0gcHJldlBoeSkgPiAwLjAwMDAwMDEpIHtcbiAgICBpZiAoKytpdGVyYXRpb24gPiAyMCkge1xuICAgICAgLy8uLi5yZXBvcnRFcnJvcihcIm9tZXJjRndkSW5maW5pdHlcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vUyA9IE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0ICsgcGh5IC8gMikpO1xuICAgIFMgPSAxIC8gdGhpcy5hbHBoYSAqIChNYXRoLmxvZyhNYXRoLnRhbihNYXRoLlBJIC8gNCArIGIgLyAyKSkgLSB0aGlzLkspICsgdGhpcy5lICogTWF0aC5sb2coTWF0aC50YW4oTWF0aC5QSSAvIDQgKyBNYXRoLmFzaW4odGhpcy5lICogTWF0aC5zaW4ocGh5KSkgLyAyKSk7XG4gICAgcHJldlBoeSA9IHBoeTtcbiAgICBwaHkgPSAyICogTWF0aC5hdGFuKE1hdGguZXhwKFMpKSAtIE1hdGguUEkgLyAyO1xuICB9XG5cbiAgcC54ID0gbGFtYmRhO1xuICBwLnkgPSBwaHk7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wic29tZXJjXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgdHNmbnogZnJvbSAnLi4vY29tbW9uL3RzZm56JztcbmltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCBwaGkyeiBmcm9tICcuLi9jb21tb24vcGhpMnonO1xuaW1wb3J0IHtFUFNMTiwgSEFMRl9QSSwgRk9SVFBJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuLyogSW5pdGlhbGl6ZSB0aGUgT2JsaXF1ZSBNZXJjYXRvciAgcHJvamVjdGlvblxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgdGhpcy5ub19vZmYgPSB0aGlzLm5vX29mZiB8fCBmYWxzZTtcbiAgdGhpcy5ub19yb3QgPSB0aGlzLm5vX3JvdCB8fCBmYWxzZTtcblxuICBpZiAoaXNOYU4odGhpcy5rMCkpIHtcbiAgICB0aGlzLmswID0gMTtcbiAgfVxuICB2YXIgc2lubGF0ID0gTWF0aC5zaW4odGhpcy5sYXQwKTtcbiAgdmFyIGNvc2xhdCA9IE1hdGguY29zKHRoaXMubGF0MCk7XG4gIHZhciBjb24gPSB0aGlzLmUgKiBzaW5sYXQ7XG5cbiAgdGhpcy5ibCA9IE1hdGguc3FydCgxICsgdGhpcy5lcyAvICgxIC0gdGhpcy5lcykgKiBNYXRoLnBvdyhjb3NsYXQsIDQpKTtcbiAgdGhpcy5hbCA9IHRoaXMuYSAqIHRoaXMuYmwgKiB0aGlzLmswICogTWF0aC5zcXJ0KDEgLSB0aGlzLmVzKSAvICgxIC0gY29uICogY29uKTtcbiAgdmFyIHQwID0gdHNmbnoodGhpcy5lLCB0aGlzLmxhdDAsIHNpbmxhdCk7XG4gIHZhciBkbCA9IHRoaXMuYmwgLyBjb3NsYXQgKiBNYXRoLnNxcnQoKDEgLSB0aGlzLmVzKSAvICgxIC0gY29uICogY29uKSk7XG4gIGlmIChkbCAqIGRsIDwgMSkge1xuICAgIGRsID0gMTtcbiAgfVxuICB2YXIgZmw7XG4gIHZhciBnbDtcbiAgaWYgKCFpc05hTih0aGlzLmxvbmdjKSkge1xuICAgIC8vQ2VudHJhbCBwb2ludCBhbmQgYXppbXV0aCBtZXRob2RcblxuICAgIGlmICh0aGlzLmxhdDAgPj0gMCkge1xuICAgICAgZmwgPSBkbCArIE1hdGguc3FydChkbCAqIGRsIC0gMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmwgPSBkbCAtIE1hdGguc3FydChkbCAqIGRsIC0gMSk7XG4gICAgfVxuICAgIHRoaXMuZWwgPSBmbCAqIE1hdGgucG93KHQwLCB0aGlzLmJsKTtcbiAgICBnbCA9IDAuNSAqIChmbCAtIDEgLyBmbCk7XG4gICAgdGhpcy5nYW1tYTAgPSBNYXRoLmFzaW4oTWF0aC5zaW4odGhpcy5hbHBoYSkgLyBkbCk7XG4gICAgdGhpcy5sb25nMCA9IHRoaXMubG9uZ2MgLSBNYXRoLmFzaW4oZ2wgKiBNYXRoLnRhbih0aGlzLmdhbW1hMCkpIC8gdGhpcy5ibDtcblxuICB9XG4gIGVsc2Uge1xuICAgIC8vMiBwb2ludHMgbWV0aG9kXG4gICAgdmFyIHQxID0gdHNmbnoodGhpcy5lLCB0aGlzLmxhdDEsIE1hdGguc2luKHRoaXMubGF0MSkpO1xuICAgIHZhciB0MiA9IHRzZm56KHRoaXMuZSwgdGhpcy5sYXQyLCBNYXRoLnNpbih0aGlzLmxhdDIpKTtcbiAgICBpZiAodGhpcy5sYXQwID49IDApIHtcbiAgICAgIHRoaXMuZWwgPSAoZGwgKyBNYXRoLnNxcnQoZGwgKiBkbCAtIDEpKSAqIE1hdGgucG93KHQwLCB0aGlzLmJsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmVsID0gKGRsIC0gTWF0aC5zcXJ0KGRsICogZGwgLSAxKSkgKiBNYXRoLnBvdyh0MCwgdGhpcy5ibCk7XG4gICAgfVxuICAgIHZhciBobCA9IE1hdGgucG93KHQxLCB0aGlzLmJsKTtcbiAgICB2YXIgbGwgPSBNYXRoLnBvdyh0MiwgdGhpcy5ibCk7XG4gICAgZmwgPSB0aGlzLmVsIC8gaGw7XG4gICAgZ2wgPSAwLjUgKiAoZmwgLSAxIC8gZmwpO1xuICAgIHZhciBqbCA9ICh0aGlzLmVsICogdGhpcy5lbCAtIGxsICogaGwpIC8gKHRoaXMuZWwgKiB0aGlzLmVsICsgbGwgKiBobCk7XG4gICAgdmFyIHBsID0gKGxsIC0gaGwpIC8gKGxsICsgaGwpO1xuICAgIHZhciBkbG9uMTIgPSBhZGp1c3RfbG9uKHRoaXMubG9uZzEgLSB0aGlzLmxvbmcyKTtcbiAgICB0aGlzLmxvbmcwID0gMC41ICogKHRoaXMubG9uZzEgKyB0aGlzLmxvbmcyKSAtIE1hdGguYXRhbihqbCAqIE1hdGgudGFuKDAuNSAqIHRoaXMuYmwgKiAoZGxvbjEyKSkgLyBwbCkgLyB0aGlzLmJsO1xuICAgIHRoaXMubG9uZzAgPSBhZGp1c3RfbG9uKHRoaXMubG9uZzApO1xuICAgIHZhciBkbG9uMTAgPSBhZGp1c3RfbG9uKHRoaXMubG9uZzEgLSB0aGlzLmxvbmcwKTtcbiAgICB0aGlzLmdhbW1hMCA9IE1hdGguYXRhbihNYXRoLnNpbih0aGlzLmJsICogKGRsb24xMCkpIC8gZ2wpO1xuICAgIHRoaXMuYWxwaGEgPSBNYXRoLmFzaW4oZGwgKiBNYXRoLnNpbih0aGlzLmdhbW1hMCkpO1xuICB9XG5cbiAgaWYgKHRoaXMubm9fb2ZmKSB7XG4gICAgdGhpcy51YyA9IDA7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHRoaXMubGF0MCA+PSAwKSB7XG4gICAgICB0aGlzLnVjID0gdGhpcy5hbCAvIHRoaXMuYmwgKiBNYXRoLmF0YW4yKE1hdGguc3FydChkbCAqIGRsIC0gMSksIE1hdGguY29zKHRoaXMuYWxwaGEpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnVjID0gLTEgKiB0aGlzLmFsIC8gdGhpcy5ibCAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGRsICogZGwgLSAxKSwgTWF0aC5jb3ModGhpcy5hbHBoYSkpO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qIE9ibGlxdWUgTWVyY2F0b3IgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIHZhciBkbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgdmFyIHVzLCB2cztcbiAgdmFyIGNvbjtcbiAgaWYgKE1hdGguYWJzKE1hdGguYWJzKGxhdCkgLSBIQUxGX1BJKSA8PSBFUFNMTikge1xuICAgIGlmIChsYXQgPiAwKSB7XG4gICAgICBjb24gPSAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb24gPSAxO1xuICAgIH1cbiAgICB2cyA9IHRoaXMuYWwgLyB0aGlzLmJsICogTWF0aC5sb2coTWF0aC50YW4oRk9SVFBJICsgY29uICogdGhpcy5nYW1tYTAgKiAwLjUpKTtcbiAgICB1cyA9IC0xICogY29uICogSEFMRl9QSSAqIHRoaXMuYWwgLyB0aGlzLmJsO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciB0ID0gdHNmbnoodGhpcy5lLCBsYXQsIE1hdGguc2luKGxhdCkpO1xuICAgIHZhciBxbCA9IHRoaXMuZWwgLyBNYXRoLnBvdyh0LCB0aGlzLmJsKTtcbiAgICB2YXIgc2wgPSAwLjUgKiAocWwgLSAxIC8gcWwpO1xuICAgIHZhciB0bCA9IDAuNSAqIChxbCArIDEgLyBxbCk7XG4gICAgdmFyIHZsID0gTWF0aC5zaW4odGhpcy5ibCAqIChkbG9uKSk7XG4gICAgdmFyIHVsID0gKHNsICogTWF0aC5zaW4odGhpcy5nYW1tYTApIC0gdmwgKiBNYXRoLmNvcyh0aGlzLmdhbW1hMCkpIC8gdGw7XG4gICAgaWYgKE1hdGguYWJzKE1hdGguYWJzKHVsKSAtIDEpIDw9IEVQU0xOKSB7XG4gICAgICB2cyA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2cyA9IDAuNSAqIHRoaXMuYWwgKiBNYXRoLmxvZygoMSAtIHVsKSAvICgxICsgdWwpKSAvIHRoaXMuYmw7XG4gICAgfVxuICAgIGlmIChNYXRoLmFicyhNYXRoLmNvcyh0aGlzLmJsICogKGRsb24pKSkgPD0gRVBTTE4pIHtcbiAgICAgIHVzID0gdGhpcy5hbCAqIHRoaXMuYmwgKiAoZGxvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdXMgPSB0aGlzLmFsICogTWF0aC5hdGFuMihzbCAqIE1hdGguY29zKHRoaXMuZ2FtbWEwKSArIHZsICogTWF0aC5zaW4odGhpcy5nYW1tYTApLCBNYXRoLmNvcyh0aGlzLmJsICogZGxvbikpIC8gdGhpcy5ibDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5ub19yb3QpIHtcbiAgICBwLnggPSB0aGlzLngwICsgdXM7XG4gICAgcC55ID0gdGhpcy55MCArIHZzO1xuICB9XG4gIGVsc2Uge1xuXG4gICAgdXMgLT0gdGhpcy51YztcbiAgICBwLnggPSB0aGlzLngwICsgdnMgKiBNYXRoLmNvcyh0aGlzLmFscGhhKSArIHVzICogTWF0aC5zaW4odGhpcy5hbHBoYSk7XG4gICAgcC55ID0gdGhpcy55MCArIHVzICogTWF0aC5jb3ModGhpcy5hbHBoYSkgLSB2cyAqIE1hdGguc2luKHRoaXMuYWxwaGEpO1xuICB9XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciB1cywgdnM7XG4gIGlmICh0aGlzLm5vX3JvdCkge1xuICAgIHZzID0gcC55IC0gdGhpcy55MDtcbiAgICB1cyA9IHAueCAtIHRoaXMueDA7XG4gIH1cbiAgZWxzZSB7XG4gICAgdnMgPSAocC54IC0gdGhpcy54MCkgKiBNYXRoLmNvcyh0aGlzLmFscGhhKSAtIChwLnkgLSB0aGlzLnkwKSAqIE1hdGguc2luKHRoaXMuYWxwaGEpO1xuICAgIHVzID0gKHAueSAtIHRoaXMueTApICogTWF0aC5jb3ModGhpcy5hbHBoYSkgKyAocC54IC0gdGhpcy54MCkgKiBNYXRoLnNpbih0aGlzLmFscGhhKTtcbiAgICB1cyArPSB0aGlzLnVjO1xuICB9XG4gIHZhciBxcCA9IE1hdGguZXhwKC0xICogdGhpcy5ibCAqIHZzIC8gdGhpcy5hbCk7XG4gIHZhciBzcCA9IDAuNSAqIChxcCAtIDEgLyBxcCk7XG4gIHZhciB0cCA9IDAuNSAqIChxcCArIDEgLyBxcCk7XG4gIHZhciB2cCA9IE1hdGguc2luKHRoaXMuYmwgKiB1cyAvIHRoaXMuYWwpO1xuICB2YXIgdXAgPSAodnAgKiBNYXRoLmNvcyh0aGlzLmdhbW1hMCkgKyBzcCAqIE1hdGguc2luKHRoaXMuZ2FtbWEwKSkgLyB0cDtcbiAgdmFyIHRzID0gTWF0aC5wb3codGhpcy5lbCAvIE1hdGguc3FydCgoMSArIHVwKSAvICgxIC0gdXApKSwgMSAvIHRoaXMuYmwpO1xuICBpZiAoTWF0aC5hYnModXAgLSAxKSA8IEVQU0xOKSB7XG4gICAgcC54ID0gdGhpcy5sb25nMDtcbiAgICBwLnkgPSBIQUxGX1BJO1xuICB9XG4gIGVsc2UgaWYgKE1hdGguYWJzKHVwICsgMSkgPCBFUFNMTikge1xuICAgIHAueCA9IHRoaXMubG9uZzA7XG4gICAgcC55ID0gLTEgKiBIQUxGX1BJO1xuICB9XG4gIGVsc2Uge1xuICAgIHAueSA9IHBoaTJ6KHRoaXMuZSwgdHMpO1xuICAgIHAueCA9IGFkanVzdF9sb24odGhpcy5sb25nMCAtIE1hdGguYXRhbjIoc3AgKiBNYXRoLmNvcyh0aGlzLmdhbW1hMCkgLSB2cCAqIE1hdGguc2luKHRoaXMuZ2FtbWEwKSwgTWF0aC5jb3ModGhpcy5ibCAqIHVzIC8gdGhpcy5hbCkpIC8gdGhpcy5ibCk7XG4gIH1cbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJIb3RpbmVfT2JsaXF1ZV9NZXJjYXRvclwiLCBcIkhvdGluZSBPYmxpcXVlIE1lcmNhdG9yXCIsIFwiSG90aW5lX09ibGlxdWVfTWVyY2F0b3JfQXppbXV0aF9OYXR1cmFsX09yaWdpblwiLCBcIkhvdGluZV9PYmxpcXVlX01lcmNhdG9yX0F6aW11dGhfQ2VudGVyXCIsIFwib21lcmNcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBtc2ZueiBmcm9tICcuLi9jb21tb24vbXNmbnonO1xuaW1wb3J0IHRzZm56IGZyb20gJy4uL2NvbW1vbi90c2Zueic7XG5pbXBvcnQgc2lnbiBmcm9tICcuLi9jb21tb24vc2lnbic7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgcGhpMnogZnJvbSAnLi4vY29tbW9uL3BoaTJ6JztcbmltcG9ydCB7SEFMRl9QSSwgRVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgLy8gYXJyYXkgb2Y6ICByX21haixyX21pbixsYXQxLGxhdDIsY19sb24sY19sYXQsZmFsc2VfZWFzdCxmYWxzZV9ub3J0aFxuICAvL2RvdWJsZSBjX2xhdDsgICAgICAgICAgICAgICAgICAgLyogY2VudGVyIGxhdGl0dWRlICAgICAgICAgICAgICAgICAgICAgICovXG4gIC8vZG91YmxlIGNfbG9uOyAgICAgICAgICAgICAgICAgICAvKiBjZW50ZXIgbG9uZ2l0dWRlICAgICAgICAgICAgICAgICAgICAgKi9cbiAgLy9kb3VibGUgbGF0MTsgICAgICAgICAgICAgICAgICAgIC8qIGZpcnN0IHN0YW5kYXJkIHBhcmFsbGVsICAgICAgICAgICAgICAqL1xuICAvL2RvdWJsZSBsYXQyOyAgICAgICAgICAgICAgICAgICAgLyogc2Vjb25kIHN0YW5kYXJkIHBhcmFsbGVsICAgICAgICAgICAgICovXG4gIC8vZG91YmxlIHJfbWFqOyAgICAgICAgICAgICAgICAgICAvKiBtYWpvciBheGlzICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgLy9kb3VibGUgcl9taW47ICAgICAgICAgICAgICAgICAgIC8qIG1pbm9yIGF4aXMgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAvL2RvdWJsZSBmYWxzZV9lYXN0OyAgICAgICAgICAgICAgLyogeCBvZmZzZXQgaW4gbWV0ZXJzICAgICAgICAgICAgICAgICAgICovXG4gIC8vZG91YmxlIGZhbHNlX25vcnRoOyAgICAgICAgICAgICAvKiB5IG9mZnNldCBpbiBtZXRlcnMgICAgICAgICAgICAgICAgICAgKi9cblxuICBpZiAoIXRoaXMubGF0Mikge1xuICAgIHRoaXMubGF0MiA9IHRoaXMubGF0MTtcbiAgfSAvL2lmIGxhdDIgaXMgbm90IGRlZmluZWRcbiAgaWYgKCF0aGlzLmswKSB7XG4gICAgdGhpcy5rMCA9IDE7XG4gIH1cbiAgdGhpcy54MCA9IHRoaXMueDAgfHwgMDtcbiAgdGhpcy55MCA9IHRoaXMueTAgfHwgMDtcbiAgLy8gU3RhbmRhcmQgUGFyYWxsZWxzIGNhbm5vdCBiZSBlcXVhbCBhbmQgb24gb3Bwb3NpdGUgc2lkZXMgb2YgdGhlIGVxdWF0b3JcbiAgaWYgKE1hdGguYWJzKHRoaXMubGF0MSArIHRoaXMubGF0MikgPCBFUFNMTikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0ZW1wID0gdGhpcy5iIC8gdGhpcy5hO1xuICB0aGlzLmUgPSBNYXRoLnNxcnQoMSAtIHRlbXAgKiB0ZW1wKTtcblxuICB2YXIgc2luMSA9IE1hdGguc2luKHRoaXMubGF0MSk7XG4gIHZhciBjb3MxID0gTWF0aC5jb3ModGhpcy5sYXQxKTtcbiAgdmFyIG1zMSA9IG1zZm56KHRoaXMuZSwgc2luMSwgY29zMSk7XG4gIHZhciB0czEgPSB0c2Zueih0aGlzLmUsIHRoaXMubGF0MSwgc2luMSk7XG5cbiAgdmFyIHNpbjIgPSBNYXRoLnNpbih0aGlzLmxhdDIpO1xuICB2YXIgY29zMiA9IE1hdGguY29zKHRoaXMubGF0Mik7XG4gIHZhciBtczIgPSBtc2Zueih0aGlzLmUsIHNpbjIsIGNvczIpO1xuICB2YXIgdHMyID0gdHNmbnoodGhpcy5lLCB0aGlzLmxhdDIsIHNpbjIpO1xuXG4gIHZhciB0czAgPSB0c2Zueih0aGlzLmUsIHRoaXMubGF0MCwgTWF0aC5zaW4odGhpcy5sYXQwKSk7XG5cbiAgaWYgKE1hdGguYWJzKHRoaXMubGF0MSAtIHRoaXMubGF0MikgPiBFUFNMTikge1xuICAgIHRoaXMubnMgPSBNYXRoLmxvZyhtczEgLyBtczIpIC8gTWF0aC5sb2codHMxIC8gdHMyKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLm5zID0gc2luMTtcbiAgfVxuICBpZiAoaXNOYU4odGhpcy5ucykpIHtcbiAgICB0aGlzLm5zID0gc2luMTtcbiAgfVxuICB0aGlzLmYwID0gbXMxIC8gKHRoaXMubnMgKiBNYXRoLnBvdyh0czEsIHRoaXMubnMpKTtcbiAgdGhpcy5yaCA9IHRoaXMuYSAqIHRoaXMuZjAgKiBNYXRoLnBvdyh0czAsIHRoaXMubnMpO1xuICBpZiAoIXRoaXMudGl0bGUpIHtcbiAgICB0aGlzLnRpdGxlID0gXCJMYW1iZXJ0IENvbmZvcm1hbCBDb25pY1wiO1xuICB9XG59XG5cbi8vIExhbWJlcnQgQ29uZm9ybWFsIGNvbmljIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcblxuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuXG4gIC8vIHNpbmd1bGFyIGNhc2VzIDpcbiAgaWYgKE1hdGguYWJzKDIgKiBNYXRoLmFicyhsYXQpIC0gTWF0aC5QSSkgPD0gRVBTTE4pIHtcbiAgICBsYXQgPSBzaWduKGxhdCkgKiAoSEFMRl9QSSAtIDIgKiBFUFNMTik7XG4gIH1cblxuICB2YXIgY29uID0gTWF0aC5hYnMoTWF0aC5hYnMobGF0KSAtIEhBTEZfUEkpO1xuICB2YXIgdHMsIHJoMTtcbiAgaWYgKGNvbiA+IEVQU0xOKSB7XG4gICAgdHMgPSB0c2Zueih0aGlzLmUsIGxhdCwgTWF0aC5zaW4obGF0KSk7XG4gICAgcmgxID0gdGhpcy5hICogdGhpcy5mMCAqIE1hdGgucG93KHRzLCB0aGlzLm5zKTtcbiAgfVxuICBlbHNlIHtcbiAgICBjb24gPSBsYXQgKiB0aGlzLm5zO1xuICAgIGlmIChjb24gPD0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJoMSA9IDA7XG4gIH1cbiAgdmFyIHRoZXRhID0gdGhpcy5ucyAqIGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIHAueCA9IHRoaXMuazAgKiAocmgxICogTWF0aC5zaW4odGhldGEpKSArIHRoaXMueDA7XG4gIHAueSA9IHRoaXMuazAgKiAodGhpcy5yaCAtIHJoMSAqIE1hdGguY29zKHRoZXRhKSkgKyB0aGlzLnkwO1xuXG4gIHJldHVybiBwO1xufVxuXG4vLyBMYW1iZXJ0IENvbmZvcm1hbCBDb25pYyBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG5cbiAgdmFyIHJoMSwgY29uLCB0cztcbiAgdmFyIGxhdCwgbG9uO1xuICB2YXIgeCA9IChwLnggLSB0aGlzLngwKSAvIHRoaXMuazA7XG4gIHZhciB5ID0gKHRoaXMucmggLSAocC55IC0gdGhpcy55MCkgLyB0aGlzLmswKTtcbiAgaWYgKHRoaXMubnMgPiAwKSB7XG4gICAgcmgxID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgIGNvbiA9IDE7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmgxID0gLU1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICBjb24gPSAtMTtcbiAgfVxuICB2YXIgdGhldGEgPSAwO1xuICBpZiAocmgxICE9PSAwKSB7XG4gICAgdGhldGEgPSBNYXRoLmF0YW4yKChjb24gKiB4KSwgKGNvbiAqIHkpKTtcbiAgfVxuICBpZiAoKHJoMSAhPT0gMCkgfHwgKHRoaXMubnMgPiAwKSkge1xuICAgIGNvbiA9IDEgLyB0aGlzLm5zO1xuICAgIHRzID0gTWF0aC5wb3coKHJoMSAvICh0aGlzLmEgKiB0aGlzLmYwKSksIGNvbik7XG4gICAgbGF0ID0gcGhpMnoodGhpcy5lLCB0cyk7XG4gICAgaWYgKGxhdCA9PT0gLTk5OTkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBsYXQgPSAtSEFMRl9QSTtcbiAgfVxuICBsb24gPSBhZGp1c3RfbG9uKHRoZXRhIC8gdGhpcy5ucyArIHRoaXMubG9uZzApO1xuXG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIkxhbWJlcnQgVGFuZ2VudGlhbCBDb25mb3JtYWwgQ29uaWMgUHJvamVjdGlvblwiLCBcIkxhbWJlcnRfQ29uZm9ybWFsX0NvbmljXCIsIFwiTGFtYmVydF9Db25mb3JtYWxfQ29uaWNfMlNQXCIsIFwibGNjXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLmEgPSA2Mzc3Mzk3LjE1NTtcbiAgdGhpcy5lcyA9IDAuMDA2Njc0MzcyMjMwNjE0O1xuICB0aGlzLmUgPSBNYXRoLnNxcnQodGhpcy5lcyk7XG4gIGlmICghdGhpcy5sYXQwKSB7XG4gICAgdGhpcy5sYXQwID0gMC44NjM5Mzc5Nzk3MzcxOTM7XG4gIH1cbiAgaWYgKCF0aGlzLmxvbmcwKSB7XG4gICAgdGhpcy5sb25nMCA9IDAuNzQxNzY0OTMyMDk3NTkwMSAtIDAuMzA4MzQxNTAxMTg1NjY1O1xuICB9XG4gIC8qIGlmIHNjYWxlIG5vdCBzZXQgZGVmYXVsdCB0byAwLjk5OTkgKi9cbiAgaWYgKCF0aGlzLmswKSB7XG4gICAgdGhpcy5rMCA9IDAuOTk5OTtcbiAgfVxuICB0aGlzLnM0NSA9IDAuNzg1Mzk4MTYzMzk3NDQ4OyAvKiA0NSAqL1xuICB0aGlzLnM5MCA9IDIgKiB0aGlzLnM0NTtcbiAgdGhpcy5maTAgPSB0aGlzLmxhdDA7XG4gIHRoaXMuZTIgPSB0aGlzLmVzO1xuICB0aGlzLmUgPSBNYXRoLnNxcnQodGhpcy5lMik7XG4gIHRoaXMuYWxmYSA9IE1hdGguc3FydCgxICsgKHRoaXMuZTIgKiBNYXRoLnBvdyhNYXRoLmNvcyh0aGlzLmZpMCksIDQpKSAvICgxIC0gdGhpcy5lMikpO1xuICB0aGlzLnVxID0gMS4wNDIxNjg1NjM4MDQ3NDtcbiAgdGhpcy51MCA9IE1hdGguYXNpbihNYXRoLnNpbih0aGlzLmZpMCkgLyB0aGlzLmFsZmEpO1xuICB0aGlzLmcgPSBNYXRoLnBvdygoMSArIHRoaXMuZSAqIE1hdGguc2luKHRoaXMuZmkwKSkgLyAoMSAtIHRoaXMuZSAqIE1hdGguc2luKHRoaXMuZmkwKSksIHRoaXMuYWxmYSAqIHRoaXMuZSAvIDIpO1xuICB0aGlzLmsgPSBNYXRoLnRhbih0aGlzLnUwIC8gMiArIHRoaXMuczQ1KSAvIE1hdGgucG93KE1hdGgudGFuKHRoaXMuZmkwIC8gMiArIHRoaXMuczQ1KSwgdGhpcy5hbGZhKSAqIHRoaXMuZztcbiAgdGhpcy5rMSA9IHRoaXMuazA7XG4gIHRoaXMubjAgPSB0aGlzLmEgKiBNYXRoLnNxcnQoMSAtIHRoaXMuZTIpIC8gKDEgLSB0aGlzLmUyICogTWF0aC5wb3coTWF0aC5zaW4odGhpcy5maTApLCAyKSk7XG4gIHRoaXMuczAgPSAxLjM3MDA4MzQ2MjgxNTU1O1xuICB0aGlzLm4gPSBNYXRoLnNpbih0aGlzLnMwKTtcbiAgdGhpcy5ybzAgPSB0aGlzLmsxICogdGhpcy5uMCAvIE1hdGgudGFuKHRoaXMuczApO1xuICB0aGlzLmFkID0gdGhpcy5zOTAgLSB0aGlzLnVxO1xufVxuXG4vKiBlbGxpcHNvaWQgKi9cbi8qIGNhbGN1bGF0ZSB4eSBmcm9tIGxhdC9sb24gKi9cbi8qIENvbnN0YW50cywgaWRlbnRpY2FsIHRvIGludmVyc2UgdHJhbnNmb3JtIGZ1bmN0aW9uICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBnZmksIHUsIGRlbHRhdiwgcywgZCwgZXBzLCBybztcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgdmFyIGRlbHRhX2xvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIC8qIFRyYW5zZm9ybWF0aW9uICovXG4gIGdmaSA9IE1hdGgucG93KCgoMSArIHRoaXMuZSAqIE1hdGguc2luKGxhdCkpIC8gKDEgLSB0aGlzLmUgKiBNYXRoLnNpbihsYXQpKSksICh0aGlzLmFsZmEgKiB0aGlzLmUgLyAyKSk7XG4gIHUgPSAyICogKE1hdGguYXRhbih0aGlzLmsgKiBNYXRoLnBvdyhNYXRoLnRhbihsYXQgLyAyICsgdGhpcy5zNDUpLCB0aGlzLmFsZmEpIC8gZ2ZpKSAtIHRoaXMuczQ1KTtcbiAgZGVsdGF2ID0gLWRlbHRhX2xvbiAqIHRoaXMuYWxmYTtcbiAgcyA9IE1hdGguYXNpbihNYXRoLmNvcyh0aGlzLmFkKSAqIE1hdGguc2luKHUpICsgTWF0aC5zaW4odGhpcy5hZCkgKiBNYXRoLmNvcyh1KSAqIE1hdGguY29zKGRlbHRhdikpO1xuICBkID0gTWF0aC5hc2luKE1hdGguY29zKHUpICogTWF0aC5zaW4oZGVsdGF2KSAvIE1hdGguY29zKHMpKTtcbiAgZXBzID0gdGhpcy5uICogZDtcbiAgcm8gPSB0aGlzLnJvMCAqIE1hdGgucG93KE1hdGgudGFuKHRoaXMuczAgLyAyICsgdGhpcy5zNDUpLCB0aGlzLm4pIC8gTWF0aC5wb3coTWF0aC50YW4ocyAvIDIgKyB0aGlzLnM0NSksIHRoaXMubik7XG4gIHAueSA9IHJvICogTWF0aC5jb3MoZXBzKSAvIDE7XG4gIHAueCA9IHJvICogTWF0aC5zaW4oZXBzKSAvIDE7XG5cbiAgaWYgKCF0aGlzLmN6ZWNoKSB7XG4gICAgcC55ICo9IC0xO1xuICAgIHAueCAqPSAtMTtcbiAgfVxuICByZXR1cm4gKHApO1xufVxuXG4vKiBjYWxjdWxhdGUgbGF0L2xvbiBmcm9tIHh5ICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciB1LCBkZWx0YXYsIHMsIGQsIGVwcywgcm8sIGZpMTtcbiAgdmFyIG9rO1xuXG4gIC8qIFRyYW5zZm9ybWF0aW9uICovXG4gIC8qIHJldmVydCB5LCB4Ki9cbiAgdmFyIHRtcCA9IHAueDtcbiAgcC54ID0gcC55O1xuICBwLnkgPSB0bXA7XG4gIGlmICghdGhpcy5jemVjaCkge1xuICAgIHAueSAqPSAtMTtcbiAgICBwLnggKj0gLTE7XG4gIH1cbiAgcm8gPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgZXBzID0gTWF0aC5hdGFuMihwLnksIHAueCk7XG4gIGQgPSBlcHMgLyBNYXRoLnNpbih0aGlzLnMwKTtcbiAgcyA9IDIgKiAoTWF0aC5hdGFuKE1hdGgucG93KHRoaXMucm8wIC8gcm8sIDEgLyB0aGlzLm4pICogTWF0aC50YW4odGhpcy5zMCAvIDIgKyB0aGlzLnM0NSkpIC0gdGhpcy5zNDUpO1xuICB1ID0gTWF0aC5hc2luKE1hdGguY29zKHRoaXMuYWQpICogTWF0aC5zaW4ocykgLSBNYXRoLnNpbih0aGlzLmFkKSAqIE1hdGguY29zKHMpICogTWF0aC5jb3MoZCkpO1xuICBkZWx0YXYgPSBNYXRoLmFzaW4oTWF0aC5jb3MocykgKiBNYXRoLnNpbihkKSAvIE1hdGguY29zKHUpKTtcbiAgcC54ID0gdGhpcy5sb25nMCAtIGRlbHRhdiAvIHRoaXMuYWxmYTtcbiAgZmkxID0gdTtcbiAgb2sgPSAwO1xuICB2YXIgaXRlciA9IDA7XG4gIGRvIHtcbiAgICBwLnkgPSAyICogKE1hdGguYXRhbihNYXRoLnBvdyh0aGlzLmssIC0gMSAvIHRoaXMuYWxmYSkgKiBNYXRoLnBvdyhNYXRoLnRhbih1IC8gMiArIHRoaXMuczQ1KSwgMSAvIHRoaXMuYWxmYSkgKiBNYXRoLnBvdygoMSArIHRoaXMuZSAqIE1hdGguc2luKGZpMSkpIC8gKDEgLSB0aGlzLmUgKiBNYXRoLnNpbihmaTEpKSwgdGhpcy5lIC8gMikpIC0gdGhpcy5zNDUpO1xuICAgIGlmIChNYXRoLmFicyhmaTEgLSBwLnkpIDwgMC4wMDAwMDAwMDAxKSB7XG4gICAgICBvayA9IDE7XG4gICAgfVxuICAgIGZpMSA9IHAueTtcbiAgICBpdGVyICs9IDE7XG4gIH0gd2hpbGUgKG9rID09PSAwICYmIGl0ZXIgPCAxNSk7XG4gIGlmIChpdGVyID49IDE1KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKHApO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiS3JvdmFrXCIsIFwia3JvdmFrXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlMCwgZTEsIGUyLCBlMywgcGhpKSB7XG4gIHJldHVybiAoZTAgKiBwaGkgLSBlMSAqIE1hdGguc2luKDIgKiBwaGkpICsgZTIgKiBNYXRoLnNpbig0ICogcGhpKSAtIGUzICogTWF0aC5zaW4oNiAqIHBoaSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICgxIC0gMC4yNSAqIHggKiAoMSArIHggLyAxNiAqICgzICsgMS4yNSAqIHgpKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gKDAuMzc1ICogeCAqICgxICsgMC4yNSAqIHggKiAoMSArIDAuNDY4NzUgKiB4KSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICgwLjA1ODU5Mzc1ICogeCAqIHggKiAoMSArIDAuNzUgKiB4KSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gKHggKiB4ICogeCAqICgzNSAvIDMwNzIpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBlLCBzaW5waGkpIHtcbiAgdmFyIHRlbXAgPSBlICogc2lucGhpO1xuICByZXR1cm4gYSAvIE1hdGguc3FydCgxIC0gdGVtcCAqIHRlbXApO1xufSIsImltcG9ydCB7SEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5pbXBvcnQgc2lnbiBmcm9tICcuL3NpZ24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAoTWF0aC5hYnMoeCkgPCBIQUxGX1BJKSA/IHggOiAoeCAtIChzaWduKHgpICogTWF0aC5QSSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWwsIGUwLCBlMSwgZTIsIGUzKSB7XG4gIHZhciBwaGk7XG4gIHZhciBkcGhpO1xuXG4gIHBoaSA9IG1sIC8gZTA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTU7IGkrKykge1xuICAgIGRwaGkgPSAobWwgLSAoZTAgKiBwaGkgLSBlMSAqIE1hdGguc2luKDIgKiBwaGkpICsgZTIgKiBNYXRoLnNpbig0ICogcGhpKSAtIGUzICogTWF0aC5zaW4oNiAqIHBoaSkpKSAvIChlMCAtIDIgKiBlMSAqIE1hdGguY29zKDIgKiBwaGkpICsgNCAqIGUyICogTWF0aC5jb3MoNCAqIHBoaSkgLSA2ICogZTMgKiBNYXRoLmNvcyg2ICogcGhpKSk7XG4gICAgcGhpICs9IGRwaGk7XG4gICAgaWYgKE1hdGguYWJzKGRwaGkpIDw9IDAuMDAwMDAwMDAwMSkge1xuICAgICAgcmV0dXJuIHBoaTtcbiAgICB9XG4gIH1cblxuICAvLy4ucmVwb3J0RXJyb3IoXCJJTUxGTi1DT05WOkxhdGl0dWRlIGZhaWxlZCB0byBjb252ZXJnZSBhZnRlciAxNSBpdGVyYXRpb25zXCIpO1xuICByZXR1cm4gTmFOO1xufSIsImltcG9ydCBtbGZuIGZyb20gJy4uL2NvbW1vbi9tbGZuJztcbmltcG9ydCBlMGZuIGZyb20gJy4uL2NvbW1vbi9lMGZuJztcbmltcG9ydCBlMWZuIGZyb20gJy4uL2NvbW1vbi9lMWZuJztcbmltcG9ydCBlMmZuIGZyb20gJy4uL2NvbW1vbi9lMmZuJztcbmltcG9ydCBlM2ZuIGZyb20gJy4uL2NvbW1vbi9lM2ZuJztcbmltcG9ydCBnTiBmcm9tICcuLi9jb21tb24vZ04nO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IGFkanVzdF9sYXQgZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sYXQnO1xuaW1wb3J0IGltbGZuIGZyb20gJy4uL2NvbW1vbi9pbWxmbic7XG5pbXBvcnQge0hBTEZfUEksIEVQU0xOfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIGlmICghdGhpcy5zcGhlcmUpIHtcbiAgICB0aGlzLmUwID0gZTBmbih0aGlzLmVzKTtcbiAgICB0aGlzLmUxID0gZTFmbih0aGlzLmVzKTtcbiAgICB0aGlzLmUyID0gZTJmbih0aGlzLmVzKTtcbiAgICB0aGlzLmUzID0gZTNmbih0aGlzLmVzKTtcbiAgICB0aGlzLm1sMCA9IHRoaXMuYSAqIG1sZm4odGhpcy5lMCwgdGhpcy5lMSwgdGhpcy5lMiwgdGhpcy5lMywgdGhpcy5sYXQwKTtcbiAgfVxufVxuXG4vKiBDYXNzaW5pIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG5cbiAgLyogRm9yd2FyZCBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdmFyIHgsIHk7XG4gIHZhciBsYW0gPSBwLng7XG4gIHZhciBwaGkgPSBwLnk7XG4gIGxhbSA9IGFkanVzdF9sb24obGFtIC0gdGhpcy5sb25nMCk7XG5cbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgeCA9IHRoaXMuYSAqIE1hdGguYXNpbihNYXRoLmNvcyhwaGkpICogTWF0aC5zaW4obGFtKSk7XG4gICAgeSA9IHRoaXMuYSAqIChNYXRoLmF0YW4yKE1hdGgudGFuKHBoaSksIE1hdGguY29zKGxhbSkpIC0gdGhpcy5sYXQwKTtcbiAgfVxuICBlbHNlIHtcbiAgICAvL2VsbGlwc29pZFxuICAgIHZhciBzaW5waGkgPSBNYXRoLnNpbihwaGkpO1xuICAgIHZhciBjb3NwaGkgPSBNYXRoLmNvcyhwaGkpO1xuICAgIHZhciBubCA9IGdOKHRoaXMuYSwgdGhpcy5lLCBzaW5waGkpO1xuICAgIHZhciB0bCA9IE1hdGgudGFuKHBoaSkgKiBNYXRoLnRhbihwaGkpO1xuICAgIHZhciBhbCA9IGxhbSAqIE1hdGguY29zKHBoaSk7XG4gICAgdmFyIGFzcSA9IGFsICogYWw7XG4gICAgdmFyIGNsID0gdGhpcy5lcyAqIGNvc3BoaSAqIGNvc3BoaSAvICgxIC0gdGhpcy5lcyk7XG4gICAgdmFyIG1sID0gdGhpcy5hICogbWxmbih0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzLCBwaGkpO1xuXG4gICAgeCA9IG5sICogYWwgKiAoMSAtIGFzcSAqIHRsICogKDEgLyA2IC0gKDggLSB0bCArIDggKiBjbCkgKiBhc3EgLyAxMjApKTtcbiAgICB5ID0gbWwgLSB0aGlzLm1sMCArIG5sICogc2lucGhpIC8gY29zcGhpICogYXNxICogKDAuNSArICg1IC0gdGwgKyA2ICogY2wpICogYXNxIC8gMjQpO1xuXG5cbiAgfVxuXG4gIHAueCA9IHggKyB0aGlzLngwO1xuICBwLnkgPSB5ICsgdGhpcy55MDtcbiAgcmV0dXJuIHA7XG59XG5cbi8qIEludmVyc2UgZXF1YXRpb25zXG4gIC0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuICB2YXIgeCA9IHAueCAvIHRoaXMuYTtcbiAgdmFyIHkgPSBwLnkgLyB0aGlzLmE7XG4gIHZhciBwaGksIGxhbTtcblxuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICB2YXIgZGQgPSB5ICsgdGhpcy5sYXQwO1xuICAgIHBoaSA9IE1hdGguYXNpbihNYXRoLnNpbihkZCkgKiBNYXRoLmNvcyh4KSk7XG4gICAgbGFtID0gTWF0aC5hdGFuMihNYXRoLnRhbih4KSwgTWF0aC5jb3MoZGQpKTtcbiAgfVxuICBlbHNlIHtcbiAgICAvKiBlbGxpcHNvaWQgKi9cbiAgICB2YXIgbWwxID0gdGhpcy5tbDAgLyB0aGlzLmEgKyB5O1xuICAgIHZhciBwaGkxID0gaW1sZm4obWwxLCB0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzKTtcbiAgICBpZiAoTWF0aC5hYnMoTWF0aC5hYnMocGhpMSkgLSBIQUxGX1BJKSA8PSBFUFNMTikge1xuICAgICAgcC54ID0gdGhpcy5sb25nMDtcbiAgICAgIHAueSA9IEhBTEZfUEk7XG4gICAgICBpZiAoeSA8IDApIHtcbiAgICAgICAgcC55ICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIHZhciBubDEgPSBnTih0aGlzLmEsIHRoaXMuZSwgTWF0aC5zaW4ocGhpMSkpO1xuXG4gICAgdmFyIHJsMSA9IG5sMSAqIG5sMSAqIG5sMSAvIHRoaXMuYSAvIHRoaXMuYSAqICgxIC0gdGhpcy5lcyk7XG4gICAgdmFyIHRsMSA9IE1hdGgucG93KE1hdGgudGFuKHBoaTEpLCAyKTtcbiAgICB2YXIgZGwgPSB4ICogdGhpcy5hIC8gbmwxO1xuICAgIHZhciBkc3EgPSBkbCAqIGRsO1xuICAgIHBoaSA9IHBoaTEgLSBubDEgKiBNYXRoLnRhbihwaGkxKSAvIHJsMSAqIGRsICogZGwgKiAoMC41IC0gKDEgKyAzICogdGwxKSAqIGRsICogZGwgLyAyNCk7XG4gICAgbGFtID0gZGwgKiAoMSAtIGRzcSAqICh0bDEgLyAzICsgKDEgKyAzICogdGwxKSAqIHRsMSAqIGRzcSAvIDE1KSkgLyBNYXRoLmNvcyhwaGkxKTtcblxuICB9XG5cbiAgcC54ID0gYWRqdXN0X2xvbihsYW0gKyB0aGlzLmxvbmcwKTtcbiAgcC55ID0gYWRqdXN0X2xhdChwaGkpO1xuICByZXR1cm4gcDtcblxufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiQ2Fzc2luaVwiLCBcIkNhc3NpbmlfU29sZG5lclwiLCBcImNhc3NcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVjY2VudCwgc2lucGhpKSB7XG4gIHZhciBjb247XG4gIGlmIChlY2NlbnQgPiAxLjBlLTcpIHtcbiAgICBjb24gPSBlY2NlbnQgKiBzaW5waGk7XG4gICAgcmV0dXJuICgoMSAtIGVjY2VudCAqIGVjY2VudCkgKiAoc2lucGhpIC8gKDEgLSBjb24gKiBjb24pIC0gKDAuNSAvIGVjY2VudCkgKiBNYXRoLmxvZygoMSAtIGNvbikgLyAoMSArIGNvbikpKSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuICgyICogc2lucGhpKTtcbiAgfVxufSIsIlxuaW1wb3J0IHtIQUxGX1BJLCBFUFNMTiwgRk9SVFBJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuaW1wb3J0IHFzZm56IGZyb20gJy4uL2NvbW1vbi9xc2Zueic7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbi8qXG4gIHJlZmVyZW5jZVxuICAgIFwiTmV3IEVxdWFsLUFyZWEgTWFwIFByb2plY3Rpb25zIGZvciBOb25jaXJjdWxhciBSZWdpb25zXCIsIEpvaG4gUC4gU255ZGVyLFxuICAgIFRoZSBBbWVyaWNhbiBDYXJ0b2dyYXBoZXIsIFZvbCAxNSwgTm8uIDQsIE9jdG9iZXIgMTk4OCwgcHAuIDM0MS0zNTUuXG4gICovXG5cbmV4cG9ydCB2YXIgU19QT0xFID0gMTtcblxuZXhwb3J0IHZhciBOX1BPTEUgPSAyO1xuZXhwb3J0IHZhciBFUVVJVCA9IDM7XG5leHBvcnQgdmFyIE9CTElRID0gNDtcblxuLyogSW5pdGlhbGl6ZSB0aGUgTGFtYmVydCBBemltdXRoYWwgRXF1YWwgQXJlYSBwcm9qZWN0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgdmFyIHQgPSBNYXRoLmFicyh0aGlzLmxhdDApO1xuICBpZiAoTWF0aC5hYnModCAtIEhBTEZfUEkpIDwgRVBTTE4pIHtcbiAgICB0aGlzLm1vZGUgPSB0aGlzLmxhdDAgPCAwID8gdGhpcy5TX1BPTEUgOiB0aGlzLk5fUE9MRTtcbiAgfVxuICBlbHNlIGlmIChNYXRoLmFicyh0KSA8IEVQU0xOKSB7XG4gICAgdGhpcy5tb2RlID0gdGhpcy5FUVVJVDtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLm1vZGUgPSB0aGlzLk9CTElRO1xuICB9XG4gIGlmICh0aGlzLmVzID4gMCkge1xuICAgIHZhciBzaW5waGk7XG5cbiAgICB0aGlzLnFwID0gcXNmbnoodGhpcy5lLCAxKTtcbiAgICB0aGlzLm1tZiA9IDAuNSAvICgxIC0gdGhpcy5lcyk7XG4gICAgdGhpcy5hcGEgPSBhdXRoc2V0KHRoaXMuZXMpO1xuICAgIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSB0aGlzLk5fUE9MRTpcbiAgICAgIHRoaXMuZGQgPSAxO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLlNfUE9MRTpcbiAgICAgIHRoaXMuZGQgPSAxO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLkVRVUlUOlxuICAgICAgdGhpcy5ycSA9IE1hdGguc3FydCgwLjUgKiB0aGlzLnFwKTtcbiAgICAgIHRoaXMuZGQgPSAxIC8gdGhpcy5ycTtcbiAgICAgIHRoaXMueG1mID0gMTtcbiAgICAgIHRoaXMueW1mID0gMC41ICogdGhpcy5xcDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgdGhpcy5PQkxJUTpcbiAgICAgIHRoaXMucnEgPSBNYXRoLnNxcnQoMC41ICogdGhpcy5xcCk7XG4gICAgICBzaW5waGkgPSBNYXRoLnNpbih0aGlzLmxhdDApO1xuICAgICAgdGhpcy5zaW5iMSA9IHFzZm56KHRoaXMuZSwgc2lucGhpKSAvIHRoaXMucXA7XG4gICAgICB0aGlzLmNvc2IxID0gTWF0aC5zcXJ0KDEgLSB0aGlzLnNpbmIxICogdGhpcy5zaW5iMSk7XG4gICAgICB0aGlzLmRkID0gTWF0aC5jb3ModGhpcy5sYXQwKSAvIChNYXRoLnNxcnQoMSAtIHRoaXMuZXMgKiBzaW5waGkgKiBzaW5waGkpICogdGhpcy5ycSAqIHRoaXMuY29zYjEpO1xuICAgICAgdGhpcy55bWYgPSAodGhpcy54bWYgPSB0aGlzLnJxKSAvIHRoaXMuZGQ7XG4gICAgICB0aGlzLnhtZiAqPSB0aGlzLmRkO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuT0JMSVEpIHtcbiAgICAgIHRoaXMuc2lucGgwID0gTWF0aC5zaW4odGhpcy5sYXQwKTtcbiAgICAgIHRoaXMuY29zcGgwID0gTWF0aC5jb3ModGhpcy5sYXQwKTtcbiAgICB9XG4gIH1cbn1cblxuLyogTGFtYmVydCBBemltdXRoYWwgRXF1YWwgQXJlYSBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuXG4gIC8qIEZvcndhcmQgZXF1YXRpb25zXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLSovXG4gIHZhciB4LCB5LCBjb3NsYW0sIHNpbmxhbSwgc2lucGhpLCBxLCBzaW5iLCBjb3NiLCBiLCBjb3NwaGk7XG4gIHZhciBsYW0gPSBwLng7XG4gIHZhciBwaGkgPSBwLnk7XG5cbiAgbGFtID0gYWRqdXN0X2xvbihsYW0gLSB0aGlzLmxvbmcwKTtcbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgc2lucGhpID0gTWF0aC5zaW4ocGhpKTtcbiAgICBjb3NwaGkgPSBNYXRoLmNvcyhwaGkpO1xuICAgIGNvc2xhbSA9IE1hdGguY29zKGxhbSk7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5PQkxJUSB8fCB0aGlzLm1vZGUgPT09IHRoaXMuRVFVSVQpIHtcbiAgICAgIHkgPSAodGhpcy5tb2RlID09PSB0aGlzLkVRVUlUKSA/IDEgKyBjb3NwaGkgKiBjb3NsYW0gOiAxICsgdGhpcy5zaW5waDAgKiBzaW5waGkgKyB0aGlzLmNvc3BoMCAqIGNvc3BoaSAqIGNvc2xhbTtcbiAgICAgIGlmICh5IDw9IEVQU0xOKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgeSA9IE1hdGguc3FydCgyIC8geSk7XG4gICAgICB4ID0geSAqIGNvc3BoaSAqIE1hdGguc2luKGxhbSk7XG4gICAgICB5ICo9ICh0aGlzLm1vZGUgPT09IHRoaXMuRVFVSVQpID8gc2lucGhpIDogdGhpcy5jb3NwaDAgKiBzaW5waGkgLSB0aGlzLnNpbnBoMCAqIGNvc3BoaSAqIGNvc2xhbTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5tb2RlID09PSB0aGlzLk5fUE9MRSB8fCB0aGlzLm1vZGUgPT09IHRoaXMuU19QT0xFKSB7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSB0aGlzLk5fUE9MRSkge1xuICAgICAgICBjb3NsYW0gPSAtY29zbGFtO1xuICAgICAgfVxuICAgICAgaWYgKE1hdGguYWJzKHBoaSArIHRoaXMubGF0MCkgPCBFUFNMTikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHkgPSBGT1JUUEkgLSBwaGkgKiAwLjU7XG4gICAgICB5ID0gMiAqICgodGhpcy5tb2RlID09PSB0aGlzLlNfUE9MRSkgPyBNYXRoLmNvcyh5KSA6IE1hdGguc2luKHkpKTtcbiAgICAgIHggPSB5ICogTWF0aC5zaW4obGFtKTtcbiAgICAgIHkgKj0gY29zbGFtO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBzaW5iID0gMDtcbiAgICBjb3NiID0gMDtcbiAgICBiID0gMDtcbiAgICBjb3NsYW0gPSBNYXRoLmNvcyhsYW0pO1xuICAgIHNpbmxhbSA9IE1hdGguc2luKGxhbSk7XG4gICAgc2lucGhpID0gTWF0aC5zaW4ocGhpKTtcbiAgICBxID0gcXNmbnoodGhpcy5lLCBzaW5waGkpO1xuICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuT0JMSVEgfHwgdGhpcy5tb2RlID09PSB0aGlzLkVRVUlUKSB7XG4gICAgICBzaW5iID0gcSAvIHRoaXMucXA7XG4gICAgICBjb3NiID0gTWF0aC5zcXJ0KDEgLSBzaW5iICogc2luYik7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSB0aGlzLk9CTElROlxuICAgICAgYiA9IDEgKyB0aGlzLnNpbmIxICogc2luYiArIHRoaXMuY29zYjEgKiBjb3NiICogY29zbGFtO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLkVRVUlUOlxuICAgICAgYiA9IDEgKyBjb3NiICogY29zbGFtO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLk5fUE9MRTpcbiAgICAgIGIgPSBIQUxGX1BJICsgcGhpO1xuICAgICAgcSA9IHRoaXMucXAgLSBxO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLlNfUE9MRTpcbiAgICAgIGIgPSBwaGkgLSBIQUxGX1BJO1xuICAgICAgcSA9IHRoaXMucXAgKyBxO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChNYXRoLmFicyhiKSA8IEVQU0xOKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIHRoaXMuT0JMSVE6XG4gICAgY2FzZSB0aGlzLkVRVUlUOlxuICAgICAgYiA9IE1hdGguc3FydCgyIC8gYik7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSB0aGlzLk9CTElRKSB7XG4gICAgICAgIHkgPSB0aGlzLnltZiAqIGIgKiAodGhpcy5jb3NiMSAqIHNpbmIgLSB0aGlzLnNpbmIxICogY29zYiAqIGNvc2xhbSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgeSA9IChiID0gTWF0aC5zcXJ0KDIgLyAoMSArIGNvc2IgKiBjb3NsYW0pKSkgKiBzaW5iICogdGhpcy55bWY7XG4gICAgICB9XG4gICAgICB4ID0gdGhpcy54bWYgKiBiICogY29zYiAqIHNpbmxhbTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgdGhpcy5OX1BPTEU6XG4gICAgY2FzZSB0aGlzLlNfUE9MRTpcbiAgICAgIGlmIChxID49IDApIHtcbiAgICAgICAgeCA9IChiID0gTWF0aC5zcXJ0KHEpKSAqIHNpbmxhbTtcbiAgICAgICAgeSA9IGNvc2xhbSAqICgodGhpcy5tb2RlID09PSB0aGlzLlNfUE9MRSkgPyBiIDogLWIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHggPSB5ID0gMDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHAueCA9IHRoaXMuYSAqIHggKyB0aGlzLngwO1xuICBwLnkgPSB0aGlzLmEgKiB5ICsgdGhpcy55MDtcbiAgcmV0dXJuIHA7XG59XG5cbi8qIEludmVyc2UgZXF1YXRpb25zXG4gIC0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuICB2YXIgeCA9IHAueCAvIHRoaXMuYTtcbiAgdmFyIHkgPSBwLnkgLyB0aGlzLmE7XG4gIHZhciBsYW0sIHBoaSwgY0NlLCBzQ2UsIHEsIHJobywgYWI7XG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIHZhciBjb3N6ID0gMCxcbiAgICAgIHJoLCBzaW56ID0gMDtcblxuICAgIHJoID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgIHBoaSA9IHJoICogMC41O1xuICAgIGlmIChwaGkgPiAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcGhpID0gMiAqIE1hdGguYXNpbihwaGkpO1xuICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuT0JMSVEgfHwgdGhpcy5tb2RlID09PSB0aGlzLkVRVUlUKSB7XG4gICAgICBzaW56ID0gTWF0aC5zaW4ocGhpKTtcbiAgICAgIGNvc3ogPSBNYXRoLmNvcyhwaGkpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgdGhpcy5FUVVJVDpcbiAgICAgIHBoaSA9IChNYXRoLmFicyhyaCkgPD0gRVBTTE4pID8gMCA6IE1hdGguYXNpbih5ICogc2lueiAvIHJoKTtcbiAgICAgIHggKj0gc2luejtcbiAgICAgIHkgPSBjb3N6ICogcmg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuT0JMSVE6XG4gICAgICBwaGkgPSAoTWF0aC5hYnMocmgpIDw9IEVQU0xOKSA/IHRoaXMubGF0MCA6IE1hdGguYXNpbihjb3N6ICogdGhpcy5zaW5waDAgKyB5ICogc2lueiAqIHRoaXMuY29zcGgwIC8gcmgpO1xuICAgICAgeCAqPSBzaW56ICogdGhpcy5jb3NwaDA7XG4gICAgICB5ID0gKGNvc3ogLSBNYXRoLnNpbihwaGkpICogdGhpcy5zaW5waDApICogcmg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuTl9QT0xFOlxuICAgICAgeSA9IC15O1xuICAgICAgcGhpID0gSEFMRl9QSSAtIHBoaTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgdGhpcy5TX1BPTEU6XG4gICAgICBwaGkgLT0gSEFMRl9QSTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsYW0gPSAoeSA9PT0gMCAmJiAodGhpcy5tb2RlID09PSB0aGlzLkVRVUlUIHx8IHRoaXMubW9kZSA9PT0gdGhpcy5PQkxJUSkpID8gMCA6IE1hdGguYXRhbjIoeCwgeSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgYWIgPSAwO1xuICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuT0JMSVEgfHwgdGhpcy5tb2RlID09PSB0aGlzLkVRVUlUKSB7XG4gICAgICB4IC89IHRoaXMuZGQ7XG4gICAgICB5ICo9IHRoaXMuZGQ7XG4gICAgICByaG8gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICBpZiAocmhvIDwgRVBTTE4pIHtcbiAgICAgICAgcC54ID0gdGhpcy5sb25nMDtcbiAgICAgICAgcC55ID0gdGhpcy5sYXQwO1xuICAgICAgICByZXR1cm4gcDtcbiAgICAgIH1cbiAgICAgIHNDZSA9IDIgKiBNYXRoLmFzaW4oMC41ICogcmhvIC8gdGhpcy5ycSk7XG4gICAgICBjQ2UgPSBNYXRoLmNvcyhzQ2UpO1xuICAgICAgeCAqPSAoc0NlID0gTWF0aC5zaW4oc0NlKSk7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSB0aGlzLk9CTElRKSB7XG4gICAgICAgIGFiID0gY0NlICogdGhpcy5zaW5iMSArIHkgKiBzQ2UgKiB0aGlzLmNvc2IxIC8gcmhvO1xuICAgICAgICBxID0gdGhpcy5xcCAqIGFiO1xuICAgICAgICB5ID0gcmhvICogdGhpcy5jb3NiMSAqIGNDZSAtIHkgKiB0aGlzLnNpbmIxICogc0NlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGFiID0geSAqIHNDZSAvIHJobztcbiAgICAgICAgcSA9IHRoaXMucXAgKiBhYjtcbiAgICAgICAgeSA9IHJobyAqIGNDZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5tb2RlID09PSB0aGlzLk5fUE9MRSB8fCB0aGlzLm1vZGUgPT09IHRoaXMuU19QT0xFKSB7XG4gICAgICBpZiAodGhpcy5tb2RlID09PSB0aGlzLk5fUE9MRSkge1xuICAgICAgICB5ID0gLXk7XG4gICAgICB9XG4gICAgICBxID0gKHggKiB4ICsgeSAqIHkpO1xuICAgICAgaWYgKCFxKSB7XG4gICAgICAgIHAueCA9IHRoaXMubG9uZzA7XG4gICAgICAgIHAueSA9IHRoaXMubGF0MDtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9XG4gICAgICBhYiA9IDEgLSBxIC8gdGhpcy5xcDtcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuU19QT0xFKSB7XG4gICAgICAgIGFiID0gLWFiO1xuICAgICAgfVxuICAgIH1cbiAgICBsYW0gPSBNYXRoLmF0YW4yKHgsIHkpO1xuICAgIHBoaSA9IGF1dGhsYXQoTWF0aC5hc2luKGFiKSwgdGhpcy5hcGEpO1xuICB9XG5cbiAgcC54ID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgbGFtKTtcbiAgcC55ID0gcGhpO1xuICByZXR1cm4gcDtcbn1cblxuLyogZGV0ZXJtaW5lIGxhdGl0dWRlIGZyb20gYXV0aGFsaWMgbGF0aXR1ZGUgKi9cbnZhciBQMDAgPSAwLjMzMzMzMzMzMzMzMzMzMzMzMzMzO1xuXG52YXIgUDAxID0gMC4xNzIyMjIyMjIyMjIyMjIyMjIyMjtcbnZhciBQMDIgPSAwLjEwMjU3OTM2NTA3OTM2NTA3OTM2O1xudmFyIFAxMCA9IDAuMDYzODg4ODg4ODg4ODg4ODg4ODg7XG52YXIgUDExID0gMC4wNjY0MDIxMTY0MDIxMTY0MDIxMTtcbnZhciBQMjAgPSAwLjAxNjQxNTAxMjk0MjE5MTU0NDQzO1xuXG5mdW5jdGlvbiBhdXRoc2V0KGVzKSB7XG4gIHZhciB0O1xuICB2YXIgQVBBID0gW107XG4gIEFQQVswXSA9IGVzICogUDAwO1xuICB0ID0gZXMgKiBlcztcbiAgQVBBWzBdICs9IHQgKiBQMDE7XG4gIEFQQVsxXSA9IHQgKiBQMTA7XG4gIHQgKj0gZXM7XG4gIEFQQVswXSArPSB0ICogUDAyO1xuICBBUEFbMV0gKz0gdCAqIFAxMTtcbiAgQVBBWzJdID0gdCAqIFAyMDtcbiAgcmV0dXJuIEFQQTtcbn1cblxuZnVuY3Rpb24gYXV0aGxhdChiZXRhLCBBUEEpIHtcbiAgdmFyIHQgPSBiZXRhICsgYmV0YTtcbiAgcmV0dXJuIChiZXRhICsgQVBBWzBdICogTWF0aC5zaW4odCkgKyBBUEFbMV0gKiBNYXRoLnNpbih0ICsgdCkgKyBBUEFbMl0gKiBNYXRoLnNpbih0ICsgdCArIHQpKTtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIkxhbWJlcnQgQXppbXV0aGFsIEVxdWFsIEFyZWFcIiwgXCJMYW1iZXJ0X0F6aW11dGhhbF9FcXVhbF9BcmVhXCIsIFwibGFlYVwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzLFxuICBTX1BPTEU6IFNfUE9MRSxcbiAgTl9QT0xFOiBOX1BPTEUsXG4gIEVRVUlUOiBFUVVJVCxcbiAgT0JMSVE6IE9CTElRXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICBpZiAoTWF0aC5hYnMoeCkgPiAxKSB7XG4gICAgeCA9ICh4ID4gMSkgPyAxIDogLTE7XG4gIH1cbiAgcmV0dXJuIE1hdGguYXNpbih4KTtcbn0iLCJpbXBvcnQgbXNmbnogZnJvbSAnLi4vY29tbW9uL21zZm56JztcbmltcG9ydCBxc2ZueiBmcm9tICcuLi9jb21tb24vcXNmbnonO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IGFzaW56IGZyb20gJy4uL2NvbW1vbi9hc2lueic7XG5pbXBvcnQge0VQU0xOfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgaWYgKE1hdGguYWJzKHRoaXMubGF0MSArIHRoaXMubGF0MikgPCBFUFNMTikge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnRlbXAgPSB0aGlzLmIgLyB0aGlzLmE7XG4gIHRoaXMuZXMgPSAxIC0gTWF0aC5wb3codGhpcy50ZW1wLCAyKTtcbiAgdGhpcy5lMyA9IE1hdGguc3FydCh0aGlzLmVzKTtcblxuICB0aGlzLnNpbl9wbyA9IE1hdGguc2luKHRoaXMubGF0MSk7XG4gIHRoaXMuY29zX3BvID0gTWF0aC5jb3ModGhpcy5sYXQxKTtcbiAgdGhpcy50MSA9IHRoaXMuc2luX3BvO1xuICB0aGlzLmNvbiA9IHRoaXMuc2luX3BvO1xuICB0aGlzLm1zMSA9IG1zZm56KHRoaXMuZTMsIHRoaXMuc2luX3BvLCB0aGlzLmNvc19wbyk7XG4gIHRoaXMucXMxID0gcXNmbnoodGhpcy5lMywgdGhpcy5zaW5fcG8sIHRoaXMuY29zX3BvKTtcblxuICB0aGlzLnNpbl9wbyA9IE1hdGguc2luKHRoaXMubGF0Mik7XG4gIHRoaXMuY29zX3BvID0gTWF0aC5jb3ModGhpcy5sYXQyKTtcbiAgdGhpcy50MiA9IHRoaXMuc2luX3BvO1xuICB0aGlzLm1zMiA9IG1zZm56KHRoaXMuZTMsIHRoaXMuc2luX3BvLCB0aGlzLmNvc19wbyk7XG4gIHRoaXMucXMyID0gcXNmbnoodGhpcy5lMywgdGhpcy5zaW5fcG8sIHRoaXMuY29zX3BvKTtcblxuICB0aGlzLnNpbl9wbyA9IE1hdGguc2luKHRoaXMubGF0MCk7XG4gIHRoaXMuY29zX3BvID0gTWF0aC5jb3ModGhpcy5sYXQwKTtcbiAgdGhpcy50MyA9IHRoaXMuc2luX3BvO1xuICB0aGlzLnFzMCA9IHFzZm56KHRoaXMuZTMsIHRoaXMuc2luX3BvLCB0aGlzLmNvc19wbyk7XG5cbiAgaWYgKE1hdGguYWJzKHRoaXMubGF0MSAtIHRoaXMubGF0MikgPiBFUFNMTikge1xuICAgIHRoaXMubnMwID0gKHRoaXMubXMxICogdGhpcy5tczEgLSB0aGlzLm1zMiAqIHRoaXMubXMyKSAvICh0aGlzLnFzMiAtIHRoaXMucXMxKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLm5zMCA9IHRoaXMuY29uO1xuICB9XG4gIHRoaXMuYyA9IHRoaXMubXMxICogdGhpcy5tczEgKyB0aGlzLm5zMCAqIHRoaXMucXMxO1xuICB0aGlzLnJoID0gdGhpcy5hICogTWF0aC5zcXJ0KHRoaXMuYyAtIHRoaXMubnMwICogdGhpcy5xczApIC8gdGhpcy5uczA7XG59XG5cbi8qIEFsYmVycyBDb25pY2FsIEVxdWFsIEFyZWEgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuXG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG5cbiAgdGhpcy5zaW5fcGhpID0gTWF0aC5zaW4obGF0KTtcbiAgdGhpcy5jb3NfcGhpID0gTWF0aC5jb3MobGF0KTtcblxuICB2YXIgcXMgPSBxc2Zueih0aGlzLmUzLCB0aGlzLnNpbl9waGksIHRoaXMuY29zX3BoaSk7XG4gIHZhciByaDEgPSB0aGlzLmEgKiBNYXRoLnNxcnQodGhpcy5jIC0gdGhpcy5uczAgKiBxcykgLyB0aGlzLm5zMDtcbiAgdmFyIHRoZXRhID0gdGhpcy5uczAgKiBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICB2YXIgeCA9IHJoMSAqIE1hdGguc2luKHRoZXRhKSArIHRoaXMueDA7XG4gIHZhciB5ID0gdGhpcy5yaCAtIHJoMSAqIE1hdGguY29zKHRoZXRhKSArIHRoaXMueTA7XG5cbiAgcC54ID0geDtcbiAgcC55ID0geTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIHJoMSwgcXMsIGNvbiwgdGhldGEsIGxvbiwgbGF0O1xuXG4gIHAueCAtPSB0aGlzLngwO1xuICBwLnkgPSB0aGlzLnJoIC0gcC55ICsgdGhpcy55MDtcbiAgaWYgKHRoaXMubnMwID49IDApIHtcbiAgICByaDEgPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgICBjb24gPSAxO1xuICB9XG4gIGVsc2Uge1xuICAgIHJoMSA9IC1NYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgICBjb24gPSAtMTtcbiAgfVxuICB0aGV0YSA9IDA7XG4gIGlmIChyaDEgIT09IDApIHtcbiAgICB0aGV0YSA9IE1hdGguYXRhbjIoY29uICogcC54LCBjb24gKiBwLnkpO1xuICB9XG4gIGNvbiA9IHJoMSAqIHRoaXMubnMwIC8gdGhpcy5hO1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBsYXQgPSBNYXRoLmFzaW4oKHRoaXMuYyAtIGNvbiAqIGNvbikgLyAoMiAqIHRoaXMubnMwKSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgcXMgPSAodGhpcy5jIC0gY29uICogY29uKSAvIHRoaXMubnMwO1xuICAgIGxhdCA9IHRoaXMucGhpMXoodGhpcy5lMywgcXMpO1xuICB9XG5cbiAgbG9uID0gYWRqdXN0X2xvbih0aGV0YSAvIHRoaXMubnMwICsgdGhpcy5sb25nMCk7XG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuICByZXR1cm4gcDtcbn1cblxuLyogRnVuY3Rpb24gdG8gY29tcHV0ZSBwaGkxLCB0aGUgbGF0aXR1ZGUgZm9yIHRoZSBpbnZlcnNlIG9mIHRoZVxuICAgQWxiZXJzIENvbmljYWwgRXF1YWwtQXJlYSBwcm9qZWN0aW9uLlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gcGhpMXooZWNjZW50LCBxcykge1xuICB2YXIgc2lucGhpLCBjb3NwaGksIGNvbiwgY29tLCBkcGhpO1xuICB2YXIgcGhpID0gYXNpbnooMC41ICogcXMpO1xuICBpZiAoZWNjZW50IDwgRVBTTE4pIHtcbiAgICByZXR1cm4gcGhpO1xuICB9XG5cbiAgdmFyIGVjY250cyA9IGVjY2VudCAqIGVjY2VudDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMjU7IGkrKykge1xuICAgIHNpbnBoaSA9IE1hdGguc2luKHBoaSk7XG4gICAgY29zcGhpID0gTWF0aC5jb3MocGhpKTtcbiAgICBjb24gPSBlY2NlbnQgKiBzaW5waGk7XG4gICAgY29tID0gMSAtIGNvbiAqIGNvbjtcbiAgICBkcGhpID0gMC41ICogY29tICogY29tIC8gY29zcGhpICogKHFzIC8gKDEgLSBlY2NudHMpIC0gc2lucGhpIC8gY29tICsgMC41IC8gZWNjZW50ICogTWF0aC5sb2coKDEgLSBjb24pIC8gKDEgKyBjb24pKSk7XG4gICAgcGhpID0gcGhpICsgZHBoaTtcbiAgICBpZiAoTWF0aC5hYnMoZHBoaSkgPD0gMWUtNykge1xuICAgICAgcmV0dXJuIHBoaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJBbGJlcnNfQ29uaWNfRXF1YWxfQXJlYVwiLCBcIkFsYmVyc1wiLCBcImFlYVwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzLFxuICBwaGkxejogcGhpMXpcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgYXNpbnogZnJvbSAnLi4vY29tbW9uL2FzaW56JztcbmltcG9ydCB7RVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG4vKlxuICByZWZlcmVuY2U6XG4gICAgV29sZnJhbSBNYXRod29ybGQgXCJHbm9tb25pYyBQcm9qZWN0aW9uXCJcbiAgICBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0dub21vbmljUHJvamVjdGlvbi5odG1sXG4gICAgQWNjZXNzZWQ6IDEydGggTm92ZW1iZXIgMjAwOVxuICAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgLyogUGxhY2UgcGFyYW1ldGVycyBpbiBzdGF0aWMgc3RvcmFnZSBmb3IgY29tbW9uIHVzZVxuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIHRoaXMuc2luX3AxNCA9IE1hdGguc2luKHRoaXMubGF0MCk7XG4gIHRoaXMuY29zX3AxNCA9IE1hdGguY29zKHRoaXMubGF0MCk7XG4gIC8vIEFwcHJveGltYXRpb24gZm9yIHByb2plY3RpbmcgcG9pbnRzIHRvIHRoZSBob3Jpem9uIChpbmZpbml0eSlcbiAgdGhpcy5pbmZpbml0eV9kaXN0ID0gMTAwMCAqIHRoaXMuYTtcbiAgdGhpcy5yYyA9IDE7XG59XG5cbi8qIEdub21vbmljIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBzaW5waGksIGNvc3BoaTsgLyogc2luIGFuZCBjb3MgdmFsdWUgICAgICAgICovXG4gIHZhciBkbG9uOyAvKiBkZWx0YSBsb25naXR1ZGUgdmFsdWUgICAgICAqL1xuICB2YXIgY29zbG9uOyAvKiBjb3Mgb2YgbG9uZ2l0dWRlICAgICAgICAqL1xuICB2YXIga3NwOyAvKiBzY2FsZSBmYWN0b3IgICAgICAgICAgKi9cbiAgdmFyIGc7XG4gIHZhciB4LCB5O1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBkbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcblxuICBzaW5waGkgPSBNYXRoLnNpbihsYXQpO1xuICBjb3NwaGkgPSBNYXRoLmNvcyhsYXQpO1xuXG4gIGNvc2xvbiA9IE1hdGguY29zKGRsb24pO1xuICBnID0gdGhpcy5zaW5fcDE0ICogc2lucGhpICsgdGhpcy5jb3NfcDE0ICogY29zcGhpICogY29zbG9uO1xuICBrc3AgPSAxO1xuICBpZiAoKGcgPiAwKSB8fCAoTWF0aC5hYnMoZykgPD0gRVBTTE4pKSB7XG4gICAgeCA9IHRoaXMueDAgKyB0aGlzLmEgKiBrc3AgKiBjb3NwaGkgKiBNYXRoLnNpbihkbG9uKSAvIGc7XG4gICAgeSA9IHRoaXMueTAgKyB0aGlzLmEgKiBrc3AgKiAodGhpcy5jb3NfcDE0ICogc2lucGhpIC0gdGhpcy5zaW5fcDE0ICogY29zcGhpICogY29zbG9uKSAvIGc7XG4gIH1cbiAgZWxzZSB7XG5cbiAgICAvLyBQb2ludCBpcyBpbiB0aGUgb3Bwb3NpbmcgaGVtaXNwaGVyZSBhbmQgaXMgdW5wcm9qZWN0YWJsZVxuICAgIC8vIFdlIHN0aWxsIG5lZWQgdG8gcmV0dXJuIGEgcmVhc29uYWJsZSBwb2ludCwgc28gd2UgcHJvamVjdFxuICAgIC8vIHRvIGluZmluaXR5LCBvbiBhIGJlYXJpbmdcbiAgICAvLyBlcXVpdmFsZW50IHRvIHRoZSBub3J0aGVybiBoZW1pc3BoZXJlIGVxdWl2YWxlbnRcbiAgICAvLyBUaGlzIGlzIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uIGZvciBzaG9ydCBzaGFwZXMgYW5kIGxpbmVzIHRoYXRcbiAgICAvLyBzdHJhZGRsZSB0aGUgaG9yaXpvbi5cblxuICAgIHggPSB0aGlzLngwICsgdGhpcy5pbmZpbml0eV9kaXN0ICogY29zcGhpICogTWF0aC5zaW4oZGxvbik7XG4gICAgeSA9IHRoaXMueTAgKyB0aGlzLmluZmluaXR5X2Rpc3QgKiAodGhpcy5jb3NfcDE0ICogc2lucGhpIC0gdGhpcy5zaW5fcDE0ICogY29zcGhpICogY29zbG9uKTtcblxuICB9XG4gIHAueCA9IHg7XG4gIHAueSA9IHk7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciByaDsgLyogUmhvICovXG4gIHZhciBzaW5jLCBjb3NjO1xuICB2YXIgYztcbiAgdmFyIGxvbiwgbGF0O1xuXG4gIC8qIEludmVyc2UgZXF1YXRpb25zXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLSovXG4gIHAueCA9IChwLnggLSB0aGlzLngwKSAvIHRoaXMuYTtcbiAgcC55ID0gKHAueSAtIHRoaXMueTApIC8gdGhpcy5hO1xuXG4gIHAueCAvPSB0aGlzLmswO1xuICBwLnkgLz0gdGhpcy5rMDtcblxuICBpZiAoKHJoID0gTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSkpKSB7XG4gICAgYyA9IE1hdGguYXRhbjIocmgsIHRoaXMucmMpO1xuICAgIHNpbmMgPSBNYXRoLnNpbihjKTtcbiAgICBjb3NjID0gTWF0aC5jb3MoYyk7XG5cbiAgICBsYXQgPSBhc2lueihjb3NjICogdGhpcy5zaW5fcDE0ICsgKHAueSAqIHNpbmMgKiB0aGlzLmNvc19wMTQpIC8gcmgpO1xuICAgIGxvbiA9IE1hdGguYXRhbjIocC54ICogc2luYywgcmggKiB0aGlzLmNvc19wMTQgKiBjb3NjIC0gcC55ICogdGhpcy5zaW5fcDE0ICogc2luYyk7XG4gICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgbG9uKTtcbiAgfVxuICBlbHNlIHtcbiAgICBsYXQgPSB0aGlzLnBoaWMwO1xuICAgIGxvbiA9IDA7XG4gIH1cblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJnbm9tXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgcXNmbnogZnJvbSAnLi4vY29tbW9uL3FzZm56JztcbmltcG9ydCBtc2ZueiBmcm9tICcuLi9jb21tb24vbXNmbnonO1xuaW1wb3J0IGlxc2ZueiBmcm9tICcuLi9jb21tb24vaXFzZm56JztcblxuLypcbiAgcmVmZXJlbmNlOlxuICAgIFwiQ2FydG9ncmFwaGljIFByb2plY3Rpb24gUHJvY2VkdXJlcyBmb3IgdGhlIFVOSVggRW52aXJvbm1lbnQtXG4gICAgQSBVc2VyJ3MgTWFudWFsXCIgYnkgR2VyYWxkIEkuIEV2ZW5kZW4sXG4gICAgVVNHUyBPcGVuIEZpbGUgUmVwb3J0IDkwLTI4NGFuZCBSZWxlYXNlIDQgSW50ZXJpbSBSZXBvcnRzICgyMDAzKVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICAvL25vLW9wXG4gIGlmICghdGhpcy5zcGhlcmUpIHtcbiAgICB0aGlzLmswID0gbXNmbnoodGhpcy5lLCBNYXRoLnNpbih0aGlzLmxhdF90cyksIE1hdGguY29zKHRoaXMubGF0X3RzKSk7XG4gIH1cbn1cblxuLyogQ3lsaW5kcmljYWwgRXF1YWwgQXJlYSBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuICB2YXIgeCwgeTtcbiAgLyogRm9yd2FyZCBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdmFyIGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICB4ID0gdGhpcy54MCArIHRoaXMuYSAqIGRsb24gKiBNYXRoLmNvcyh0aGlzLmxhdF90cyk7XG4gICAgeSA9IHRoaXMueTAgKyB0aGlzLmEgKiBNYXRoLnNpbihsYXQpIC8gTWF0aC5jb3ModGhpcy5sYXRfdHMpO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciBxcyA9IHFzZm56KHRoaXMuZSwgTWF0aC5zaW4obGF0KSk7XG4gICAgeCA9IHRoaXMueDAgKyB0aGlzLmEgKiB0aGlzLmswICogZGxvbjtcbiAgICB5ID0gdGhpcy55MCArIHRoaXMuYSAqIHFzICogMC41IC8gdGhpcy5rMDtcbiAgfVxuXG4gIHAueCA9IHg7XG4gIHAueSA9IHk7XG4gIHJldHVybiBwO1xufVxuXG4vKiBDeWxpbmRyaWNhbCBFcXVhbCBBcmVhIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZ1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHAueCAtPSB0aGlzLngwO1xuICBwLnkgLT0gdGhpcy55MDtcbiAgdmFyIGxvbiwgbGF0O1xuXG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIChwLnggLyB0aGlzLmEpIC8gTWF0aC5jb3ModGhpcy5sYXRfdHMpKTtcbiAgICBsYXQgPSBNYXRoLmFzaW4oKHAueSAvIHRoaXMuYSkgKiBNYXRoLmNvcyh0aGlzLmxhdF90cykpO1xuICB9XG4gIGVsc2Uge1xuICAgIGxhdCA9IGlxc2Zueih0aGlzLmUsIDIgKiBwLnkgKiB0aGlzLmswIC8gdGhpcy5hKTtcbiAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBwLnggLyAodGhpcy5hICogdGhpcy5rMCkpO1xuICB9XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiY2VhXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQge0hBTEZfUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlY2NlbnQsIHEpIHtcbiAgdmFyIHRlbXAgPSAxIC0gKDEgLSBlY2NlbnQgKiBlY2NlbnQpIC8gKDIgKiBlY2NlbnQpICogTWF0aC5sb2coKDEgLSBlY2NlbnQpIC8gKDEgKyBlY2NlbnQpKTtcbiAgaWYgKE1hdGguYWJzKE1hdGguYWJzKHEpIC0gdGVtcCkgPCAxLjBFLTYpIHtcbiAgICBpZiAocSA8IDApIHtcbiAgICAgIHJldHVybiAoLTEgKiBIQUxGX1BJKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gSEFMRl9QSTtcbiAgICB9XG4gIH1cbiAgLy92YXIgcGhpID0gMC41KiBxLygxLWVjY2VudCplY2NlbnQpO1xuICB2YXIgcGhpID0gTWF0aC5hc2luKDAuNSAqIHEpO1xuICB2YXIgZHBoaTtcbiAgdmFyIHNpbl9waGk7XG4gIHZhciBjb3NfcGhpO1xuICB2YXIgY29uO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMwOyBpKyspIHtcbiAgICBzaW5fcGhpID0gTWF0aC5zaW4ocGhpKTtcbiAgICBjb3NfcGhpID0gTWF0aC5jb3MocGhpKTtcbiAgICBjb24gPSBlY2NlbnQgKiBzaW5fcGhpO1xuICAgIGRwaGkgPSBNYXRoLnBvdygxIC0gY29uICogY29uLCAyKSAvICgyICogY29zX3BoaSkgKiAocSAvICgxIC0gZWNjZW50ICogZWNjZW50KSAtIHNpbl9waGkgLyAoMSAtIGNvbiAqIGNvbikgKyAwLjUgLyBlY2NlbnQgKiBNYXRoLmxvZygoMSAtIGNvbikgLyAoMSArIGNvbikpKTtcbiAgICBwaGkgKz0gZHBoaTtcbiAgICBpZiAoTWF0aC5hYnMoZHBoaSkgPD0gMC4wMDAwMDAwMDAxKSB7XG4gICAgICByZXR1cm4gcGhpO1xuICAgIH1cbiAgfVxuXG4gIC8vY29uc29sZS5sb2coXCJJUVNGTi1DT05WOkxhdGl0dWRlIGZhaWxlZCB0byBjb252ZXJnZSBhZnRlciAzMCBpdGVyYXRpb25zXCIpO1xuICByZXR1cm4gTmFOO1xufVxuIiwiaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IGFkanVzdF9sYXQgZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sYXQnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcblxuICB0aGlzLngwID0gdGhpcy54MCB8fCAwO1xuICB0aGlzLnkwID0gdGhpcy55MCB8fCAwO1xuICB0aGlzLmxhdDAgPSB0aGlzLmxhdDAgfHwgMDtcbiAgdGhpcy5sb25nMCA9IHRoaXMubG9uZzAgfHwgMDtcbiAgdGhpcy5sYXRfdHMgPSB0aGlzLmxhdF90cyB8fCAwO1xuICB0aGlzLnRpdGxlID0gdGhpcy50aXRsZSB8fCBcIkVxdWlkaXN0YW50IEN5bGluZHJpY2FsIChQbGF0ZSBDYXJyZSlcIjtcblxuICB0aGlzLnJjID0gTWF0aC5jb3ModGhpcy5sYXRfdHMpO1xufVxuXG4vLyBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG5cbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcblxuICB2YXIgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIHZhciBkbGF0ID0gYWRqdXN0X2xhdChsYXQgLSB0aGlzLmxhdDApO1xuICBwLnggPSB0aGlzLngwICsgKHRoaXMuYSAqIGRsb24gKiB0aGlzLnJjKTtcbiAgcC55ID0gdGhpcy55MCArICh0aGlzLmEgKiBkbGF0KTtcbiAgcmV0dXJuIHA7XG59XG5cbi8vIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZ1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcblxuICB2YXIgeCA9IHAueDtcbiAgdmFyIHkgPSBwLnk7XG5cbiAgcC54ID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgKCh4IC0gdGhpcy54MCkgLyAodGhpcy5hICogdGhpcy5yYykpKTtcbiAgcC55ID0gYWRqdXN0X2xhdCh0aGlzLmxhdDAgKyAoKHkgLSB0aGlzLnkwKSAvICh0aGlzLmEpKSk7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiRXF1aXJlY3Rhbmd1bGFyXCIsIFwiRXF1aWRpc3RhbnRfQ3lsaW5kcmljYWxcIiwgXCJlcWNcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBlMGZuIGZyb20gJy4uL2NvbW1vbi9lMGZuJztcbmltcG9ydCBlMWZuIGZyb20gJy4uL2NvbW1vbi9lMWZuJztcbmltcG9ydCBlMmZuIGZyb20gJy4uL2NvbW1vbi9lMmZuJztcbmltcG9ydCBlM2ZuIGZyb20gJy4uL2NvbW1vbi9lM2ZuJztcbmltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCBhZGp1c3RfbGF0IGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbGF0JztcbmltcG9ydCBtbGZuIGZyb20gJy4uL2NvbW1vbi9tbGZuJztcbmltcG9ydCB7RVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5pbXBvcnQgZ04gZnJvbSAnLi4vY29tbW9uL2dOJztcbnZhciBNQVhfSVRFUiA9IDIwO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgLyogUGxhY2UgcGFyYW1ldGVycyBpbiBzdGF0aWMgc3RvcmFnZSBmb3IgY29tbW9uIHVzZVxuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIHRoaXMudGVtcCA9IHRoaXMuYiAvIHRoaXMuYTtcbiAgdGhpcy5lcyA9IDEgLSBNYXRoLnBvdyh0aGlzLnRlbXAsIDIpOyAvLyBkZXZhaXQgZXRyZSBkYW5zIHRtZXJjLmpzIG1haXMgbiB5IGVzdCBwYXMgZG9uYyBqZSBjb21tZW50ZSBzaW5vbiByZXRvdXIgZGUgdmFsZXVycyBudWxsZXNcbiAgdGhpcy5lID0gTWF0aC5zcXJ0KHRoaXMuZXMpO1xuICB0aGlzLmUwID0gZTBmbih0aGlzLmVzKTtcbiAgdGhpcy5lMSA9IGUxZm4odGhpcy5lcyk7XG4gIHRoaXMuZTIgPSBlMmZuKHRoaXMuZXMpO1xuICB0aGlzLmUzID0gZTNmbih0aGlzLmVzKTtcbiAgdGhpcy5tbDAgPSB0aGlzLmEgKiBtbGZuKHRoaXMuZTAsIHRoaXMuZTEsIHRoaXMuZTIsIHRoaXMuZTMsIHRoaXMubGF0MCk7IC8vc2kgcXVlIGRlcyB6ZXJvcyBsZSBjYWxjdWwgbmUgc2UgZmFpdCBwYXNcbn1cblxuLyogUG9seWNvbmljIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIHZhciB4LCB5LCBlbDtcbiAgdmFyIGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICBlbCA9IGRsb24gKiBNYXRoLnNpbihsYXQpO1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBpZiAoTWF0aC5hYnMobGF0KSA8PSBFUFNMTikge1xuICAgICAgeCA9IHRoaXMuYSAqIGRsb247XG4gICAgICB5ID0gLTEgKiB0aGlzLmEgKiB0aGlzLmxhdDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgeCA9IHRoaXMuYSAqIE1hdGguc2luKGVsKSAvIE1hdGgudGFuKGxhdCk7XG4gICAgICB5ID0gdGhpcy5hICogKGFkanVzdF9sYXQobGF0IC0gdGhpcy5sYXQwKSArICgxIC0gTWF0aC5jb3MoZWwpKSAvIE1hdGgudGFuKGxhdCkpO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBpZiAoTWF0aC5hYnMobGF0KSA8PSBFUFNMTikge1xuICAgICAgeCA9IHRoaXMuYSAqIGRsb247XG4gICAgICB5ID0gLTEgKiB0aGlzLm1sMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmwgPSBnTih0aGlzLmEsIHRoaXMuZSwgTWF0aC5zaW4obGF0KSkgLyBNYXRoLnRhbihsYXQpO1xuICAgICAgeCA9IG5sICogTWF0aC5zaW4oZWwpO1xuICAgICAgeSA9IHRoaXMuYSAqIG1sZm4odGhpcy5lMCwgdGhpcy5lMSwgdGhpcy5lMiwgdGhpcy5lMywgbGF0KSAtIHRoaXMubWwwICsgbmwgKiAoMSAtIE1hdGguY29zKGVsKSk7XG4gICAgfVxuXG4gIH1cbiAgcC54ID0geCArIHRoaXMueDA7XG4gIHAueSA9IHkgKyB0aGlzLnkwO1xuICByZXR1cm4gcDtcbn1cblxuLyogSW52ZXJzZSBlcXVhdGlvbnNcbiAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgbG9uLCBsYXQsIHgsIHksIGk7XG4gIHZhciBhbCwgYmw7XG4gIHZhciBwaGksIGRwaGk7XG4gIHggPSBwLnggLSB0aGlzLngwO1xuICB5ID0gcC55IC0gdGhpcy55MDtcblxuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBpZiAoTWF0aC5hYnMoeSArIHRoaXMuYSAqIHRoaXMubGF0MCkgPD0gRVBTTE4pIHtcbiAgICAgIGxvbiA9IGFkanVzdF9sb24oeCAvIHRoaXMuYSArIHRoaXMubG9uZzApO1xuICAgICAgbGF0ID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhbCA9IHRoaXMubGF0MCArIHkgLyB0aGlzLmE7XG4gICAgICBibCA9IHggKiB4IC8gdGhpcy5hIC8gdGhpcy5hICsgYWwgKiBhbDtcbiAgICAgIHBoaSA9IGFsO1xuICAgICAgdmFyIHRhbnBoaTtcbiAgICAgIGZvciAoaSA9IE1BWF9JVEVSOyBpOyAtLWkpIHtcbiAgICAgICAgdGFucGhpID0gTWF0aC50YW4ocGhpKTtcbiAgICAgICAgZHBoaSA9IC0xICogKGFsICogKHBoaSAqIHRhbnBoaSArIDEpIC0gcGhpIC0gMC41ICogKHBoaSAqIHBoaSArIGJsKSAqIHRhbnBoaSkgLyAoKHBoaSAtIGFsKSAvIHRhbnBoaSAtIDEpO1xuICAgICAgICBwaGkgKz0gZHBoaTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRwaGkpIDw9IEVQU0xOKSB7XG4gICAgICAgICAgbGF0ID0gcGhpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyAoTWF0aC5hc2luKHggKiBNYXRoLnRhbihwaGkpIC8gdGhpcy5hKSkgLyBNYXRoLnNpbihsYXQpKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKE1hdGguYWJzKHkgKyB0aGlzLm1sMCkgPD0gRVBTTE4pIHtcbiAgICAgIGxhdCA9IDA7XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyB4IC8gdGhpcy5hKTtcbiAgICB9XG4gICAgZWxzZSB7XG5cbiAgICAgIGFsID0gKHRoaXMubWwwICsgeSkgLyB0aGlzLmE7XG4gICAgICBibCA9IHggKiB4IC8gdGhpcy5hIC8gdGhpcy5hICsgYWwgKiBhbDtcbiAgICAgIHBoaSA9IGFsO1xuICAgICAgdmFyIGNsLCBtbG4sIG1sbnAsIG1hO1xuICAgICAgdmFyIGNvbjtcbiAgICAgIGZvciAoaSA9IE1BWF9JVEVSOyBpOyAtLWkpIHtcbiAgICAgICAgY29uID0gdGhpcy5lICogTWF0aC5zaW4ocGhpKTtcbiAgICAgICAgY2wgPSBNYXRoLnNxcnQoMSAtIGNvbiAqIGNvbikgKiBNYXRoLnRhbihwaGkpO1xuICAgICAgICBtbG4gPSB0aGlzLmEgKiBtbGZuKHRoaXMuZTAsIHRoaXMuZTEsIHRoaXMuZTIsIHRoaXMuZTMsIHBoaSk7XG4gICAgICAgIG1sbnAgPSB0aGlzLmUwIC0gMiAqIHRoaXMuZTEgKiBNYXRoLmNvcygyICogcGhpKSArIDQgKiB0aGlzLmUyICogTWF0aC5jb3MoNCAqIHBoaSkgLSA2ICogdGhpcy5lMyAqIE1hdGguY29zKDYgKiBwaGkpO1xuICAgICAgICBtYSA9IG1sbiAvIHRoaXMuYTtcbiAgICAgICAgZHBoaSA9IChhbCAqIChjbCAqIG1hICsgMSkgLSBtYSAtIDAuNSAqIGNsICogKG1hICogbWEgKyBibCkpIC8gKHRoaXMuZXMgKiBNYXRoLnNpbigyICogcGhpKSAqIChtYSAqIG1hICsgYmwgLSAyICogYWwgKiBtYSkgLyAoNCAqIGNsKSArIChhbCAtIG1hKSAqIChjbCAqIG1sbnAgLSAyIC8gTWF0aC5zaW4oMiAqIHBoaSkpIC0gbWxucCk7XG4gICAgICAgIHBoaSAtPSBkcGhpO1xuICAgICAgICBpZiAoTWF0aC5hYnMoZHBoaSkgPD0gRVBTTE4pIHtcbiAgICAgICAgICBsYXQgPSBwaGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy9sYXQ9cGhpNHoodGhpcy5lLHRoaXMuZTAsdGhpcy5lMSx0aGlzLmUyLHRoaXMuZTMsYWwsYmwsMCwwKTtcbiAgICAgIGNsID0gTWF0aC5zcXJ0KDEgLSB0aGlzLmVzICogTWF0aC5wb3coTWF0aC5zaW4obGF0KSwgMikpICogTWF0aC50YW4obGF0KTtcbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIE1hdGguYXNpbih4ICogY2wgLyB0aGlzLmEpIC8gTWF0aC5zaW4obGF0KSk7XG4gICAgfVxuICB9XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiUG9seWNvbmljXCIsIFwicG9seVwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IHtTRUNfVE9fUkFEfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuLypcbiAgcmVmZXJlbmNlXG4gICAgRGVwYXJ0bWVudCBvZiBMYW5kIGFuZCBTdXJ2ZXkgVGVjaG5pY2FsIENpcmN1bGFyIDE5NzMvMzJcbiAgICAgIGh0dHA6Ly93d3cubGluei5nb3Z0Lm56L2RvY3MvbWlzY2VsbGFuZW91cy9uei1tYXAtZGVmaW5pdGlvbi5wZGZcbiAgICBPU0cgVGVjaG5pY2FsIFJlcG9ydCA0LjFcbiAgICAgIGh0dHA6Ly93d3cubGluei5nb3Z0Lm56L2RvY3MvbWlzY2VsbGFuZW91cy9uem1nLnBkZlxuICAqL1xuXG4vKipcbiAqIGl0ZXJhdGlvbnM6IE51bWJlciBvZiBpdGVyYXRpb25zIHRvIHJlZmluZSBpbnZlcnNlIHRyYW5zZm9ybS5cbiAqICAgICAwIC0+IGttIGFjY3VyYWN5XG4gKiAgICAgMSAtPiBtIGFjY3VyYWN5IC0tIHN1aXRhYmxlIGZvciBtb3N0IG1hcHBpbmcgYXBwbGljYXRpb25zXG4gKiAgICAgMiAtPiBtbSBhY2N1cmFjeVxuICovXG5leHBvcnQgdmFyIGl0ZXJhdGlvbnMgPSAxO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgdGhpcy5BID0gW107XG4gIHRoaXMuQVsxXSA9IDAuNjM5OTE3NTA3MztcbiAgdGhpcy5BWzJdID0gLTAuMTM1ODc5NzYxMztcbiAgdGhpcy5BWzNdID0gMC4wNjMyOTQ0MDk7XG4gIHRoaXMuQVs0XSA9IC0wLjAyNTI2ODUzO1xuICB0aGlzLkFbNV0gPSAwLjAxMTc4Nzk7XG4gIHRoaXMuQVs2XSA9IC0wLjAwNTUxNjE7XG4gIHRoaXMuQVs3XSA9IDAuMDAyNjkwNjtcbiAgdGhpcy5BWzhdID0gLTAuMDAxMzMzO1xuICB0aGlzLkFbOV0gPSAwLjAwMDY3O1xuICB0aGlzLkFbMTBdID0gLTAuMDAwMzQ7XG5cbiAgdGhpcy5CX3JlID0gW107XG4gIHRoaXMuQl9pbSA9IFtdO1xuICB0aGlzLkJfcmVbMV0gPSAwLjc1NTc4NTMyMjg7XG4gIHRoaXMuQl9pbVsxXSA9IDA7XG4gIHRoaXMuQl9yZVsyXSA9IDAuMjQ5MjA0NjQ2O1xuICB0aGlzLkJfaW1bMl0gPSAwLjAwMzM3MTUwNztcbiAgdGhpcy5CX3JlWzNdID0gLTAuMDAxNTQxNzM5O1xuICB0aGlzLkJfaW1bM10gPSAwLjA0MTA1ODU2MDtcbiAgdGhpcy5CX3JlWzRdID0gLTAuMTAxNjI5MDc7XG4gIHRoaXMuQl9pbVs0XSA9IDAuMDE3Mjc2MDk7XG4gIHRoaXMuQl9yZVs1XSA9IC0wLjI2NjIzNDg5O1xuICB0aGlzLkJfaW1bNV0gPSAtMC4zNjI0OTIxODtcbiAgdGhpcy5CX3JlWzZdID0gLTAuNjg3MDk4MztcbiAgdGhpcy5CX2ltWzZdID0gLTEuMTY1MTk2NztcblxuICB0aGlzLkNfcmUgPSBbXTtcbiAgdGhpcy5DX2ltID0gW107XG4gIHRoaXMuQ19yZVsxXSA9IDEuMzIzMTI3MDQzOTtcbiAgdGhpcy5DX2ltWzFdID0gMDtcbiAgdGhpcy5DX3JlWzJdID0gLTAuNTc3MjQ1Nzg5O1xuICB0aGlzLkNfaW1bMl0gPSAtMC4wMDc4MDk1OTg7XG4gIHRoaXMuQ19yZVszXSA9IDAuNTA4MzA3NTEzO1xuICB0aGlzLkNfaW1bM10gPSAtMC4xMTIyMDg5NTI7XG4gIHRoaXMuQ19yZVs0XSA9IC0wLjE1MDk0NzYyO1xuICB0aGlzLkNfaW1bNF0gPSAwLjE4MjAwNjAyO1xuICB0aGlzLkNfcmVbNV0gPSAxLjAxNDE4MTc5O1xuICB0aGlzLkNfaW1bNV0gPSAxLjY0NDk3Njk2O1xuICB0aGlzLkNfcmVbNl0gPSAxLjk2NjA1NDk7XG4gIHRoaXMuQ19pbVs2XSA9IDIuNTEyNzY0NTtcblxuICB0aGlzLkQgPSBbXTtcbiAgdGhpcy5EWzFdID0gMS41NjI3MDE0MjQzO1xuICB0aGlzLkRbMl0gPSAwLjUxODU0MDYzOTg7XG4gIHRoaXMuRFszXSA9IC0wLjAzMzMzMDk4O1xuICB0aGlzLkRbNF0gPSAtMC4xMDUyOTA2O1xuICB0aGlzLkRbNV0gPSAtMC4wMzY4NTk0O1xuICB0aGlzLkRbNl0gPSAwLjAwNzMxNztcbiAgdGhpcy5EWzddID0gMC4wMTIyMDtcbiAgdGhpcy5EWzhdID0gMC4wMDM5NDtcbiAgdGhpcy5EWzldID0gLTAuMDAxMztcbn1cblxuLyoqXG4gICAgTmV3IFplYWxhbmQgTWFwIEdyaWQgRm9yd2FyZCAgLSBsb25nL2xhdCB0byB4L3lcbiAgICBsb25nL2xhdCBpbiByYWRpYW5zXG4gICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBuO1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuXG4gIHZhciBkZWx0YV9sYXQgPSBsYXQgLSB0aGlzLmxhdDA7XG4gIHZhciBkZWx0YV9sb24gPSBsb24gLSB0aGlzLmxvbmcwO1xuXG4gIC8vIDEuIENhbGN1bGF0ZSBkX3BoaSBhbmQgZF9wc2kgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgZF9sYW1iZGFcbiAgLy8gRm9yIHRoaXMgYWxnb3JpdGhtLCBkZWx0YV9sYXRpdHVkZSBpcyBpbiBzZWNvbmRzIG9mIGFyYyB4IDEwLTUsIHNvIHdlIG5lZWQgdG8gc2NhbGUgdG8gdGhvc2UgdW5pdHMuIExvbmdpdHVkZSBpcyByYWRpYW5zLlxuICB2YXIgZF9waGkgPSBkZWx0YV9sYXQgLyBTRUNfVE9fUkFEICogMUUtNTtcbiAgdmFyIGRfbGFtYmRhID0gZGVsdGFfbG9uO1xuICB2YXIgZF9waGlfbiA9IDE7IC8vIGRfcGhpXjBcblxuICB2YXIgZF9wc2kgPSAwO1xuICBmb3IgKG4gPSAxOyBuIDw9IDEwOyBuKyspIHtcbiAgICBkX3BoaV9uID0gZF9waGlfbiAqIGRfcGhpO1xuICAgIGRfcHNpID0gZF9wc2kgKyB0aGlzLkFbbl0gKiBkX3BoaV9uO1xuICB9XG5cbiAgLy8gMi4gQ2FsY3VsYXRlIHRoZXRhXG4gIHZhciB0aF9yZSA9IGRfcHNpO1xuICB2YXIgdGhfaW0gPSBkX2xhbWJkYTtcblxuICAvLyAzLiBDYWxjdWxhdGUgelxuICB2YXIgdGhfbl9yZSA9IDE7XG4gIHZhciB0aF9uX2ltID0gMDsgLy8gdGhldGFeMFxuICB2YXIgdGhfbl9yZTE7XG4gIHZhciB0aF9uX2ltMTtcblxuICB2YXIgel9yZSA9IDA7XG4gIHZhciB6X2ltID0gMDtcbiAgZm9yIChuID0gMTsgbiA8PSA2OyBuKyspIHtcbiAgICB0aF9uX3JlMSA9IHRoX25fcmUgKiB0aF9yZSAtIHRoX25faW0gKiB0aF9pbTtcbiAgICB0aF9uX2ltMSA9IHRoX25faW0gKiB0aF9yZSArIHRoX25fcmUgKiB0aF9pbTtcbiAgICB0aF9uX3JlID0gdGhfbl9yZTE7XG4gICAgdGhfbl9pbSA9IHRoX25faW0xO1xuICAgIHpfcmUgPSB6X3JlICsgdGhpcy5CX3JlW25dICogdGhfbl9yZSAtIHRoaXMuQl9pbVtuXSAqIHRoX25faW07XG4gICAgel9pbSA9IHpfaW0gKyB0aGlzLkJfaW1bbl0gKiB0aF9uX3JlICsgdGhpcy5CX3JlW25dICogdGhfbl9pbTtcbiAgfVxuXG4gIC8vIDQuIENhbGN1bGF0ZSBlYXN0aW5nIGFuZCBub3J0aGluZ1xuICBwLnggPSAoel9pbSAqIHRoaXMuYSkgKyB0aGlzLngwO1xuICBwLnkgPSAoel9yZSAqIHRoaXMuYSkgKyB0aGlzLnkwO1xuXG4gIHJldHVybiBwO1xufVxuXG4vKipcbiAgICBOZXcgWmVhbGFuZCBNYXAgR3JpZCBJbnZlcnNlICAtICB4L3kgdG8gbG9uZy9sYXRcbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIG47XG4gIHZhciB4ID0gcC54O1xuICB2YXIgeSA9IHAueTtcblxuICB2YXIgZGVsdGFfeCA9IHggLSB0aGlzLngwO1xuICB2YXIgZGVsdGFfeSA9IHkgLSB0aGlzLnkwO1xuXG4gIC8vIDEuIENhbGN1bGF0ZSB6XG4gIHZhciB6X3JlID0gZGVsdGFfeSAvIHRoaXMuYTtcbiAgdmFyIHpfaW0gPSBkZWx0YV94IC8gdGhpcy5hO1xuXG4gIC8vIDJhLiBDYWxjdWxhdGUgdGhldGEgLSBmaXJzdCBhcHByb3hpbWF0aW9uIGdpdmVzIGttIGFjY3VyYWN5XG4gIHZhciB6X25fcmUgPSAxO1xuICB2YXIgel9uX2ltID0gMDsgLy8gel4wXG4gIHZhciB6X25fcmUxO1xuICB2YXIgel9uX2ltMTtcblxuICB2YXIgdGhfcmUgPSAwO1xuICB2YXIgdGhfaW0gPSAwO1xuICBmb3IgKG4gPSAxOyBuIDw9IDY7IG4rKykge1xuICAgIHpfbl9yZTEgPSB6X25fcmUgKiB6X3JlIC0gel9uX2ltICogel9pbTtcbiAgICB6X25faW0xID0gel9uX2ltICogel9yZSArIHpfbl9yZSAqIHpfaW07XG4gICAgel9uX3JlID0gel9uX3JlMTtcbiAgICB6X25faW0gPSB6X25faW0xO1xuICAgIHRoX3JlID0gdGhfcmUgKyB0aGlzLkNfcmVbbl0gKiB6X25fcmUgLSB0aGlzLkNfaW1bbl0gKiB6X25faW07XG4gICAgdGhfaW0gPSB0aF9pbSArIHRoaXMuQ19pbVtuXSAqIHpfbl9yZSArIHRoaXMuQ19yZVtuXSAqIHpfbl9pbTtcbiAgfVxuXG4gIC8vIDJiLiBJdGVyYXRlIHRvIHJlZmluZSB0aGUgYWNjdXJhY3kgb2YgdGhlIGNhbGN1bGF0aW9uXG4gIC8vICAgICAgICAwIGl0ZXJhdGlvbnMgZ2l2ZXMga20gYWNjdXJhY3lcbiAgLy8gICAgICAgIDEgaXRlcmF0aW9uIGdpdmVzIG0gYWNjdXJhY3kgLS0gZ29vZCBlbm91Z2ggZm9yIG1vc3QgbWFwcGluZyBhcHBsaWNhdGlvbnNcbiAgLy8gICAgICAgIDIgaXRlcmF0aW9ucyBiaXZlcyBtbSBhY2N1cmFjeVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlcmF0aW9uczsgaSsrKSB7XG4gICAgdmFyIHRoX25fcmUgPSB0aF9yZTtcbiAgICB2YXIgdGhfbl9pbSA9IHRoX2ltO1xuICAgIHZhciB0aF9uX3JlMTtcbiAgICB2YXIgdGhfbl9pbTE7XG5cbiAgICB2YXIgbnVtX3JlID0gel9yZTtcbiAgICB2YXIgbnVtX2ltID0gel9pbTtcbiAgICBmb3IgKG4gPSAyOyBuIDw9IDY7IG4rKykge1xuICAgICAgdGhfbl9yZTEgPSB0aF9uX3JlICogdGhfcmUgLSB0aF9uX2ltICogdGhfaW07XG4gICAgICB0aF9uX2ltMSA9IHRoX25faW0gKiB0aF9yZSArIHRoX25fcmUgKiB0aF9pbTtcbiAgICAgIHRoX25fcmUgPSB0aF9uX3JlMTtcbiAgICAgIHRoX25faW0gPSB0aF9uX2ltMTtcbiAgICAgIG51bV9yZSA9IG51bV9yZSArIChuIC0gMSkgKiAodGhpcy5CX3JlW25dICogdGhfbl9yZSAtIHRoaXMuQl9pbVtuXSAqIHRoX25faW0pO1xuICAgICAgbnVtX2ltID0gbnVtX2ltICsgKG4gLSAxKSAqICh0aGlzLkJfaW1bbl0gKiB0aF9uX3JlICsgdGhpcy5CX3JlW25dICogdGhfbl9pbSk7XG4gICAgfVxuXG4gICAgdGhfbl9yZSA9IDE7XG4gICAgdGhfbl9pbSA9IDA7XG4gICAgdmFyIGRlbl9yZSA9IHRoaXMuQl9yZVsxXTtcbiAgICB2YXIgZGVuX2ltID0gdGhpcy5CX2ltWzFdO1xuICAgIGZvciAobiA9IDI7IG4gPD0gNjsgbisrKSB7XG4gICAgICB0aF9uX3JlMSA9IHRoX25fcmUgKiB0aF9yZSAtIHRoX25faW0gKiB0aF9pbTtcbiAgICAgIHRoX25faW0xID0gdGhfbl9pbSAqIHRoX3JlICsgdGhfbl9yZSAqIHRoX2ltO1xuICAgICAgdGhfbl9yZSA9IHRoX25fcmUxO1xuICAgICAgdGhfbl9pbSA9IHRoX25faW0xO1xuICAgICAgZGVuX3JlID0gZGVuX3JlICsgbiAqICh0aGlzLkJfcmVbbl0gKiB0aF9uX3JlIC0gdGhpcy5CX2ltW25dICogdGhfbl9pbSk7XG4gICAgICBkZW5faW0gPSBkZW5faW0gKyBuICogKHRoaXMuQl9pbVtuXSAqIHRoX25fcmUgKyB0aGlzLkJfcmVbbl0gKiB0aF9uX2ltKTtcbiAgICB9XG5cbiAgICAvLyBDb21wbGV4IGRpdmlzaW9uXG4gICAgdmFyIGRlbjIgPSBkZW5fcmUgKiBkZW5fcmUgKyBkZW5faW0gKiBkZW5faW07XG4gICAgdGhfcmUgPSAobnVtX3JlICogZGVuX3JlICsgbnVtX2ltICogZGVuX2ltKSAvIGRlbjI7XG4gICAgdGhfaW0gPSAobnVtX2ltICogZGVuX3JlIC0gbnVtX3JlICogZGVuX2ltKSAvIGRlbjI7XG4gIH1cblxuICAvLyAzLiBDYWxjdWxhdGUgZF9waGkgICAgICAgICAgICAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBkX2xhbWJkYVxuICB2YXIgZF9wc2kgPSB0aF9yZTtcbiAgdmFyIGRfbGFtYmRhID0gdGhfaW07XG4gIHZhciBkX3BzaV9uID0gMTsgLy8gZF9wc2leMFxuXG4gIHZhciBkX3BoaSA9IDA7XG4gIGZvciAobiA9IDE7IG4gPD0gOTsgbisrKSB7XG4gICAgZF9wc2lfbiA9IGRfcHNpX24gKiBkX3BzaTtcbiAgICBkX3BoaSA9IGRfcGhpICsgdGhpcy5EW25dICogZF9wc2lfbjtcbiAgfVxuXG4gIC8vIDQuIENhbGN1bGF0ZSBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlXG4gIC8vIGRfcGhpIGlzIGNhbGN1YXRlZCBpbiBzZWNvbmQgb2YgYXJjICogMTBeLTUsIHNvIHdlIG5lZWQgdG8gc2NhbGUgYmFjayB0byByYWRpYW5zLiBkX2xhbWJkYSBpcyBpbiByYWRpYW5zLlxuICB2YXIgbGF0ID0gdGhpcy5sYXQwICsgKGRfcGhpICogU0VDX1RPX1JBRCAqIDFFNSk7XG4gIHZhciBsb24gPSB0aGlzLmxvbmcwICsgZF9sYW1iZGE7XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG5cbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJOZXdfWmVhbGFuZF9NYXBfR3JpZFwiLCBcIm56bWdcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcblxuLypcbiAgcmVmZXJlbmNlXG4gICAgXCJOZXcgRXF1YWwtQXJlYSBNYXAgUHJvamVjdGlvbnMgZm9yIE5vbmNpcmN1bGFyIFJlZ2lvbnNcIiwgSm9obiBQLiBTbnlkZXIsXG4gICAgVGhlIEFtZXJpY2FuIENhcnRvZ3JhcGhlciwgVm9sIDE1LCBOby4gNCwgT2N0b2JlciAxOTg4LCBwcC4gMzQxLTM1NS5cbiAgKi9cblxuXG4vKiBJbml0aWFsaXplIHRoZSBNaWxsZXIgQ3lsaW5kcmljYWwgcHJvamVjdGlvblxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICAvL25vLW9wXG59XG5cbi8qIE1pbGxlciBDeWxpbmRyaWNhbCBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICB2YXIgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIHZhciB4ID0gdGhpcy54MCArIHRoaXMuYSAqIGRsb247XG4gIHZhciB5ID0gdGhpcy55MCArIHRoaXMuYSAqIE1hdGgubG9nKE1hdGgudGFuKChNYXRoLlBJIC8gNCkgKyAobGF0IC8gMi41KSkpICogMS4yNTtcblxuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuICByZXR1cm4gcDtcbn1cblxuLyogTWlsbGVyIEN5bGluZHJpY2FsIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZ1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHAueCAtPSB0aGlzLngwO1xuICBwLnkgLT0gdGhpcy55MDtcblxuICB2YXIgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgcC54IC8gdGhpcy5hKTtcbiAgdmFyIGxhdCA9IDIuNSAqIChNYXRoLmF0YW4oTWF0aC5leHAoMC44ICogcC55IC8gdGhpcy5hKSkgLSBNYXRoLlBJIC8gNCk7XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiTWlsbGVyX0N5bGluZHJpY2FsXCIsIFwibWlsbFwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IGFkanVzdF9sYXQgZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sYXQnO1xuaW1wb3J0IHBqX2VuZm4gZnJvbSAnLi4vY29tbW9uL3BqX2VuZm4nO1xudmFyIE1BWF9JVEVSID0gMjA7XG5pbXBvcnQgcGpfbWxmbiBmcm9tICcuLi9jb21tb24vcGpfbWxmbic7XG5pbXBvcnQgcGpfaW52X21sZm4gZnJvbSAnLi4vY29tbW9uL3BqX2ludl9tbGZuJztcbmltcG9ydCB7RVBTTE4sIEhBTEZfUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5pbXBvcnQgYXNpbnogZnJvbSAnLi4vY29tbW9uL2FzaW56JztcblxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgLyogUGxhY2UgcGFyYW1ldGVycyBpbiBzdGF0aWMgc3RvcmFnZSBmb3IgY29tbW9uIHVzZVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cbiAgaWYgKCF0aGlzLnNwaGVyZSkge1xuICAgIHRoaXMuZW4gPSBwal9lbmZuKHRoaXMuZXMpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMubiA9IDE7XG4gICAgdGhpcy5tID0gMDtcbiAgICB0aGlzLmVzID0gMDtcbiAgICB0aGlzLkNfeSA9IE1hdGguc3FydCgodGhpcy5tICsgMSkgLyB0aGlzLm4pO1xuICAgIHRoaXMuQ194ID0gdGhpcy5DX3kgLyAodGhpcy5tICsgMSk7XG4gIH1cblxufVxuXG4vKiBTaW51c29pZGFsIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciB4LCB5O1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcblxuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBpZiAoIXRoaXMubSkge1xuICAgICAgbGF0ID0gdGhpcy5uICE9PSAxID8gTWF0aC5hc2luKHRoaXMubiAqIE1hdGguc2luKGxhdCkpIDogbGF0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBrID0gdGhpcy5uICogTWF0aC5zaW4obGF0KTtcbiAgICAgIGZvciAodmFyIGkgPSBNQVhfSVRFUjsgaTsgLS1pKSB7XG4gICAgICAgIHZhciBWID0gKHRoaXMubSAqIGxhdCArIE1hdGguc2luKGxhdCkgLSBrKSAvICh0aGlzLm0gKyBNYXRoLmNvcyhsYXQpKTtcbiAgICAgICAgbGF0IC09IFY7XG4gICAgICAgIGlmIChNYXRoLmFicyhWKSA8IEVQU0xOKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgeCA9IHRoaXMuYSAqIHRoaXMuQ194ICogbG9uICogKHRoaXMubSArIE1hdGguY29zKGxhdCkpO1xuICAgIHkgPSB0aGlzLmEgKiB0aGlzLkNfeSAqIGxhdDtcblxuICB9XG4gIGVsc2Uge1xuXG4gICAgdmFyIHMgPSBNYXRoLnNpbihsYXQpO1xuICAgIHZhciBjID0gTWF0aC5jb3MobGF0KTtcbiAgICB5ID0gdGhpcy5hICogcGpfbWxmbihsYXQsIHMsIGMsIHRoaXMuZW4pO1xuICAgIHggPSB0aGlzLmEgKiBsb24gKiBjIC8gTWF0aC5zcXJ0KDEgLSB0aGlzLmVzICogcyAqIHMpO1xuICB9XG5cbiAgcC54ID0geDtcbiAgcC55ID0geTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIGxhdCwgdGVtcCwgbG9uLCBzO1xuXG4gIHAueCAtPSB0aGlzLngwO1xuICBsb24gPSBwLnggLyB0aGlzLmE7XG4gIHAueSAtPSB0aGlzLnkwO1xuICBsYXQgPSBwLnkgLyB0aGlzLmE7XG5cbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgbGF0IC89IHRoaXMuQ195O1xuICAgIGxvbiA9IGxvbiAvICh0aGlzLkNfeCAqICh0aGlzLm0gKyBNYXRoLmNvcyhsYXQpKSk7XG4gICAgaWYgKHRoaXMubSkge1xuICAgICAgbGF0ID0gYXNpbnooKHRoaXMubSAqIGxhdCArIE1hdGguc2luKGxhdCkpIC8gdGhpcy5uKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5uICE9PSAxKSB7XG4gICAgICBsYXQgPSBhc2lueihNYXRoLnNpbihsYXQpIC8gdGhpcy5uKTtcbiAgICB9XG4gICAgbG9uID0gYWRqdXN0X2xvbihsb24gKyB0aGlzLmxvbmcwKTtcbiAgICBsYXQgPSBhZGp1c3RfbGF0KGxhdCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgbGF0ID0gcGpfaW52X21sZm4ocC55IC8gdGhpcy5hLCB0aGlzLmVzLCB0aGlzLmVuKTtcbiAgICBzID0gTWF0aC5hYnMobGF0KTtcbiAgICBpZiAocyA8IEhBTEZfUEkpIHtcbiAgICAgIHMgPSBNYXRoLnNpbihsYXQpO1xuICAgICAgdGVtcCA9IHRoaXMubG9uZzAgKyBwLnggKiBNYXRoLnNxcnQoMSAtIHRoaXMuZXMgKiBzICogcykgLyAodGhpcy5hICogTWF0aC5jb3MobGF0KSk7XG4gICAgICAvL3RlbXAgPSB0aGlzLmxvbmcwICsgcC54IC8gKHRoaXMuYSAqIE1hdGguY29zKGxhdCkpO1xuICAgICAgbG9uID0gYWRqdXN0X2xvbih0ZW1wKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKHMgLSBFUFNMTikgPCBIQUxGX1BJKSB7XG4gICAgICBsb24gPSB0aGlzLmxvbmcwO1xuICAgIH1cbiAgfVxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJTaW51c29pZGFsXCIsIFwic2ludVwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7fVxuaW1wb3J0IHtFUFNMTn0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG4vKiBNb2xsd2VpZGUgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG5cbiAgLyogRm9yd2FyZCBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcblxuICB2YXIgZGVsdGFfbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgdmFyIHRoZXRhID0gbGF0O1xuICB2YXIgY29uID0gTWF0aC5QSSAqIE1hdGguc2luKGxhdCk7XG5cbiAgLyogSXRlcmF0ZSB1c2luZyB0aGUgTmV3dG9uLVJhcGhzb24gbWV0aG9kIHRvIGZpbmQgdGhldGFcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgZGVsdGFfdGhldGEgPSAtKHRoZXRhICsgTWF0aC5zaW4odGhldGEpIC0gY29uKSAvICgxICsgTWF0aC5jb3ModGhldGEpKTtcbiAgICB0aGV0YSArPSBkZWx0YV90aGV0YTtcbiAgICBpZiAoTWF0aC5hYnMoZGVsdGFfdGhldGEpIDwgRVBTTE4pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB0aGV0YSAvPSAyO1xuXG4gIC8qIElmIHRoZSBsYXRpdHVkZSBpcyA5MCBkZWcsIGZvcmNlIHRoZSB4IGNvb3JkaW5hdGUgdG8gYmUgXCIwICsgZmFsc2UgZWFzdGluZ1wiXG4gICAgICAgdGhpcyBpcyBkb25lIGhlcmUgYmVjYXVzZSBvZiBwcmVjaXNpb24gcHJvYmxlbXMgd2l0aCBcImNvcyh0aGV0YSlcIlxuICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgaWYgKE1hdGguUEkgLyAyIC0gTWF0aC5hYnMobGF0KSA8IEVQU0xOKSB7XG4gICAgZGVsdGFfbG9uID0gMDtcbiAgfVxuICB2YXIgeCA9IDAuOTAwMzE2MzE2MTU4ICogdGhpcy5hICogZGVsdGFfbG9uICogTWF0aC5jb3ModGhldGEpICsgdGhpcy54MDtcbiAgdmFyIHkgPSAxLjQxNDIxMzU2MjM3MzEgKiB0aGlzLmEgKiBNYXRoLnNpbih0aGV0YSkgKyB0aGlzLnkwO1xuXG4gIHAueCA9IHg7XG4gIHAueSA9IHk7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciB0aGV0YTtcbiAgdmFyIGFyZztcblxuICAvKiBJbnZlcnNlIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBwLnggLT0gdGhpcy54MDtcbiAgcC55IC09IHRoaXMueTA7XG4gIGFyZyA9IHAueSAvICgxLjQxNDIxMzU2MjM3MzEgKiB0aGlzLmEpO1xuXG4gIC8qIEJlY2F1c2Ugb2YgZGl2aXNpb24gYnkgemVybyBwcm9ibGVtcywgJ2FyZycgY2FuIG5vdCBiZSAxLiAgVGhlcmVmb3JlXG4gICAgICAgYSBudW1iZXIgdmVyeSBjbG9zZSB0byBvbmUgaXMgdXNlZCBpbnN0ZWFkLlxuICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBpZiAoTWF0aC5hYnMoYXJnKSA+IDAuOTk5OTk5OTk5OTk5KSB7XG4gICAgYXJnID0gMC45OTk5OTk5OTk5OTk7XG4gIH1cbiAgdGhldGEgPSBNYXRoLmFzaW4oYXJnKTtcbiAgdmFyIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIChwLnggLyAoMC45MDAzMTYzMTYxNTggKiB0aGlzLmEgKiBNYXRoLmNvcyh0aGV0YSkpKSk7XG4gIGlmIChsb24gPCAoLU1hdGguUEkpKSB7XG4gICAgbG9uID0gLU1hdGguUEk7XG4gIH1cbiAgaWYgKGxvbiA+IE1hdGguUEkpIHtcbiAgICBsb24gPSBNYXRoLlBJO1xuICB9XG4gIGFyZyA9ICgyICogdGhldGEgKyBNYXRoLnNpbigyICogdGhldGEpKSAvIE1hdGguUEk7XG4gIGlmIChNYXRoLmFicyhhcmcpID4gMSkge1xuICAgIGFyZyA9IDE7XG4gIH1cbiAgdmFyIGxhdCA9IE1hdGguYXNpbihhcmcpO1xuXG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIk1vbGx3ZWlkZVwiLCBcIm1vbGxcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBlMGZuIGZyb20gJy4uL2NvbW1vbi9lMGZuJztcbmltcG9ydCBlMWZuIGZyb20gJy4uL2NvbW1vbi9lMWZuJztcbmltcG9ydCBlMmZuIGZyb20gJy4uL2NvbW1vbi9lMmZuJztcbmltcG9ydCBlM2ZuIGZyb20gJy4uL2NvbW1vbi9lM2ZuJztcbmltcG9ydCBtc2ZueiBmcm9tICcuLi9jb21tb24vbXNmbnonO1xuaW1wb3J0IG1sZm4gZnJvbSAnLi4vY29tbW9uL21sZm4nO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IGFkanVzdF9sYXQgZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sYXQnO1xuaW1wb3J0IGltbGZuIGZyb20gJy4uL2NvbW1vbi9pbWxmbic7XG5pbXBvcnQge0VQU0xOfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgLyogUGxhY2UgcGFyYW1ldGVycyBpbiBzdGF0aWMgc3RvcmFnZSBmb3IgY29tbW9uIHVzZVxuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIC8vIFN0YW5kYXJkIFBhcmFsbGVscyBjYW5ub3QgYmUgZXF1YWwgYW5kIG9uIG9wcG9zaXRlIHNpZGVzIG9mIHRoZSBlcXVhdG9yXG4gIGlmIChNYXRoLmFicyh0aGlzLmxhdDEgKyB0aGlzLmxhdDIpIDwgRVBTTE4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXQyID0gdGhpcy5sYXQyIHx8IHRoaXMubGF0MTtcbiAgdGhpcy50ZW1wID0gdGhpcy5iIC8gdGhpcy5hO1xuICB0aGlzLmVzID0gMSAtIE1hdGgucG93KHRoaXMudGVtcCwgMik7XG4gIHRoaXMuZSA9IE1hdGguc3FydCh0aGlzLmVzKTtcbiAgdGhpcy5lMCA9IGUwZm4odGhpcy5lcyk7XG4gIHRoaXMuZTEgPSBlMWZuKHRoaXMuZXMpO1xuICB0aGlzLmUyID0gZTJmbih0aGlzLmVzKTtcbiAgdGhpcy5lMyA9IGUzZm4odGhpcy5lcyk7XG5cbiAgdGhpcy5zaW5waGkgPSBNYXRoLnNpbih0aGlzLmxhdDEpO1xuICB0aGlzLmNvc3BoaSA9IE1hdGguY29zKHRoaXMubGF0MSk7XG5cbiAgdGhpcy5tczEgPSBtc2Zueih0aGlzLmUsIHRoaXMuc2lucGhpLCB0aGlzLmNvc3BoaSk7XG4gIHRoaXMubWwxID0gbWxmbih0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzLCB0aGlzLmxhdDEpO1xuXG4gIGlmIChNYXRoLmFicyh0aGlzLmxhdDEgLSB0aGlzLmxhdDIpIDwgRVBTTE4pIHtcbiAgICB0aGlzLm5zID0gdGhpcy5zaW5waGk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5zaW5waGkgPSBNYXRoLnNpbih0aGlzLmxhdDIpO1xuICAgIHRoaXMuY29zcGhpID0gTWF0aC5jb3ModGhpcy5sYXQyKTtcbiAgICB0aGlzLm1zMiA9IG1zZm56KHRoaXMuZSwgdGhpcy5zaW5waGksIHRoaXMuY29zcGhpKTtcbiAgICB0aGlzLm1sMiA9IG1sZm4odGhpcy5lMCwgdGhpcy5lMSwgdGhpcy5lMiwgdGhpcy5lMywgdGhpcy5sYXQyKTtcbiAgICB0aGlzLm5zID0gKHRoaXMubXMxIC0gdGhpcy5tczIpIC8gKHRoaXMubWwyIC0gdGhpcy5tbDEpO1xuICB9XG4gIHRoaXMuZyA9IHRoaXMubWwxICsgdGhpcy5tczEgLyB0aGlzLm5zO1xuICB0aGlzLm1sMCA9IG1sZm4odGhpcy5lMCwgdGhpcy5lMSwgdGhpcy5lMiwgdGhpcy5lMywgdGhpcy5sYXQwKTtcbiAgdGhpcy5yaCA9IHRoaXMuYSAqICh0aGlzLmcgLSB0aGlzLm1sMCk7XG59XG5cbi8qIEVxdWlkaXN0YW50IENvbmljIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIHZhciByaDE7XG5cbiAgLyogRm9yd2FyZCBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgcmgxID0gdGhpcy5hICogKHRoaXMuZyAtIGxhdCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIG1sID0gbWxmbih0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzLCBsYXQpO1xuICAgIHJoMSA9IHRoaXMuYSAqICh0aGlzLmcgLSBtbCk7XG4gIH1cbiAgdmFyIHRoZXRhID0gdGhpcy5ucyAqIGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIHZhciB4ID0gdGhpcy54MCArIHJoMSAqIE1hdGguc2luKHRoZXRhKTtcbiAgdmFyIHkgPSB0aGlzLnkwICsgdGhpcy5yaCAtIHJoMSAqIE1hdGguY29zKHRoZXRhKTtcbiAgcC54ID0geDtcbiAgcC55ID0geTtcbiAgcmV0dXJuIHA7XG59XG5cbi8qIEludmVyc2UgZXF1YXRpb25zXG4gIC0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSA9IHRoaXMucmggLSBwLnkgKyB0aGlzLnkwO1xuICB2YXIgY29uLCByaDEsIGxhdCwgbG9uO1xuICBpZiAodGhpcy5ucyA+PSAwKSB7XG4gICAgcmgxID0gTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSk7XG4gICAgY29uID0gMTtcbiAgfVxuICBlbHNlIHtcbiAgICByaDEgPSAtTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSk7XG4gICAgY29uID0gLTE7XG4gIH1cbiAgdmFyIHRoZXRhID0gMDtcbiAgaWYgKHJoMSAhPT0gMCkge1xuICAgIHRoZXRhID0gTWF0aC5hdGFuMihjb24gKiBwLngsIGNvbiAqIHAueSk7XG4gIH1cblxuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyB0aGV0YSAvIHRoaXMubnMpO1xuICAgIGxhdCA9IGFkanVzdF9sYXQodGhpcy5nIC0gcmgxIC8gdGhpcy5hKTtcbiAgICBwLnggPSBsb247XG4gICAgcC55ID0gbGF0O1xuICAgIHJldHVybiBwO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciBtbCA9IHRoaXMuZyAtIHJoMSAvIHRoaXMuYTtcbiAgICBsYXQgPSBpbWxmbihtbCwgdGhpcy5lMCwgdGhpcy5lMSwgdGhpcy5lMiwgdGhpcy5lMyk7XG4gICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgdGhldGEgLyB0aGlzLm5zKTtcbiAgICBwLnggPSBsb247XG4gICAgcC55ID0gbGF0O1xuICAgIHJldHVybiBwO1xuICB9XG5cbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIkVxdWlkaXN0YW50X0NvbmljXCIsIFwiZXFkY1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuXG5pbXBvcnQge0hBTEZfUEksIEVQU0xOfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuaW1wb3J0IGFzaW56IGZyb20gJy4uL2NvbW1vbi9hc2lueic7XG5cbi8qIEluaXRpYWxpemUgdGhlIFZhbiBEZXIgR3JpbnRlbiBwcm9qZWN0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIC8vdGhpcy5SID0gNjM3MDk5NzsgLy9SYWRpdXMgb2YgZWFydGhcbiAgdGhpcy5SID0gdGhpcy5hO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG5cbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcblxuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdmFyIGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICB2YXIgeCwgeTtcblxuICBpZiAoTWF0aC5hYnMobGF0KSA8PSBFUFNMTikge1xuICAgIHggPSB0aGlzLngwICsgdGhpcy5SICogZGxvbjtcbiAgICB5ID0gdGhpcy55MDtcbiAgfVxuICB2YXIgdGhldGEgPSBhc2lueigyICogTWF0aC5hYnMobGF0IC8gTWF0aC5QSSkpO1xuICBpZiAoKE1hdGguYWJzKGRsb24pIDw9IEVQU0xOKSB8fCAoTWF0aC5hYnMoTWF0aC5hYnMobGF0KSAtIEhBTEZfUEkpIDw9IEVQU0xOKSkge1xuICAgIHggPSB0aGlzLngwO1xuICAgIGlmIChsYXQgPj0gMCkge1xuICAgICAgeSA9IHRoaXMueTAgKyBNYXRoLlBJICogdGhpcy5SICogTWF0aC50YW4oMC41ICogdGhldGEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHkgPSB0aGlzLnkwICsgTWF0aC5QSSAqIHRoaXMuUiAqIC1NYXRoLnRhbigwLjUgKiB0aGV0YSk7XG4gICAgfVxuICAgIC8vICByZXR1cm4oT0spO1xuICB9XG4gIHZhciBhbCA9IDAuNSAqIE1hdGguYWJzKChNYXRoLlBJIC8gZGxvbikgLSAoZGxvbiAvIE1hdGguUEkpKTtcbiAgdmFyIGFzcSA9IGFsICogYWw7XG4gIHZhciBzaW50aCA9IE1hdGguc2luKHRoZXRhKTtcbiAgdmFyIGNvc3RoID0gTWF0aC5jb3ModGhldGEpO1xuXG4gIHZhciBnID0gY29zdGggLyAoc2ludGggKyBjb3N0aCAtIDEpO1xuICB2YXIgZ3NxID0gZyAqIGc7XG4gIHZhciBtID0gZyAqICgyIC8gc2ludGggLSAxKTtcbiAgdmFyIG1zcSA9IG0gKiBtO1xuICB2YXIgY29uID0gTWF0aC5QSSAqIHRoaXMuUiAqIChhbCAqIChnIC0gbXNxKSArIE1hdGguc3FydChhc3EgKiAoZyAtIG1zcSkgKiAoZyAtIG1zcSkgLSAobXNxICsgYXNxKSAqIChnc3EgLSBtc3EpKSkgLyAobXNxICsgYXNxKTtcbiAgaWYgKGRsb24gPCAwKSB7XG4gICAgY29uID0gLWNvbjtcbiAgfVxuICB4ID0gdGhpcy54MCArIGNvbjtcbiAgLy9jb24gPSBNYXRoLmFicyhjb24gLyAoTWF0aC5QSSAqIHRoaXMuUikpO1xuICB2YXIgcSA9IGFzcSArIGc7XG4gIGNvbiA9IE1hdGguUEkgKiB0aGlzLlIgKiAobSAqIHEgLSBhbCAqIE1hdGguc3FydCgobXNxICsgYXNxKSAqIChhc3EgKyAxKSAtIHEgKiBxKSkgLyAobXNxICsgYXNxKTtcbiAgaWYgKGxhdCA+PSAwKSB7XG4gICAgLy95ID0gdGhpcy55MCArIE1hdGguUEkgKiB0aGlzLlIgKiBNYXRoLnNxcnQoMSAtIGNvbiAqIGNvbiAtIDIgKiBhbCAqIGNvbik7XG4gICAgeSA9IHRoaXMueTAgKyBjb247XG4gIH1cbiAgZWxzZSB7XG4gICAgLy95ID0gdGhpcy55MCAtIE1hdGguUEkgKiB0aGlzLlIgKiBNYXRoLnNxcnQoMSAtIGNvbiAqIGNvbiAtIDIgKiBhbCAqIGNvbik7XG4gICAgeSA9IHRoaXMueTAgLSBjb247XG4gIH1cbiAgcC54ID0geDtcbiAgcC55ID0geTtcbiAgcmV0dXJuIHA7XG59XG5cbi8qIFZhbiBEZXIgR3JpbnRlbiBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmdcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIGxvbiwgbGF0O1xuICB2YXIgeHgsIHl5LCB4eXMsIGMxLCBjMiwgYzM7XG4gIHZhciBhMTtcbiAgdmFyIG0xO1xuICB2YXIgY29uO1xuICB2YXIgdGgxO1xuICB2YXIgZDtcblxuICAvKiBpbnZlcnNlIGVxdWF0aW9uc1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuICBjb24gPSBNYXRoLlBJICogdGhpcy5SO1xuICB4eCA9IHAueCAvIGNvbjtcbiAgeXkgPSBwLnkgLyBjb247XG4gIHh5cyA9IHh4ICogeHggKyB5eSAqIHl5O1xuICBjMSA9IC1NYXRoLmFicyh5eSkgKiAoMSArIHh5cyk7XG4gIGMyID0gYzEgLSAyICogeXkgKiB5eSArIHh4ICogeHg7XG4gIGMzID0gLTIgKiBjMSArIDEgKyAyICogeXkgKiB5eSArIHh5cyAqIHh5cztcbiAgZCA9IHl5ICogeXkgLyBjMyArICgyICogYzIgKiBjMiAqIGMyIC8gYzMgLyBjMyAvIGMzIC0gOSAqIGMxICogYzIgLyBjMyAvIGMzKSAvIDI3O1xuICBhMSA9IChjMSAtIGMyICogYzIgLyAzIC8gYzMpIC8gYzM7XG4gIG0xID0gMiAqIE1hdGguc3FydCgtYTEgLyAzKTtcbiAgY29uID0gKCgzICogZCkgLyBhMSkgLyBtMTtcbiAgaWYgKE1hdGguYWJzKGNvbikgPiAxKSB7XG4gICAgaWYgKGNvbiA+PSAwKSB7XG4gICAgICBjb24gPSAxO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbiA9IC0xO1xuICAgIH1cbiAgfVxuICB0aDEgPSBNYXRoLmFjb3MoY29uKSAvIDM7XG4gIGlmIChwLnkgPj0gMCkge1xuICAgIGxhdCA9ICgtbTEgKiBNYXRoLmNvcyh0aDEgKyBNYXRoLlBJIC8gMykgLSBjMiAvIDMgLyBjMykgKiBNYXRoLlBJO1xuICB9XG4gIGVsc2Uge1xuICAgIGxhdCA9IC0oLW0xICogTWF0aC5jb3ModGgxICsgTWF0aC5QSSAvIDMpIC0gYzIgLyAzIC8gYzMpICogTWF0aC5QSTtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyh4eCkgPCBFUFNMTikge1xuICAgIGxvbiA9IHRoaXMubG9uZzA7XG4gIH1cbiAgZWxzZSB7XG4gICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5QSSAqICh4eXMgLSAxICsgTWF0aC5zcXJ0KDEgKyAyICogKHh4ICogeHggLSB5eSAqIHl5KSArIHh5cyAqIHh5cykpIC8gMiAvIHh4KTtcbiAgfVxuXG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIlZhbl9kZXJfR3JpbnRlbl9JXCIsIFwiVmFuRGVyR3JpbnRlblwiLCBcInZhbmRnXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQge0hBTEZfUEksIEVQU0xOfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuaW1wb3J0IG1sZm4gZnJvbSAnLi4vY29tbW9uL21sZm4nO1xuaW1wb3J0IGUwZm4gZnJvbSAnLi4vY29tbW9uL2UwZm4nO1xuaW1wb3J0IGUxZm4gZnJvbSAnLi4vY29tbW9uL2UxZm4nO1xuaW1wb3J0IGUyZm4gZnJvbSAnLi4vY29tbW9uL2UyZm4nO1xuaW1wb3J0IGUzZm4gZnJvbSAnLi4vY29tbW9uL2UzZm4nO1xuaW1wb3J0IGdOIGZyb20gJy4uL2NvbW1vbi9nTic7XG5pbXBvcnQgYXNpbnogZnJvbSAnLi4vY29tbW9uL2FzaW56JztcbmltcG9ydCBpbWxmbiBmcm9tICcuLi9jb21tb24vaW1sZm4nO1xuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIHRoaXMuc2luX3AxMiA9IE1hdGguc2luKHRoaXMubGF0MCk7XG4gIHRoaXMuY29zX3AxMiA9IE1hdGguY29zKHRoaXMubGF0MCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgdmFyIHNpbnBoaSA9IE1hdGguc2luKHAueSk7XG4gIHZhciBjb3NwaGkgPSBNYXRoLmNvcyhwLnkpO1xuICB2YXIgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIHZhciBlMCwgZTEsIGUyLCBlMywgTWxwLCBNbCwgdGFucGhpLCBObDEsIE5sLCBwc2ksIEF6LCBHLCBILCBHSCwgSHMsIGMsIGtwLCBjb3NfYywgcywgczIsIHMzLCBzNCwgczU7XG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGlmIChNYXRoLmFicyh0aGlzLnNpbl9wMTIgLSAxKSA8PSBFUFNMTikge1xuICAgICAgLy9Ob3J0aCBQb2xlIGNhc2VcbiAgICAgIHAueCA9IHRoaXMueDAgKyB0aGlzLmEgKiAoSEFMRl9QSSAtIGxhdCkgKiBNYXRoLnNpbihkbG9uKTtcbiAgICAgIHAueSA9IHRoaXMueTAgLSB0aGlzLmEgKiAoSEFMRl9QSSAtIGxhdCkgKiBNYXRoLmNvcyhkbG9uKTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLnNpbl9wMTIgKyAxKSA8PSBFUFNMTikge1xuICAgICAgLy9Tb3V0aCBQb2xlIGNhc2VcbiAgICAgIHAueCA9IHRoaXMueDAgKyB0aGlzLmEgKiAoSEFMRl9QSSArIGxhdCkgKiBNYXRoLnNpbihkbG9uKTtcbiAgICAgIHAueSA9IHRoaXMueTAgKyB0aGlzLmEgKiAoSEFMRl9QSSArIGxhdCkgKiBNYXRoLmNvcyhkbG9uKTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vZGVmYXVsdCBjYXNlXG4gICAgICBjb3NfYyA9IHRoaXMuc2luX3AxMiAqIHNpbnBoaSArIHRoaXMuY29zX3AxMiAqIGNvc3BoaSAqIE1hdGguY29zKGRsb24pO1xuICAgICAgYyA9IE1hdGguYWNvcyhjb3NfYyk7XG4gICAgICBrcCA9IGMgPyBjIC8gTWF0aC5zaW4oYykgOiAxO1xuICAgICAgcC54ID0gdGhpcy54MCArIHRoaXMuYSAqIGtwICogY29zcGhpICogTWF0aC5zaW4oZGxvbik7XG4gICAgICBwLnkgPSB0aGlzLnkwICsgdGhpcy5hICoga3AgKiAodGhpcy5jb3NfcDEyICogc2lucGhpIC0gdGhpcy5zaW5fcDEyICogY29zcGhpICogTWF0aC5jb3MoZGxvbikpO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGUwID0gZTBmbih0aGlzLmVzKTtcbiAgICBlMSA9IGUxZm4odGhpcy5lcyk7XG4gICAgZTIgPSBlMmZuKHRoaXMuZXMpO1xuICAgIGUzID0gZTNmbih0aGlzLmVzKTtcbiAgICBpZiAoTWF0aC5hYnModGhpcy5zaW5fcDEyIC0gMSkgPD0gRVBTTE4pIHtcbiAgICAgIC8vTm9ydGggUG9sZSBjYXNlXG4gICAgICBNbHAgPSB0aGlzLmEgKiBtbGZuKGUwLCBlMSwgZTIsIGUzLCBIQUxGX1BJKTtcbiAgICAgIE1sID0gdGhpcy5hICogbWxmbihlMCwgZTEsIGUyLCBlMywgbGF0KTtcbiAgICAgIHAueCA9IHRoaXMueDAgKyAoTWxwIC0gTWwpICogTWF0aC5zaW4oZGxvbik7XG4gICAgICBwLnkgPSB0aGlzLnkwIC0gKE1scCAtIE1sKSAqIE1hdGguY29zKGRsb24pO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuc2luX3AxMiArIDEpIDw9IEVQU0xOKSB7XG4gICAgICAvL1NvdXRoIFBvbGUgY2FzZVxuICAgICAgTWxwID0gdGhpcy5hICogbWxmbihlMCwgZTEsIGUyLCBlMywgSEFMRl9QSSk7XG4gICAgICBNbCA9IHRoaXMuYSAqIG1sZm4oZTAsIGUxLCBlMiwgZTMsIGxhdCk7XG4gICAgICBwLnggPSB0aGlzLngwICsgKE1scCArIE1sKSAqIE1hdGguc2luKGRsb24pO1xuICAgICAgcC55ID0gdGhpcy55MCArIChNbHAgKyBNbCkgKiBNYXRoLmNvcyhkbG9uKTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vRGVmYXVsdCBjYXNlXG4gICAgICB0YW5waGkgPSBzaW5waGkgLyBjb3NwaGk7XG4gICAgICBObDEgPSBnTih0aGlzLmEsIHRoaXMuZSwgdGhpcy5zaW5fcDEyKTtcbiAgICAgIE5sID0gZ04odGhpcy5hLCB0aGlzLmUsIHNpbnBoaSk7XG4gICAgICBwc2kgPSBNYXRoLmF0YW4oKDEgLSB0aGlzLmVzKSAqIHRhbnBoaSArIHRoaXMuZXMgKiBObDEgKiB0aGlzLnNpbl9wMTIgLyAoTmwgKiBjb3NwaGkpKTtcbiAgICAgIEF6ID0gTWF0aC5hdGFuMihNYXRoLnNpbihkbG9uKSwgdGhpcy5jb3NfcDEyICogTWF0aC50YW4ocHNpKSAtIHRoaXMuc2luX3AxMiAqIE1hdGguY29zKGRsb24pKTtcbiAgICAgIGlmIChBeiA9PT0gMCkge1xuICAgICAgICBzID0gTWF0aC5hc2luKHRoaXMuY29zX3AxMiAqIE1hdGguc2luKHBzaSkgLSB0aGlzLnNpbl9wMTIgKiBNYXRoLmNvcyhwc2kpKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKE1hdGguYWJzKE1hdGguYWJzKEF6KSAtIE1hdGguUEkpIDw9IEVQU0xOKSB7XG4gICAgICAgIHMgPSAtTWF0aC5hc2luKHRoaXMuY29zX3AxMiAqIE1hdGguc2luKHBzaSkgLSB0aGlzLnNpbl9wMTIgKiBNYXRoLmNvcyhwc2kpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzID0gTWF0aC5hc2luKE1hdGguc2luKGRsb24pICogTWF0aC5jb3MocHNpKSAvIE1hdGguc2luKEF6KSk7XG4gICAgICB9XG4gICAgICBHID0gdGhpcy5lICogdGhpcy5zaW5fcDEyIC8gTWF0aC5zcXJ0KDEgLSB0aGlzLmVzKTtcbiAgICAgIEggPSB0aGlzLmUgKiB0aGlzLmNvc19wMTIgKiBNYXRoLmNvcyhBeikgLyBNYXRoLnNxcnQoMSAtIHRoaXMuZXMpO1xuICAgICAgR0ggPSBHICogSDtcbiAgICAgIEhzID0gSCAqIEg7XG4gICAgICBzMiA9IHMgKiBzO1xuICAgICAgczMgPSBzMiAqIHM7XG4gICAgICBzNCA9IHMzICogcztcbiAgICAgIHM1ID0gczQgKiBzO1xuICAgICAgYyA9IE5sMSAqIHMgKiAoMSAtIHMyICogSHMgKiAoMSAtIEhzKSAvIDYgKyBzMyAvIDggKiBHSCAqICgxIC0gMiAqIEhzKSArIHM0IC8gMTIwICogKEhzICogKDQgLSA3ICogSHMpIC0gMyAqIEcgKiBHICogKDEgLSA3ICogSHMpKSAtIHM1IC8gNDggKiBHSCk7XG4gICAgICBwLnggPSB0aGlzLngwICsgYyAqIE1hdGguc2luKEF6KTtcbiAgICAgIHAueSA9IHRoaXMueTAgKyBjICogTWF0aC5jb3MoQXopO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9XG5cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHAueCAtPSB0aGlzLngwO1xuICBwLnkgLT0gdGhpcy55MDtcbiAgdmFyIHJoLCB6LCBzaW56LCBjb3N6LCBsb24sIGxhdCwgY29uLCBlMCwgZTEsIGUyLCBlMywgTWxwLCBNLCBOMSwgcHNpLCBBeiwgY29zQXosIHRtcCwgQSwgQiwgRCwgRWUsIEYsIHNpbnBzaTtcbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgcmggPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgICBpZiAocmggPiAoMiAqIEhBTEZfUEkgKiB0aGlzLmEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHogPSByaCAvIHRoaXMuYTtcblxuICAgIHNpbnogPSBNYXRoLnNpbih6KTtcbiAgICBjb3N6ID0gTWF0aC5jb3Moeik7XG5cbiAgICBsb24gPSB0aGlzLmxvbmcwO1xuICAgIGlmIChNYXRoLmFicyhyaCkgPD0gRVBTTE4pIHtcbiAgICAgIGxhdCA9IHRoaXMubGF0MDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsYXQgPSBhc2lueihjb3N6ICogdGhpcy5zaW5fcDEyICsgKHAueSAqIHNpbnogKiB0aGlzLmNvc19wMTIpIC8gcmgpO1xuICAgICAgY29uID0gTWF0aC5hYnModGhpcy5sYXQwKSAtIEhBTEZfUEk7XG4gICAgICBpZiAoTWF0aC5hYnMoY29uKSA8PSBFUFNMTikge1xuICAgICAgICBpZiAodGhpcy5sYXQwID49IDApIHtcbiAgICAgICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCwgLSBwLnkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgLSBNYXRoLmF0YW4yKC1wLngsIHAueSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLypjb24gPSBjb3N6IC0gdGhpcy5zaW5fcDEyICogTWF0aC5zaW4obGF0KTtcbiAgICAgICAgaWYgKChNYXRoLmFicyhjb24pIDwgRVBTTE4pICYmIChNYXRoLmFicyhwLngpIDwgRVBTTE4pKSB7XG4gICAgICAgICAgLy9uby1vcCwganVzdCBrZWVwIHRoZSBsb24gdmFsdWUgYXMgaXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdGVtcCA9IE1hdGguYXRhbjIoKHAueCAqIHNpbnogKiB0aGlzLmNvc19wMTIpLCAoY29uICogcmgpKTtcbiAgICAgICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKChwLnggKiBzaW56ICogdGhpcy5jb3NfcDEyKSwgKGNvbiAqIHJoKSkpO1xuICAgICAgICB9Ki9cbiAgICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hdGFuMihwLnggKiBzaW56LCByaCAqIHRoaXMuY29zX3AxMiAqIGNvc3ogLSBwLnkgKiB0aGlzLnNpbl9wMTIgKiBzaW56KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcC54ID0gbG9uO1xuICAgIHAueSA9IGxhdDtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBlbHNlIHtcbiAgICBlMCA9IGUwZm4odGhpcy5lcyk7XG4gICAgZTEgPSBlMWZuKHRoaXMuZXMpO1xuICAgIGUyID0gZTJmbih0aGlzLmVzKTtcbiAgICBlMyA9IGUzZm4odGhpcy5lcyk7XG4gICAgaWYgKE1hdGguYWJzKHRoaXMuc2luX3AxMiAtIDEpIDw9IEVQU0xOKSB7XG4gICAgICAvL05vcnRoIHBvbGUgY2FzZVxuICAgICAgTWxwID0gdGhpcy5hICogbWxmbihlMCwgZTEsIGUyLCBlMywgSEFMRl9QSSk7XG4gICAgICByaCA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICAgICAgTSA9IE1scCAtIHJoO1xuICAgICAgbGF0ID0gaW1sZm4oTSAvIHRoaXMuYSwgZTAsIGUxLCBlMiwgZTMpO1xuICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hdGFuMihwLngsIC0gMSAqIHAueSkpO1xuICAgICAgcC54ID0gbG9uO1xuICAgICAgcC55ID0gbGF0O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuc2luX3AxMiArIDEpIDw9IEVQU0xOKSB7XG4gICAgICAvL1NvdXRoIHBvbGUgY2FzZVxuICAgICAgTWxwID0gdGhpcy5hICogbWxmbihlMCwgZTEsIGUyLCBlMywgSEFMRl9QSSk7XG4gICAgICByaCA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICAgICAgTSA9IHJoIC0gTWxwO1xuXG4gICAgICBsYXQgPSBpbWxmbihNIC8gdGhpcy5hLCBlMCwgZTEsIGUyLCBlMyk7XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCwgcC55KSk7XG4gICAgICBwLnggPSBsb247XG4gICAgICBwLnkgPSBsYXQ7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvL2RlZmF1bHQgY2FzZVxuICAgICAgcmggPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgICAgIEF6ID0gTWF0aC5hdGFuMihwLngsIHAueSk7XG4gICAgICBOMSA9IGdOKHRoaXMuYSwgdGhpcy5lLCB0aGlzLnNpbl9wMTIpO1xuICAgICAgY29zQXogPSBNYXRoLmNvcyhBeik7XG4gICAgICB0bXAgPSB0aGlzLmUgKiB0aGlzLmNvc19wMTIgKiBjb3NBejtcbiAgICAgIEEgPSAtdG1wICogdG1wIC8gKDEgLSB0aGlzLmVzKTtcbiAgICAgIEIgPSAzICogdGhpcy5lcyAqICgxIC0gQSkgKiB0aGlzLnNpbl9wMTIgKiB0aGlzLmNvc19wMTIgKiBjb3NBeiAvICgxIC0gdGhpcy5lcyk7XG4gICAgICBEID0gcmggLyBOMTtcbiAgICAgIEVlID0gRCAtIEEgKiAoMSArIEEpICogTWF0aC5wb3coRCwgMykgLyA2IC0gQiAqICgxICsgMyAqIEEpICogTWF0aC5wb3coRCwgNCkgLyAyNDtcbiAgICAgIEYgPSAxIC0gQSAqIEVlICogRWUgLyAyIC0gRCAqIEVlICogRWUgKiBFZSAvIDY7XG4gICAgICBwc2kgPSBNYXRoLmFzaW4odGhpcy5zaW5fcDEyICogTWF0aC5jb3MoRWUpICsgdGhpcy5jb3NfcDEyICogTWF0aC5zaW4oRWUpICogY29zQXopO1xuICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hc2luKE1hdGguc2luKEF6KSAqIE1hdGguc2luKEVlKSAvIE1hdGguY29zKHBzaSkpKTtcbiAgICAgIHNpbnBzaSA9IE1hdGguc2luKHBzaSk7XG4gICAgICBsYXQgPSBNYXRoLmF0YW4yKChzaW5wc2kgLSB0aGlzLmVzICogRiAqIHRoaXMuc2luX3AxMikgKiBNYXRoLnRhbihwc2kpLCBzaW5wc2kgKiAoMSAtIHRoaXMuZXMpKTtcbiAgICAgIHAueCA9IGxvbjtcbiAgICAgIHAueSA9IGxhdDtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJBemltdXRoYWxfRXF1aWRpc3RhbnRcIiwgXCJhZXFkXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgYXNpbnogZnJvbSAnLi4vY29tbW9uL2FzaW56JztcbmltcG9ydCB7RVBTTE4sIEhBTEZfUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgLy9kb3VibGUgdGVtcDsgICAgICAvKiB0ZW1wb3JhcnkgdmFyaWFibGUgICAgKi9cblxuICAvKiBQbGFjZSBwYXJhbWV0ZXJzIGluIHN0YXRpYyBzdG9yYWdlIGZvciBjb21tb24gdXNlXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdGhpcy5zaW5fcDE0ID0gTWF0aC5zaW4odGhpcy5sYXQwKTtcbiAgdGhpcy5jb3NfcDE0ID0gTWF0aC5jb3ModGhpcy5sYXQwKTtcbn1cblxuLyogT3J0aG9ncmFwaGljIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBzaW5waGksIGNvc3BoaTsgLyogc2luIGFuZCBjb3MgdmFsdWUgICAgICAgICovXG4gIHZhciBkbG9uOyAvKiBkZWx0YSBsb25naXR1ZGUgdmFsdWUgICAgICAqL1xuICB2YXIgY29zbG9uOyAvKiBjb3Mgb2YgbG9uZ2l0dWRlICAgICAgICAqL1xuICB2YXIga3NwOyAvKiBzY2FsZSBmYWN0b3IgICAgICAgICAgKi9cbiAgdmFyIGcsIHgsIHk7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIC8qIEZvcndhcmQgZXF1YXRpb25zXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLSovXG4gIGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuXG4gIHNpbnBoaSA9IE1hdGguc2luKGxhdCk7XG4gIGNvc3BoaSA9IE1hdGguY29zKGxhdCk7XG5cbiAgY29zbG9uID0gTWF0aC5jb3MoZGxvbik7XG4gIGcgPSB0aGlzLnNpbl9wMTQgKiBzaW5waGkgKyB0aGlzLmNvc19wMTQgKiBjb3NwaGkgKiBjb3Nsb247XG4gIGtzcCA9IDE7XG4gIGlmICgoZyA+IDApIHx8IChNYXRoLmFicyhnKSA8PSBFUFNMTikpIHtcbiAgICB4ID0gdGhpcy5hICoga3NwICogY29zcGhpICogTWF0aC5zaW4oZGxvbik7XG4gICAgeSA9IHRoaXMueTAgKyB0aGlzLmEgKiBrc3AgKiAodGhpcy5jb3NfcDE0ICogc2lucGhpIC0gdGhpcy5zaW5fcDE0ICogY29zcGhpICogY29zbG9uKTtcbiAgfVxuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgcmg7IC8qIGhlaWdodCBhYm92ZSBlbGxpcHNvaWQgICAgICAqL1xuICB2YXIgejsgLyogYW5nbGUgICAgICAgICAgKi9cbiAgdmFyIHNpbnosIGNvc3o7IC8qIHNpbiBvZiB6IGFuZCBjb3Mgb2YgeiAgICAgICovXG4gIHZhciBjb247XG4gIHZhciBsb24sIGxhdDtcbiAgLyogSW52ZXJzZSBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuICByaCA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICB6ID0gYXNpbnoocmggLyB0aGlzLmEpO1xuXG4gIHNpbnogPSBNYXRoLnNpbih6KTtcbiAgY29zeiA9IE1hdGguY29zKHopO1xuXG4gIGxvbiA9IHRoaXMubG9uZzA7XG4gIGlmIChNYXRoLmFicyhyaCkgPD0gRVBTTE4pIHtcbiAgICBsYXQgPSB0aGlzLmxhdDA7XG4gICAgcC54ID0gbG9uO1xuICAgIHAueSA9IGxhdDtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBsYXQgPSBhc2lueihjb3N6ICogdGhpcy5zaW5fcDE0ICsgKHAueSAqIHNpbnogKiB0aGlzLmNvc19wMTQpIC8gcmgpO1xuICBjb24gPSBNYXRoLmFicyh0aGlzLmxhdDApIC0gSEFMRl9QSTtcbiAgaWYgKE1hdGguYWJzKGNvbikgPD0gRVBTTE4pIHtcbiAgICBpZiAodGhpcy5sYXQwID49IDApIHtcbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIE1hdGguYXRhbjIocC54LCAtIHAueSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCAtIE1hdGguYXRhbjIoLXAueCwgcC55KSk7XG4gICAgfVxuICAgIHAueCA9IGxvbjtcbiAgICBwLnkgPSBsYXQ7XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hdGFuMigocC54ICogc2lueiksIHJoICogdGhpcy5jb3NfcDE0ICogY29zeiAtIHAueSAqIHRoaXMuc2luX3AxNCAqIHNpbnopKTtcbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wib3J0aG9cIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsIi8vIFFTQyBwcm9qZWN0aW9uIHJld3JpdHRlbiBmcm9tIHRoZSBvcmlnaW5hbCBQUk9KNFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL09TR2VvL3Byb2ouNC9ibG9iL21hc3Rlci9zcmMvUEpfcXNjLmNcblxuaW1wb3J0IHtFUFNMTiwgVFdPX1BJLCBTUEksIEhBTEZfUEksIEZPUlRQSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbi8qIGNvbnN0YW50cyAqL1xudmFyIEZBQ0VfRU5VTSA9IHtcbiAgICBGUk9OVDogMSxcbiAgICBSSUdIVDogMixcbiAgICBCQUNLOiAzLFxuICAgIExFRlQ6IDQsXG4gICAgVE9QOiA1LFxuICAgIEJPVFRPTTogNlxufTtcblxudmFyIEFSRUFfRU5VTSA9IHtcbiAgICBBUkVBXzA6IDEsXG4gICAgQVJFQV8xOiAyLFxuICAgIEFSRUFfMjogMyxcbiAgICBBUkVBXzM6IDRcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuXG4gIHRoaXMueDAgPSB0aGlzLngwIHx8IDA7XG4gIHRoaXMueTAgPSB0aGlzLnkwIHx8IDA7XG4gIHRoaXMubGF0MCA9IHRoaXMubGF0MCB8fCAwO1xuICB0aGlzLmxvbmcwID0gdGhpcy5sb25nMCB8fCAwO1xuICB0aGlzLmxhdF90cyA9IHRoaXMubGF0X3RzIHx8IDA7XG4gIHRoaXMudGl0bGUgPSB0aGlzLnRpdGxlIHx8IFwiUXVhZHJpbGF0ZXJhbGl6ZWQgU3BoZXJpY2FsIEN1YmVcIjtcblxuICAvKiBEZXRlcm1pbmUgdGhlIGN1YmUgZmFjZSBmcm9tIHRoZSBjZW50ZXIgb2YgcHJvamVjdGlvbi4gKi9cbiAgaWYgKHRoaXMubGF0MCA+PSBIQUxGX1BJIC0gRk9SVFBJIC8gMi4wKSB7XG4gICAgdGhpcy5mYWNlID0gRkFDRV9FTlVNLlRPUDtcbiAgfSBlbHNlIGlmICh0aGlzLmxhdDAgPD0gLShIQUxGX1BJIC0gRk9SVFBJIC8gMi4wKSkge1xuICAgIHRoaXMuZmFjZSA9IEZBQ0VfRU5VTS5CT1RUT007XG4gIH0gZWxzZSBpZiAoTWF0aC5hYnModGhpcy5sb25nMCkgPD0gRk9SVFBJKSB7XG4gICAgdGhpcy5mYWNlID0gRkFDRV9FTlVNLkZST05UO1xuICB9IGVsc2UgaWYgKE1hdGguYWJzKHRoaXMubG9uZzApIDw9IEhBTEZfUEkgKyBGT1JUUEkpIHtcbiAgICB0aGlzLmZhY2UgPSB0aGlzLmxvbmcwID4gMC4wID8gRkFDRV9FTlVNLlJJR0hUIDogRkFDRV9FTlVNLkxFRlQ7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mYWNlID0gRkFDRV9FTlVNLkJBQ0s7XG4gIH1cblxuICAvKiBGaWxsIGluIHVzZWZ1bCB2YWx1ZXMgZm9yIHRoZSBlbGxpcHNvaWQgPC0+IHNwaGVyZSBzaGlmdFxuICAgKiBkZXNjcmliZWQgaW4gW0xLMTJdLiAqL1xuICBpZiAodGhpcy5lcyAhPT0gMCkge1xuICAgIHRoaXMub25lX21pbnVzX2YgPSAxIC0gKHRoaXMuYSAtIHRoaXMuYikgLyB0aGlzLmE7XG4gICAgdGhpcy5vbmVfbWludXNfZl9zcXVhcmVkID0gdGhpcy5vbmVfbWludXNfZiAqIHRoaXMub25lX21pbnVzX2Y7XG4gIH1cbn1cblxuLy8gUVNDIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIHh5ID0ge3g6IDAsIHk6IDB9O1xuICB2YXIgbGF0LCBsb247XG4gIHZhciB0aGV0YSwgcGhpO1xuICB2YXIgdCwgbXU7XG4gIC8qIG51OyAqL1xuICB2YXIgYXJlYSA9IHt2YWx1ZTogMH07XG5cbiAgLy8gbW92ZSBsb24gYWNjb3JkaW5nIHRvIHByb2plY3Rpb24ncyBsb25cbiAgcC54IC09IHRoaXMubG9uZzA7XG5cbiAgLyogQ29udmVydCB0aGUgZ2VvZGV0aWMgbGF0aXR1ZGUgdG8gYSBnZW9jZW50cmljIGxhdGl0dWRlLlxuICAgKiBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBzaGlmdCBmcm9tIHRoZSBlbGxpcHNvaWQgdG8gdGhlIHNwaGVyZVxuICAgKiBkZXNjcmliZWQgaW4gW0xLMTJdLiAqL1xuICBpZiAodGhpcy5lcyAhPT0gMCkgey8vaWYgKFAtPmVzICE9IDApIHtcbiAgICBsYXQgPSBNYXRoLmF0YW4odGhpcy5vbmVfbWludXNfZl9zcXVhcmVkICogTWF0aC50YW4ocC55KSk7XG4gIH0gZWxzZSB7XG4gICAgbGF0ID0gcC55O1xuICB9XG5cbiAgLyogQ29udmVydCB0aGUgaW5wdXQgbGF0LCBsb24gaW50byB0aGV0YSwgcGhpIGFzIHVzZWQgYnkgUVNDLlxuICAgKiBUaGlzIGRlcGVuZHMgb24gdGhlIGN1YmUgZmFjZSBhbmQgdGhlIGFyZWEgb24gaXQuXG4gICAqIEZvciB0aGUgdG9wIGFuZCBib3R0b20gZmFjZSwgd2UgY2FuIGNvbXB1dGUgdGhldGEgYW5kIHBoaVxuICAgKiBkaXJlY3RseSBmcm9tIHBoaSwgbGFtLiBGb3IgdGhlIG90aGVyIGZhY2VzLCB3ZSBtdXN0IHVzZVxuICAgKiB1bml0IHNwaGVyZSBjYXJ0ZXNpYW4gY29vcmRpbmF0ZXMgYXMgYW4gaW50ZXJtZWRpYXRlIHN0ZXAuICovXG4gIGxvbiA9IHAueDsgLy9sb24gPSBscC5sYW07XG4gIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5UT1ApIHtcbiAgICBwaGkgPSBIQUxGX1BJIC0gbGF0O1xuICAgIGlmIChsb24gPj0gRk9SVFBJICYmIGxvbiA8PSBIQUxGX1BJICsgRk9SVFBJKSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMDtcbiAgICAgIHRoZXRhID0gbG9uIC0gSEFMRl9QSTtcbiAgICB9IGVsc2UgaWYgKGxvbiA+IEhBTEZfUEkgKyBGT1JUUEkgfHwgbG9uIDw9IC0oSEFMRl9QSSArIEZPUlRQSSkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8xO1xuICAgICAgdGhldGEgPSAobG9uID4gMC4wID8gbG9uIC0gU1BJIDogbG9uICsgU1BJKTtcbiAgICB9IGVsc2UgaWYgKGxvbiA+IC0oSEFMRl9QSSArIEZPUlRQSSkgJiYgbG9uIDw9IC1GT1JUUEkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8yO1xuICAgICAgdGhldGEgPSBsb24gKyBIQUxGX1BJO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMztcbiAgICAgIHRoZXRhID0gbG9uO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5CT1RUT00pIHtcbiAgICBwaGkgPSBIQUxGX1BJICsgbGF0O1xuICAgIGlmIChsb24gPj0gRk9SVFBJICYmIGxvbiA8PSBIQUxGX1BJICsgRk9SVFBJKSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMDtcbiAgICAgIHRoZXRhID0gLWxvbiArIEhBTEZfUEk7XG4gICAgfSBlbHNlIGlmIChsb24gPCBGT1JUUEkgJiYgbG9uID49IC1GT1JUUEkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8xO1xuICAgICAgdGhldGEgPSAtbG9uO1xuICAgIH0gZWxzZSBpZiAobG9uIDwgLUZPUlRQSSAmJiBsb24gPj0gLShIQUxGX1BJICsgRk9SVFBJKSkge1xuICAgICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzI7XG4gICAgICB0aGV0YSA9IC1sb24gLSBIQUxGX1BJO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMztcbiAgICAgIHRoZXRhID0gKGxvbiA+IDAuMCA/IC1sb24gKyBTUEkgOiAtbG9uIC0gU1BJKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHEsIHIsIHM7XG4gICAgdmFyIHNpbmxhdCwgY29zbGF0O1xuICAgIHZhciBzaW5sb24sIGNvc2xvbjtcblxuICAgIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5SSUdIVCkge1xuICAgICAgbG9uID0gcXNjX3NoaWZ0X2xvbl9vcmlnaW4obG9uLCArSEFMRl9QSSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5CQUNLKSB7XG4gICAgICBsb24gPSBxc2Nfc2hpZnRfbG9uX29yaWdpbihsb24sICtTUEkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5mYWNlID09PSBGQUNFX0VOVU0uTEVGVCkge1xuICAgICAgbG9uID0gcXNjX3NoaWZ0X2xvbl9vcmlnaW4obG9uLCAtSEFMRl9QSSk7XG4gICAgfVxuICAgIHNpbmxhdCA9IE1hdGguc2luKGxhdCk7XG4gICAgY29zbGF0ID0gTWF0aC5jb3MobGF0KTtcbiAgICBzaW5sb24gPSBNYXRoLnNpbihsb24pO1xuICAgIGNvc2xvbiA9IE1hdGguY29zKGxvbik7XG4gICAgcSA9IGNvc2xhdCAqIGNvc2xvbjtcbiAgICByID0gY29zbGF0ICogc2lubG9uO1xuICAgIHMgPSBzaW5sYXQ7XG5cbiAgICBpZiAodGhpcy5mYWNlID09PSBGQUNFX0VOVU0uRlJPTlQpIHtcbiAgICAgIHBoaSA9IE1hdGguYWNvcyhxKTtcbiAgICAgIHRoZXRhID0gcXNjX2Z3ZF9lcXVhdF9mYWNlX3RoZXRhKHBoaSwgcywgciwgYXJlYSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5SSUdIVCkge1xuICAgICAgcGhpID0gTWF0aC5hY29zKHIpO1xuICAgICAgdGhldGEgPSBxc2NfZndkX2VxdWF0X2ZhY2VfdGhldGEocGhpLCBzLCAtcSwgYXJlYSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5CQUNLKSB7XG4gICAgICBwaGkgPSBNYXRoLmFjb3MoLXEpO1xuICAgICAgdGhldGEgPSBxc2NfZndkX2VxdWF0X2ZhY2VfdGhldGEocGhpLCBzLCAtciwgYXJlYSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5MRUZUKSB7XG4gICAgICBwaGkgPSBNYXRoLmFjb3MoLXIpO1xuICAgICAgdGhldGEgPSBxc2NfZndkX2VxdWF0X2ZhY2VfdGhldGEocGhpLCBzLCBxLCBhcmVhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogSW1wb3NzaWJsZSAqL1xuICAgICAgcGhpID0gdGhldGEgPSAwO1xuICAgICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzA7XG4gICAgfVxuICB9XG5cbiAgLyogQ29tcHV0ZSBtdSBhbmQgbnUgZm9yIHRoZSBhcmVhIG9mIGRlZmluaXRpb24uXG4gICAqIEZvciBtdSwgc2VlIEVxLiAoMy0yMSkgaW4gW09MNzZdLCBidXQgbm90ZSB0aGUgdHlwb3M6XG4gICAqIGNvbXBhcmUgd2l0aCBFcS4gKDMtMTQpLiBGb3IgbnUsIHNlZSBFcS4gKDMtMzgpLiAqL1xuICBtdSA9IE1hdGguYXRhbigoMTIgLyBTUEkpICogKHRoZXRhICsgTWF0aC5hY29zKE1hdGguc2luKHRoZXRhKSAqIE1hdGguY29zKEZPUlRQSSkpIC0gSEFMRl9QSSkpO1xuICB0ID0gTWF0aC5zcXJ0KCgxIC0gTWF0aC5jb3MocGhpKSkgLyAoTWF0aC5jb3MobXUpICogTWF0aC5jb3MobXUpKSAvICgxIC0gTWF0aC5jb3MoTWF0aC5hdGFuKDEgLyBNYXRoLmNvcyh0aGV0YSkpKSkpO1xuXG4gIC8qIEFwcGx5IHRoZSByZXN1bHQgdG8gdGhlIHJlYWwgYXJlYS4gKi9cbiAgaWYgKGFyZWEudmFsdWUgPT09IEFSRUFfRU5VTS5BUkVBXzEpIHtcbiAgICBtdSArPSBIQUxGX1BJO1xuICB9IGVsc2UgaWYgKGFyZWEudmFsdWUgPT09IEFSRUFfRU5VTS5BUkVBXzIpIHtcbiAgICBtdSArPSBTUEk7XG4gIH0gZWxzZSBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMykge1xuICAgIG11ICs9IDEuNSAqIFNQSTtcbiAgfVxuXG4gIC8qIE5vdyBjb21wdXRlIHgsIHkgZnJvbSBtdSBhbmQgbnUgKi9cbiAgeHkueCA9IHQgKiBNYXRoLmNvcyhtdSk7XG4gIHh5LnkgPSB0ICogTWF0aC5zaW4obXUpO1xuICB4eS54ID0geHkueCAqIHRoaXMuYSArIHRoaXMueDA7XG4gIHh5LnkgPSB4eS55ICogdGhpcy5hICsgdGhpcy55MDtcblxuICBwLnggPSB4eS54O1xuICBwLnkgPSB4eS55O1xuICByZXR1cm4gcDtcbn1cblxuLy8gUVNDIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZ1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIGxwID0ge2xhbTogMCwgcGhpOiAwfTtcbiAgdmFyIG11LCBudSwgY29zbXUsIHRhbm51O1xuICB2YXIgdGFudGhldGEsIHRoZXRhLCBjb3NwaGksIHBoaTtcbiAgdmFyIHQ7XG4gIHZhciBhcmVhID0ge3ZhbHVlOiAwfTtcblxuICAvKiBkZS1vZmZzZXQgKi9cbiAgcC54ID0gKHAueCAtIHRoaXMueDApIC8gdGhpcy5hO1xuICBwLnkgPSAocC55IC0gdGhpcy55MCkgLyB0aGlzLmE7XG5cbiAgLyogQ29udmVydCB0aGUgaW5wdXQgeCwgeSB0byB0aGUgbXUgYW5kIG51IGFuZ2xlcyBhcyB1c2VkIGJ5IFFTQy5cbiAgICogVGhpcyBkZXBlbmRzIG9uIHRoZSBhcmVhIG9mIHRoZSBjdWJlIGZhY2UuICovXG4gIG51ID0gTWF0aC5hdGFuKE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpKTtcbiAgbXUgPSBNYXRoLmF0YW4yKHAueSwgcC54KTtcbiAgaWYgKHAueCA+PSAwLjAgJiYgcC54ID49IE1hdGguYWJzKHAueSkpIHtcbiAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMDtcbiAgfSBlbHNlIGlmIChwLnkgPj0gMC4wICYmIHAueSA+PSBNYXRoLmFicyhwLngpKSB7XG4gICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzE7XG4gICAgbXUgLT0gSEFMRl9QSTtcbiAgfSBlbHNlIGlmIChwLnggPCAwLjAgJiYgLXAueCA+PSBNYXRoLmFicyhwLnkpKSB7XG4gICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzI7XG4gICAgbXUgPSAobXUgPCAwLjAgPyBtdSArIFNQSSA6IG11IC0gU1BJKTtcbiAgfSBlbHNlIHtcbiAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMztcbiAgICBtdSArPSBIQUxGX1BJO1xuICB9XG5cbiAgLyogQ29tcHV0ZSBwaGkgYW5kIHRoZXRhIGZvciB0aGUgYXJlYSBvZiBkZWZpbml0aW9uLlxuICAgKiBUaGUgaW52ZXJzZSBwcm9qZWN0aW9uIGlzIG5vdCBkZXNjcmliZWQgaW4gdGhlIG9yaWdpbmFsIHBhcGVyLCBidXQgc29tZVxuICAgKiBnb29kIGhpbnRzIGNhbiBiZSBmb3VuZCBoZXJlIChhcyBvZiAyMDExLTEyLTE0KTpcbiAgICogaHR0cDovL2ZpdHMuZ3NmYy5uYXNhLmdvdi9maXRzYml0cy9zYWYuOTMvc2FmLjkzMDJcbiAgICogKHNlYXJjaCBmb3IgXCJNZXNzYWdlLUlkOiA8OTMwMjE4MTc1OS5BQTI1NDc3IGF0IGZpdHMuY3YubnJhby5lZHU+XCIpICovXG4gIHQgPSAoU1BJIC8gMTIpICogTWF0aC50YW4obXUpO1xuICB0YW50aGV0YSA9IE1hdGguc2luKHQpIC8gKE1hdGguY29zKHQpIC0gKDEgLyBNYXRoLnNxcnQoMikpKTtcbiAgdGhldGEgPSBNYXRoLmF0YW4odGFudGhldGEpO1xuICBjb3NtdSA9IE1hdGguY29zKG11KTtcbiAgdGFubnUgPSBNYXRoLnRhbihudSk7XG4gIGNvc3BoaSA9IDEgLSBjb3NtdSAqIGNvc211ICogdGFubnUgKiB0YW5udSAqICgxIC0gTWF0aC5jb3MoTWF0aC5hdGFuKDEgLyBNYXRoLmNvcyh0aGV0YSkpKSk7XG4gIGlmIChjb3NwaGkgPCAtMSkge1xuICAgIGNvc3BoaSA9IC0xO1xuICB9IGVsc2UgaWYgKGNvc3BoaSA+ICsxKSB7XG4gICAgY29zcGhpID0gKzE7XG4gIH1cblxuICAvKiBBcHBseSB0aGUgcmVzdWx0IHRvIHRoZSByZWFsIGFyZWEgb24gdGhlIGN1YmUgZmFjZS5cbiAgICogRm9yIHRoZSB0b3AgYW5kIGJvdHRvbSBmYWNlLCB3ZSBjYW4gY29tcHV0ZSBwaGkgYW5kIGxhbSBkaXJlY3RseS5cbiAgICogRm9yIHRoZSBvdGhlciBmYWNlcywgd2UgbXVzdCB1c2UgdW5pdCBzcGhlcmUgY2FydGVzaWFuIGNvb3JkaW5hdGVzXG4gICAqIGFzIGFuIGludGVybWVkaWF0ZSBzdGVwLiAqL1xuICBpZiAodGhpcy5mYWNlID09PSBGQUNFX0VOVU0uVE9QKSB7XG4gICAgcGhpID0gTWF0aC5hY29zKGNvc3BoaSk7XG4gICAgbHAucGhpID0gSEFMRl9QSSAtIHBoaTtcbiAgICBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMCkge1xuICAgICAgbHAubGFtID0gdGhldGEgKyBIQUxGX1BJO1xuICAgIH0gZWxzZSBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMSkge1xuICAgICAgbHAubGFtID0gKHRoZXRhIDwgMC4wID8gdGhldGEgKyBTUEkgOiB0aGV0YSAtIFNQSSk7XG4gICAgfSBlbHNlIGlmIChhcmVhLnZhbHVlID09PSBBUkVBX0VOVU0uQVJFQV8yKSB7XG4gICAgICBscC5sYW0gPSB0aGV0YSAtIEhBTEZfUEk7XG4gICAgfSBlbHNlIC8qIGFyZWEudmFsdWUgPT0gQVJFQV9FTlVNLkFSRUFfMyAqLyB7XG4gICAgICBscC5sYW0gPSB0aGV0YTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5mYWNlID09PSBGQUNFX0VOVU0uQk9UVE9NKSB7XG4gICAgcGhpID0gTWF0aC5hY29zKGNvc3BoaSk7XG4gICAgbHAucGhpID0gcGhpIC0gSEFMRl9QSTtcbiAgICBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMCkge1xuICAgICAgbHAubGFtID0gLXRoZXRhICsgSEFMRl9QSTtcbiAgICB9IGVsc2UgaWYgKGFyZWEudmFsdWUgPT09IEFSRUFfRU5VTS5BUkVBXzEpIHtcbiAgICAgIGxwLmxhbSA9IC10aGV0YTtcbiAgICB9IGVsc2UgaWYgKGFyZWEudmFsdWUgPT09IEFSRUFfRU5VTS5BUkVBXzIpIHtcbiAgICAgIGxwLmxhbSA9IC10aGV0YSAtIEhBTEZfUEk7XG4gICAgfSBlbHNlIC8qIGFyZWEudmFsdWUgPT0gQVJFQV9FTlVNLkFSRUFfMyAqLyB7XG4gICAgICBscC5sYW0gPSAodGhldGEgPCAwLjAgPyAtdGhldGEgLSBTUEkgOiAtdGhldGEgKyBTUEkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvKiBDb21wdXRlIHBoaSBhbmQgbGFtIHZpYSBjYXJ0ZXNpYW4gdW5pdCBzcGhlcmUgY29vcmRpbmF0ZXMuICovXG4gICAgdmFyIHEsIHIsIHM7XG4gICAgcSA9IGNvc3BoaTtcbiAgICB0ID0gcSAqIHE7XG4gICAgaWYgKHQgPj0gMSkge1xuICAgICAgcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBNYXRoLnNxcnQoMSAtIHQpICogTWF0aC5zaW4odGhldGEpO1xuICAgIH1cbiAgICB0ICs9IHMgKiBzO1xuICAgIGlmICh0ID49IDEpIHtcbiAgICAgIHIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByID0gTWF0aC5zcXJ0KDEgLSB0KTtcbiAgICB9XG4gICAgLyogUm90YXRlIHEscixzIGludG8gdGhlIGNvcnJlY3QgYXJlYS4gKi9cbiAgICBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMSkge1xuICAgICAgdCA9IHI7XG4gICAgICByID0gLXM7XG4gICAgICBzID0gdDtcbiAgICB9IGVsc2UgaWYgKGFyZWEudmFsdWUgPT09IEFSRUFfRU5VTS5BUkVBXzIpIHtcbiAgICAgIHIgPSAtcjtcbiAgICAgIHMgPSAtcztcbiAgICB9IGVsc2UgaWYgKGFyZWEudmFsdWUgPT09IEFSRUFfRU5VTS5BUkVBXzMpIHtcbiAgICAgIHQgPSByO1xuICAgICAgciA9IHM7XG4gICAgICBzID0gLXQ7XG4gICAgfVxuICAgIC8qIFJvdGF0ZSBxLHIscyBpbnRvIHRoZSBjb3JyZWN0IGN1YmUgZmFjZS4gKi9cbiAgICBpZiAodGhpcy5mYWNlID09PSBGQUNFX0VOVU0uUklHSFQpIHtcbiAgICAgIHQgPSBxO1xuICAgICAgcSA9IC1yO1xuICAgICAgciA9IHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5CQUNLKSB7XG4gICAgICBxID0gLXE7XG4gICAgICByID0gLXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5MRUZUKSB7XG4gICAgICB0ID0gcTtcbiAgICAgIHEgPSByO1xuICAgICAgciA9IC10O1xuICAgIH1cbiAgICAvKiBOb3cgY29tcHV0ZSBwaGkgYW5kIGxhbSBmcm9tIHRoZSB1bml0IHNwaGVyZSBjb29yZGluYXRlcy4gKi9cbiAgICBscC5waGkgPSBNYXRoLmFjb3MoLXMpIC0gSEFMRl9QSTtcbiAgICBscC5sYW0gPSBNYXRoLmF0YW4yKHIsIHEpO1xuICAgIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5SSUdIVCkge1xuICAgICAgbHAubGFtID0gcXNjX3NoaWZ0X2xvbl9vcmlnaW4obHAubGFtLCAtSEFMRl9QSSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5CQUNLKSB7XG4gICAgICBscC5sYW0gPSBxc2Nfc2hpZnRfbG9uX29yaWdpbihscC5sYW0sIC1TUEkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5mYWNlID09PSBGQUNFX0VOVU0uTEVGVCkge1xuICAgICAgbHAubGFtID0gcXNjX3NoaWZ0X2xvbl9vcmlnaW4obHAubGFtLCArSEFMRl9QSSk7XG4gICAgfVxuICB9XG5cbiAgLyogQXBwbHkgdGhlIHNoaWZ0IGZyb20gdGhlIHNwaGVyZSB0byB0aGUgZWxsaXBzb2lkIGFzIGRlc2NyaWJlZFxuICAgKiBpbiBbTEsxMl0uICovXG4gIGlmICh0aGlzLmVzICE9PSAwKSB7XG4gICAgdmFyIGludmVydF9zaWduO1xuICAgIHZhciB0YW5waGksIHhhO1xuICAgIGludmVydF9zaWduID0gKGxwLnBoaSA8IDAgPyAxIDogMCk7XG4gICAgdGFucGhpID0gTWF0aC50YW4obHAucGhpKTtcbiAgICB4YSA9IHRoaXMuYiAvIE1hdGguc3FydCh0YW5waGkgKiB0YW5waGkgKyB0aGlzLm9uZV9taW51c19mX3NxdWFyZWQpO1xuICAgIGxwLnBoaSA9IE1hdGguYXRhbihNYXRoLnNxcnQodGhpcy5hICogdGhpcy5hIC0geGEgKiB4YSkgLyAodGhpcy5vbmVfbWludXNfZiAqIHhhKSk7XG4gICAgaWYgKGludmVydF9zaWduKSB7XG4gICAgICBscC5waGkgPSAtbHAucGhpO1xuICAgIH1cbiAgfVxuXG4gIGxwLmxhbSArPSB0aGlzLmxvbmcwO1xuICBwLnggPSBscC5sYW07XG4gIHAueSA9IGxwLnBoaTtcbiAgcmV0dXJuIHA7XG59XG5cbi8qIEhlbHBlciBmdW5jdGlvbiBmb3IgZm9yd2FyZCBwcm9qZWN0aW9uOiBjb21wdXRlIHRoZSB0aGV0YSBhbmdsZVxuICogYW5kIGRldGVybWluZSB0aGUgYXJlYSBudW1iZXIuICovXG5mdW5jdGlvbiBxc2NfZndkX2VxdWF0X2ZhY2VfdGhldGEocGhpLCB5LCB4LCBhcmVhKSB7XG4gIHZhciB0aGV0YTtcbiAgaWYgKHBoaSA8IEVQU0xOKSB7XG4gICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzA7XG4gICAgdGhldGEgPSAwLjA7XG4gIH0gZWxzZSB7XG4gICAgdGhldGEgPSBNYXRoLmF0YW4yKHksIHgpO1xuICAgIGlmIChNYXRoLmFicyh0aGV0YSkgPD0gRk9SVFBJKSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMDtcbiAgICB9IGVsc2UgaWYgKHRoZXRhID4gRk9SVFBJICYmIHRoZXRhIDw9IEhBTEZfUEkgKyBGT1JUUEkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8xO1xuICAgICAgdGhldGEgLT0gSEFMRl9QSTtcbiAgICB9IGVsc2UgaWYgKHRoZXRhID4gSEFMRl9QSSArIEZPUlRQSSB8fCB0aGV0YSA8PSAtKEhBTEZfUEkgKyBGT1JUUEkpKSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMjtcbiAgICAgIHRoZXRhID0gKHRoZXRhID49IDAuMCA/IHRoZXRhIC0gU1BJIDogdGhldGEgKyBTUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMztcbiAgICAgIHRoZXRhICs9IEhBTEZfUEk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGV0YTtcbn1cblxuLyogSGVscGVyIGZ1bmN0aW9uOiBzaGlmdCB0aGUgbG9uZ2l0dWRlLiAqL1xuZnVuY3Rpb24gcXNjX3NoaWZ0X2xvbl9vcmlnaW4obG9uLCBvZmZzZXQpIHtcbiAgdmFyIHNsb24gPSBsb24gKyBvZmZzZXQ7XG4gIGlmIChzbG9uIDwgLVNQSSkge1xuICAgIHNsb24gKz0gVFdPX1BJO1xuICB9IGVsc2UgaWYgKHNsb24gPiArU1BJKSB7XG4gICAgc2xvbiAtPSBUV09fUEk7XG4gIH1cbiAgcmV0dXJuIHNsb247XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJRdWFkcmlsYXRlcmFsaXplZCBTcGhlcmljYWwgQ3ViZVwiLCBcIlF1YWRyaWxhdGVyYWxpemVkX1NwaGVyaWNhbF9DdWJlXCIsIFwicXNjXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG5cbiIsIi8vIFJvYmluc29uIHByb2plY3Rpb25cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9PU0dlby9wcm9qLjQvYmxvYi9tYXN0ZXIvc3JjL1BKX3JvYmluLmNcbi8vIFBvbHlub21pYWwgY29lZmljaWVudHMgZnJvbSBodHRwOi8vYXJ0aWNsZS5nbWFuZS5vcmcvZ21hbmUuY29tcC5naXMucHJvai00LmRldmVsLzYwMzlcblxuaW1wb3J0IHtIQUxGX1BJLCBEMlIsIFIyRCwgRVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuXG52YXIgQ09FRlNfWCA9IFtcbiAgICBbMS4wMDAwLCAyLjIxOTllLTE3LCAtNy4xNTUxNWUtMDUsIDMuMTEwM2UtMDZdLFxuICAgIFswLjk5ODYsIC0wLjAwMDQ4MjI0MywgLTIuNDg5N2UtMDUsIC0xLjMzMDllLTA2XSxcbiAgICBbMC45OTU0LCAtMC4wMDA4MzEwMywgLTQuNDg2MDVlLTA1LCAtOS44NjcwMWUtMDddLFxuICAgIFswLjk5MDAsIC0wLjAwMTM1MzY0LCAtNS45NjYxZS0wNSwgMy42Nzc3ZS0wNl0sXG4gICAgWzAuOTgyMiwgLTAuMDAxNjc0NDIsIC00LjQ5NTQ3ZS0wNiwgLTUuNzI0MTFlLTA2XSxcbiAgICBbMC45NzMwLCAtMC4wMDIxNDg2OCwgLTkuMDM1NzFlLTA1LCAxLjg3MzZlLTA4XSxcbiAgICBbMC45NjAwLCAtMC4wMDMwNTA4NSwgLTkuMDA3NjFlLTA1LCAxLjY0OTE3ZS0wNl0sXG4gICAgWzAuOTQyNywgLTAuMDAzODI3OTIsIC02LjUzMzg2ZS0wNSwgLTIuNjE1NGUtMDZdLFxuICAgIFswLjkyMTYsIC0wLjAwNDY3NzQ2LCAtMC4wMDAxMDQ1NywgNC44MTI0M2UtMDZdLFxuICAgIFswLjg5NjIsIC0wLjAwNTM2MjIzLCAtMy4yMzgzMWUtMDUsIC01LjQzNDMyZS0wNl0sXG4gICAgWzAuODY3OSwgLTAuMDA2MDkzNjMsIC0wLjAwMDExMzg5OCwgMy4zMjQ4NGUtMDZdLFxuICAgIFswLjgzNTAsIC0wLjAwNjk4MzI1LCAtNi40MDI1M2UtMDUsIDkuMzQ5NTllLTA3XSxcbiAgICBbMC43OTg2LCAtMC4wMDc1NTMzOCwgLTUuMDAwMDllLTA1LCA5LjM1MzI0ZS0wN10sXG4gICAgWzAuNzU5NywgLTAuMDA3OTgzMjQsIC0zLjU5NzFlLTA1LCAtMi4yNzYyNmUtMDZdLFxuICAgIFswLjcxODYsIC0wLjAwODUxMzY3LCAtNy4wMTE0OWUtMDUsIC04LjYzMDNlLTA2XSxcbiAgICBbMC42NzMyLCAtMC4wMDk4NjIwOSwgLTAuMDAwMTk5NTY5LCAxLjkxOTc0ZS0wNV0sXG4gICAgWzAuNjIxMywgLTAuMDEwNDE4LCA4LjgzOTIzZS0wNSwgNi4yNDA1MWUtMDZdLFxuICAgIFswLjU3MjIsIC0wLjAwOTA2NjAxLCAwLjAwMDE4MiwgNi4yNDA1MWUtMDZdLFxuICAgIFswLjUzMjIsIC0wLjAwNjc3Nzk3LCAwLjAwMDI3NTYwOCwgNi4yNDA1MWUtMDZdXG5dO1xuXG52YXIgQ09FRlNfWSA9IFtcbiAgICBbLTUuMjA0MTdlLTE4LCAwLjAxMjQsIDEuMjE0MzFlLTE4LCAtOC40NTI4NGUtMTFdLFxuICAgIFswLjA2MjAsIDAuMDEyNCwgLTEuMjY3OTNlLTA5LCA0LjIyNjQyZS0xMF0sXG4gICAgWzAuMTI0MCwgMC4wMTI0LCA1LjA3MTcxZS0wOSwgLTEuNjA2MDRlLTA5XSxcbiAgICBbMC4xODYwLCAwLjAxMjM5OTksIC0xLjkwMTg5ZS0wOCwgNi4wMDE1MmUtMDldLFxuICAgIFswLjI0ODAsIDAuMDEyNDAwMiwgNy4xMDAzOWUtMDgsIC0yLjI0ZS0wOF0sXG4gICAgWzAuMzEwMCwgMC4wMTIzOTkyLCAtMi42NDk5N2UtMDcsIDguMzU5ODZlLTA4XSxcbiAgICBbMC4zNzIwLCAwLjAxMjQwMjksIDkuODg5ODNlLTA3LCAtMy4xMTk5NGUtMDddLFxuICAgIFswLjQzNDAsIDAuMDEyMzg5MywgLTMuNjkwOTNlLTA2LCAtNC4zNTYyMWUtMDddLFxuICAgIFswLjQ5NTgsIDAuMDEyMzE5OCwgLTEuMDIyNTJlLTA1LCAtMy40NTUyM2UtMDddLFxuICAgIFswLjU1NzEsIDAuMDEyMTkxNiwgLTEuNTQwODFlLTA1LCAtNS44MjI4OGUtMDddLFxuICAgIFswLjYxNzYsIDAuMDExOTkzOCwgLTIuNDE0MjRlLTA1LCAtNS4yNTMyN2UtMDddLFxuICAgIFswLjY3NjksIDAuMDExNzEzLCAtMy4yMDIyM2UtMDUsIC01LjE2NDA1ZS0wN10sXG4gICAgWzAuNzM0NiwgMC4wMTEzNTQxLCAtMy45NzY4NGUtMDUsIC02LjA5MDUyZS0wN10sXG4gICAgWzAuNzkwMywgMC4wMTA5MTA3LCAtNC44OTA0MmUtMDUsIC0xLjA0NzM5ZS0wNl0sXG4gICAgWzAuODQzNSwgMC4wMTAzNDMxLCAtNi40NjE1ZS0wNSwgLTEuNDAzNzRlLTA5XSxcbiAgICBbMC44OTM2LCAwLjAwOTY5Njg2LCAtNi40NjM2ZS0wNSwgLTguNTQ3ZS0wNl0sXG4gICAgWzAuOTM5NCwgMC4wMDg0MDk0NywgLTAuMDAwMTkyODQxLCAtNC4yMTA2ZS0wNl0sXG4gICAgWzAuOTc2MSwgMC4wMDYxNjUyNywgLTAuMDAwMjU2LCAtNC4yMTA2ZS0wNl0sXG4gICAgWzEuMDAwMCwgMC4wMDMyODk0NywgLTAuMDAwMzE5MTU5LCAtNC4yMTA2ZS0wNl1cbl07XG5cbnZhciBGWEMgPSAwLjg0ODc7XG52YXIgRllDID0gMS4zNTIzO1xudmFyIEMxID0gUjJELzU7IC8vIHJhZCB0byA1LWRlZ3JlZSBpbnRlcnZhbFxudmFyIFJDMSA9IDEvQzE7XG52YXIgTk9ERVMgPSAxODtcblxudmFyIHBvbHkzX3ZhbCA9IGZ1bmN0aW9uKGNvZWZzLCB4KSB7XG4gICAgcmV0dXJuIGNvZWZzWzBdICsgeCAqIChjb2Vmc1sxXSArIHggKiAoY29lZnNbMl0gKyB4ICogY29lZnNbM10pKTtcbn07XG5cbnZhciBwb2x5M19kZXIgPSBmdW5jdGlvbihjb2VmcywgeCkge1xuICAgIHJldHVybiBjb2Vmc1sxXSArIHggKiAoMiAqIGNvZWZzWzJdICsgeCAqIDMgKiBjb2Vmc1szXSk7XG59O1xuXG5mdW5jdGlvbiBuZXd0b25fcmFwc2hvbihmX2RmLCBzdGFydCwgbWF4X2VyciwgaXRlcnMpIHtcbiAgICB2YXIgeCA9IHN0YXJ0O1xuICAgIGZvciAoOyBpdGVyczsgLS1pdGVycykge1xuICAgICAgICB2YXIgdXBkID0gZl9kZih4KTtcbiAgICAgICAgeCAtPSB1cGQ7XG4gICAgICAgIGlmIChNYXRoLmFicyh1cGQpIDwgbWF4X2Vycikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMueDAgPSB0aGlzLngwIHx8IDA7XG4gICAgdGhpcy55MCA9IHRoaXMueTAgfHwgMDtcbiAgICB0aGlzLmxvbmcwID0gdGhpcy5sb25nMCB8fCAwO1xuICAgIHRoaXMuZXMgPSAwO1xuICAgIHRoaXMudGl0bGUgPSB0aGlzLnRpdGxlIHx8IFwiUm9iaW5zb25cIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQobGwpIHtcbiAgICB2YXIgbG9uID0gYWRqdXN0X2xvbihsbC54IC0gdGhpcy5sb25nMCk7XG5cbiAgICB2YXIgZHBoaSA9IE1hdGguYWJzKGxsLnkpO1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihkcGhpICogQzEpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgICBpID0gMDtcbiAgICB9IGVsc2UgaWYgKGkgPj0gTk9ERVMpIHtcbiAgICAgICAgaSA9IE5PREVTIC0gMTtcbiAgICB9XG4gICAgZHBoaSA9IFIyRCAqIChkcGhpIC0gUkMxICogaSk7XG4gICAgdmFyIHh5ID0ge1xuICAgICAgICB4OiBwb2x5M192YWwoQ09FRlNfWFtpXSwgZHBoaSkgKiBsb24sXG4gICAgICAgIHk6IHBvbHkzX3ZhbChDT0VGU19ZW2ldLCBkcGhpKVxuICAgIH07XG4gICAgaWYgKGxsLnkgPCAwKSB7XG4gICAgICAgIHh5LnkgPSAteHkueTtcbiAgICB9XG5cbiAgICB4eS54ID0geHkueCAqIHRoaXMuYSAqIEZYQyArIHRoaXMueDA7XG4gICAgeHkueSA9IHh5LnkgKiB0aGlzLmEgKiBGWUMgKyB0aGlzLnkwO1xuICAgIHJldHVybiB4eTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UoeHkpIHtcbiAgICB2YXIgbGwgPSB7XG4gICAgICAgIHg6ICh4eS54IC0gdGhpcy54MCkgLyAodGhpcy5hICogRlhDKSxcbiAgICAgICAgeTogTWF0aC5hYnMoeHkueSAtIHRoaXMueTApIC8gKHRoaXMuYSAqIEZZQylcbiAgICB9O1xuXG4gICAgaWYgKGxsLnkgPj0gMSkgeyAvLyBwYXRob2xvZ2ljIGNhc2VcbiAgICAgICAgbGwueCAvPSBDT0VGU19YW05PREVTXVswXTtcbiAgICAgICAgbGwueSA9IHh5LnkgPCAwID8gLUhBTEZfUEkgOiBIQUxGX1BJO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZpbmQgdGFibGUgaW50ZXJ2YWxcbiAgICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKGxsLnkgKiBOT0RFUyk7XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA+PSBOT0RFUykge1xuICAgICAgICAgICAgaSA9IE5PREVTIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpZiAoQ09FRlNfWVtpXVswXSA+IGxsLnkpIHtcbiAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKENPRUZTX1lbaSsxXVswXSA8PSBsbC55KSB7XG4gICAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBsaW5lYXIgaW50ZXJwb2xhdGlvbiBpbiA1IGRlZ3JlZSBpbnRlcnZhbFxuICAgICAgICB2YXIgY29lZnMgPSBDT0VGU19ZW2ldO1xuICAgICAgICB2YXIgdCA9IDUgKiAobGwueSAtIGNvZWZzWzBdKSAvIChDT0VGU19ZW2krMV1bMF0gLSBjb2Vmc1swXSk7XG4gICAgICAgIC8vIGZpbmQgdCBzbyB0aGF0IHBvbHkzX3ZhbChjb2VmcywgdCkgPSBsbC55XG4gICAgICAgIHQgPSBuZXd0b25fcmFwc2hvbihmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICByZXR1cm4gKHBvbHkzX3ZhbChjb2VmcywgeCkgLSBsbC55KSAvIHBvbHkzX2Rlcihjb2VmcywgeCk7XG4gICAgICAgIH0sIHQsIEVQU0xOLCAxMDApO1xuXG4gICAgICAgIGxsLnggLz0gcG9seTNfdmFsKENPRUZTX1hbaV0sIHQpO1xuICAgICAgICBsbC55ID0gKDUgKiBpICsgdCkgKiBEMlI7XG4gICAgICAgIGlmICh4eS55IDwgMCkge1xuICAgICAgICAgICAgbGwueSA9IC1sbC55O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGwueCA9IGFkanVzdF9sb24obGwueCArIHRoaXMubG9uZzApO1xuICAgIHJldHVybiBsbDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIlJvYmluc29uXCIsIFwicm9iaW5cIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCB7XG4gICAgZ2VvZGV0aWNUb0dlb2NlbnRyaWMsXG4gICAgZ2VvY2VudHJpY1RvR2VvZGV0aWNcbn0gZnJvbSAnLi4vZGF0dW1VdGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMubmFtZSA9ICdnZW9jZW50JztcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gICAgdmFyIHBvaW50ID0gZ2VvZGV0aWNUb0dlb2NlbnRyaWMocCwgdGhpcy5lcywgdGhpcy5hKTtcbiAgICByZXR1cm4gcG9pbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgICB2YXIgcG9pbnQgPSBnZW9jZW50cmljVG9HZW9kZXRpYyhwLCB0aGlzLmVzLCB0aGlzLmEsIHRoaXMuYik7XG4gICAgcmV0dXJuIHBvaW50O1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiR2VvY2VudHJpY1wiLCAnZ2VvY2VudHJpYycsIFwiZ2VvY2VudFwiLCBcIkdlb2NlbnRcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgaW5pdDogaW5pdCxcbiAgICBmb3J3YXJkOiBmb3J3YXJkLFxuICAgIGludmVyc2U6IGludmVyc2UsXG4gICAgbmFtZXM6IG5hbWVzXG59OyIsIlxudmFyIG1vZGUgPSB7XG4gIE5fUE9MRTogMCxcbiAgU19QT0xFOiAxLFxuICBFUVVJVDogMixcbiAgT0JMSVE6IDNcbn07XG5cbmltcG9ydCB7IEQyUiwgSEFMRl9QSSwgRVBTTE4gfSBmcm9tIFwiLi4vY29uc3RhbnRzL3ZhbHVlc1wiO1xuaW1wb3J0IGh5cG90IGZyb20gXCIuLi9jb21tb24vaHlwb3RcIjtcblxudmFyIHBhcmFtcyA9IHtcbiAgaDogICAgIHsgZGVmOiAxMDAwMDAsIG51bTogdHJ1ZSB9LCAgICAgICAgICAgLy8gZGVmYXVsdCBpcyBLYXJtYW4gbGluZSwgbm8gZGVmYXVsdCBpbiBQUk9KLjdcbiAgYXppOiAgIHsgZGVmOiAwLCBudW06IHRydWUsIGRlZ3JlZXM6IHRydWUgfSwgLy8gZGVmYXVsdCBpcyBOb3J0aFxuICB0aWx0OiAgeyBkZWY6IDAsIG51bTogdHJ1ZSwgZGVncmVlczogdHJ1ZSB9LCAvLyBkZWZhdWx0IGlzIE5hZGlyXG4gIGxvbmcwOiB7IGRlZjogMCwgbnVtOiB0cnVlIH0sICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgaXMgR3JlZW53aWNoLCBjb252ZXJzaW9uIHRvIHJhZCBpcyBhdXRvbWF0aWNcbiAgbGF0MDogIHsgZGVmOiAwLCBudW06IHRydWUgfSAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdCBpcyBFcXVhdG9yLCBjb252ZXJzaW9uIHRvIHJhZCBpcyBhdXRvbWF0aWNcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICBpZiAodHlwZW9mIHRoaXNbcF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXNbcF0gPSBwYXJhbXNbcF0uZGVmO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zW3BdLm51bSAmJiBpc05hTih0aGlzW3BdKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbWV0ZXIgdmFsdWUsIG11c3QgYmUgbnVtZXJpYyBcIiArIHAgKyBcIiA9IFwiICsgdGhpc1twXSk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXNbcF0ubnVtKSB7XG4gICAgICB0aGlzW3BdID0gcGFyc2VGbG9hdCh0aGlzW3BdKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtc1twXS5kZWdyZWVzKSB7XG4gICAgICB0aGlzW3BdID0gdGhpc1twXSAqIEQyUjtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgaWYgKE1hdGguYWJzKChNYXRoLmFicyh0aGlzLmxhdDApIC0gSEFMRl9QSSkpIDwgRVBTTE4pIHtcbiAgICB0aGlzLm1vZGUgPSB0aGlzLmxhdDAgPCAwID8gbW9kZS5TX1BPTEUgOiBtb2RlLk5fUE9MRTtcbiAgfSBlbHNlIGlmIChNYXRoLmFicyh0aGlzLmxhdDApIDwgRVBTTE4pIHtcbiAgICB0aGlzLm1vZGUgPSBtb2RlLkVRVUlUO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubW9kZSA9IG1vZGUuT0JMSVE7XG4gICAgdGhpcy5zaW5waDAgPSBNYXRoLnNpbih0aGlzLmxhdDApO1xuICAgIHRoaXMuY29zcGgwID0gTWF0aC5jb3ModGhpcy5sYXQwKTtcbiAgfVxuXG4gIHRoaXMucG4xID0gdGhpcy5oIC8gdGhpcy5hOyAgLy8gTm9ybWFsaXplIHJlbGF0aXZlIHRvIHRoZSBFYXJ0aCdzIHJhZGl1c1xuXG4gIGlmICh0aGlzLnBuMSA8PSAwIHx8IHRoaXMucG4xID4gMWUxMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaGVpZ2h0XCIpO1xuICB9XG4gIFxuICB0aGlzLnAgPSAxICsgdGhpcy5wbjE7XG4gIHRoaXMucnAgPSAxIC8gdGhpcy5wO1xuICB0aGlzLmgxID0gMSAvIHRoaXMucG4xO1xuICB0aGlzLnBmYWN0ID0gKHRoaXMucCArIDEpICogdGhpcy5oMTtcbiAgdGhpcy5lcyA9IDA7XG5cbiAgdmFyIG9tZWdhID0gdGhpcy50aWx0O1xuICB2YXIgZ2FtbWEgPSB0aGlzLmF6aTtcbiAgdGhpcy5jZyA9IE1hdGguY29zKGdhbW1hKTtcbiAgdGhpcy5zZyA9IE1hdGguc2luKGdhbW1hKTtcbiAgdGhpcy5jdyA9IE1hdGguY29zKG9tZWdhKTtcbiAgdGhpcy5zdyA9IE1hdGguc2luKG9tZWdhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICBwLnggLT0gdGhpcy5sb25nMDtcbiAgdmFyIHNpbnBoaSA9IE1hdGguc2luKHAueSk7XG4gIHZhciBjb3NwaGkgPSBNYXRoLmNvcyhwLnkpO1xuICB2YXIgY29zbGFtID0gTWF0aC5jb3MocC54KTtcbiAgdmFyIHgsIHk7XG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSBtb2RlLk9CTElROlxuICAgICAgeSA9IHRoaXMuc2lucGgwICogc2lucGhpICsgdGhpcy5jb3NwaDAgKiBjb3NwaGkgKiBjb3NsYW07XG4gICAgICBicmVhaztcbiAgICBjYXNlIG1vZGUuRVFVSVQ6XG4gICAgICB5ID0gY29zcGhpICogY29zbGFtO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBtb2RlLlNfUE9MRTpcbiAgICAgIHkgPSAtc2lucGhpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBtb2RlLk5fUE9MRTpcbiAgICAgIHkgPSBzaW5waGk7XG4gICAgICBicmVhaztcbiAgfVxuICB5ID0gdGhpcy5wbjEgLyAodGhpcy5wIC0geSk7XG4gIHggPSB5ICogY29zcGhpICogTWF0aC5zaW4ocC54KTtcblxuICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgbW9kZS5PQkxJUTpcbiAgICAgIHkgKj0gdGhpcy5jb3NwaDAgKiBzaW5waGkgLSB0aGlzLnNpbnBoMCAqIGNvc3BoaSAqIGNvc2xhbTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgbW9kZS5FUVVJVDpcbiAgICAgIHkgKj0gc2lucGhpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBtb2RlLk5fUE9MRTpcbiAgICAgIHkgKj0gLShjb3NwaGkgKiBjb3NsYW0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBtb2RlLlNfUE9MRTpcbiAgICAgIHkgKj0gY29zcGhpICogY29zbGFtO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICAvLyBUaWx0IFxuICB2YXIgeXQsIGJhO1xuICB5dCA9IHkgKiB0aGlzLmNnICsgeCAqIHRoaXMuc2c7XG4gIGJhID0gMSAvICh5dCAqIHRoaXMuc3cgKiB0aGlzLmgxICsgdGhpcy5jdyk7XG4gIHggPSAoeCAqIHRoaXMuY2cgLSB5ICogdGhpcy5zZykgKiB0aGlzLmN3ICogYmE7XG4gIHkgPSB5dCAqIGJhO1xuXG4gIHAueCA9IHggKiB0aGlzLmE7XG4gIHAueSA9IHkgKiB0aGlzLmE7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHAueCAvPSB0aGlzLmE7XG4gIHAueSAvPSB0aGlzLmE7XG4gIHZhciByID0geyB4OiBwLngsIHk6IHAueSB9O1xuXG4gIC8vIFVuLVRpbHRcbiAgdmFyIGJtLCBicSwgeXQ7XG4gIHl0ID0gMSAvICh0aGlzLnBuMSAtIHAueSAqIHRoaXMuc3cpO1xuICBibSA9IHRoaXMucG4xICogcC54ICogeXQ7XG4gIGJxID0gdGhpcy5wbjEgKiBwLnkgKiB0aGlzLmN3ICogeXQ7XG4gIHAueCA9IGJtICogdGhpcy5jZyArIGJxICogdGhpcy5zZztcbiAgcC55ID0gYnEgKiB0aGlzLmNnIC0gYm0gKiB0aGlzLnNnO1xuXG4gIHZhciByaCA9IGh5cG90KHAueCwgcC55KTtcbiAgaWYgKE1hdGguYWJzKHJoKSA8IEVQU0xOKSB7XG4gICAgci54ID0gMDtcbiAgICByLnkgPSBwLnk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvc3osIHNpbno7XG4gICAgc2lueiA9IDEgLSByaCAqIHJoICogdGhpcy5wZmFjdDtcbiAgICBzaW56ID0gKHRoaXMucCAtIE1hdGguc3FydChzaW56KSkgLyAodGhpcy5wbjEgLyByaCArIHJoIC8gdGhpcy5wbjEpO1xuICAgIGNvc3ogPSBNYXRoLnNxcnQoMSAtIHNpbnogKiBzaW56KTtcbiAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgY2FzZSBtb2RlLk9CTElROlxuICAgICAgICByLnkgPSBNYXRoLmFzaW4oY29zeiAqIHRoaXMuc2lucGgwICsgcC55ICogc2lueiAqIHRoaXMuY29zcGgwIC8gcmgpO1xuICAgICAgICBwLnkgPSAoY29zeiAtIHRoaXMuc2lucGgwICogTWF0aC5zaW4oci55KSkgKiByaDtcbiAgICAgICAgcC54ICo9IHNpbnogKiB0aGlzLmNvc3BoMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIG1vZGUuRVFVSVQ6XG4gICAgICAgIHIueSA9IE1hdGguYXNpbihwLnkgKiBzaW56IC8gcmgpO1xuICAgICAgICBwLnkgPSBjb3N6ICogcmg7XG4gICAgICAgIHAueCAqPSBzaW56O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgbW9kZS5OX1BPTEU6XG4gICAgICAgIHIueSA9IE1hdGguYXNpbihjb3N6KTtcbiAgICAgICAgcC55ID0gLXAueTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIG1vZGUuU19QT0xFOlxuICAgICAgICByLnkgPSAtTWF0aC5hc2luKGNvc3opO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgci54ID0gTWF0aC5hdGFuMihwLngsIHAueSk7XG4gIH1cblxuICBwLnggPSByLnggKyB0aGlzLmxvbmcwO1xuICBwLnkgPSByLnk7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiVGlsdGVkX1BlcnNwZWN0aXZlXCIsIFwidHBlcnNcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCB0bWVyYyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy90bWVyYyc7XG5pbXBvcnQgZXRtZXJjIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL2V0bWVyYyc7XG5pbXBvcnQgdXRtIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3V0bSc7XG5pbXBvcnQgc3RlcmVhIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3N0ZXJlYSc7XG5pbXBvcnQgc3RlcmUgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvc3RlcmUnO1xuaW1wb3J0IHNvbWVyYyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9zb21lcmMnO1xuaW1wb3J0IG9tZXJjIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL29tZXJjJztcbmltcG9ydCBsY2MgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvbGNjJztcbmltcG9ydCBrcm92YWsgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMva3JvdmFrJztcbmltcG9ydCBjYXNzIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL2Nhc3MnO1xuaW1wb3J0IGxhZWEgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvbGFlYSc7XG5pbXBvcnQgYWVhIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL2FlYSc7XG5pbXBvcnQgZ25vbSBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9nbm9tJztcbmltcG9ydCBjZWEgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvY2VhJztcbmltcG9ydCBlcWMgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvZXFjJztcbmltcG9ydCBwb2x5IGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3BvbHknO1xuaW1wb3J0IG56bWcgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvbnptZyc7XG5pbXBvcnQgbWlsbCBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9taWxsJztcbmltcG9ydCBzaW51IGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3NpbnUnO1xuaW1wb3J0IG1vbGwgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvbW9sbCc7XG5pbXBvcnQgZXFkYyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9lcWRjJztcbmltcG9ydCB2YW5kZyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy92YW5kZyc7XG5pbXBvcnQgYWVxZCBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9hZXFkJztcbmltcG9ydCBvcnRobyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9vcnRobyc7XG5pbXBvcnQgcXNjIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3FzYyc7XG5pbXBvcnQgcm9iaW4gZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvcm9iaW4nO1xuaW1wb3J0IGdlb2NlbnQgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvZ2VvY2VudCc7XG5pbXBvcnQgdHBlcnMgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvdHBlcnMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvajQpe1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZCh0bWVyYyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGV0bWVyYyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHV0bSk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHN0ZXJlYSk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHN0ZXJlKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoc29tZXJjKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQob21lcmMpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChsY2MpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChrcm92YWspO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChjYXNzKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQobGFlYSk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGFlYSk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGdub20pO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChjZWEpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChlcWMpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChwb2x5KTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQobnptZyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKG1pbGwpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChzaW51KTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQobW9sbCk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGVxZGMpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZCh2YW5kZyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGFlcWQpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChvcnRobyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHFzYyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHJvYmluKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoZ2VvY2VudCk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHRwZXJzKTtcbn0iLCJpbXBvcnQgcHJvajQgZnJvbSAnLi9jb3JlJztcbmltcG9ydCBQcm9qIGZyb20gXCIuL1Byb2pcIjtcbmltcG9ydCBQb2ludCBmcm9tIFwiLi9Qb2ludFwiO1xuaW1wb3J0IGNvbW1vbiBmcm9tIFwiLi9jb21tb24vdG9Qb2ludFwiO1xuaW1wb3J0IGRlZnMgZnJvbSBcIi4vZGVmc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm1cIjtcbmltcG9ydCBtZ3JzIGZyb20gXCJtZ3JzXCI7XG5pbXBvcnQgaW5jbHVkZWRQcm9qZWN0aW9ucyBmcm9tIFwiLi4vcHJvanNcIjtcblxucHJvajQuZGVmYXVsdERhdHVtID0gJ1dHUzg0JzsgLy9kZWZhdWx0IGRhdHVtXG5wcm9qNC5Qcm9qID0gUHJvajtcbnByb2o0LldHUzg0ID0gbmV3IHByb2o0LlByb2ooJ1dHUzg0Jyk7XG5wcm9qNC5Qb2ludCA9IFBvaW50O1xucHJvajQudG9Qb2ludCA9IGNvbW1vbjtcbnByb2o0LmRlZnMgPSBkZWZzO1xucHJvajQudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xucHJvajQubWdycyA9IG1ncnM7XG5wcm9qNC52ZXJzaW9uID0gJ19fVkVSU0lPTl9fJztcbmluY2x1ZGVkUHJvamVjdGlvbnMocHJvajQpO1xuZXhwb3J0IGRlZmF1bHQgcHJvajQ7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24odikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrXS5tYXAoZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwidmFyIENsaWVudFJlcXVlc3QgPSByZXF1aXJlKCcuL2xpYi9yZXF1ZXN0JylcbnZhciByZXNwb25zZSA9IHJlcXVpcmUoJy4vbGliL3Jlc3BvbnNlJylcbnZhciBleHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgc3RhdHVzQ29kZXMgPSByZXF1aXJlKCdidWlsdGluLXN0YXR1cy1jb2RlcycpXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcblxudmFyIGh0dHAgPSBleHBvcnRzXG5cbmh0dHAucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzLCBjYikge1xuXHRpZiAodHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnKVxuXHRcdG9wdHMgPSB1cmwucGFyc2Uob3B0cylcblx0ZWxzZVxuXHRcdG9wdHMgPSBleHRlbmQob3B0cylcblxuXHQvLyBOb3JtYWxseSwgdGhlIHBhZ2UgaXMgbG9hZGVkIGZyb20gaHR0cCBvciBodHRwcywgc28gbm90IHNwZWNpZnlpbmcgYSBwcm90b2NvbFxuXHQvLyB3aWxsIHJlc3VsdCBpbiBhICh2YWxpZCkgcHJvdG9jb2wtcmVsYXRpdmUgdXJsLiBIb3dldmVyLCB0aGlzIHdvbid0IHdvcmsgaWZcblx0Ly8gdGhlIHByb3RvY29sIGlzIHNvbWV0aGluZyBlbHNlLCBsaWtlICdmaWxlOidcblx0dmFyIGRlZmF1bHRQcm90b2NvbCA9IGdsb2JhbC5sb2NhdGlvbi5wcm90b2NvbC5zZWFyY2goL15odHRwcz86JC8pID09PSAtMSA/ICdodHRwOicgOiAnJ1xuXG5cdHZhciBwcm90b2NvbCA9IG9wdHMucHJvdG9jb2wgfHwgZGVmYXVsdFByb3RvY29sXG5cdHZhciBob3N0ID0gb3B0cy5ob3N0bmFtZSB8fCBvcHRzLmhvc3Rcblx0dmFyIHBvcnQgPSBvcHRzLnBvcnRcblx0dmFyIHBhdGggPSBvcHRzLnBhdGggfHwgJy8nXG5cblx0Ly8gTmVjZXNzYXJ5IGZvciBJUHY2IGFkZHJlc3Nlc1xuXHRpZiAoaG9zdCAmJiBob3N0LmluZGV4T2YoJzonKSAhPT0gLTEpXG5cdFx0aG9zdCA9ICdbJyArIGhvc3QgKyAnXSdcblxuXHQvLyBUaGlzIG1heSBiZSBhIHJlbGF0aXZlIHVybC4gVGhlIGJyb3dzZXIgc2hvdWxkIGFsd2F5cyBiZSBhYmxlIHRvIGludGVycHJldCBpdCBjb3JyZWN0bHkuXG5cdG9wdHMudXJsID0gKGhvc3QgPyAocHJvdG9jb2wgKyAnLy8nICsgaG9zdCkgOiAnJykgKyAocG9ydCA/ICc6JyArIHBvcnQgOiAnJykgKyBwYXRoXG5cdG9wdHMubWV0aG9kID0gKG9wdHMubWV0aG9kIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpXG5cdG9wdHMuaGVhZGVycyA9IG9wdHMuaGVhZGVycyB8fCB7fVxuXG5cdC8vIEFsc28gdmFsaWQgb3B0cy5hdXRoLCBvcHRzLm1vZGVcblxuXHR2YXIgcmVxID0gbmV3IENsaWVudFJlcXVlc3Qob3B0cylcblx0aWYgKGNiKVxuXHRcdHJlcS5vbigncmVzcG9uc2UnLCBjYilcblx0cmV0dXJuIHJlcVxufVxuXG5odHRwLmdldCA9IGZ1bmN0aW9uIGdldCAob3B0cywgY2IpIHtcblx0dmFyIHJlcSA9IGh0dHAucmVxdWVzdChvcHRzLCBjYilcblx0cmVxLmVuZCgpXG5cdHJldHVybiByZXFcbn1cblxuaHR0cC5DbGllbnRSZXF1ZXN0ID0gQ2xpZW50UmVxdWVzdFxuaHR0cC5JbmNvbWluZ01lc3NhZ2UgPSByZXNwb25zZS5JbmNvbWluZ01lc3NhZ2VcblxuaHR0cC5BZ2VudCA9IGZ1bmN0aW9uICgpIHt9XG5odHRwLkFnZW50LmRlZmF1bHRNYXhTb2NrZXRzID0gNFxuXG5odHRwLmdsb2JhbEFnZW50ID0gbmV3IGh0dHAuQWdlbnQoKVxuXG5odHRwLlNUQVRVU19DT0RFUyA9IHN0YXR1c0NvZGVzXG5cbmh0dHAuTUVUSE9EUyA9IFtcblx0J0NIRUNLT1VUJyxcblx0J0NPTk5FQ1QnLFxuXHQnQ09QWScsXG5cdCdERUxFVEUnLFxuXHQnR0VUJyxcblx0J0hFQUQnLFxuXHQnTE9DSycsXG5cdCdNLVNFQVJDSCcsXG5cdCdNRVJHRScsXG5cdCdNS0FDVElWSVRZJyxcblx0J01LQ09MJyxcblx0J01PVkUnLFxuXHQnTk9USUZZJyxcblx0J09QVElPTlMnLFxuXHQnUEFUQ0gnLFxuXHQnUE9TVCcsXG5cdCdQUk9QRklORCcsXG5cdCdQUk9QUEFUQ0gnLFxuXHQnUFVSR0UnLFxuXHQnUFVUJyxcblx0J1JFUE9SVCcsXG5cdCdTRUFSQ0gnLFxuXHQnU1VCU0NSSUJFJyxcblx0J1RSQUNFJyxcblx0J1VOTE9DSycsXG5cdCdVTlNVQlNDUklCRSdcbl0iLCJleHBvcnRzLmZldGNoID0gaXNGdW5jdGlvbihnbG9iYWwuZmV0Y2gpICYmIGlzRnVuY3Rpb24oZ2xvYmFsLlJlYWRhYmxlU3RyZWFtKVxuXG5leHBvcnRzLndyaXRhYmxlU3RyZWFtID0gaXNGdW5jdGlvbihnbG9iYWwuV3JpdGFibGVTdHJlYW0pXG5cbmV4cG9ydHMuYWJvcnRDb250cm9sbGVyID0gaXNGdW5jdGlvbihnbG9iYWwuQWJvcnRDb250cm9sbGVyKVxuXG4vLyBUaGUgeGhyIHJlcXVlc3QgdG8gZXhhbXBsZS5jb20gbWF5IHZpb2xhdGUgc29tZSByZXN0cmljdGl2ZSBDU1AgY29uZmlndXJhdGlvbnMsXG4vLyBzbyBpZiB3ZSdyZSBydW5uaW5nIGluIGEgYnJvd3NlciB0aGF0IHN1cHBvcnRzIGBmZXRjaGAsIGF2b2lkIGNhbGxpbmcgZ2V0WEhSKClcbi8vIGFuZCBhc3N1bWUgc3VwcG9ydCBmb3IgY2VydGFpbiBmZWF0dXJlcyBiZWxvdy5cbnZhciB4aHJcbmZ1bmN0aW9uIGdldFhIUiAoKSB7XG5cdC8vIENhY2hlIHRoZSB4aHIgdmFsdWVcblx0aWYgKHhociAhPT0gdW5kZWZpbmVkKSByZXR1cm4geGhyXG5cblx0aWYgKGdsb2JhbC5YTUxIdHRwUmVxdWVzdCkge1xuXHRcdHhociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuXHRcdC8vIElmIFhEb21haW5SZXF1ZXN0IGlzIGF2YWlsYWJsZSAoaWUgb25seSwgd2hlcmUgeGhyIG1pZ2h0IG5vdCB3b3JrXG5cdFx0Ly8gY3Jvc3MgZG9tYWluKSwgdXNlIHRoZSBwYWdlIGxvY2F0aW9uLiBPdGhlcndpc2UgdXNlIGV4YW1wbGUuY29tXG5cdFx0Ly8gTm90ZTogdGhpcyBkb2Vzbid0IGFjdHVhbGx5IG1ha2UgYW4gaHR0cCByZXF1ZXN0LlxuXHRcdHRyeSB7XG5cdFx0XHR4aHIub3BlbignR0VUJywgZ2xvYmFsLlhEb21haW5SZXF1ZXN0ID8gJy8nIDogJ2h0dHBzOi8vZXhhbXBsZS5jb20nKVxuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0eGhyID0gbnVsbFxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBTZXJ2aWNlIHdvcmtlcnMgZG9uJ3QgaGF2ZSBYSFJcblx0XHR4aHIgPSBudWxsXG5cdH1cblx0cmV0dXJuIHhoclxufVxuXG5mdW5jdGlvbiBjaGVja1R5cGVTdXBwb3J0ICh0eXBlKSB7XG5cdHZhciB4aHIgPSBnZXRYSFIoKVxuXHRpZiAoIXhocikgcmV0dXJuIGZhbHNlXG5cdHRyeSB7XG5cdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHR5cGVcblx0XHRyZXR1cm4geGhyLnJlc3BvbnNlVHlwZSA9PT0gdHlwZVxuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2Vcbn1cblxuLy8gSWYgZmV0Y2ggaXMgc3VwcG9ydGVkLCB0aGVuIGFycmF5YnVmZmVyIHdpbGwgYmUgc3VwcG9ydGVkIHRvby4gU2tpcCBjYWxsaW5nXG4vLyBjaGVja1R5cGVTdXBwb3J0KCksIHNpbmNlIHRoYXQgY2FsbHMgZ2V0WEhSKCkuXG5leHBvcnRzLmFycmF5YnVmZmVyID0gZXhwb3J0cy5mZXRjaCB8fCBjaGVja1R5cGVTdXBwb3J0KCdhcnJheWJ1ZmZlcicpXG5cbi8vIFRoZXNlIG5leHQgdHdvIHRlc3RzIHVuYXZvaWRhYmx5IHNob3cgd2FybmluZ3MgaW4gQ2hyb21lLiBTaW5jZSBmZXRjaCB3aWxsIGFsd2F5c1xuLy8gYmUgdXNlZCBpZiBpdCdzIGF2YWlsYWJsZSwganVzdCByZXR1cm4gZmFsc2UgZm9yIHRoZXNlIHRvIGF2b2lkIHRoZSB3YXJuaW5ncy5cbmV4cG9ydHMubXNzdHJlYW0gPSAhZXhwb3J0cy5mZXRjaCAmJiBjaGVja1R5cGVTdXBwb3J0KCdtcy1zdHJlYW0nKVxuZXhwb3J0cy5tb3pjaHVua2VkYXJyYXlidWZmZXIgPSAhZXhwb3J0cy5mZXRjaCAmJiBjaGVja1R5cGVTdXBwb3J0KCdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpXG5cbi8vIElmIGZldGNoIGlzIHN1cHBvcnRlZCwgdGhlbiBvdmVycmlkZU1pbWVUeXBlIHdpbGwgYmUgc3VwcG9ydGVkIHRvby4gU2tpcCBjYWxsaW5nXG4vLyBnZXRYSFIoKS5cbmV4cG9ydHMub3ZlcnJpZGVNaW1lVHlwZSA9IGV4cG9ydHMuZmV0Y2ggfHwgKGdldFhIUigpID8gaXNGdW5jdGlvbihnZXRYSFIoKS5vdmVycmlkZU1pbWVUeXBlKSA6IGZhbHNlKVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nXG59XG5cbnhociA9IG51bGwgLy8gSGVscCBnY1xuIiwidmFyIGNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL2NhcGFiaWxpdHknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHJlc3BvbnNlID0gcmVxdWlyZSgnLi9yZXNwb25zZScpXG52YXIgc3RyZWFtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJylcblxudmFyIEluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxudmFyIHJTdGF0ZXMgPSByZXNwb25zZS5yZWFkeVN0YXRlc1xuXG5mdW5jdGlvbiBkZWNpZGVNb2RlIChwcmVmZXJCaW5hcnksIHVzZUZldGNoKSB7XG5cdGlmIChjYXBhYmlsaXR5LmZldGNoICYmIHVzZUZldGNoKSB7XG5cdFx0cmV0dXJuICdmZXRjaCdcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1vemNodW5rZWRhcnJheWJ1ZmZlcikge1xuXHRcdHJldHVybiAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5tc3N0cmVhbSkge1xuXHRcdHJldHVybiAnbXMtc3RyZWFtJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkuYXJyYXlidWZmZXIgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICdhcnJheWJ1ZmZlcidcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gJ3RleHQnXG5cdH1cbn1cblxudmFyIENsaWVudFJlcXVlc3QgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzdHJlYW0uV3JpdGFibGUuY2FsbChzZWxmKVxuXG5cdHNlbGYuX29wdHMgPSBvcHRzXG5cdHNlbGYuX2JvZHkgPSBbXVxuXHRzZWxmLl9oZWFkZXJzID0ge31cblx0aWYgKG9wdHMuYXV0aClcblx0XHRzZWxmLnNldEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgQnVmZmVyLmZyb20ob3B0cy5hdXRoKS50b1N0cmluZygnYmFzZTY0JykpXG5cdE9iamVjdC5rZXlzKG9wdHMuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdHNlbGYuc2V0SGVhZGVyKG5hbWUsIG9wdHMuaGVhZGVyc1tuYW1lXSlcblx0fSlcblxuXHR2YXIgcHJlZmVyQmluYXJ5XG5cdHZhciB1c2VGZXRjaCA9IHRydWVcblx0aWYgKG9wdHMubW9kZSA9PT0gJ2Rpc2FibGUtZmV0Y2gnIHx8ICgncmVxdWVzdFRpbWVvdXQnIGluIG9wdHMgJiYgIWNhcGFiaWxpdHkuYWJvcnRDb250cm9sbGVyKSkge1xuXHRcdC8vIElmIHRoZSB1c2Ugb2YgWEhSIHNob3VsZCBiZSBwcmVmZXJyZWQuIE5vdCB0eXBpY2FsbHkgbmVlZGVkLlxuXHRcdHVzZUZldGNoID0gZmFsc2Vcblx0XHRwcmVmZXJCaW5hcnkgPSB0cnVlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAncHJlZmVyLXN0cmVhbWluZycpIHtcblx0XHQvLyBJZiBzdHJlYW1pbmcgaXMgYSBoaWdoIHByaW9yaXR5IGJ1dCBiaW5hcnkgY29tcGF0aWJpbGl0eSBhbmRcblx0XHQvLyB0aGUgYWNjdXJhY3kgb2YgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlciBhcmVuJ3Rcblx0XHRwcmVmZXJCaW5hcnkgPSBmYWxzZVxuXHR9IGVsc2UgaWYgKG9wdHMubW9kZSA9PT0gJ2FsbG93LXdyb25nLWNvbnRlbnQtdHlwZScpIHtcblx0XHQvLyBJZiBzdHJlYW1pbmcgaXMgbW9yZSBpbXBvcnRhbnQgdGhhbiBwcmVzZXJ2aW5nIHRoZSAnY29udGVudC10eXBlJyBoZWFkZXJcblx0XHRwcmVmZXJCaW5hcnkgPSAhY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlXG5cdH0gZWxzZSBpZiAoIW9wdHMubW9kZSB8fCBvcHRzLm1vZGUgPT09ICdkZWZhdWx0JyB8fCBvcHRzLm1vZGUgPT09ICdwcmVmZXItZmFzdCcpIHtcblx0XHQvLyBVc2UgYmluYXJ5IGlmIHRleHQgc3RyZWFtaW5nIG1heSBjb3JydXB0IGRhdGEgb3IgdGhlIGNvbnRlbnQtdHlwZSBoZWFkZXIsIG9yIGZvciBzcGVlZFxuXHRcdHByZWZlckJpbmFyeSA9IHRydWVcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIG9wdHMubW9kZScpXG5cdH1cblx0c2VsZi5fbW9kZSA9IGRlY2lkZU1vZGUocHJlZmVyQmluYXJ5LCB1c2VGZXRjaClcblx0c2VsZi5fZmV0Y2hUaW1lciA9IG51bGxcblxuXHRzZWxmLm9uKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG5cdFx0c2VsZi5fb25GaW5pc2goKVxuXHR9KVxufVxuXG5pbmhlcml0cyhDbGllbnRSZXF1ZXN0LCBzdHJlYW0uV3JpdGFibGUpXG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0dmFyIGxvd2VyTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKVxuXHQvLyBUaGlzIGNoZWNrIGlzIG5vdCBuZWNlc3NhcnksIGJ1dCBpdCBwcmV2ZW50cyB3YXJuaW5ncyBmcm9tIGJyb3dzZXJzIGFib3V0IHNldHRpbmcgdW5zYWZlXG5cdC8vIGhlYWRlcnMuIFRvIGJlIGhvbmVzdCBJJ20gbm90IGVudGlyZWx5IHN1cmUgaGlkaW5nIHRoZXNlIHdhcm5pbmdzIGlzIGEgZ29vZCB0aGluZywgYnV0XG5cdC8vIGh0dHAtYnJvd3NlcmlmeSBkaWQgaXQsIHNvIEkgd2lsbCB0b28uXG5cdGlmICh1bnNhZmVIZWFkZXJzLmluZGV4T2YobG93ZXJOYW1lKSAhPT0gLTEpXG5cdFx0cmV0dXJuXG5cblx0c2VsZi5faGVhZGVyc1tsb3dlck5hbWVdID0ge1xuXHRcdG5hbWU6IG5hbWUsXG5cdFx0dmFsdWU6IHZhbHVlXG5cdH1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIGhlYWRlciA9IHRoaXMuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxuXHRpZiAoaGVhZGVyKVxuXHRcdHJldHVybiBoZWFkZXIudmFsdWVcblx0cmV0dXJuIG51bGxcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlSGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdGRlbGV0ZSBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uRmluaXNoID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXHR2YXIgb3B0cyA9IHNlbGYuX29wdHNcblxuXHR2YXIgaGVhZGVyc09iaiA9IHNlbGYuX2hlYWRlcnNcblx0dmFyIGJvZHkgPSBudWxsXG5cdGlmIChvcHRzLm1ldGhvZCAhPT0gJ0dFVCcgJiYgb3B0cy5tZXRob2QgIT09ICdIRUFEJykge1xuICAgICAgICBib2R5ID0gbmV3IEJsb2Ioc2VsZi5fYm9keSwge1xuICAgICAgICAgICAgdHlwZTogKGhlYWRlcnNPYmpbJ2NvbnRlbnQtdHlwZSddIHx8IHt9KS52YWx1ZSB8fCAnJ1xuICAgICAgICB9KTtcbiAgICB9XG5cblx0Ly8gY3JlYXRlIGZsYXR0ZW5lZCBsaXN0IG9mIGhlYWRlcnNcblx0dmFyIGhlYWRlcnNMaXN0ID0gW11cblx0T2JqZWN0LmtleXMoaGVhZGVyc09iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5TmFtZSkge1xuXHRcdHZhciBuYW1lID0gaGVhZGVyc09ialtrZXlOYW1lXS5uYW1lXG5cdFx0dmFyIHZhbHVlID0gaGVhZGVyc09ialtrZXlOYW1lXS52YWx1ZVxuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0dmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodikge1xuXHRcdFx0XHRoZWFkZXJzTGlzdC5wdXNoKFtuYW1lLCB2XSlcblx0XHRcdH0pXG5cdFx0fSBlbHNlIHtcblx0XHRcdGhlYWRlcnNMaXN0LnB1c2goW25hbWUsIHZhbHVlXSlcblx0XHR9XG5cdH0pXG5cblx0aWYgKHNlbGYuX21vZGUgPT09ICdmZXRjaCcpIHtcblx0XHR2YXIgc2lnbmFsID0gbnVsbFxuXHRcdGlmIChjYXBhYmlsaXR5LmFib3J0Q29udHJvbGxlcikge1xuXHRcdFx0dmFyIGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcblx0XHRcdHNpZ25hbCA9IGNvbnRyb2xsZXIuc2lnbmFsXG5cdFx0XHRzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlciA9IGNvbnRyb2xsZXJcblxuXHRcdFx0aWYgKCdyZXF1ZXN0VGltZW91dCcgaW4gb3B0cyAmJiBvcHRzLnJlcXVlc3RUaW1lb3V0ICE9PSAwKSB7XG5cdFx0XHRcdHNlbGYuX2ZldGNoVGltZXIgPSBnbG9iYWwuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0c2VsZi5lbWl0KCdyZXF1ZXN0VGltZW91dCcpXG5cdFx0XHRcdFx0aWYgKHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyKVxuXHRcdFx0XHRcdFx0c2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIuYWJvcnQoKVxuXHRcdFx0XHR9LCBvcHRzLnJlcXVlc3RUaW1lb3V0KVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGdsb2JhbC5mZXRjaChzZWxmLl9vcHRzLnVybCwge1xuXHRcdFx0bWV0aG9kOiBzZWxmLl9vcHRzLm1ldGhvZCxcblx0XHRcdGhlYWRlcnM6IGhlYWRlcnNMaXN0LFxuXHRcdFx0Ym9keTogYm9keSB8fCB1bmRlZmluZWQsXG5cdFx0XHRtb2RlOiAnY29ycycsXG5cdFx0XHRjcmVkZW50aWFsczogb3B0cy53aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nLFxuXHRcdFx0c2lnbmFsOiBzaWduYWxcblx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHRcdFx0c2VsZi5fZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlXG5cdFx0XHRzZWxmLl9jb25uZWN0KClcblx0XHR9LCBmdW5jdGlvbiAocmVhc29uKSB7XG5cdFx0XHRnbG9iYWwuY2xlYXJUaW1lb3V0KHNlbGYuX2ZldGNoVGltZXIpXG5cdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIHJlYXNvbilcblx0XHR9KVxuXHR9IGVsc2Uge1xuXHRcdHZhciB4aHIgPSBzZWxmLl94aHIgPSBuZXcgZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KClcblx0XHR0cnkge1xuXHRcdFx0eGhyLm9wZW4oc2VsZi5fb3B0cy5tZXRob2QsIHNlbGYuX29wdHMudXJsLCB0cnVlKVxuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXG5cdFx0Ly8gQ2FuJ3Qgc2V0IHJlc3BvbnNlVHlwZSBvbiByZWFsbHkgb2xkIGJyb3dzZXJzXG5cdFx0aWYgKCdyZXNwb25zZVR5cGUnIGluIHhocilcblx0XHRcdHhoci5yZXNwb25zZVR5cGUgPSBzZWxmLl9tb2RlXG5cblx0XHRpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKVxuXHRcdFx0eGhyLndpdGhDcmVkZW50aWFscyA9ICEhb3B0cy53aXRoQ3JlZGVudGlhbHNcblxuXHRcdGlmIChzZWxmLl9tb2RlID09PSAndGV4dCcgJiYgJ292ZXJyaWRlTWltZVR5cGUnIGluIHhocilcblx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJylcblxuXHRcdGlmICgncmVxdWVzdFRpbWVvdXQnIGluIG9wdHMpIHtcblx0XHRcdHhoci50aW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dFxuXHRcdFx0eGhyLm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdyZXF1ZXN0VGltZW91dCcpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGVhZGVyc0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7XG5cdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJbMF0sIGhlYWRlclsxXSlcblx0XHR9KVxuXG5cdFx0c2VsZi5fcmVzcG9uc2UgPSBudWxsXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcblx0XHRcdFx0Y2FzZSByU3RhdGVzLkxPQURJTkc6XG5cdFx0XHRcdGNhc2UgclN0YXRlcy5ET05FOlxuXHRcdFx0XHRcdHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE5lY2Vzc2FyeSBmb3Igc3RyZWFtaW5nIGluIEZpcmVmb3gsIHNpbmNlIHhoci5yZXNwb25zZSBpcyBPTkxZIGRlZmluZWRcblx0XHQvLyBpbiBvbnByb2dyZXNzLCBub3QgaW4gb25yZWFkeXN0YXRlY2hhbmdlIHdpdGggeGhyLnJlYWR5U3RhdGUgPSAzXG5cdFx0aWYgKHNlbGYuX21vZGUgPT09ICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpIHtcblx0XHRcdHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLl9vblhIUlByb2dyZXNzKClcblx0XHRcdH1cblx0XHR9XG5cblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignWEhSIGVycm9yJykpXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5zZW5kKGJvZHkpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgeGhyLnN0YXR1cyBpcyByZWFkYWJsZSBhbmQgbm9uLXplcm8sIGluZGljYXRpbmcgbm8gZXJyb3IuXG4gKiBFdmVuIHRob3VnaCB0aGUgc3BlYyBzYXlzIGl0IHNob3VsZCBiZSBhdmFpbGFibGUgaW4gcmVhZHlTdGF0ZSAzLFxuICogYWNjZXNzaW5nIGl0IHRocm93cyBhbiBleGNlcHRpb24gaW4gSUU4XG4gKi9cbmZ1bmN0aW9uIHN0YXR1c1ZhbGlkICh4aHIpIHtcblx0dHJ5IHtcblx0XHR2YXIgc3RhdHVzID0geGhyLnN0YXR1c1xuXHRcdHJldHVybiAoc3RhdHVzICE9PSBudWxsICYmIHN0YXR1cyAhPT0gMClcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl9vblhIUlByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoIXN0YXR1c1ZhbGlkKHNlbGYuX3hocikgfHwgc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXG5cdGlmICghc2VsZi5fcmVzcG9uc2UpXG5cdFx0c2VsZi5fY29ubmVjdCgpXG5cblx0c2VsZi5fcmVzcG9uc2UuX29uWEhSUHJvZ3Jlc3MoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0aWYgKHNlbGYuX2Rlc3Ryb3llZClcblx0XHRyZXR1cm5cblxuXHRzZWxmLl9yZXNwb25zZSA9IG5ldyBJbmNvbWluZ01lc3NhZ2Uoc2VsZi5feGhyLCBzZWxmLl9mZXRjaFJlc3BvbnNlLCBzZWxmLl9tb2RlLCBzZWxmLl9mZXRjaFRpbWVyKVxuXHRzZWxmLl9yZXNwb25zZS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcblx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHR9KVxuXG5cdHNlbGYuZW1pdCgncmVzcG9uc2UnLCBzZWxmLl9yZXNwb25zZSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0c2VsZi5fYm9keS5wdXNoKGNodW5rKVxuXHRjYigpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHNlbGYuX2Rlc3Ryb3llZCA9IHRydWVcblx0Z2xvYmFsLmNsZWFyVGltZW91dChzZWxmLl9mZXRjaFRpbWVyKVxuXHRpZiAoc2VsZi5fcmVzcG9uc2UpXG5cdFx0c2VsZi5fcmVzcG9uc2UuX2Rlc3Ryb3llZCA9IHRydWVcblx0aWYgKHNlbGYuX3hocilcblx0XHRzZWxmLl94aHIuYWJvcnQoKVxuXHRlbHNlIGlmIChzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlcilcblx0XHRzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2IpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGNiID0gZGF0YVxuXHRcdGRhdGEgPSB1bmRlZmluZWRcblx0fVxuXG5cdHN0cmVhbS5Xcml0YWJsZS5wcm90b3R5cGUuZW5kLmNhbGwoc2VsZiwgZGF0YSwgZW5jb2RpbmcsIGNiKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5mbHVzaEhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uICgpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXROb0RlbGF5ID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldFNvY2tldEtlZXBBbGl2ZSA9IGZ1bmN0aW9uICgpIHt9XG5cbi8vIFRha2VuIGZyb20gaHR0cDovL3d3dy53My5vcmcvVFIvWE1MSHR0cFJlcXVlc3QvI3RoZS1zZXRyZXF1ZXN0aGVhZGVyJTI4JTI5LW1ldGhvZFxudmFyIHVuc2FmZUhlYWRlcnMgPSBbXG5cdCdhY2NlcHQtY2hhcnNldCcsXG5cdCdhY2NlcHQtZW5jb2RpbmcnLFxuXHQnYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1oZWFkZXJzJyxcblx0J2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtbWV0aG9kJyxcblx0J2Nvbm5lY3Rpb24nLFxuXHQnY29udGVudC1sZW5ndGgnLFxuXHQnY29va2llJyxcblx0J2Nvb2tpZTInLFxuXHQnZGF0ZScsXG5cdCdkbnQnLFxuXHQnZXhwZWN0Jyxcblx0J2hvc3QnLFxuXHQna2VlcC1hbGl2ZScsXG5cdCdvcmlnaW4nLFxuXHQncmVmZXJlcicsXG5cdCd0ZScsXG5cdCd0cmFpbGVyJyxcblx0J3RyYW5zZmVyLWVuY29kaW5nJyxcblx0J3VwZ3JhZGUnLFxuXHQndmlhJ1xuXVxuIiwidmFyIGNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL2NhcGFiaWxpdHknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG5cbnZhciByU3RhdGVzID0gZXhwb3J0cy5yZWFkeVN0YXRlcyA9IHtcblx0VU5TRU5UOiAwLFxuXHRPUEVORUQ6IDEsXG5cdEhFQURFUlNfUkVDRUlWRUQ6IDIsXG5cdExPQURJTkc6IDMsXG5cdERPTkU6IDRcbn1cblxudmFyIEluY29taW5nTWVzc2FnZSA9IGV4cG9ydHMuSW5jb21pbmdNZXNzYWdlID0gZnVuY3Rpb24gKHhociwgcmVzcG9uc2UsIG1vZGUsIGZldGNoVGltZXIpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHN0cmVhbS5SZWFkYWJsZS5jYWxsKHNlbGYpXG5cblx0c2VsZi5fbW9kZSA9IG1vZGVcblx0c2VsZi5oZWFkZXJzID0ge31cblx0c2VsZi5yYXdIZWFkZXJzID0gW11cblx0c2VsZi50cmFpbGVycyA9IHt9XG5cdHNlbGYucmF3VHJhaWxlcnMgPSBbXVxuXG5cdC8vIEZha2UgdGhlICdjbG9zZScgZXZlbnQsIGJ1dCBvbmx5IG9uY2UgJ2VuZCcgZmlyZXNcblx0c2VsZi5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuXHRcdC8vIFRoZSBuZXh0VGljayBpcyBuZWNlc3NhcnkgdG8gcHJldmVudCB0aGUgJ3JlcXVlc3QnIG1vZHVsZSBmcm9tIGNhdXNpbmcgYW4gaW5maW5pdGUgbG9vcFxuXHRcdHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuXHRcdFx0c2VsZi5lbWl0KCdjbG9zZScpXG5cdFx0fSlcblx0fSlcblxuXHRpZiAobW9kZSA9PT0gJ2ZldGNoJykge1xuXHRcdHNlbGYuX2ZldGNoUmVzcG9uc2UgPSByZXNwb25zZVxuXG5cdFx0c2VsZi51cmwgPSByZXNwb25zZS51cmxcblx0XHRzZWxmLnN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNcblx0XHRzZWxmLnN0YXR1c01lc3NhZ2UgPSByZXNwb25zZS5zdGF0dXNUZXh0XG5cdFx0XG5cdFx0cmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIsIGtleSl7XG5cdFx0XHRzZWxmLmhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gaGVhZGVyXG5cdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChrZXksIGhlYWRlcilcblx0XHR9KVxuXG5cdFx0aWYgKGNhcGFiaWxpdHkud3JpdGFibGVTdHJlYW0pIHtcblx0XHRcdHZhciB3cml0YWJsZSA9IG5ldyBXcml0YWJsZVN0cmVhbSh7XG5cdFx0XHRcdHdyaXRlOiBmdW5jdGlvbiAoY2h1bmspIHtcblx0XHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XHRcdFx0aWYgKHNlbGYuX2Rlc3Ryb3llZCkge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QoKVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKHNlbGYucHVzaChCdWZmZXIuZnJvbShjaHVuaykpKSB7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fcmVzdW1lRmV0Y2ggPSByZXNvbHZlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSxcblx0XHRcdFx0Y2xvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRnbG9iYWwuY2xlYXJUaW1lb3V0KGZldGNoVGltZXIpXG5cdFx0XHRcdFx0aWYgKCFzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0fSxcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc3BvbnNlLmJvZHkucGlwZVRvKHdyaXRhYmxlKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdFx0fSlcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9IGNhdGNoIChlKSB7fSAvLyBwaXBlVG8gbWV0aG9kIGlzbid0IGRlZmluZWQuIENhbid0IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIGZlYXR1cmUgdGVzdCB0aGlzXG5cdFx0fVxuXHRcdC8vIGZhbGxiYWNrIGZvciB3aGVuIHdyaXRhYmxlU3RyZWFtIG9yIHBpcGVUbyBhcmVuJ3QgYXZhaWxhYmxlXG5cdFx0dmFyIHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKClcblx0XHRmdW5jdGlvbiByZWFkICgpIHtcblx0XHRcdHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGlmIChyZXN1bHQuZG9uZSkge1xuXHRcdFx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoZmV0Y2hUaW1lcilcblx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnB1c2goQnVmZmVyLmZyb20ocmVzdWx0LnZhbHVlKSlcblx0XHRcdFx0cmVhZCgpXG5cdFx0XHR9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoZmV0Y2hUaW1lcilcblx0XHRcdFx0aWYgKCFzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0fVxuXHRcdHJlYWQoKVxuXHR9IGVsc2Uge1xuXHRcdHNlbGYuX3hociA9IHhoclxuXHRcdHNlbGYuX3BvcyA9IDBcblxuXHRcdHNlbGYudXJsID0geGhyLnJlc3BvbnNlVVJMXG5cdFx0c2VsZi5zdGF0dXNDb2RlID0geGhyLnN0YXR1c1xuXHRcdHNlbGYuc3RhdHVzTWVzc2FnZSA9IHhoci5zdGF0dXNUZXh0XG5cdFx0dmFyIGhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoL1xccj9cXG4vKVxuXHRcdGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyA9IGhlYWRlci5tYXRjaCgvXihbXjpdKyk6XFxzKiguKikvKVxuXHRcdFx0aWYgKG1hdGNoZXMpIHtcblx0XHRcdFx0dmFyIGtleSA9IG1hdGNoZXNbMV0udG9Mb3dlckNhc2UoKVxuXHRcdFx0XHRpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcblx0XHRcdFx0XHRpZiAoc2VsZi5oZWFkZXJzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gPSBbXVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XS5wdXNoKG1hdGNoZXNbMl0pXG5cdFx0XHRcdH0gZWxzZSBpZiAoc2VsZi5oZWFkZXJzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHNlbGYuaGVhZGVyc1trZXldICs9ICcsICcgKyBtYXRjaGVzWzJdXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gPSBtYXRjaGVzWzJdXG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5yYXdIZWFkZXJzLnB1c2gobWF0Y2hlc1sxXSwgbWF0Y2hlc1syXSlcblx0XHRcdH1cblx0XHR9KVxuXG5cdFx0c2VsZi5fY2hhcnNldCA9ICd4LXVzZXItZGVmaW5lZCdcblx0XHRpZiAoIWNhcGFiaWxpdHkub3ZlcnJpZGVNaW1lVHlwZSkge1xuXHRcdFx0dmFyIG1pbWVUeXBlID0gc2VsZi5yYXdIZWFkZXJzWydtaW1lLXR5cGUnXVxuXHRcdFx0aWYgKG1pbWVUeXBlKSB7XG5cdFx0XHRcdHZhciBjaGFyc2V0TWF0Y2ggPSBtaW1lVHlwZS5tYXRjaCgvO1xccypjaGFyc2V0PShbXjtdKSg7fCQpLylcblx0XHRcdFx0aWYgKGNoYXJzZXRNYXRjaCkge1xuXHRcdFx0XHRcdHNlbGYuX2NoYXJzZXQgPSBjaGFyc2V0TWF0Y2hbMV0udG9Mb3dlckNhc2UoKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXNlbGYuX2NoYXJzZXQpXG5cdFx0XHRcdHNlbGYuX2NoYXJzZXQgPSAndXRmLTgnIC8vIGJlc3QgZ3Vlc3Ncblx0XHR9XG5cdH1cbn1cblxuaW5oZXJpdHMoSW5jb21pbmdNZXNzYWdlLCBzdHJlYW0uUmVhZGFibGUpXG5cbkluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHZhciByZXNvbHZlID0gc2VsZi5fcmVzdW1lRmV0Y2hcblx0aWYgKHJlc29sdmUpIHtcblx0XHRzZWxmLl9yZXN1bWVGZXRjaCA9IG51bGxcblx0XHRyZXNvbHZlKClcblx0fVxufVxuXG5JbmNvbWluZ01lc3NhZ2UucHJvdG90eXBlLl9vblhIUlByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHR2YXIgeGhyID0gc2VsZi5feGhyXG5cblx0dmFyIHJlc3BvbnNlID0gbnVsbFxuXHRzd2l0Y2ggKHNlbGYuX21vZGUpIHtcblx0XHRjYXNlICd0ZXh0Jzpcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlVGV4dFxuXHRcdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA+IHNlbGYuX3Bvcykge1xuXHRcdFx0XHR2YXIgbmV3RGF0YSA9IHJlc3BvbnNlLnN1YnN0cihzZWxmLl9wb3MpXG5cdFx0XHRcdGlmIChzZWxmLl9jaGFyc2V0ID09PSAneC11c2VyLWRlZmluZWQnKSB7XG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhuZXdEYXRhLmxlbmd0aClcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5ld0RhdGEubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0XHRidWZmZXJbaV0gPSBuZXdEYXRhLmNoYXJDb2RlQXQoaSkgJiAweGZmXG5cblx0XHRcdFx0XHRzZWxmLnB1c2goYnVmZmVyKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlbGYucHVzaChuZXdEYXRhLCBzZWxmLl9jaGFyc2V0KVxuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuX3BvcyA9IHJlc3BvbnNlLmxlbmd0aFxuXHRcdFx0fVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdhcnJheWJ1ZmZlcic6XG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuRE9ORSB8fCAheGhyLnJlc3BvbnNlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2Vcblx0XHRcdHNlbGYucHVzaChCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcic6IC8vIHRha2Ugd2hvbGVcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORyB8fCAhcmVzcG9uc2UpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRzZWxmLnB1c2goQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkocmVzcG9uc2UpKSlcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnbXMtc3RyZWFtJzpcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORylcblx0XHRcdFx0YnJlYWtcblx0XHRcdHZhciByZWFkZXIgPSBuZXcgZ2xvYmFsLk1TU3RyZWFtUmVhZGVyKClcblx0XHRcdHJlYWRlci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAocmVhZGVyLnJlc3VsdC5ieXRlTGVuZ3RoID4gc2VsZi5fcG9zKSB7XG5cdFx0XHRcdFx0c2VsZi5wdXNoKEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KHJlYWRlci5yZXN1bHQuc2xpY2Uoc2VsZi5fcG9zKSkpKVxuXHRcdFx0XHRcdHNlbGYuX3BvcyA9IHJlYWRlci5yZXN1bHQuYnl0ZUxlbmd0aFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdH1cblx0XHRcdC8vIHJlYWRlci5vbmVycm9yID0gPz8/IC8vIFRPRE86IHRoaXNcblx0XHRcdHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihyZXNwb25zZSlcblx0XHRcdGJyZWFrXG5cdH1cblxuXHQvLyBUaGUgbXMtc3RyZWFtIGNhc2UgaGFuZGxlcyBlbmQgc2VwYXJhdGVseSBpbiByZWFkZXIub25sb2FkKClcblx0aWYgKHNlbGYuX3hoci5yZWFkeVN0YXRlID09PSByU3RhdGVzLkRPTkUgJiYgc2VsZi5fbW9kZSAhPT0gJ21zLXN0cmVhbScpIHtcblx0XHRzZWxmLnB1c2gobnVsbClcblx0fVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGNvZGVzID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yVHlwZShjb2RlLCBtZXNzYWdlLCBCYXNlKSB7XG4gIGlmICghQmFzZSkge1xuICAgIEJhc2UgPSBFcnJvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9XG4gIH1cblxuICB2YXIgTm9kZUVycm9yID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0Jhc2UpIHtcbiAgICBfaW5oZXJpdHNMb29zZShOb2RlRXJyb3IsIF9CYXNlKTtcblxuICAgIGZ1bmN0aW9uIE5vZGVFcnJvcihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICByZXR1cm4gX0Jhc2UuY2FsbCh0aGlzLCBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpKSB8fCB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBOb2RlRXJyb3I7XG4gIH0oQmFzZSk7XG5cbiAgTm9kZUVycm9yLnByb3RvdHlwZS5uYW1lID0gQmFzZS5uYW1lO1xuICBOb2RlRXJyb3IucHJvdG90eXBlLmNvZGUgPSBjb2RlO1xuICBjb2Rlc1tjb2RlXSA9IE5vZGVFcnJvcjtcbn0gLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjEwLjguMC9saWIvaW50ZXJuYWwvZXJyb3JzLmpzXG5cblxuZnVuY3Rpb24gb25lT2YoZXhwZWN0ZWQsIHRoaW5nKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdGVkKSkge1xuICAgIHZhciBsZW4gPSBleHBlY3RlZC5sZW5ndGg7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoaSk7XG4gICAgfSk7XG5cbiAgICBpZiAobGVuID4gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZC5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpLCBcIiwgb3IgXCIpICsgZXhwZWN0ZWRbbGVuIC0gMV07XG4gICAgfSBlbHNlIGlmIChsZW4gPT09IDIpIHtcbiAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0sIFwiIG9yIFwiKS5jb25jYXQoZXhwZWN0ZWRbMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoU3RyaW5nKGV4cGVjdGVkKSk7XG4gIH1cbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3N0YXJ0c1dpdGhcblxuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHN0ciwgc2VhcmNoLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5zdWJzdHIoIXBvcyB8fCBwb3MgPCAwID8gMCA6ICtwb3MsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9lbmRzV2l0aFxuXG5cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICBpZiAodGhpc19sZW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzX2xlbiA+IHN0ci5sZW5ndGgpIHtcbiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cmluZyh0aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvaW5jbHVkZXNcblxuXG5mdW5jdGlvbiBpbmNsdWRlcyhzdHIsIHNlYXJjaCwgc3RhcnQpIHtcbiAgaWYgKHR5cGVvZiBzdGFydCAhPT0gJ251bWJlcicpIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cblxuICBpZiAoc3RhcnQgKyBzZWFyY2gubGVuZ3RoID4gc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2Yoc2VhcmNoLCBzdGFydCkgIT09IC0xO1xuICB9XG59XG5cbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfT1BUX1ZBTFVFJywgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiAnVGhlIHZhbHVlIFwiJyArIHZhbHVlICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcIicgKyBuYW1lICsgJ1wiJztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgZnVuY3Rpb24gKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgLy8gZGV0ZXJtaW5lcjogJ211c3QgYmUnIG9yICdtdXN0IG5vdCBiZSdcbiAgdmFyIGRldGVybWluZXI7XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgc3RhcnRzV2l0aChleHBlY3RlZCwgJ25vdCAnKSkge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBub3QgYmUnO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQucmVwbGFjZSgvXm5vdCAvLCAnJyk7XG4gIH0gZWxzZSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IGJlJztcbiAgfVxuXG4gIHZhciBtc2c7XG5cbiAgaWYgKGVuZHNXaXRoKG5hbWUsICcgYXJndW1lbnQnKSkge1xuICAgIC8vIEZvciBjYXNlcyBsaWtlICdmaXJzdCBhcmd1bWVudCdcbiAgICBtc2cgPSBcIlRoZSBcIi5jb25jYXQobmFtZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdHlwZSA9IGluY2x1ZGVzKG5hbWUsICcuJykgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcbiAgICBtc2cgPSBcIlRoZSBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiBcIikuY29uY2F0KHR5cGUsIFwiIFwiKS5jb25jYXQoZGV0ZXJtaW5lciwgXCIgXCIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7XG4gIH1cblxuICBtc2cgKz0gXCIuIFJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KHR5cGVvZiBhY3R1YWwpO1xuICByZXR1cm4gbXNnO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRicsICdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCcsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAnVGhlICcgKyBuYW1lICsgJyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkJztcbn0pO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRScsICdQcmVtYXR1cmUgY2xvc2UnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9ERVNUUk9ZRUQnLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gJ0Nhbm5vdCBjYWxsICcgKyBuYW1lICsgJyBhZnRlciBhIHN0cmVhbSB3YXMgZGVzdHJveWVkJztcbn0pO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfTVVMVElQTEVfQ0FMTEJBQ0snLCAnQ2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fQ0FOTk9UX1BJUEUnLCAnQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCcsICd3cml0ZSBhZnRlciBlbmQnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUycsICdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScsIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9VTktOT1dOX0VOQ09ESU5HJywgZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBhcmc7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UJywgJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50Jyk7XG5tb2R1bGUuZXhwb3J0cy5jb2RlcyA9IGNvZGVzO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuJ3VzZSBzdHJpY3QnO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xuXG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxucmVxdWlyZSgnaW5oZXJpdHMnKShEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBBbGxvdyB0aGUga2V5cyBhcnJheSB0byBiZSBHQydlZC5cbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG5cbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG4gICAgfVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVCdWZmZXInLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyKCk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTsgLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gSWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47IC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG5cbiAgcHJvY2Vzcy5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcblxuXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gRUVsaXN0ZW5lckNvdW50KGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuXG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIGRlYnVnO1xuXG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uIGRlYnVnKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9idWZmZXJfbGlzdCcpO1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RhdGUnKSxcbiAgICBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyaztcblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgICBFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRixcbiAgICBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELFxuICAgIEVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UOyAvLyBMYXp5IGxvYWRlZCB0byBpbXByb3ZlIHRoZSBzdGFydHVwIHBlcmZvcm1hbmNlLlxuXG5cbnZhciBTdHJpbmdEZWNvZGVyO1xudmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjtcbnZhciBmcm9tO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIgZXJyb3JPckRlc3Ryb3kgPSBkZXN0cm95SW1wbC5lcnJvck9yRGVzdHJveTtcbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pOyAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG5cbiAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gJ2Jvb2xlYW4nKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDsgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcblxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTsgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cblxuICB0aGlzLnN5bmMgPSB0cnVlOyAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cblxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHRoaXMucGF1c2VkID0gdHJ1ZTsgLy8gU2hvdWxkIGNsb3NlIGJlIGVtaXR0ZWQgb24gZGVzdHJveS4gRGVmYXVsdHMgdG8gdHJ1ZS5cblxuICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTsgLy8gU2hvdWxkIC5kZXN0cm95KCkgYmUgY2FsbGVkIGFmdGVyICdlbmQnIChhbmQgcG90ZW50aWFsbHkgJ2ZpbmlzaCcpXG5cbiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG5cbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTsgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cblxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcblxuICB0aGlzLmF3YWl0RHJhaW4gPSAwOyAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG5cbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcblxuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpOyAvLyBDaGVja2luZyBmb3IgYSBTdHJlYW0uRHVwbGV4IGluc3RhbmNlIGlzIGZhc3RlciBoZXJlIGluc3RlYWQgb2YgaW5zaWRlXG4gIC8vIHRoZSBSZWFkYWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNVxuXG4gIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzLCBpc0R1cGxleCk7IC8vIGxlZ2FjeVxuXG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG5cblxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIGNiKGVycik7XG59OyAvLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuXG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07IC8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIGRlYnVnKCdyZWFkYWJsZUFkZENodW5rJywgY2h1bmspO1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG5cbiAgICBpZiAoZXIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBlcnJvck9yRGVzdHJveShzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UKCkpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GKCkpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gLy8gV2UgY2FuIHB1c2ggbW9yZSBkYXRhIGlmIHdlIGFyZSBiZWxvdyB0aGUgaGlnaFdhdGVyTWFyay5cbiAgLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWUgbW9yZSBieXRlcy5cbiAgLy8gVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCwgc3VjaCBhcyB0aGUgcmVwbC5cblxuXG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuXG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuXG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NodW5rJywgWydzdHJpbmcnLCAnQnVmZmVyJywgJ1VpbnQ4QXJyYXknXSwgY2h1bmspO1xuICB9XG5cbiAgcmV0dXJuIGVyO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTsgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB2YXIgZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IGRlY29kZXI7IC8vIElmIHNldEVuY29kaW5nKG51bGwpLCBkZWNvZGVyLmVuY29kaW5nIGVxdWFscyB1dGY4XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlci5lbmNvZGluZzsgLy8gSXRlcmF0ZSBvdmVyIGN1cnJlbnQgYnVmZmVyIHRvIGNvbnZlcnQgYWxyZWFkeSBzdG9yZWQgQnVmZmVyczpcblxuICB2YXIgcCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQ7XG4gIHZhciBjb250ZW50ID0gJyc7XG5cbiAgd2hpbGUgKHAgIT09IG51bGwpIHtcbiAgICBjb250ZW50ICs9IGRlY29kZXIud3JpdGUocC5kYXRhKTtcbiAgICBwID0gcC5uZXh0O1xuICB9XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIuY2xlYXIoKTtcblxuICBpZiAoY29udGVudCAhPT0gJycpIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLnB1c2goY29udGVudCk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoID0gY29udGVudC5sZW5ndGg7XG4gIHJldHVybiB0aGlzO1xufTsgLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDFHQlxuXG5cbnZhciBNQVhfSFdNID0gMHg0MDAwMDAwMDtcblxuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgLy8gVE9ETyhyb25hZyk6IFRocm93IEVSUl9WQUxVRV9PVVRfT0ZfUkFOR0UuXG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuXG4gIHJldHVybiBuO1xufSAvLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cblxuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuXG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9IC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuXG5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47IC8vIERvbid0IGhhdmUgZW5vdWdoXG5cbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufSAvLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOyAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmICgoc3RhdGUuaGlnaFdhdGVyTWFyayAhPT0gMCA/IHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIDogc3RhdGUubGVuZ3RoID4gMCkgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpOyAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG5cblxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7IC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH0gLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuXG5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTsgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cblxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcblxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG5cbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7IC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBzdGF0ZS5sZW5ndGggPD0gc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgZGVidWcoJ29uRW9mQ2h1bmsnKTtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuXG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUuc3luYykge1xuICAgIC8vIGlmIHdlIGFyZSBzeW5jLCB3YWl0IHVudGlsIG5leHQgdGljayB0byBlbWl0IHRoZSBkYXRhLlxuICAgIC8vIE90aGVyd2lzZSB3ZSByaXNrIGVtaXR0aW5nIGRhdGEgaW4gdGhlIGZsb3coKVxuICAgIC8vIHRoZSByZWFkYWJsZSBjb2RlIHRyaWdnZXJzIGR1cmluZyBhIHJlYWQoKSBjYWxsXG4gICAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICB9XG4gIH1cbn0gLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cblxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLm5lZWRSZWFkYWJsZSwgc3RhdGUuZW1pdHRlZFJlYWRhYmxlKTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZW1pdFJlYWRhYmxlXycsIHN0YXRlLmRlc3Ryb3llZCwgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG5cbiAgaWYgKCFzdGF0ZS5kZXN0cm95ZWQgJiYgKHN0YXRlLmxlbmd0aCB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgfSAvLyBUaGUgc3RyZWFtIG5lZWRzIGFub3RoZXIgcmVhZGFibGUgZXZlbnQgaWZcbiAgLy8gMS4gSXQgaXMgbm90IGZsb3dpbmcsIGFzIHRoZSBmbG93IG1lY2hhbmlzbSB3aWxsIHRha2VcbiAgLy8gICAgY2FyZSBvZiBpdC5cbiAgLy8gMi4gSXQgaXMgbm90IGVuZGVkLlxuICAvLyAzLiBJdCBpcyBiZWxvdyB0aGUgaGlnaFdhdGVyTWFyaywgc28gd2UgY2FuIHNjaGVkdWxlXG4gIC8vICAgIGFub3RoZXIgcmVhZGFibGUgbGF0ZXIuXG5cblxuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDw9IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIGZsb3coc3RyZWFtKTtcbn0gLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICAvLyBBdHRlbXB0IHRvIHJlYWQgbW9yZSBkYXRhIGlmIHdlIHNob3VsZC5cbiAgLy9cbiAgLy8gVGhlIGNvbmRpdGlvbnMgZm9yIHJlYWRpbmcgbW9yZSBkYXRhIGFyZSAob25lIG9mKTpcbiAgLy8gLSBOb3QgZW5vdWdoIGRhdGEgYnVmZmVyZWQgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspLiBUaGUgbG9vcFxuICAvLyAgIGlzIHJlc3BvbnNpYmxlIGZvciBmaWxsaW5nIHRoZSBidWZmZXIgd2l0aCBlbm91Z2ggZGF0YSBpZiBzdWNoIGRhdGFcbiAgLy8gICBpcyBhdmFpbGFibGUuIElmIGhpZ2hXYXRlck1hcmsgaXMgMCBhbmQgd2UgYXJlIG5vdCBpbiB0aGUgZmxvd2luZyBtb2RlXG4gIC8vICAgd2Ugc2hvdWxkIF9ub3RfIGF0dGVtcHQgdG8gYnVmZmVyIGFueSBleHRyYSBkYXRhLiBXZSdsbCBnZXQgbW9yZSBkYXRhXG4gIC8vICAgd2hlbiB0aGUgc3RyZWFtIGNvbnN1bWVyIGNhbGxzIHJlYWQoKSBpbnN0ZWFkLlxuICAvLyAtIE5vIGRhdGEgaW4gdGhlIGJ1ZmZlciwgYW5kIHRoZSBzdHJlYW0gaXMgaW4gZmxvd2luZyBtb2RlLiBJbiB0aGlzIG1vZGVcbiAgLy8gICB0aGUgbG9vcCBiZWxvdyBpcyByZXNwb25zaWJsZSBmb3IgZW5zdXJpbmcgcmVhZCgpIGlzIGNhbGxlZC4gRmFpbGluZyB0b1xuICAvLyAgIGNhbGwgcmVhZCBoZXJlIHdvdWxkIGFib3J0IHRoZSBmbG93IGFuZCB0aGVyZSdzIG5vIG90aGVyIG1lY2hhbmlzbSBmb3JcbiAgLy8gICBjb250aW51aW5nIHRoZSBmbG93IGlmIHRoZSBzdHJlYW0gY29uc3VtZXIgaGFzIGp1c3Qgc3Vic2NyaWJlZCB0byB0aGVcbiAgLy8gICAnZGF0YScgZXZlbnQuXG4gIC8vXG4gIC8vIEluIGFkZGl0aW9uIHRvIHRoZSBhYm92ZSBjb25kaXRpb25zIHRvIGtlZXAgcmVhZGluZyBkYXRhLCB0aGUgZm9sbG93aW5nXG4gIC8vIGNvbmRpdGlvbnMgcHJldmVudCB0aGUgZGF0YSBmcm9tIGJlaW5nIHJlYWQ6XG4gIC8vIC0gVGhlIHN0cmVhbSBoYXMgZW5kZWQgKHN0YXRlLmVuZGVkKS5cbiAgLy8gLSBUaGVyZSBpcyBhbHJlYWR5IGEgcGVuZGluZyAncmVhZCcgb3BlcmF0aW9uIChzdGF0ZS5yZWFkaW5nKS4gVGhpcyBpcyBhXG4gIC8vICAgY2FzZSB3aGVyZSB0aGUgdGhlIHN0cmVhbSBoYXMgY2FsbGVkIHRoZSBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIF9yZWFkKClcbiAgLy8gICBtZXRob2QsIGJ1dCB0aGV5IGFyZSBwcm9jZXNzaW5nIHRoZSBjYWxsIGFzeW5jaHJvbm91c2x5IGFuZCBoYXZlIF9ub3RfXG4gIC8vICAgY2FsbGVkIHB1c2goKSB3aXRoIG5ldyBkYXRhLiBJbiB0aGlzIGNhc2Ugd2Ugc2tpcCBwZXJmb3JtaW5nIG1vcmVcbiAgLy8gICByZWFkKClzLiBUaGUgZXhlY3V0aW9uIGVuZHMgaW4gdGhpcyBtZXRob2QgYWdhaW4gYWZ0ZXIgdGhlIF9yZWFkKCkgZW5kc1xuICAvLyAgIHVwIGNhbGxpbmcgcHVzaCgpIHdpdGggbW9yZSBkYXRhLlxuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwKSkge1xuICAgIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKSAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7XG4gIH1cblxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufSAvLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ19yZWFkKCknKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3MubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuXG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG5cbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfSAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cblxuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTsgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBjbGVhbmVkVXAgPSB0cnVlOyAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGRlYnVnKCdkZXN0LndyaXRlJywgcmV0KTtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgfVxuXG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH0gLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cblxuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGVycm9yT3JEZXN0cm95KGRlc3QsIGVyKTtcbiAgfSAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG5cblxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7IC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cblxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuXG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfSAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuXG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTsgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwaXBlT25EcmFpbkZ1bmN0aW9uUmVzdWx0KCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7XG4gICAgaGFzVW5waXBlZDogZmFsc2VcbiAgfTsgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpczsgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzOyAvLyBnb3QgYSBtYXRjaC5cblxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHtcbiAgICAgICAgaGFzVW5waXBlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG5cblxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gIHJldHVybiB0aGlzO1xufTsgLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblxuXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIHVwZGF0ZSByZWFkYWJsZUxpc3RlbmluZyBzbyB0aGF0IHJlc3VtZSgpIG1heSBiZSBhIG5vLW9wXG4gICAgLy8gYSBmZXcgbGluZXMgZG93bi4gVGhpcyBpcyBuZWVkZWQgdG8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScpLlxuICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gdGhpcy5saXN0ZW5lckNvdW50KCdyZWFkYWJsZScpID4gMDsgLy8gVHJ5IHN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBkZWJ1Zygnb24gcmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLnJlYWRpbmcpO1xuXG4gICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIHNvbWVvbmUgc3RpbGwgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVhZGFibGUgYW5kIHJlc2V0IHRoZSBzdGF0ZS4gSG93ZXZlciB0aGlzIG5lZWRzIHRvIGhhcHBlblxuICAgIC8vIGFmdGVyIHJlYWRhYmxlIGhhcyBiZWVuIGVtaXR0ZWQgYnV0IGJlZm9yZSBJL08gKG5leHRUaWNrKSB0b1xuICAgIC8vIHN1cHBvcnQgb25jZSgncmVhZGFibGUnLCBmbikgY3ljbGVzLiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZ1xuICAgIC8vIHJlc3VtZSB3aXRoaW4gdGhlIHNhbWUgdGljayB3aWxsIGhhdmUgbm9cbiAgICAvLyBlZmZlY3QuXG4gICAgcHJvY2Vzcy5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZywgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIChldikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScgfHwgZXYgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgc29tZW9uZSBzdGlsbCBsaXN0ZW5pbmcgdG9cbiAgICAvLyByZWFkYWJsZSBhbmQgcmVzZXQgdGhlIHN0YXRlLiBIb3dldmVyIHRoaXMgbmVlZHMgdG8gaGFwcGVuXG4gICAgLy8gYWZ0ZXIgcmVhZGFibGUgaGFzIGJlZW4gZW1pdHRlZCBidXQgYmVmb3JlIEkvTyAobmV4dFRpY2spIHRvXG4gICAgLy8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScsIGZuKSBjeWNsZXMuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nXG4gICAgLy8gcmVzdW1lIHdpdGhpbiB0aGUgc2FtZSB0aWNrIHdpbGwgaGF2ZSBub1xuICAgIC8vIGVmZmVjdC5cbiAgICBwcm9jZXNzLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVSZWFkYWJsZUxpc3RlbmluZyhzZWxmKSB7XG4gIHZhciBzdGF0ZSA9IHNlbGYuX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc2VsZi5saXN0ZW5lckNvdW50KCdyZWFkYWJsZScpID4gMDtcblxuICBpZiAoc3RhdGUucmVzdW1lU2NoZWR1bGVkICYmICFzdGF0ZS5wYXVzZWQpIHtcbiAgICAvLyBmbG93aW5nIG5lZWRzIHRvIGJlIHNldCB0byB0cnVlIG5vdywgb3RoZXJ3aXNlXG4gICAgLy8gdGhlIHVwY29taW5nIHJlc3VtZSB3aWxsIG5vdCBmbG93LlxuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlOyAvLyBjcnVkZSB3YXkgdG8gY2hlY2sgaWYgd2Ugc2hvdWxkIHJlc3VtZVxuICB9IGVsc2UgaWYgKHNlbGYubGlzdGVuZXJDb3VudCgnZGF0YScpID4gMCkge1xuICAgIHNlbGYucmVzdW1lKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufSAvLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7IC8vIHdlIGZsb3cgb25seSBpZiB0aGVyZSBpcyBubyBvbmUgbGlzdGVuaW5nXG4gICAgLy8gZm9yIHJlYWRhYmxlLCBidXQgd2Ugc3RpbGwgaGF2ZSB0byBjYWxsXG4gICAgLy8gcmVzdW1lKClcblxuICAgIHN0YXRlLmZsb3dpbmcgPSAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmc7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuXG4gIHN0YXRlLnBhdXNlZCA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBkZWJ1ZygncmVzdW1lJywgc3RhdGUucmVhZGluZyk7XG5cbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUucGF1c2VkID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG5cbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge1xuICAgIDtcbiAgfVxufSAvLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcblxuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7IC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pOyAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gbWV0aG9kV3JhcChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1ldGhvZFdyYXBSZXR1cm5GdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH0gLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuXG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfSAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuXG5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcblxuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlYWRhYmxlLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3InKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHRoaXMpO1xuICB9O1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlRmxvd2luZycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gc3RhdGU7XG4gICAgfVxuICB9XG59KTsgLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTsgLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5maXJzdCgpO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbnN1bWUobiwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VuZFJlYWRhYmxlJywgc3RhdGUuZW5kRW1pdHRlZCk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIGRlYnVnKCdlbmRSZWFkYWJsZU5UJywgc3RhdGUuZW5kRW1pdHRlZCwgc3RhdGUubGVuZ3RoKTsgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcblxuICAgIGlmIChzdGF0ZS5hdXRvRGVzdHJveSkge1xuICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdFxuICAgICAgLy8gaWYgdGhlIHdyaXRhYmxlIHNpZGUgaXMgcmVhZHkgZm9yIGF1dG9EZXN0cm95IGFzIHdlbGxcbiAgICAgIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG5cbiAgICAgIGlmICghd1N0YXRlIHx8IHdTdGF0ZS5hdXRvRGVzdHJveSAmJiB3U3RhdGUuZmluaXNoZWQpIHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVhZGFibGUuZnJvbSA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgb3B0cykge1xuICAgIGlmIChmcm9tID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZyb20gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZnJvbScpO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9tKFJlYWRhYmxlLCBpdGVyYWJsZSwgb3B0cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgICBFUlJfTVVMVElQTEVfQ0FMTEJBQ0sgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssXG4gICAgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcsXG4gICAgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmIChjYiA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuICBjYihlcik7XG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcblxuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTsgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOyAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfSAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG5cblxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJyAmJiAhdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07IC8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEKCdfdHJhbnNmb3JtKCknKSk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuXG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTsgLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuXG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcblxuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTsgLy8gVE9ETyhCcmlkZ2VBUik6IFdyaXRlIGEgdGVzdCBmb3IgdGhlc2UgdHdvIGVycm9yIGNhc2VzXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG5cbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzAoKTtcbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORygpO1xuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn0gLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cblxuXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG5cbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuXG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlJyksXG4gICAgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG5cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLFxuICAgIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsXG4gICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgICBFUlJfTVVMVElQTEVfQ0FMTEJBQ0sgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssXG4gICAgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUsXG4gICAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRCxcbiAgICBFUlJfU1RSRUFNX05VTExfVkFMVUVTID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyxcbiAgICBFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5ELFxuICAgIEVSUl9VTktOT1dOX0VOQ09ESU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1VOS05PV05fRU5DT0RJTkc7XG5cbnZhciBlcnJvck9yRGVzdHJveSA9IGRlc3Ryb3lJbXBsLmVycm9yT3JEZXN0cm95O1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSwgaXNEdXBsZXgpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLFxuICAvLyBlLmcuIG9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlIHZzLiBvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZSwgZXRjLlxuXG4gIGlmICh0eXBlb2YgaXNEdXBsZXggIT09ICdib29sZWFuJykgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7IC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7IC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTsgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTsgLy8gZHJhaW4gZXZlbnQgZmxhZy5cblxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlOyAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7IC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcblxuICB0aGlzLmVuZGVkID0gZmFsc2U7IC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG5cbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTsgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTsgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cblxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cblxuICB0aGlzLmxlbmd0aCA9IDA7IC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7IC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcblxuICB0aGlzLmNvcmtlZCA9IDA7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuXG4gIHRoaXMuc3luYyA9IHRydWU7IC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7IC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcblxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9OyAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcblxuXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7IC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cblxuICB0aGlzLndyaXRlbGVuID0gMDtcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOyAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcblxuICB0aGlzLnBlbmRpbmdjYiA9IDA7IC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcblxuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7IC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTsgLy8gU2hvdWxkIGNsb3NlIGJlIGVtaXR0ZWQgb24gZGVzdHJveS4gRGVmYXVsdHMgdG8gdHJ1ZS5cblxuICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTsgLy8gU2hvdWxkIC5kZXN0cm95KCkgYmUgY2FsbGVkIGFmdGVyICdmaW5pc2gnIChhbmQgcG90ZW50aWFsbHkgJ2VuZCcpXG5cbiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTsgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDsgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG5cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVCdWZmZXJHZXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpOyAvLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cblxuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiByZWFsSGFzSW5zdGFuY2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTsgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAvLyBDaGVja2luZyBmb3IgYSBTdHJlYW0uRHVwbGV4IGluc3RhbmNlIGlzIGZhc3RlciBoZXJlIGluc3RlYWQgb2YgaW5zaWRlXG4gIC8vIHRoZSBXcml0YWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNVxuXG4gIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gIGlmICghaXNEdXBsZXggJiYgIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSkgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTsgLy8gbGVnYWN5LlxuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn0gLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuXG5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSgpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQoKTsgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcblxuICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgcHJvY2Vzcy5uZXh0VGljayhjYiwgZXIpO1xufSAvLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5cblxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIGVyO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NodW5rJywgWydzdHJpbmcnLCAnQnVmZmVyJ10sIGNodW5rKTtcbiAgfVxuXG4gIGlmIChlcikge1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG4gIGlmIChzdGF0ZS5lbmRpbmcpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBFUlJfVU5LTk9XTl9FTkNPRElORyhlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlQnVmZmVyJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuXG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7IC8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuXG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyazsgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcblxuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAoc3RhdGUuZGVzdHJveWVkKSBzdGF0ZS5vbndyaXRlKG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgnd3JpdGUnKSk7ZWxzZSBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7IC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG5cbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpO1xuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSkgfHwgc3RyZWFtLmRlc3Ryb3llZDtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59IC8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuXG5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn0gLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcblxuXG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG5cbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuXG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTsgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcblxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTsgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cblxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ193cml0ZSgpJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTsgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9IC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cblxuXG4gIGlmICghc3RhdGUuZW5kaW5nKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuXG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcblxuICAgIGlmIChlcnIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicgJiYgIXN0YXRlLmRlc3Ryb3llZCkge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuXG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuXG4gICAgICBpZiAoc3RhdGUuYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdFxuICAgICAgICAvLyBpZiB0aGUgcmVhZGFibGUgc2lkZSBpcyByZWFkeSBmb3IgYXV0b0Rlc3Ryb3kgYXMgd2VsbFxuICAgICAgICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gICAgICAgIGlmICghclN0YXRlIHx8IHJTdGF0ZS5hdXRvRGVzdHJveSAmJiByU3RhdGUuZW5kRW1pdHRlZCkge1xuICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG5cbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwcm9jZXNzLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cblxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuXG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9IC8vIHJldXNlIHRoZSBmcmVlIGNvcmtSZXEuXG5cblxuICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBjYihlcnIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfT2JqZWN0JHNldFByb3RvdHlwZU87XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBmaW5pc2hlZCA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpO1xuXG52YXIga0xhc3RSZXNvbHZlID0gU3ltYm9sKCdsYXN0UmVzb2x2ZScpO1xudmFyIGtMYXN0UmVqZWN0ID0gU3ltYm9sKCdsYXN0UmVqZWN0Jyk7XG52YXIga0Vycm9yID0gU3ltYm9sKCdlcnJvcicpO1xudmFyIGtFbmRlZCA9IFN5bWJvbCgnZW5kZWQnKTtcbnZhciBrTGFzdFByb21pc2UgPSBTeW1ib2woJ2xhc3RQcm9taXNlJyk7XG52YXIga0hhbmRsZVByb21pc2UgPSBTeW1ib2woJ2hhbmRsZVByb21pc2UnKTtcbnZhciBrU3RyZWFtID0gU3ltYm9sKCdzdHJlYW0nKTtcblxuZnVuY3Rpb24gY3JlYXRlSXRlclJlc3VsdCh2YWx1ZSwgZG9uZSkge1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBkb25lOiBkb25lXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmRSZXNvbHZlKGl0ZXIpIHtcbiAgdmFyIHJlc29sdmUgPSBpdGVyW2tMYXN0UmVzb2x2ZV07XG5cbiAgaWYgKHJlc29sdmUgIT09IG51bGwpIHtcbiAgICB2YXIgZGF0YSA9IGl0ZXJba1N0cmVhbV0ucmVhZCgpOyAvLyB3ZSBkZWZlciBpZiBkYXRhIGlzIG51bGxcbiAgICAvLyB3ZSBjYW4gYmUgZXhwZWN0aW5nIGVpdGhlciAnZW5kJyBvclxuICAgIC8vICdlcnJvcidcblxuICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICBpdGVyW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgaXRlcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgIGl0ZXJba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblJlYWRhYmxlKGl0ZXIpIHtcbiAgLy8gd2Ugd2FpdCBmb3IgdGhlIG5leHQgdGljaywgYmVjYXVzZSBpdCBtaWdodFxuICAvLyBlbWl0IGFuIGVycm9yIHdpdGggcHJvY2Vzcy5uZXh0VGlja1xuICBwcm9jZXNzLm5leHRUaWNrKHJlYWRBbmRSZXNvbHZlLCBpdGVyKTtcbn1cblxuZnVuY3Rpb24gd3JhcEZvck5leHQobGFzdFByb21pc2UsIGl0ZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsYXN0UHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpdGVyW2tFbmRlZF0pIHtcbiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGl0ZXJba0hhbmRsZVByb21pc2VdKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSwgcmVqZWN0KTtcbiAgfTtcbn1cblxudmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZnVuY3Rpb24gKCkge30pO1xudmFyIFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZigoX09iamVjdCRzZXRQcm90b3R5cGVPID0ge1xuICBnZXQgc3RyZWFtKCkge1xuICAgIHJldHVybiB0aGlzW2tTdHJlYW1dO1xuICB9LFxuXG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIGlmIHdlIGhhdmUgZGV0ZWN0ZWQgYW4gZXJyb3IgaW4gdGhlIG1lYW53aGlsZVxuICAgIC8vIHJlamVjdCBzdHJhaWdodCBhd2F5XG4gICAgdmFyIGVycm9yID0gdGhpc1trRXJyb3JdO1xuXG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGlmICh0aGlzW2tFbmRlZF0pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1trU3RyZWFtXS5kZXN0cm95ZWQpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZGVmZXIgdmlhIG5leHRUaWNrIGJlY2F1c2UgaWYgLmRlc3Ryb3koZXJyKSBpc1xuICAgICAgLy8gY2FsbGVkLCB0aGUgZXJyb3Igd2lsbCBiZSBlbWl0dGVkIHZpYSBuZXh0VGljaywgYW5kXG4gICAgICAvLyB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoYXQgdGhlcmUgaXMgbm8gZXJyb3IgbGluZ2VyaW5nIGFyb3VuZFxuICAgICAgLy8gd2FpdGluZyB0byBiZSBlbWl0dGVkLlxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzW2tFcnJvcl0pIHtcbiAgICAgICAgICAgIHJlamVjdChfdGhpc1trRXJyb3JdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IC8vIGlmIHdlIGhhdmUgbXVsdGlwbGUgbmV4dCgpIGNhbGxzXG4gICAgLy8gd2Ugd2lsbCB3YWl0IGZvciB0aGUgcHJldmlvdXMgUHJvbWlzZSB0byBmaW5pc2hcbiAgICAvLyB0aGlzIGxvZ2ljIGlzIG9wdGltaXplZCB0byBzdXBwb3J0IGZvciBhd2FpdCBsb29wcyxcbiAgICAvLyB3aGVyZSBuZXh0KCkgaXMgb25seSBjYWxsZWQgb25jZSBhdCBhIHRpbWVcblxuXG4gICAgdmFyIGxhc3RQcm9taXNlID0gdGhpc1trTGFzdFByb21pc2VdO1xuICAgIHZhciBwcm9taXNlO1xuXG4gICAgaWYgKGxhc3RQcm9taXNlKSB7XG4gICAgICBwcm9taXNlID0gbmV3IFByb21pc2Uod3JhcEZvck5leHQobGFzdFByb21pc2UsIHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmFzdCBwYXRoIG5lZWRlZCB0byBzdXBwb3J0IG11bHRpcGxlIHRoaXMucHVzaCgpXG4gICAgICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgdGhlIG5leHQoKSBxdWV1ZVxuICAgICAgdmFyIGRhdGEgPSB0aGlzW2tTdHJlYW1dLnJlYWQoKTtcblxuICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9XG5cbiAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh0aGlzW2tIYW5kbGVQcm9taXNlXSk7XG4gICAgfVxuXG4gICAgdGhpc1trTGFzdFByb21pc2VdID0gcHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgU3ltYm9sLmFzeW5jSXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgXCJyZXR1cm5cIiwgZnVuY3Rpb24gX3JldHVybigpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgLy8gZGVzdHJveShlcnIsIGNiKSBpcyBhIHByaXZhdGUgQVBJXG4gIC8vIHdlIGNhbiBndWFyYW50ZWUgd2UgaGF2ZSB0aGF0IGhlcmUsIGJlY2F1c2Ugd2UgY29udHJvbCB0aGVcbiAgLy8gUmVhZGFibGUgY2xhc3MgdGhpcyBpcyBhdHRhY2hlZCB0b1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIF90aGlzMltrU3RyZWFtXS5kZXN0cm95KG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH0pO1xuICB9KTtcbn0pLCBfT2JqZWN0JHNldFByb3RvdHlwZU8pLCBBc3luY0l0ZXJhdG9yUHJvdG90eXBlKTtcblxudmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcihzdHJlYW0pIHtcbiAgdmFyIF9PYmplY3QkY3JlYXRlO1xuXG4gIHZhciBpdGVyYXRvciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlLCAoX09iamVjdCRjcmVhdGUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrU3RyZWFtLCB7XG4gICAgdmFsdWU6IHN0cmVhbSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlc29sdmUsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlamVjdCwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFcnJvciwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFbmRlZCwge1xuICAgIHZhbHVlOiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrSGFuZGxlUHJvbWlzZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBkYXRhID0gaXRlcmF0b3Jba1N0cmVhbV0ucmVhZCgpO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IHJlc29sdmU7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IHJlamVjdDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfT2JqZWN0JGNyZWF0ZSkpO1xuICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgZmluaXNoZWQoc3RyZWFtLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJykge1xuICAgICAgdmFyIHJlamVjdCA9IGl0ZXJhdG9yW2tMYXN0UmVqZWN0XTsgLy8gcmVqZWN0IGlmIHdlIGFyZSB3YWl0aW5nIGZvciBkYXRhIGluIHRoZSBQcm9taXNlXG4gICAgICAvLyByZXR1cm5lZCBieSBuZXh0KCkgYW5kIHN0b3JlIHRoZSBlcnJvclxuXG4gICAgICBpZiAocmVqZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG5cbiAgICAgIGl0ZXJhdG9yW2tFcnJvcl0gPSBlcnI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmUgPSBpdGVyYXRvcltrTGFzdFJlc29sdmVdO1xuXG4gICAgaWYgKHJlc29sdmUgIT09IG51bGwpIHtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGl0ZXJhdG9yW2tFbmRlZF0gPSB0cnVlO1xuICB9KTtcbiAgc3RyZWFtLm9uKCdyZWFkYWJsZScsIG9uUmVhZGFibGUuYmluZChudWxsLCBpdGVyYXRvcikpO1xuICByZXR1cm4gaXRlcmF0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2J1ZmZlcicpLFxuICAgIEJ1ZmZlciA9IF9yZXF1aXJlLkJ1ZmZlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG5cbnZhciBjdXN0b20gPSBpbnNwZWN0ICYmIGluc3BlY3QuY3VzdG9tIHx8ICdpbnNwZWN0JztcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKHNyYywgdGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCdWZmZXJMaXN0LCBbe1xuICAgIGtleTogXCJwdXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2godikge1xuICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICBkYXRhOiB2LFxuICAgICAgICBuZXh0OiBudWxsXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgICArK3RoaXMubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnNoaWZ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICBkYXRhOiB2LFxuICAgICAgICBuZXh0OiB0aGlzLmhlYWRcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgICArK3RoaXMubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaGlmdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgICAtLXRoaXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJqb2luXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcblxuICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbmNhdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXQobikge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAocCkge1xuICAgICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIG9yIGNoYXJhY3RlcnMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cblxuICB9LCB7XG4gICAga2V5OiBcImNvbnN1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3VtZShuLCBoYXNTdHJpbmdzKSB7XG4gICAgICB2YXIgcmV0O1xuXG4gICAgICBpZiAobiA8IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgICAvLyBgc2xpY2VgIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzLlxuICAgICAgICByZXQgPSB0aGlzLmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICAgICAgdGhpcy5oZWFkLmRhdGEgPSB0aGlzLmhlYWQuZGF0YS5zbGljZShuKTtcbiAgICAgIH0gZWxzZSBpZiAobiA9PT0gdGhpcy5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgIC8vIEZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaC5cbiAgICAgICAgcmV0ID0gdGhpcy5zaGlmdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyLlxuICAgICAgICByZXQgPSBoYXNTdHJpbmdzID8gdGhpcy5fZ2V0U3RyaW5nKG4pIDogdGhpcy5fZ2V0QnVmZmVyKG4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaXJzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG5cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0U3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRTdHJpbmcobikge1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgYyA9IDE7XG4gICAgICB2YXIgcmV0ID0gcC5kYXRhO1xuICAgICAgbiAtPSByZXQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgICAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgICAgICBuIC09IG5iO1xuXG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgICsrYztcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggLT0gYztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cblxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRCdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEJ1ZmZlcihuKSB7XG4gICAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgYyA9IDE7XG4gICAgICBwLmRhdGEuY29weShyZXQpO1xuICAgICAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgICAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgICAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgICAgIG4gLT0gbmI7XG5cbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgIGlmIChwLm5leHQpIHRoaXMuaGVhZCA9IHAubmV4dDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHA7XG4gICAgICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgKytjO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCAtPSBjO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbGlua2VkIGxpc3Qgb25seSBzaG93cyB0aGUgbWluaW1hbCBuZWNlc3NhcnkgaW5mb3JtYXRpb24uXG5cbiAgfSwge1xuICAgIGtleTogY3VzdG9tLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIC8vIE9ubHkgaW5zcGVjdCBvbmUgbGV2ZWwuXG4gICAgICAgIGRlcHRoOiAwLFxuICAgICAgICAvLyBJdCBzaG91bGQgbm90IHJlY3Vyc2UuXG4gICAgICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7IiwiJ3VzZSBzdHJpY3QnOyAvLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5cbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfSAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG5cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIF90aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIGlmICghX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlTlQoc2VsZiwgZXJyKSB7XG4gIGVtaXRFcnJvck5UKHNlbGYsIGVycik7XG4gIGVtaXRDbG9zZU5UKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmKSB7XG4gIGlmIChzZWxmLl93cml0YWJsZVN0YXRlICYmICFzZWxmLl93cml0YWJsZVN0YXRlLmVtaXRDbG9zZSkgcmV0dXJuO1xuICBpZiAoc2VsZi5fcmVhZGFibGVTdGF0ZSAmJiAhc2VsZi5fcmVhZGFibGVTdGF0ZS5lbWl0Q2xvc2UpIHJldHVybjtcbiAgc2VsZi5lbWl0KCdjbG9zZScpO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5hbENhbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbmZ1bmN0aW9uIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKSB7XG4gIC8vIFdlIGhhdmUgdGVzdHMgdGhhdCByZWx5IG9uIGVycm9ycyBiZWluZyBlbWl0dGVkXG4gIC8vIGluIHRoZSBzYW1lIHRpY2ssIHNvIGNoYW5naW5nIHRoaXMgaXMgc2VtdmVyIG1ham9yLlxuICAvLyBGb3Igbm93IHdoZW4geW91IG9wdC1pbiB0byBhdXRvRGVzdHJveSB3ZSBhbGxvd1xuICAvLyB0aGUgZXJyb3IgdG8gYmUgZW1pdHRlZCBuZXh0VGljay4gSW4gYSBmdXR1cmVcbiAgLy8gc2VtdmVyIG1ham9yIHVwZGF0ZSB3ZSBzaG91bGQgY2hhbmdlIHRoZSBkZWZhdWx0IHRvIHRoaXMuXG4gIHZhciByU3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIGlmIChyU3RhdGUgJiYgclN0YXRlLmF1dG9EZXN0cm95IHx8IHdTdGF0ZSAmJiB3U3RhdGUuYXV0b0Rlc3Ryb3kpIHN0cmVhbS5kZXN0cm95KGVycik7ZWxzZSBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3ksXG4gIGVycm9yT3JEZXN0cm95OiBlcnJvck9yRGVzdHJveVxufTsiLCIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL2VuZC1vZi1zdHJlYW0gd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO1xuXG5mdW5jdGlvbiBvbmNlKGNhbGxiYWNrKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgY2FsbGVkID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZW9zKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW9zKHN0cmVhbSwgbnVsbCwgb3B0cyk7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gIHZhciByZWFkYWJsZSA9IG9wdHMucmVhZGFibGUgfHwgb3B0cy5yZWFkYWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLnJlYWRhYmxlO1xuICB2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZTtcblxuICB2YXIgb25sZWdhY3lmaW5pc2ggPSBmdW5jdGlvbiBvbmxlZ2FjeWZpbmlzaCgpIHtcbiAgICBpZiAoIXN0cmVhbS53cml0YWJsZSkgb25maW5pc2goKTtcbiAgfTtcblxuICB2YXIgd3JpdGFibGVFbmRlZCA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZSAmJiBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQ7XG5cbiAgdmFyIG9uZmluaXNoID0gZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgd3JpdGFibGUgPSBmYWxzZTtcbiAgICB3cml0YWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXJlYWRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIHJlYWRhYmxlRW5kZWQgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGUgJiYgc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ7XG5cbiAgdmFyIG9uZW5kID0gZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgcmVhZGFibGUgPSBmYWxzZTtcbiAgICByZWFkYWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXdyaXRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICB9O1xuXG4gIHZhciBvbmNsb3NlID0gZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICB2YXIgZXJyO1xuXG4gICAgaWYgKHJlYWRhYmxlICYmICFyZWFkYWJsZUVuZGVkKSB7XG4gICAgICBpZiAoIXN0cmVhbS5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZGVkKSBlcnIgPSBuZXcgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTtcbiAgICB9XG5cbiAgICBpZiAod3JpdGFibGUgJiYgIXdyaXRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl93cml0YWJsZVN0YXRlIHx8ICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25yZXF1ZXN0ID0gZnVuY3Rpb24gb25yZXF1ZXN0KCkge1xuICAgIHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgfTtcblxuICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcbiAgICBzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICB9IGVsc2UgaWYgKHdyaXRhYmxlICYmICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAvLyBsZWdhY3kgc3RyZWFtc1xuICAgIHN0cmVhbS5vbignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gIH1cblxuICBzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcbiAgc3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gIGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjb21wbGV0ZScsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlb3M7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignUmVhZGFibGUuZnJvbSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyJylcbn07XG4iLCIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL3B1bXAgd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlb3M7XG5cbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1MsXG4gICAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRDtcblxuZnVuY3Rpb24gbm9vcChlcnIpIHtcbiAgLy8gUmV0aHJvdyB0aGUgZXJyb3IgaWYgaXQgZXhpc3RzIHRvIGF2b2lkIHN3YWxsb3dpbmcgaXRcbiAgaWYgKGVycikgdGhyb3cgZXJyO1xufVxuXG5mdW5jdGlvbiBpc1JlcXVlc3Qoc3RyZWFtKSB7XG4gIHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIHR5cGVvZiBzdHJlYW0uYWJvcnQgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayk7XG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICB9KTtcbiAgaWYgKGVvcyA9PT0gdW5kZWZpbmVkKSBlb3MgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTtcbiAgZW9zKHN0cmVhbSwge1xuICAgIHJlYWRhYmxlOiByZWFkaW5nLFxuICAgIHdyaXRhYmxlOiB3cml0aW5nXG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0pO1xuICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGNsb3NlZCkgcmV0dXJuO1xuICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICBkZXN0cm95ZWQgPSB0cnVlOyAvLyByZXF1ZXN0LmRlc3Ryb3kganVzdCBkbyAuZW5kIC0gLmFib3J0IGlzIHdoYXQgd2Ugd2FudFxuXG4gICAgaWYgKGlzUmVxdWVzdChzdHJlYW0pKSByZXR1cm4gc3RyZWFtLmFib3J0KCk7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgY2FsbGJhY2soZXJyIHx8IG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgncGlwZScpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsbChmbikge1xuICBmbigpO1xufVxuXG5mdW5jdGlvbiBwaXBlKGZyb20sIHRvKSB7XG4gIHJldHVybiBmcm9tLnBpcGUodG8pO1xufVxuXG5mdW5jdGlvbiBwb3BDYWxsYmFjayhzdHJlYW1zKSB7XG4gIGlmICghc3RyZWFtcy5sZW5ndGgpIHJldHVybiBub29wO1xuICBpZiAodHlwZW9mIHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG5vb3A7XG4gIHJldHVybiBzdHJlYW1zLnBvcCgpO1xufVxuXG5mdW5jdGlvbiBwaXBlbGluZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0cmVhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3RyZWFtc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBjYWxsYmFjayA9IHBvcENhbGxiYWNrKHN0cmVhbXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHJlYW1zWzBdKSkgc3RyZWFtcyA9IHN0cmVhbXNbMF07XG5cbiAgaWYgKHN0cmVhbXMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdzdHJlYW1zJyk7XG4gIH1cblxuICB2YXIgZXJyb3I7XG4gIHZhciBkZXN0cm95cyA9IHN0cmVhbXMubWFwKGZ1bmN0aW9uIChzdHJlYW0sIGkpIHtcbiAgICB2YXIgcmVhZGluZyA9IGkgPCBzdHJlYW1zLmxlbmd0aCAtIDE7XG4gICAgdmFyIHdyaXRpbmcgPSBpID4gMDtcbiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gICAgICBpZiAoZXJyKSBkZXN0cm95cy5mb3JFYWNoKGNhbGwpO1xuICAgICAgaWYgKHJlYWRpbmcpIHJldHVybjtcbiAgICAgIGRlc3Ryb3lzLmZvckVhY2goY2FsbCk7XG4gICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtcy5yZWR1Y2UocGlwZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGlwZWxpbmU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO1xuXG5mdW5jdGlvbiBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gIHJldHVybiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMuaGlnaFdhdGVyTWFyayA6IGlzRHVwbGV4ID8gb3B0aW9uc1tkdXBsZXhLZXldIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0SGlnaFdhdGVyTWFyayhzdGF0ZSwgb3B0aW9ucywgZHVwbGV4S2V5LCBpc0R1cGxleCkge1xuICB2YXIgaHdtID0gaGlnaFdhdGVyTWFya0Zyb20ob3B0aW9ucywgaXNEdXBsZXgsIGR1cGxleEtleSk7XG5cbiAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgaWYgKCEoaXNGaW5pdGUoaHdtKSAmJiBNYXRoLmZsb29yKGh3bSkgPT09IGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJztcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUUobmFtZSwgaHdtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcihod20pO1xuICB9IC8vIERlZmF1bHQgdmFsdWVcblxuXG4gIHJldHVybiBzdGF0ZS5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrXG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbmV4cG9ydHMuZmluaXNoZWQgPSByZXF1aXJlKCcuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanMnKTtcbmV4cG9ydHMucGlwZWxpbmUgPSByZXF1aXJlKCcuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3BpcGVsaW5lLmpzJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCIhZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLHQpO2Vsc2V7dmFyIG49dCgpO2Zvcih2YXIgciBpbiBuKShcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzOmUpW3JdPW5bcl19fSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQocil7aWYobltyXSlyZXR1cm4gbltyXS5leHBvcnRzO3ZhciBvPW5bcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubD0hMCxvLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQuaT1mdW5jdGlvbihlKXtyZXR1cm4gZX0sdC5kPWZ1bmN0aW9uKGUsbixyKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobixcImFcIixuKSxufSx0Lm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHQucD1cIlwiLHQodC5zPTEpfShbZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPXRoaXMmJnRoaXMuX19hc3NpZ258fE9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspe3Q9YXJndW1lbnRzW25dO2Zvcih2YXIgbyBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LG8pJiYoZVtvXT10W29dKX1yZXR1cm4gZX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PWZ1bmN0aW9uKGUpe3JldHVybiBvLmV4ZWN1dGUoZSl9O3ZhciBvOyFmdW5jdGlvbihlKXtlLmV4ZWN1dGU9ZnVuY3Rpb24odCl7dmFyIG47cmV0dXJuIG51bGw9PT10P249dDp0IGluc3RhbmNlb2YgRGF0ZT9uPW5ldyBEYXRlKHQuZ2V0VGltZSgpKTpBcnJheS5pc0FycmF5KHQpPyhuPVtdLHQuZm9yRWFjaChmdW5jdGlvbihlLHQscil7bi5wdXNoKGUpfSksbj1uLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZS5leGVjdXRlKHQpfSkpOlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0IT09e30/KG49cih7fSx0KSxPYmplY3Qua2V5cyhuKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe25bdF09ZS5leGVjdXRlKG5bdF0pfSkpOm49dCxufSxlLmlzUHJpbWl0aXZlPWZ1bmN0aW9uKCl7fX0ob3x8KG89e30pKX0sZnVuY3Rpb24oZSx0LG4pe2UuZXhwb3J0cz1uKDApfV0pfSk7IiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY3JlYXRlQmluZGluZyhvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS4zLjIgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJlxuXHRcdCFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKFxuXHRcdGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWxcblx0KSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS8sIC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG5cdHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuXHRcdHZhciBrID0gMDtcblx0XHRkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuXHRcdGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcblx0XHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdFx0ZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuXHQgKiBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcblx0XHQvLyBEb24ndCB1c2UgVUNTLTJcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoLFxuXHRcdCAgICBvdXQsXG5cdFx0ICAgIGkgPSAwLFxuXHRcdCAgICBuID0gaW5pdGlhbE4sXG5cdFx0ICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcblx0XHQgICAgYmFzaWMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIGluZGV4LFxuXHRcdCAgICBvbGRpLFxuXHRcdCAgICB3LFxuXHRcdCAgICBrLFxuXHRcdCAgICBkaWdpdCxcblx0XHQgICAgdCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGJhc2VNaW51c1Q7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0XHQvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weVxuXHRcdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdFx0YmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHRcdGlmIChiYXNpYyA8IDApIHtcblx0XHRcdGJhc2ljID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdFx0Ly8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG5cdFx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHRcdH1cblx0XHRcdG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcblx0XHQvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG5cdFx0Zm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHtcblxuXHRcdFx0Ly8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuXHRcdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHRcdC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG5cdFx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdFx0Zm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXG5cdFx0XHRcdGlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkaWdpdCA9IGJhc2ljVG9EaWdpdChpbnB1dC5jaGFyQ29kZUF0KGluZGV4KyspKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpICs9IGRpZ2l0ICogdztcblx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0IDwgdCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0ID0gb3V0cHV0Lmxlbmd0aCArIDE7XG5cdFx0XHRiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuXHRcdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHRcdC8vIGluY3JlbWVudGluZyBgbmAgZWFjaCB0aW1lLCBzbyB3ZSdsbCBmaXggdGhhdCBub3c6XG5cdFx0XHRpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRuICs9IGZsb29yKGkgLyBvdXQpO1xuXHRcdFx0aSAlPSBvdXQ7XG5cblx0XHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXRcblx0XHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKG91dHB1dCk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcblx0ICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG5cdFx0dmFyIG4sXG5cdFx0ICAgIGRlbHRhLFxuXHRcdCAgICBoYW5kbGVkQ1BDb3VudCxcblx0XHQgICAgYmFzaWNMZW5ndGgsXG5cdFx0ICAgIGJpYXMsXG5cdFx0ICAgIGosXG5cdFx0ICAgIG0sXG5cdFx0ICAgIHEsXG5cdFx0ICAgIGssXG5cdFx0ICAgIHQsXG5cdFx0ICAgIGN1cnJlbnRWYWx1ZSxcblx0XHQgICAgb3V0cHV0ID0gW10sXG5cdFx0ICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG5cdFx0ICAgIGlucHV0TGVuZ3RoLFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuXHRcdCAgICBiYXNlTWludXNULFxuXHRcdCAgICBxTWludXNUO1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuXHRcdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0XHQvLyBDYWNoZSB0aGUgbGVuZ3RoXG5cdFx0aW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0XHQvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuXHRcdG4gPSBpbml0aWFsTjtcblx0XHRkZWx0YSA9IDA7XG5cdFx0YmlhcyA9IGluaXRpYWxCaWFzO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50c1xuXHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuXHRcdC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuXHRcdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHRcdC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuXHRcdGlmIChiYXNpY0xlbmd0aCkge1xuXHRcdFx0b3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGVuY29kaW5nIGxvb3A6XG5cdFx0d2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcblxuXHRcdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdFx0Ly8gbGFyZ2VyIG9uZTpcblx0XHRcdGZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcblx0XHRcdGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRcdGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuXHRcdFx0biA9IG07XG5cblx0XHRcdGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuXHRcdFx0XHRcdC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0XHRcdFx0Zm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0XHRpZiAocSA8IHQpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdFx0c3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuXHRcdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG5cdFx0XHRcdFx0ZGVsdGEgPSAwO1xuXHRcdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0KytkZWx0YTtcblx0XHRcdCsrbjtcblxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3Ncblx0ICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuXHQgKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cblx0ICogY29udmVydGVkIHRvIFVuaWNvZGUuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gZGVjb2RlKHN0cmluZy5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsXG5cdCAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuXHQgKiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG5cdCAqIFVuaWNvZGUgc3RyaW5nLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yXG5cdCAqIGVtYWlsIGFkZHJlc3MuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKVxuXHRcdFx0XHQ6IHN0cmluZztcblx0XHR9KTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cblx0cHVueWNvZGUgPSB7XG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdCd2ZXJzaW9uJzogJzEuMy4yJyxcblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuXHRcdCAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG5cdFx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgT2JqZWN0XG5cdFx0ICovXG5cdFx0J3VjczInOiB7XG5cdFx0XHQnZGVjb2RlJzogdWNzMmRlY29kZSxcblx0XHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdFx0fSxcblx0XHQnZGVjb2RlJzogZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHRcdCd0b1VuaWNvZGUnOiB0b1VuaWNvZGVcblx0fTtcblxuXHQvKiogRXhwb3NlIGBwdW55Y29kZWAgKi9cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoJ3B1bnljb2RlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gcHVueWNvZGU7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSkge1xuXHRcdGlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LnB1bnljb2RlID0gcHVueWNvZGU7XG5cdH1cblxufSh0aGlzKSk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuZXhwb3J0cy5wYXJzZSA9IHVybFBhcnNlO1xuZXhwb3J0cy5yZXNvbHZlID0gdXJsUmVzb2x2ZTtcbmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7XG5leHBvcnRzLmZvcm1hdCA9IHVybEZvcm1hdDtcblxuZXhwb3J0cy5VcmwgPSBVcmw7XG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8vIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4vLyBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICAgIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLyxcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAgIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICAgIHVuc2FmZVByb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLlxuICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgICBzbGFzaGVkUHJvdG9jb2wgPSB7XG4gICAgICAnaHR0cCc6IHRydWUsXG4gICAgICAnaHR0cHMnOiB0cnVlLFxuICAgICAgJ2Z0cCc6IHRydWUsXG4gICAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAgICdmaWxlJzogdHJ1ZSxcbiAgICAgICdodHRwOic6IHRydWUsXG4gICAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAgICdmdHA6JzogdHJ1ZSxcbiAgICAgICdnb3BoZXI6JzogdHJ1ZSxcbiAgICAgICdmaWxlOic6IHRydWVcbiAgICB9LFxuICAgIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIHV0aWwuaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7XG5cbiAgdmFyIHUgPSBuZXcgVXJsO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCF1dGlsLmlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLy8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gIC8vIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgICBzcGxpdHRlciA9XG4gICAgICAgICAgKHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpKSA/ICc/JyA6ICcjJyxcbiAgICAgIHVTcGxpdCA9IHVybC5zcGxpdChzcGxpdHRlciksXG4gICAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHJlc3Q7XG4gICAgICB0aGlzLmhyZWYgPSByZXN0O1xuICAgICAgdGhpcy5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMuc2VhcmNoLnN1YnN0cigxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpO1xuICBpZiAocHJvdG8pIHtcbiAgICBwcm90byA9IHByb3RvWzBdO1xuICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bztcbiAgICByZXN0ID0gcmVzdC5zdWJzdHIocHJvdG8ubGVuZ3RoKTtcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKSB7XG4gICAgdmFyIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihob3N0RW5kaW5nQ2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8vIE5vdyB3ZSBoYXZlIGEgcG9ydGlvbiB3aGljaCBpcyBkZWZpbml0ZWx5IHRoZSBhdXRoLlxuICAgIC8vIFB1bGwgdGhhdCBvZmYuXG4gICAgaWYgKGF0U2lnbiAhPT0gLTEpIHtcbiAgICAgIGF1dGggPSByZXN0LnNsaWNlKDAsIGF0U2lnbik7XG4gICAgICByZXN0ID0gcmVzdC5zbGljZShhdFNpZ24gKyAxKTtcbiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdCgpO1xuXG4gICAgLy8gd2UndmUgaW5kaWNhdGVkIHRoYXQgdGhlcmUgaXMgYSBob3N0bmFtZSxcbiAgICAvLyBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LlxuICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuXG4gICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmXG4gICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcGFydCA9IGhvc3RwYXJ0c1tpXTtcbiAgICAgICAgaWYgKCFwYXJ0KSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgdmFyIG5ld3BhcnQgPSAnJztcbiAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHBhcnQubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7XG4gICAgICAgICAgICAgIC8vIHdlIHJlcGxhY2Ugbm9uLUFTQ0lJIGNoYXIgd2l0aCBhIHRlbXBvcmFyeSBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRoaXMgdG8gbWFrZSBzdXJlIHNpemUgb2YgaG9zdG5hbWUgaXMgbm90XG4gICAgICAgICAgICAgIC8vIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmdcbiAgICAgICAgICAgICAgbmV3cGFydCArPSAneCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZFBhcnRzID0gaG9zdHBhcnRzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpO1xuICAgICAgICAgICAgdmFyIGJpdCA9IHBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTtcbiAgICAgICAgICAgICAgbm90SG9zdC51bnNoaWZ0KGJpdFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdCA9ICcvJyArIG5vdEhvc3Quam9pbignLicpICsgcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICAvLyBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55Y29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgIC8vIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWZcbiAgICAgIC8vIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIEFTQ0lJLW9ubHkuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLmhvc3RuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMucG9ydCA/ICc6JyArIHRoaXMucG9ydCA6ICcnO1xuICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcbiAgICB0aGlzLmhvc3QgPSBoICsgcDtcbiAgICB0aGlzLmhyZWYgKz0gdGhpcy5ob3N0O1xuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8vIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAvLyBuZWVkIHRvIGJlLlxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICB0aGlzLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHRoaXMuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHRoaXMucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5xdWVyeSk7XG4gICAgfVxuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTtcbiAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgLy8gbm8gcXVlcnkgc3RyaW5nLCBidXQgcGFyc2VRdWVyeVN0cmluZyBzdGlsbCByZXF1ZXN0ZWRcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgfVxuICBpZiAocmVzdCkgdGhpcy5wYXRobmFtZSA9IHJlc3Q7XG4gIGlmIChzbGFzaGVkUHJvdG9jb2xbbG93ZXJQcm90b10gJiZcbiAgICAgIHRoaXMuaG9zdG5hbWUgJiYgIXRoaXMucGF0aG5hbWUpIHtcbiAgICB0aGlzLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkge1xuICAgIHZhciBwID0gdGhpcy5wYXRobmFtZSB8fCAnJztcbiAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnO1xuICAgIHRoaXMucGF0aCA9IHAgKyBzO1xuICB9XG5cbiAgLy8gZmluYWxseSwgcmVjb25zdHJ1Y3QgdGhlIGhyZWYgYmFzZWQgb24gd2hhdCBoYXMgYmVlbiB2YWxpZGF0ZWQuXG4gIHRoaXMuaHJlZiA9IHRoaXMuZm9ybWF0KCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvLyBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gIC8vIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gIGlmICh1dGlsLmlzU3RyaW5nKG9iaikpIG9iaiA9IHVybFBhcnNlKG9iaik7XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7XG4gIHJldHVybiBvYmouZm9ybWF0KCk7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLFxuICAgICAgcGF0aG5hbWUgPSB0aGlzLnBhdGhuYW1lIHx8ICcnLFxuICAgICAgaGFzaCA9IHRoaXMuaGFzaCB8fCAnJyxcbiAgICAgIGhvc3QgPSBmYWxzZSxcbiAgICAgIHF1ZXJ5ID0gJyc7XG5cbiAgaWYgKHRoaXMuaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdGhpcy5ob3N0O1xuICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgP1xuICAgICAgICB0aGlzLmhvc3RuYW1lIDpcbiAgICAgICAgJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMucXVlcnkgJiZcbiAgICAgIHV0aWwuaXNPYmplY3QodGhpcy5xdWVyeSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmICh0aGlzLnNsYXNoZXMgfHxcbiAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKHV0aWwuaXNTdHJpbmcocmVsYXRpdmUpKSB7XG4gICAgdmFyIHJlbCA9IG5ldyBVcmwoKTtcbiAgICByZWwucGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKTtcbiAgICByZWxhdGl2ZSA9IHJlbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7XG4gIHZhciB0a2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7XG4gICAgdmFyIHRrZXkgPSB0a2V5c1t0a107XG4gICAgcmVzdWx0W3RrZXldID0gdGhpc1t0a2V5XTtcbiAgfVxuXG4gIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LlxuICAvLyBldmVuIGhyZWY9XCJcIiB3aWxsIHJlbW92ZSBpdC5cbiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoO1xuXG4gIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS5cbiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLlxuICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAvLyB0YWtlIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBwcm90b2NvbCBmcm9tIHJlbGF0aXZlXG4gICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgIGZvciAodmFyIHJrID0gMDsgcmsgPCBya2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgIHZhciBya2V5ID0gcmtleXNbcmtdO1xuICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpXG4gICAgICAgIHJlc3VsdFtya2V5XSA9IHJlbGF0aXZlW3JrZXldO1xuICAgIH1cblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgICB2YXIgayA9IGtleXNbdl07XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgICAgaXNSZWxBYnMgPSAoXG4gICAgICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgICAgIHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgICApLFxuICAgICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fFxuICAgICAgICAgICAgICAgICAgICAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpKSxcbiAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcblxuICAvLyBpZiB0aGUgdXJsIGlzIGEgbm9uLXNsYXNoZWQgdXJsLCB0aGVuIHJlbGF0aXZlXG4gIC8vIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGVcbiAgLy8gdG8gY3Jhd2wgdXAgdG8gdGhlIGhvc3RuYW1lLCBhcyB3ZWxsLiAgVGhpcyBpcyBzdHJhbmdlLlxuICAvLyByZXN1bHQucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LlxuICAvLyBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC5cbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9ICcnO1xuICAgIHJlc3VsdC5wb3J0ID0gbnVsbDtcbiAgICBpZiAocmVzdWx0Lmhvc3QpIHtcbiAgICAgIGlmIChzcmNQYXRoWzBdID09PSAnJykgc3JjUGF0aFswXSA9IHJlc3VsdC5ob3N0O1xuICAgICAgZWxzZSBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpO1xuICAgIH1cbiAgICByZXN1bHQuaG9zdCA9ICcnO1xuICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmUucG9ydCA9IG51bGw7XG4gICAgICBpZiAocmVsYXRpdmUuaG9zdCkge1xuICAgICAgICBpZiAocmVsUGF0aFswXSA9PT0gJycpIHJlbFBhdGhbMF0gPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICBlbHNlIHJlbFBhdGgudW5zaGlmdChyZWxhdGl2ZS5ob3N0KTtcbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlLmhvc3QgPSBudWxsO1xuICAgIH1cbiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpO1xuICB9XG5cbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gKHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghdXRpbC5pc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBubyBwYXRoIGF0IGFsbC4gIGVhc3kuXG4gICAgLy8gd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS5cbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnNlYXJjaCkge1xuICAgICAgcmVzdWx0LnBhdGggPSAnLycgKyByZXN1bHQuc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgLy8gaG93ZXZlciwgaWYgaXQgZW5kcyBpbiBhbnl0aGluZyBlbHNlIG5vbi1zbGFzaHksXG4gIC8vIHRoZW4gaXQgbXVzdCBOT1QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIHZhciBsYXN0ID0gc3JjUGF0aC5zbGljZSgtMSlbMF07XG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gKFxuICAgICAgKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJlxuICAgICAgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiZcbiAgICAgICghc3JjUGF0aFswXSB8fCBzcmNQYXRoWzBdLmNoYXJBdCgwKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5qb2luKCcvJykuc3Vic3RyKC0xKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgucHVzaCgnJyk7XG4gIH1cblxuICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8XG4gICAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgIH1cbiAgfVxuXG4gIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IChyZXN1bHQuaG9zdCAmJiBzcmNQYXRoLmxlbmd0aCk7XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IHNyY1BhdGguam9pbignLycpO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IHJlcXVlc3QuaHR0cFxuICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge31cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZVxuX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG4vLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdleHBvcnRzJyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG4iXSwic291cmNlUm9vdCI6IiJ9