/*! For license information please see reproj-helper.js.LICENSE.txt */
(()=>{var t={497:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FormatConverter=void 0;var r,n=(r=i(741))&&r.__esModule?r:{default:r},s=function(){function t(){this.sourceWkt=null,this.sourceJson=null}return t.instance=function(){return new t},t.prototype.fromWkt=function(t){return this.sourceWkt=t.trim(),this.sourceJson={type:"Feature",properties:{},geometry:this.convertWktToJson()},this},t.prototype.toWkt=function(t){return void 0===t&&(t=!1),this.convertToWkt(t)},t.prototype.fromGeoJson=function(t){return this.sourceJson=(0,n.default)(t),this},t.prototype.toGeoJson=function(){return this.sourceJson},t.prototype.convertWktToJson=function(){if(!this.sourceWkt||0===this.sourceWkt.length)throw new Error("No WKT data supplied");this.sourceWkt.includes("(")&&" "!==this.sourceWkt[this.sourceWkt.indexOf("(")-1]&&(this.sourceWkt=this.sourceWkt.slice(0,this.sourceWkt.indexOf("("))+" "+this.sourceWkt.slice(this.sourceWkt.indexOf("(")));var t=this.sourceWkt.split(" ")[0].trim().toUpperCase(),e=this.sourceWkt.split(" ")[1].trim().toUpperCase();if(["EMPTY"].includes(e))throw Error("Geometry is empty or using an unupported type!");var i=this.sourceWkt.substring(this.sourceWkt.indexOf("(")+1,this.sourceWkt.length-1);return this.buildWktGeometry(t,i)},t.prototype.buildWktGeometry=function(t,e){try{switch(t){case"POINT":return{type:"Point",coordinates:this.parseWktCoord(e)};case"MULTIPOINT":var i=e.trim().replace(/\(/g,"").replace(/\)/g,"");return{type:"MultiPoint",coordinates:this.parseWktLine(i)};case"LINESTRING":return{type:"LineString",coordinates:this.parseWktLine(e)};case"MULTILINESTRING":return{type:"MultiLineString",coordinates:this.parseWktRing(e)};case"TRIANGLE":case"POLYGON":return{type:"Polygon",coordinates:this.parseWktRing(e)};case"TIN":case"MULTIPOLYGON":for(var r={type:"MultiPolygon",coordinates:[]},n=e.split(")),"),s=0,a=n;s<a.length;s++){var o=a[s],h=o.replace("((","(")+(o.endsWith(")")?"":")");r.coordinates.push(this.parseWktRing(h.trim()))}return r;case"GEOMETRYCOLLECTION":for(var u={type:"GeometryCollection",geometries:[]},l=e.toUpperCase().replace(/POINT/g,"-POINT").replace(/LINESTRING/g,"-LINESTRING").replace(/POLYGON/g,"-POLYGON").replace(/MULTI-/g,"-MULTI").trim().split("-"),c=0,f=l;c<f.length;c++){var p=f[c];if(p&&p.length>0){var d=p.trim().toUpperCase();d.endsWith(",")&&(d=d.substring(0,d.length-1));var y=d.split(" ")[0].trim(),g=d.split(" ")[1].trim();if(["EMPTY","ZM","M"].includes(g))throw Error("Geometry is empty or using an unupported type!");var m=d.substring(d.indexOf("(")+1,d.length-1);u.geometries.push(this.buildWktGeometry(y,m))}}return u;default:throw new Error("WKT type of "+t+" is not currently supported")}}catch(t){throw Error(t)}},t.prototype.parseWktCoord=function(t){for(var e=[],i=0,r=t.trim().split(" ");i<r.length;i++){var n=r[i];e.push(parseFloat(n))}return e},t.prototype.parseWktLine=function(t){for(var e=[],i=0,r=t.trim().split(",");i<r.length;i++){var n=r[i];e.push(this.parseWktCoord(n))}return e},t.prototype.parseWktRing=function(t){for(var e=[],i=0,r=0,n=t.split("),");r<n.length;r++){var s=n[r],a=s.trim().substring(s.trim().indexOf("(")+1,s.trim().length-(s.endsWith(")")?1:0));e[i]=this.parseWktLine(a),i+=1}return e},t.prototype.convertToWkt=function(t){if(void 0===t&&(t=!1),this.sourceJson){if("FeatureCollection"===this.sourceJson.type){for(var e="GEOMETRYCOLLECTION (",i=0,r=this.sourceJson.features;i<r.length;i++){var n=r[i];e+=this.wktStringFromGeometry(n.geometry,t)+", "}return e.substring(0,e.length-2)+")"}return"Feature"===this.sourceJson.type?this.wktStringFromGeometry(this.sourceJson.geometry,t):this.wktStringFromGeometry(this.sourceJson,t)}return""},t.prototype.wktStringFromGeometry=function(t,e){switch(void 0===e&&(e=!1),t.type){case"Point":return"POINT"+(2===t.coordinates.length?" ":3===t.coordinates.length?" M ":" ZM ")+"("+this.toWktCoordString(t.coordinates)+")";case"MultiPoint":return"MULTIPOINT ("+this.lineToWktString(t.coordinates)+")";case"LineString":return"LINESTRING ("+this.lineToWktString(t.coordinates)+")";case"MultiLineString":return"MULTILINESTRING ("+this.ringToWktString(t.coordinates)+")";case"Polygon":return(3===t.coordinates[0][0].length&&e?"TRIANGLE":"POLYGON")+" ("+this.ringToWktString(t.coordinates)+")";case"MultiPolygon":return(3===t.coordinates[0][0][0].length&&e?"TIN":"MULTIPOLYGON")+" ("+this.polygonToWktString(t.coordinates)+")";case"GeometryCollection":for(var i="GEOMETRYCOLLECTION (",r=0,n=t.geometries;r<n.length;r++){var s=n[r];i+=this.wktStringFromGeometry(s)+", "}return i.substring(0,i.length-2)+")"}},t.prototype.polygonToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+="("+this.ringToWktString(n)+"), "}return e.substring(0,e.length-2)},t.prototype.ringToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+="("+this.lineToWktString(n)+"), "}return e.substring(0,e.length-2)},t.prototype.lineToWktString=function(t){for(var e="",i=0,r=t;i<r.length;i++){var n=r[i];e+=this.toWktCoordString(n)+", "}return e.substring(0,e.length-2)},t.prototype.toWktCoordString=function(t){for(var e="",i=0,r=t;i<r.length;i++)e+=r[i]+" ";return e.trim()},t}();e.FormatConverter=s},908:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ReProjector=void 0;var r=i(655),n=o(i(801)),s=o(i(741)),a=o(i(267));function o(t){return t&&t.__esModule?t:{default:t}}var h=function(){function t(){this.init(),this.sourceFeature=null,this.fromProjection="EPSG:3005",this.toProjection="WGS84"}return t.instance=function(){return new t},t.prototype.init=function(){console.debug("Initializing ReProjector"),n.default.defs("EPSG:3005",'PROJCS["NAD83 / BC Albers", GEOGCS["NAD83", DATUM["North_American_Datum_1983", SPHEROID["GRS 1980",6378137,298.257222101, AUTHORITY["EPSG","7019"]], TOWGS84[0,0,0,0,0,0,0], AUTHORITY["EPSG","6269"]], PRIMEM["Greenwich",0, AUTHORITY["EPSG","8901"]], UNIT["degree",0.0174532925199433, AUTHORITY["EPSG","9122"]], AUTHORITY["EPSG","4269"]], PROJECTION["Albers_Conic_Equal_Area"], PARAMETER["standard_parallel_1",50], PARAMETER["standard_parallel_2",58.5], PARAMETER["latitude_of_center",45], PARAMETER["longitude_of_center",-126], PARAMETER["false_easting",1000000], PARAMETER["false_northing",0], UNIT["metre",1, AUTHORITY["EPSG","9001"]], AXIS["Easting",EAST], AXIS["Northing",NORTH], AUTHORITY["EPSG","3005"]]'),n.default.defs("EPSG:3857","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"),n.default.defs("EPSG:3348","+proj=lcc +lat_1=49 +lat_2=77 +lat_0=63.390675 +lon_0=-91.86666666666666 +x_0=6200000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3979","+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3579","+proj=aea +lat_1=61.66666666666666 +lat_2=68 +lat_0=59 +lon_0=-132.5 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("EPSG:3402","+proj=tmerc +lat_0=0 +lon_0=-115 +k=0.9992 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"),n.default.defs("UTM7","+proj=utm +zone=7 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM8","+proj=utm +zone=8 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM9","+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM10","+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM11","+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM12","+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM13","+proj=utm +zone=13 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM14","+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs"),n.default.defs("UTM15","+proj=utm +zone=15 +datum=WGS84 +units=m +no_defs")},t.prototype.addDefinition=function(t,e){return console.debug("Adding definition "+t+" - "+e),n.default.defs(t,e),this},t.prototype.feature=function(t){return console.debug("Source Feature set"),this.sourceFeature=t,this},t.prototype.from=function(t){return console.debug("Projecting from "+t),this.fromProjection=t,this},t.prototype.to=function(t){return console.debug("Projecting to "+t),this.toProjection=t,this},t.prototype.addDefinitionFromEpsgIo=function(t){return(0,r.__awaiter)(this,void 0,void 0,(function(){var e,i;return(0,r.__generator)(this,(function(r){switch(r.label){case 0:return e=t.trim().includes(":")?t.split(":")[1].trim():t.trim(),[4,new Promise((function(t,i){a.default.get("https://epsg.io/"+e+".proj4",(function(e){var i="";e.on("data",(function(t){i+=t})),e.on("end",(function(){t(i)}))})).on("error",(function(t){i(t)}))}))];case 1:if(!((i=r.sent())&&i.length>0))throw new Error('Could not find definition for "'+t+'"');return this.addDefinition(t,i),[2,i]}}))}))},t.prototype.project=function(){return(0,r.__awaiter)(this,void 0,void 0,(function(){var t,e,i,n,a,o,h,u,l,c,f;return(0,r.__generator)(this,(function(r){if(console.debug("Starting projection"),!this.sourceFeature)throw console.error("No feature to project! Stopping"),new Error("Invalid Source Feature");t=null;try{if("FeatureCollection"===(t=(0,s.default)(this.sourceFeature)).type)for(e=0,i=t.features;e<i.length;e++)if("GeometryCollection"===(n=i[e]).geometry.type)for(a=0,o=n.geometry.geometries;a<o.length;a++)f=o[a],this.projectGeometry(f);else this.projectGeometry(n.geometry);else if("GeometryCollection"===t.type)for(h=0,u=t.geometries;h<u.length;h++)f=u[h],this.projectGeometry(f);else if("Feature"===t.type&&"GeometryCollection"===t.geometry.type)for(l=0,c=t.geometry.geometries;l<c.length;l++)f=c[l],this.projectGeometry(f);else"Feature"===t.type?this.projectGeometry(t.geometry):this.projectGeometry(t)}catch(t){console.error("Failed to reproject feature: "+t)}return[2,t]}))}))},t.prototype.projectGeometry=function(t){switch(t.type){case"Point":this.projectPoint(t.coordinates);break;case"LineString":case"MultiPoint":this.projectLineString(t.coordinates);break;case"Polygon":case"MultiLineString":this.projectPolygon(t.coordinates);break;case"MultiPolygon":for(var e=0,i=t.coordinates;e<i.length;e++){var r=i[e];this.projectPolygon(r)}break;default:console.error("No valid type found for this geometry. Projection cancelled"),console.error(t)}},t.prototype.projectPolygon=function(t){for(var e=0;e<t.length;e++)this.projectLineString(t[e])},t.prototype.projectLineString=function(t){for(var e=0;e<t.length;e++)this.projectPoint(t[e])},t.prototype.projectPoint=function(t){for(var e=(0,n.default)(this.fromProjection,this.toProjection,t),i=0;i<e.length;i++)t[i]=e[i]},t}();e.ReProjector=h},433:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpatialTransformers=void 0;var r,n=i(655),s=(r=i(741))&&r.__esModule?r:{default:r},a=i(649),o=function(){function t(){}return t.findInteriorRings=function(t){return(0,n.__awaiter)(this,void 0,void 0,(function(){var e,i,r,s,a,o;return(0,n.__generator)(this,(function(n){if(e=[],"Polygon"===(i="Feature"===t.type?t.geometry:t).type)for(o=1;o<i.coordinates.length;o++)e.push({type:"Polygon",coordinates:[i.coordinates[o]]});else if("MultiPolygon"===i.type)for(r=0,s=i.coordinates;r<s.length;r++)for(a=s[r],o=1;o<a.length;o++)e.push({type:"Polygon",coordinates:[a[o]]});return[2,e]}))}))},t.removeInteriorRings=function(t){return(0,n.__awaiter)(this,void 0,void 0,(function(){var e,i,r;return(0,n.__generator)(this,(function(n){if(e=(0,s.default)(t),"Polygon"===(i="Feature"===e.type?e.geometry:t).type)i.coordinates=[i.coordinates[0]];else if("MultiPolygon"===i.type)for(r=0;r<i.coordinates.length;r++)i.coordinates[r]=[i.coordinates[r][0]];return"Feature"===e.type&&(e.geometry=i),[2,e]}))}))},t.boundingBox=function(t){Array.isArray(t)||(t="FeatureCollection"===t.type?t.features:[t]);for(var e=1/0,i=-1/0,r=1/0,n=-1/0,s=0,a=t;s<a.length;s++){var o,h=a[s];switch((o="GeometryCollection"===h.geometry.type?this.boundingBox(h.geometry.geometries.map((function(t){return{type:"Feature",geometry:t,properties:{}}}))):h.geometry).type){case"Point":e=e>o.coordinates[0]?o.coordinates[0]:e,i=i<o.coordinates[0]?o.coordinates[0]:i,r=r>o.coordinates[1]?o.coordinates[1]:r,n=n<o.coordinates[1]?o.coordinates[1]:n;break;case"LineString":case"MultiPoint":for(var u=0,l=o.coordinates;u<l.length;u++)e=e>(_=l[u])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n;break;case"MultiLineString":case"Polygon":for(var c=0,f=o.coordinates;c<f.length;c++)for(var p=0,d=f[c];p<d.length;p++)e=e>(_=d[p])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n;break;case"MultiPolygon":for(var y=0,g=o.coordinates;y<g.length;y++)for(var m=0,M=g[y];m<M.length;m++)for(var b=0,v=M[m];b<v.length;b++){var _;e=e>(_=v[b])[0]?_[0]:e,i=i<_[0]?_[0]:i,r=r>_[1]?_[1]:r,n=n<_[1]?_[1]:n}}}return{type:"Polygon",bbox:[e,r,i,n],coordinates:[[[e,n],[i,n],[i,r],[e,r],[e,n]]]}},t.featureCentroid=function(t){var e=0,i=0,r=0;switch(t.geometry.type){case"Point":return t.geometry;case"LineString":case"MultiPoint":for(var n=0,s=t.geometry.coordinates;n<s.length;n++)e+=(g=s[n])[0],i+=g[1],r++;break;case"MultiLineString":case"Polygon":for(var a=0,o=t.geometry.coordinates;a<o.length;a++)for(var h=0,u=o[a];h<u.length;h++)e+=(g=u[h])[0],i+=g[1],r++;break;case"MultiPolygon":for(var l=0,c=t.geometry.coordinates;l<c.length;l++)for(var f=0,p=c[l];f<p.length;f++)for(var d=0,y=p[f];d<y.length;d++){var g;e+=(g=y[d])[0],i+=g[1],r++}break;case"GeometryCollection":for(var m=[],M=0,b=t.geometry.geometries;M<b.length;M++){var v=b[M];m.push(this.featureCentroid({type:"Feature",geometry:v,properties:null}).coordinates)}return this.featureCentroid({type:"Feature",geometry:{type:"MultiPoint",coordinates:m},properties:null})}return{type:"Point",coordinates:[e/r,i/r]}},t.reducePrecision=function(t,e){var i=(0,s.default)(t);switch("Feature"!==i.type&&(i={type:"Feature",geometry:i,properties:null}),i.geometry.type){case"Point":i.geometry.coordinates=a.SpatialUtils.reduceCoordinatePrecision(i.geometry.coordinates,e);break;case"LineString":case"MultiPoint":for(var r=0;r<i.geometry.coordinates.length;r++)i.geometry.coordinates[r]=a.SpatialUtils.reduceCoordinatePrecision(i.geometry.coordinates[r],e);break;case"MultiLineString":case"Polygon":for(var n=0,o=i.geometry.coordinates;n<o.length;n++){var h=o[n];for(r=0;r<h.length;r++)h[r]=a.SpatialUtils.reduceCoordinatePrecision(h[r],e)}break;case"MultiPolygon":for(var u=0,l=i.geometry.coordinates;u<l.length;u++)for(var c=0,f=l[u];c<f.length;c++)for(h=f[c],r=0;r<h.length;r++)h[r]=a.SpatialUtils.reduceCoordinatePrecision(h[r],e);break;case"GeometryCollection":for(r=0;r<i.geometry.geometries.length;r++)i.geometry.geometries[r]=this.reducePrecision(i.geometry.geometries[r],e)}return"Feature"!==t.type?i.geometry:i},t.explodeVertices=function(t){var e=(0,s.default)(t);"Feature"!==e.type&&(e={type:"Feature",geometry:e,properties:null});var i=[];switch(e.geometry.type){case"Point":i.push(e.geometry.coordinates);break;case"LineString":case"MultiPoint":i.push.apply(i,e.geometry.coordinates);break;case"MultiLineString":case"Polygon":for(var r=0,n=e.geometry.coordinates;r<n.length;r++){var a=n[r];i.push.apply(i,a)}break;case"MultiPolygon":for(var o=0,h=e.geometry.coordinates;o<h.length;o++)for(var u=0,l=h[o];u<l.length;u++)a=l[u],i.push.apply(i,a);break;case"GeometryCollection":for(var c=0,f=e.geometry.geometries;c<f.length;c++){var p=f[c];i.push.apply(i,this.explodeVertices(p))}}return i},t.convexHull=function(t){var e=[];if(Array.isArray(t)||"FeatureCollection"!==t.type)if(Array.isArray(t))for(var i=0,r=t;i<r.length;i++){var n=r[i];Object.prototype.hasOwnProperty.call(n,"coordinates")||Object.prototype.hasOwnProperty.call(n,"geometry")?e.push.apply(e,this.explodeVertices(n)):e.push(n)}else e.push.apply(e,this.explodeVertices(t));else for(var s=0,o=t.features;s<o.length;s++){var h=o[s];e.push.apply(e,this.explodeVertices(h))}if(e.length<=1)return{type:"Polygon",coordinates:[]};e.sort(a.SpatialUtils.compareCoordinates);for(var u=[],l=0,c=e;l<c.length;l++){for(var f=c[l];u.length>=2&&(u[u.length-1][0]-u[u.length-2][0])*(f[1]-u[u.length-2][1])>=(u[u.length-1][1]-u[u.length-2][1])*(f[0]-u[u.length-2][0]);)u.pop();u.push(f)}u.pop();for(var p=[],d=e.length-1;d>=0;d--){for(f=e[d];p.length>=2&&(p[p.length-1][0]-p[p.length-2][0])*(f[1]-p[p.length-2][1])>=(p[p.length-1][1]-p[p.length-2][1])*(f[0]-p[p.length-2][0]);)p.pop();p.push(f)}return p.pop(),1==u.length&&1==p.length&&u[0][0]==p[0][0]&&u[0][1]==p[0][1]?{type:"Polygon",coordinates:[u]}:{type:"Polygon",coordinates:[u.concat(p)]}},t.circlePoly=function(t,e,i){void 0===i&&(i=88);for(var r=[],n=0;n<i;n++)r.push(a.SpatialUtils.destinationPoint(t,e,-360*n/i));return r.push(r[0]),{type:"Polygon",coordinates:[r]}},t}();e.SpatialTransformers=o},649:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.utmZone=function(t,e){var i=Math.floor((e+180)/6)+1;return t>=56&&t<64&&e>=3&&e<12&&(i=32),t>=72&&t<84&&(e>=0&&e<9?i=31:e>=9&&e<21?i=33:e>=21&&e<33?i=35:e>=33&&e<42&&(i=37)),i},t.utmLetterDesignation=function(t){return-80<=t&&t<=84?"CDEFGHJKLMNPQRSTUVWXX"[Math.floor((t+80)/8)]:"Z"},t.utmZoneString=function(t,e){return"UTM"+this.utmZone(t,e)+this.utmLetterDesignation(t)},t.ddToDmsString=function(t,e,i){void 0===i&&(i=2);var r=Math.trunc(t),n=Math.floor(60*(Math.abs(t)-Math.abs(r))),s=this.reducePrecision(3600*(Math.abs(t)-Math.abs(r)-n/60),i);return s>=60&&(s-=60,n+=1),e?r+"° "+n+"' "+s+'"':r+" "+n+" "+s},t.dmsToDdString=function(t,e){void 0===e&&(e=6);var i=t.split(" ");if(i.length<3)return Number.NaN;var r=parseInt(i[0].replace(/[^0-9.-]/g,"")),n=parseInt(i[1].replace(/[^0-9.-]/g,"")),s=parseFloat(i[2].replace(/[^0-9.-]/g,""));if(isNaN(r)||isNaN(n)||isNaN(s))return Number.NaN;var a=Math.abs(r)+n/60+s/3600;r<0&&(a*=-1);var o=a.toString().split(".");return o.length>1&&o[1].length>5?parseFloat(a.toFixed(e)):a},t.latLonToDmsString=function(t,e,i){return{latitudeDMS:this.ddToDmsString(t,i)+" "+(t<0?"S":"N"),longitudeDMS:this.ddToDmsString(e,i)+" "+(e<0?"W":"E")}},t.haversineDistance=function(t,e){var i=this.degreesToRadians(e[1]-t[1]),r=this.degreesToRadians(e[0]-t[0]),n=this.degreesToRadians(t[1]),s=this.degreesToRadians(e[1]),a=Math.sin(i/2)*Math.sin(i/2)+Math.cos(n)*Math.cos(s)*Math.sin(r/2)*Math.sin(r/2),o=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return this.RADIUS*o},t.lineLength=function(t){for(var e=0,i=0,r="LineString"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=null,s=0,a=r[i];s<a.length;s++){var o=a[s];n?(e+=this.haversineDistance(n,o),n=o):n=o}return e},t.polygonPerimeter=function(t){for(var e=0,i=0,r="Polygon"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=0,s=r[i];n<s.length;n++){for(var a=null,o=null,h=0,u=s[n];h<u.length;h++){var l=u[h];o?(e+=this.haversineDistance(o,l),o=l):(a=l,o=l)}o&&a&&(o[0]!=a[0]||o[1]!=a[1])&&(e+=this.haversineDistance(o,a))}return e},t.polygonArea=function(t){for(var e=0,i=0,r="Polygon"===t.type?[t.coordinates]:t.coordinates;i<r.length;i++)for(var n=r[i],s=0;s<n.length;s++){var a=Math.abs(this.polygonRingArea(n[s]));e+=0===s?a:-a}return e},t.polygonRingArea=function(t){var e=0;if(t.length>2){for(var i=0;i<t.length;i++){var r=void 0,n=void 0,s=void 0;i===t.length-2?(r=t.length-2,n=t.length-1,s=0):i===t.length-1?(r=t.length-1,n=0,s=1):(r=i,n=i+1,s=i+2);var a=t[r],o=t[n],h=t[s];e+=(this.degreesToRadians(h[0])-this.degreesToRadians(a[0]))*Math.sin(this.degreesToRadians(o[1]))}e=e*this.RADIUS*this.RADIUS/2}return e},t.degreesToRadians=function(t){return t*Math.PI/180},t.radiansToDegrees=function(t){return t*(180/Math.PI)},t.reducePrecision=function(t,e){return parseFloat(t.toFixed(e))},t.reduceCoordinatePrecision=function(t,e){return[this.reducePrecision(t[0],e),this.reducePrecision(t[1],e)]},t.compareCoordinates=function(t,e){return t[0]<e[0]?-1:t[0]>e[0]?1:t[1]<e[1]?-1:t[1]>e[1]?1:0},t.midPoint=function(t,e){return[(t[0]+e[0])/2,(t[1]+e[1])/2]},t.midpointGeodesic=function(t,e){var i=this.haversineDistance(t,e),r=this.bearing(t,e);return this.destinationPoint(t,i/2,r)},t.bearing=function(t,e){var i=this.degreesToRadians(t[0]),r=this.degreesToRadians(e[0]),n=this.degreesToRadians(t[1]),s=this.degreesToRadians(e[1]),a=Math.sin(r-i)*Math.cos(s),o=Math.cos(n)*Math.sin(s)-Math.sin(n)*Math.cos(s)*Math.cos(r-i);return this.radiansToDegrees(Math.atan2(a,o))},t.destinationPoint=function(t,e,i){var r=this.degreesToRadians(t[0]),n=this.degreesToRadians(t[1]),s=this.degreesToRadians(i),a=e/this.RADIUS,o=Math.asin(Math.sin(n)*Math.cos(a)+Math.cos(n)*Math.sin(a)*Math.cos(s)),h=r+Math.atan2(Math.sin(s)*Math.sin(a)*Math.cos(n),Math.cos(a)-Math.sin(n)*Math.sin(o));return[this.radiansToDegrees(h),this.radiansToDegrees(o)]},t.RADIUS=6371008.7714,t}();e.SpatialUtils=i},45:(t,e,i)=>{"use strict";i(908),i(649),i(497),i(433)},742:(t,e)=>{"use strict";e.byteLength=function(t){var e=h(t),i=e[0],r=e[1];return 3*(i+r)/4-r},e.toByteArray=function(t){var e,i,s=h(t),a=s[0],o=s[1],u=new n(function(t,e,i){return 3*(e+i)/4-i}(0,a,o)),l=0,c=o>0?a-4:a;for(i=0;i<c;i+=4)e=r[t.charCodeAt(i)]<<18|r[t.charCodeAt(i+1)]<<12|r[t.charCodeAt(i+2)]<<6|r[t.charCodeAt(i+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;return 2===o&&(e=r[t.charCodeAt(i)]<<2|r[t.charCodeAt(i+1)]>>4,u[l++]=255&e),1===o&&(e=r[t.charCodeAt(i)]<<10|r[t.charCodeAt(i+1)]<<4|r[t.charCodeAt(i+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e),u},e.fromByteArray=function(t){for(var e,r=t.length,n=r%3,s=[],a=16383,o=0,h=r-n;o<h;o+=a)s.push(u(t,o,o+a>h?h:o+a));return 1===n?(e=t[r-1],s.push(i[e>>2]+i[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],s.push(i[e>>10]+i[e>>4&63]+i[e<<2&63]+"=")),s.join("")};for(var i=[],r=[],n="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,o=s.length;a<o;++a)i[a]=s[a],r[s.charCodeAt(a)]=a;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=t.indexOf("=");return-1===i&&(i=e),[i,i===e?0:4-i%4]}function u(t,e,r){for(var n,s,a=[],o=e;o<r;o+=3)n=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),a.push(i[(s=n)>>18&63]+i[s>>12&63]+i[s>>6&63]+i[63&s]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},764:(t,e,i)=>{"use strict";const r=i(742),n=i(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=h,e.SlowBuffer=function(t){return+t!=t&&(t=0),h.alloc(+t)},e.INSPECT_MAX_BYTES=50;const a=2147483647;function o(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,h.prototype),e}function h(t,e,i){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return u(t,e,i)}function u(t,e,i){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!h.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const i=0|y(t,e);let r=o(i);const n=r.write(t,e);return n!==i&&(r=r.slice(0,n)),r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Y(t,Uint8Array)){const e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return f(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Y(t,ArrayBuffer)||t&&Y(t.buffer,ArrayBuffer))return p(t,e,i);if("undefined"!=typeof SharedArrayBuffer&&(Y(t,SharedArrayBuffer)||t&&Y(t.buffer,SharedArrayBuffer)))return p(t,e,i);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return h.from(r,e,i);const n=function(t){if(h.isBuffer(t)){const e=0|d(t.length),i=o(e);return 0===i.length||t.copy(i,0,0,e),i}return void 0!==t.length?"number"!=typeof t.length||$(t.length)?o(0):f(t):"Buffer"===t.type&&Array.isArray(t.data)?f(t.data):void 0}(t);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return h.from(t[Symbol.toPrimitive]("string"),e,i);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return l(t),o(t<0?0:0|d(t))}function f(t){const e=t.length<0?0:0|d(t.length),i=o(e);for(let r=0;r<e;r+=1)i[r]=255&t[r];return i}function p(t,e,i){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(i||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===e&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,e):new Uint8Array(t,e,i),Object.setPrototypeOf(r,h.prototype),r}function d(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function y(t,e){if(h.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Y(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const i=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===i)return 0;let n=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return Q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return V(t).length;default:if(n)return r?-1:Q(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,i){let r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return C(this,e,i);case"utf8":case"utf-8":return R(this,e,i);case"ascii":return T(this,e,i);case"latin1":case"binary":return O(this,e,i);case"base64":return E(this,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,i);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,i){const r=t[e];t[e]=t[i],t[i]=r}function M(t,e,i,r,n){if(0===t.length)return-1;if("string"==typeof i?(r=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),$(i=+i)&&(i=n?0:t.length-1),i<0&&(i=t.length+i),i>=t.length){if(n)return-1;i=t.length-1}else if(i<0){if(!n)return-1;i=0}if("string"==typeof e&&(e=h.from(e,r)),h.isBuffer(e))return 0===e.length?-1:b(t,e,i,r,n);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,e,i):Uint8Array.prototype.lastIndexOf.call(t,e,i):b(t,[e],i,r,n);throw new TypeError("val must be string, number or Buffer")}function b(t,e,i,r,n){let s,a=1,o=t.length,h=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,o/=2,h/=2,i/=2}function u(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(n){let r=-1;for(s=i;s<o;s++)if(u(t,s)===u(e,-1===r?0:s-r)){if(-1===r&&(r=s),s-r+1===h)return r*a}else-1!==r&&(s-=s-r),r=-1}else for(i+h>o&&(i=o-h),s=i;s>=0;s--){let i=!0;for(let r=0;r<h;r++)if(u(t,s+r)!==u(e,r)){i=!1;break}if(i)return s}return-1}function v(t,e,i,r){i=Number(i)||0;const n=t.length-i;r?(r=Number(r))>n&&(r=n):r=n;const s=e.length;let a;for(r>s/2&&(r=s/2),a=0;a<r;++a){const r=parseInt(e.substr(2*a,2),16);if($(r))return a;t[i+a]=r}return a}function _(t,e,i,r){return X(Q(e,t.length-i),t,i,r)}function w(t,e,i,r){return X(function(t){const e=[];for(let i=0;i<t.length;++i)e.push(255&t.charCodeAt(i));return e}(e),t,i,r)}function x(t,e,i,r){return X(V(e),t,i,r)}function S(t,e,i,r){return X(function(t,e){let i,r,n;const s=[];for(let a=0;a<t.length&&!((e-=2)<0);++a)i=t.charCodeAt(a),r=i>>8,n=i%256,s.push(n),s.push(r);return s}(e,t.length-i),t,i,r)}function E(t,e,i){return 0===e&&i===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,i))}function R(t,e,i){i=Math.min(t.length,i);const r=[];let n=e;for(;n<i;){const e=t[n];let s=null,a=e>239?4:e>223?3:e>191?2:1;if(n+a<=i){let i,r,o,h;switch(a){case 1:e<128&&(s=e);break;case 2:i=t[n+1],128==(192&i)&&(h=(31&e)<<6|63&i,h>127&&(s=h));break;case 3:i=t[n+1],r=t[n+2],128==(192&i)&&128==(192&r)&&(h=(15&e)<<12|(63&i)<<6|63&r,h>2047&&(h<55296||h>57343)&&(s=h));break;case 4:i=t[n+1],r=t[n+2],o=t[n+3],128==(192&i)&&128==(192&r)&&128==(192&o)&&(h=(15&e)<<18|(63&i)<<12|(63&r)<<6|63&o,h>65535&&h<1114112&&(s=h))}}null===s?(s=65533,a=1):s>65535&&(s-=65536,r.push(s>>>10&1023|55296),s=56320|1023&s),r.push(s),n+=a}return function(t){const e=t.length;if(e<=P)return String.fromCharCode.apply(String,t);let i="",r=0;for(;r<e;)i+=String.fromCharCode.apply(String,t.slice(r,r+=P));return i}(r)}e.kMaxLength=a,h.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),h.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(h.prototype,"parent",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.buffer}}),Object.defineProperty(h.prototype,"offset",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.byteOffset}}),h.poolSize=8192,h.from=function(t,e,i){return u(t,e,i)},Object.setPrototypeOf(h.prototype,Uint8Array.prototype),Object.setPrototypeOf(h,Uint8Array),h.alloc=function(t,e,i){return function(t,e,i){return l(t),t<=0?o(t):void 0!==e?"string"==typeof i?o(t).fill(e,i):o(t).fill(e):o(t)}(t,e,i)},h.allocUnsafe=function(t){return c(t)},h.allocUnsafeSlow=function(t){return c(t)},h.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==h.prototype},h.compare=function(t,e){if(Y(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),Y(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),!h.isBuffer(t)||!h.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let i=t.length,r=e.length;for(let n=0,s=Math.min(i,r);n<s;++n)if(t[n]!==e[n]){i=t[n],r=e[n];break}return i<r?-1:r<i?1:0},h.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return h.alloc(0);let i;if(void 0===e)for(e=0,i=0;i<t.length;++i)e+=t[i].length;const r=h.allocUnsafe(e);let n=0;for(i=0;i<t.length;++i){let e=t[i];if(Y(e,Uint8Array))n+e.length>r.length?(h.isBuffer(e)||(e=h.from(e)),e.copy(r,n)):Uint8Array.prototype.set.call(r,e,n);else{if(!h.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(r,n)}n+=e.length}return r},h.byteLength=y,h.prototype._isBuffer=!0,h.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)m(this,e,e+1);return this},h.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},h.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},h.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?R(this,0,t):g.apply(this,arguments)},h.prototype.toLocaleString=h.prototype.toString,h.prototype.equals=function(t){if(!h.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===h.compare(this,t)},h.prototype.inspect=function(){let t="";const i=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,i).replace(/(.{2})/g,"$1 ").trim(),this.length>i&&(t+=" ... "),"<Buffer "+t+">"},s&&(h.prototype[s]=h.prototype.inspect),h.prototype.compare=function(t,e,i,r,n){if(Y(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),!h.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===i&&(i=t?t.length:0),void 0===r&&(r=0),void 0===n&&(n=this.length),e<0||i>t.length||r<0||n>this.length)throw new RangeError("out of range index");if(r>=n&&e>=i)return 0;if(r>=n)return-1;if(e>=i)return 1;if(this===t)return 0;let s=(n>>>=0)-(r>>>=0),a=(i>>>=0)-(e>>>=0);const o=Math.min(s,a),u=this.slice(r,n),l=t.slice(e,i);for(let t=0;t<o;++t)if(u[t]!==l[t]){s=u[t],a=l[t];break}return s<a?-1:a<s?1:0},h.prototype.includes=function(t,e,i){return-1!==this.indexOf(t,e,i)},h.prototype.indexOf=function(t,e,i){return M(this,t,e,i,!0)},h.prototype.lastIndexOf=function(t,e,i){return M(this,t,e,i,!1)},h.prototype.write=function(t,e,i,r){if(void 0===e)r="utf8",i=this.length,e=0;else if(void 0===i&&"string"==typeof e)r=e,i=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(i)?(i>>>=0,void 0===r&&(r="utf8")):(r=i,i=void 0)}const n=this.length-e;if((void 0===i||i>n)&&(i=n),t.length>0&&(i<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let s=!1;for(;;)switch(r){case"hex":return v(this,t,e,i);case"utf8":case"utf-8":return _(this,t,e,i);case"ascii":case"latin1":case"binary":return w(this,t,e,i);case"base64":return x(this,t,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,i);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const P=4096;function T(t,e,i){let r="";i=Math.min(t.length,i);for(let n=e;n<i;++n)r+=String.fromCharCode(127&t[n]);return r}function O(t,e,i){let r="";i=Math.min(t.length,i);for(let n=e;n<i;++n)r+=String.fromCharCode(t[n]);return r}function C(t,e,i){const r=t.length;(!e||e<0)&&(e=0),(!i||i<0||i>r)&&(i=r);let n="";for(let r=e;r<i;++r)n+=J[t[r]];return n}function k(t,e,i){const r=t.slice(e,i);let n="";for(let t=0;t<r.length-1;t+=2)n+=String.fromCharCode(r[t]+256*r[t+1]);return n}function A(t,e,i){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>i)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,i,r,n,s){if(!h.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<s)throw new RangeError('"value" argument is out of bounds');if(i+r>t.length)throw new RangeError("Index out of range")}function N(t,e,i,r,n){F(e,r,n,t,i,7);let s=Number(e&BigInt(4294967295));t[i++]=s,s>>=8,t[i++]=s,s>>=8,t[i++]=s,s>>=8,t[i++]=s;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,a>>=8,t[i++]=a,i}function L(t,e,i,r,n){F(e,r,n,t,i,7);let s=Number(e&BigInt(4294967295));t[i+7]=s,s>>=8,t[i+6]=s,s>>=8,t[i+5]=s,s>>=8,t[i+4]=s;let a=Number(e>>BigInt(32)&BigInt(4294967295));return t[i+3]=a,a>>=8,t[i+2]=a,a>>=8,t[i+1]=a,a>>=8,t[i]=a,i+8}function j(t,e,i,r,n,s){if(i+r>t.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function U(t,e,i,r,s){return e=+e,i>>>=0,s||j(t,0,i,4),n.write(t,e,i,r,23,4),i+4}function q(t,e,i,r,s){return e=+e,i>>>=0,s||j(t,0,i,8),n.write(t,e,i,r,52,8),i+8}h.prototype.slice=function(t,e){const i=this.length;(t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(e=void 0===e?i:~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),e<t&&(e=t);const r=this.subarray(t,e);return Object.setPrototypeOf(r,h.prototype),r},h.prototype.readUintLE=h.prototype.readUIntLE=function(t,e,i){t>>>=0,e>>>=0,i||A(t,e,this.length);let r=this[t],n=1,s=0;for(;++s<e&&(n*=256);)r+=this[t+s]*n;return r},h.prototype.readUintBE=h.prototype.readUIntBE=function(t,e,i){t>>>=0,e>>>=0,i||A(t,e,this.length);let r=this[t+--e],n=1;for(;e>0&&(n*=256);)r+=this[t+--e]*n;return r},h.prototype.readUint8=h.prototype.readUInt8=function(t,e){return t>>>=0,e||A(t,1,this.length),this[t]},h.prototype.readUint16LE=h.prototype.readUInt16LE=function(t,e){return t>>>=0,e||A(t,2,this.length),this[t]|this[t+1]<<8},h.prototype.readUint16BE=h.prototype.readUInt16BE=function(t,e){return t>>>=0,e||A(t,2,this.length),this[t]<<8|this[t+1]},h.prototype.readUint32LE=h.prototype.readUInt32LE=function(t,e){return t>>>=0,e||A(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},h.prototype.readUint32BE=h.prototype.readUInt32BE=function(t,e){return t>>>=0,e||A(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},h.prototype.readBigUInt64LE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,n=this[++t]+256*this[++t]+65536*this[++t]+i*2**24;return BigInt(r)+(BigInt(n)<<BigInt(32))})),h.prototype.readBigUInt64BE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=e*2**24+65536*this[++t]+256*this[++t]+this[++t],n=this[++t]*2**24+65536*this[++t]+256*this[++t]+i;return(BigInt(r)<<BigInt(32))+BigInt(n)})),h.prototype.readIntLE=function(t,e,i){t>>>=0,e>>>=0,i||A(t,e,this.length);let r=this[t],n=1,s=0;for(;++s<e&&(n*=256);)r+=this[t+s]*n;return n*=128,r>=n&&(r-=Math.pow(2,8*e)),r},h.prototype.readIntBE=function(t,e,i){t>>>=0,e>>>=0,i||A(t,e,this.length);let r=e,n=1,s=this[t+--r];for(;r>0&&(n*=256);)s+=this[t+--r]*n;return n*=128,s>=n&&(s-=Math.pow(2,8*e)),s},h.prototype.readInt8=function(t,e){return t>>>=0,e||A(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},h.prototype.readInt16LE=function(t,e){t>>>=0,e||A(t,2,this.length);const i=this[t]|this[t+1]<<8;return 32768&i?4294901760|i:i},h.prototype.readInt16BE=function(t,e){t>>>=0,e||A(t,2,this.length);const i=this[t+1]|this[t]<<8;return 32768&i?4294901760|i:i},h.prototype.readInt32LE=function(t,e){return t>>>=0,e||A(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},h.prototype.readInt32BE=function(t,e){return t>>>=0,e||A(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},h.prototype.readBigInt64LE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=this[t+4]+256*this[t+5]+65536*this[t+6]+(i<<24);return(BigInt(r)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),h.prototype.readBigInt64BE=K((function(t){W(t>>>=0,"offset");const e=this[t],i=this[t+7];void 0!==e&&void 0!==i||z(t,this.length-8);const r=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(r)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+i)})),h.prototype.readFloatLE=function(t,e){return t>>>=0,e||A(t,4,this.length),n.read(this,t,!0,23,4)},h.prototype.readFloatBE=function(t,e){return t>>>=0,e||A(t,4,this.length),n.read(this,t,!1,23,4)},h.prototype.readDoubleLE=function(t,e){return t>>>=0,e||A(t,8,this.length),n.read(this,t,!0,52,8)},h.prototype.readDoubleBE=function(t,e){return t>>>=0,e||A(t,8,this.length),n.read(this,t,!1,52,8)},h.prototype.writeUintLE=h.prototype.writeUIntLE=function(t,e,i,r){t=+t,e>>>=0,i>>>=0,r||I(this,t,e,i,Math.pow(2,8*i)-1,0);let n=1,s=0;for(this[e]=255&t;++s<i&&(n*=256);)this[e+s]=t/n&255;return e+i},h.prototype.writeUintBE=h.prototype.writeUIntBE=function(t,e,i,r){t=+t,e>>>=0,i>>>=0,r||I(this,t,e,i,Math.pow(2,8*i)-1,0);let n=i-1,s=1;for(this[e+n]=255&t;--n>=0&&(s*=256);)this[e+n]=t/s&255;return e+i},h.prototype.writeUint8=h.prototype.writeUInt8=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,1,255,0),this[e]=255&t,e+1},h.prototype.writeUint16LE=h.prototype.writeUInt16LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeUint16BE=h.prototype.writeUInt16BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeUint32LE=h.prototype.writeUInt32LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},h.prototype.writeUint32BE=h.prototype.writeUInt32BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigUInt64LE=K((function(t,e=0){return N(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeBigUInt64BE=K((function(t,e=0){return L(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeIntLE=function(t,e,i,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*i-1);I(this,t,e,i,r-1,-r)}let n=0,s=1,a=0;for(this[e]=255&t;++n<i&&(s*=256);)t<0&&0===a&&0!==this[e+n-1]&&(a=1),this[e+n]=(t/s>>0)-a&255;return e+i},h.prototype.writeIntBE=function(t,e,i,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*i-1);I(this,t,e,i,r-1,-r)}let n=i-1,s=1,a=0;for(this[e+n]=255&t;--n>=0&&(s*=256);)t<0&&0===a&&0!==this[e+n+1]&&(a=1),this[e+n]=(t/s>>0)-a&255;return e+i},h.prototype.writeInt8=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},h.prototype.writeInt16LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeInt16BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeInt32LE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},h.prototype.writeInt32BE=function(t,e,i){return t=+t,e>>>=0,i||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigInt64LE=K((function(t,e=0){return N(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeBigInt64BE=K((function(t,e=0){return L(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeFloatLE=function(t,e,i){return U(this,t,e,!0,i)},h.prototype.writeFloatBE=function(t,e,i){return U(this,t,e,!1,i)},h.prototype.writeDoubleLE=function(t,e,i){return q(this,t,e,!0,i)},h.prototype.writeDoubleBE=function(t,e,i){return q(this,t,e,!1,i)},h.prototype.copy=function(t,e,i,r){if(!h.isBuffer(t))throw new TypeError("argument should be a Buffer");if(i||(i=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<i&&(r=i),r===i)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-i&&(r=t.length-e+i);const n=r-i;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,i,r):Uint8Array.prototype.set.call(t,this.subarray(i,r),e),n},h.prototype.fill=function(t,e,i,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,i=this.length):"string"==typeof i&&(r=i,i=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!h.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){const e=t.charCodeAt(0);("utf8"===r&&e<128||"latin1"===r)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<i)throw new RangeError("Out of range index");if(i<=e)return this;let n;if(e>>>=0,i=void 0===i?this.length:i>>>0,t||(t=0),"number"==typeof t)for(n=e;n<i;++n)this[n]=t;else{const s=h.isBuffer(t)?t:h.from(t,r),a=s.length;if(0===a)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(n=0;n<i-e;++n)this[n+e]=s[n%a]}return this};const B={};function G(t,e,i){B[t]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function D(t){let e="",i=t.length;const r="-"===t[0]?1:0;for(;i>=r+4;i-=3)e=`_${t.slice(i-3,i)}${e}`;return`${t.slice(0,i)}${e}`}function F(t,e,i,r,n,s){if(t>i||t<e){const r="bigint"==typeof e?"n":"";let n;throw n=s>3?0===e||e===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(s+1)}${r}`:`>= -(2${r} ** ${8*(s+1)-1}${r}) and < 2 ** ${8*(s+1)-1}${r}`:`>= ${e}${r} and <= ${i}${r}`,new B.ERR_OUT_OF_RANGE("value",n,t)}!function(t,e,i){W(e,"offset"),void 0!==t[e]&&void 0!==t[e+i]||z(e,t.length-(i+1))}(r,n,s)}function W(t,e){if("number"!=typeof t)throw new B.ERR_INVALID_ARG_TYPE(e,"number",t)}function z(t,e,i){if(Math.floor(t)!==t)throw W(t,i),new B.ERR_OUT_OF_RANGE(i||"offset","an integer",t);if(e<0)throw new B.ERR_BUFFER_OUT_OF_BOUNDS;throw new B.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${e}`,t)}G("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),G("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),G("ERR_OUT_OF_RANGE",(function(t,e,i){let r=`The value of "${t}" is out of range.`,n=i;return Number.isInteger(i)&&Math.abs(i)>2**32?n=D(String(i)):"bigint"==typeof i&&(n=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(n=D(n)),n+="n"),r+=` It must be ${e}. Received ${n}`,r}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function Q(t,e){let i;e=e||1/0;const r=t.length;let n=null;const s=[];for(let a=0;a<r;++a){if(i=t.charCodeAt(a),i>55295&&i<57344){if(!n){if(i>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&s.push(239,191,189);continue}n=i;continue}if(i<56320){(e-=3)>-1&&s.push(239,191,189),n=i;continue}i=65536+(n-55296<<10|i-56320)}else n&&(e-=3)>-1&&s.push(239,191,189);if(n=null,i<128){if((e-=1)<0)break;s.push(i)}else if(i<2048){if((e-=2)<0)break;s.push(i>>6|192,63&i|128)}else if(i<65536){if((e-=3)<0)break;s.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return s}function V(t){return r.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function X(t,e,i,r){let n;for(n=0;n<r&&!(n+i>=e.length||n>=t.length);++n)e[n+i]=t[n];return n}function Y(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function $(t){return t!=t}const J=function(){const t="0123456789abcdef",e=new Array(256);for(let i=0;i<16;++i){const r=16*i;for(let n=0;n<16;++n)e[r+n]=t[i]+t[n]}return e}();function K(t){return"undefined"==typeof BigInt?Z:t}function Z(){throw new Error("BigInt not supported")}},584:t=>{t.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},187:t=>{"use strict";var e,i="object"==typeof Reflect?Reflect:null,r=i&&"function"==typeof i.apply?i.apply:function(t,e,i){return Function.prototype.apply.call(t,e,i)};e=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var n=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,t.exports.once=function(t,e){return new Promise((function(i,r){function n(){void 0!==s&&t.removeListener("error",s),i([].slice.call(arguments))}var s;"error"!==e&&(s=function(i){t.removeListener(e,n),r(i)},t.once("error",s)),t.once(e,n)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var a=10;function o(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function h(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function u(t,e,i,r){var n,s,a,u;if(o(i),void 0===(s=t._events)?(s=t._events=Object.create(null),t._eventsCount=0):(void 0!==s.newListener&&(t.emit("newListener",e,i.listener?i.listener:i),s=t._events),a=s[e]),void 0===a)a=s[e]=i,++t._eventsCount;else if("function"==typeof a?a=s[e]=r?[i,a]:[a,i]:r?a.unshift(i):a.push(i),(n=h(t))>0&&a.length>n&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=a.length,u=l,console&&console.warn&&console.warn(u)}return t}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(t,e,i){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:i},n=l.bind(r);return n.listener=i,r.wrapFn=n,n}function f(t,e,i){var r=t._events;if(void 0===r)return[];var n=r[e];return void 0===n?[]:"function"==typeof n?i?[n.listener||n]:[n]:i?function(t){for(var e=new Array(t.length),i=0;i<e.length;++i)e[i]=t[i].listener||t[i];return e}(n):d(n,n.length)}function p(t){var e=this._events;if(void 0!==e){var i=e[t];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function d(t,e){for(var i=new Array(e),r=0;r<e;++r)i[r]=t[r];return i}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");a=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||n(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return h(this)},s.prototype.emit=function(t){for(var e=[],i=1;i<arguments.length;i++)e.push(arguments[i]);var n="error"===t,s=this._events;if(void 0!==s)n=n&&void 0===s.error;else if(!n)return!1;if(n){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var o=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw o.context=a,o}var h=s[t];if(void 0===h)return!1;if("function"==typeof h)r(h,this,e);else{var u=h.length,l=d(h,u);for(i=0;i<u;++i)r(l[i],this,e)}return!0},s.prototype.addListener=function(t,e){return u(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return u(this,t,e,!0)},s.prototype.once=function(t,e){return o(e),this.on(t,c(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return o(e),this.prependListener(t,c(this,t,e)),this},s.prototype.removeListener=function(t,e){var i,r,n,s,a;if(o(e),void 0===(r=this._events))return this;if(void 0===(i=r[t]))return this;if(i===e||i.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,i.listener||e));else if("function"!=typeof i){for(n=-1,s=i.length-1;s>=0;s--)if(i[s]===e||i[s].listener===e){a=i[s].listener,n=s;break}if(n<0)return this;0===n?i.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(i,n),1===i.length&&(r[t]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[t]),this;if(0===arguments.length){var n,s=Object.keys(i);for(r=0;r<s.length;++r)"removeListener"!==(n=s[r])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=i[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return f(this,t,!0)},s.prototype.rawListeners=function(t){return f(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},267:(t,e,i)=>{var r=i(501),n=i(575),s=t.exports;for(var a in r)r.hasOwnProperty(a)&&(s[a]=r[a]);function o(t){if("string"==typeof t&&(t=n.parse(t)),t.protocol||(t.protocol="https:"),"https:"!==t.protocol)throw new Error('Protocol "'+t.protocol+'" not supported. Expected "https:"');return t}s.request=function(t,e){return t=o(t),r.request.call(this,t,e)},s.get=function(t,e){return t=o(t),r.get.call(this,t,e)}},645:(t,e)=>{e.read=function(t,e,i,r,n){var s,a,o=8*n-r-1,h=(1<<o)-1,u=h>>1,l=-7,c=i?n-1:0,f=i?-1:1,p=t[e+c];for(c+=f,s=p&(1<<-l)-1,p>>=-l,l+=o;l>0;s=256*s+t[e+c],c+=f,l-=8);for(a=s&(1<<-l)-1,s>>=-l,l+=r;l>0;a=256*a+t[e+c],c+=f,l-=8);if(0===s)s=1-u;else{if(s===h)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,r),s-=u}return(p?-1:1)*a*Math.pow(2,s-r)},e.write=function(t,e,i,r,n,s){var a,o,h,u=8*s-n-1,l=(1<<u)-1,c=l>>1,f=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:s-1,d=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(h=Math.pow(2,-a))<1&&(a--,h*=2),(e+=a+c>=1?f/h:f*Math.pow(2,1-c))*h>=2&&(a++,h/=2),a+c>=l?(o=0,a=l):a+c>=1?(o=(e*h-1)*Math.pow(2,n),a+=c):(o=e*Math.pow(2,c-1)*Math.pow(2,n),a=0));n>=8;t[i+p]=255&o,p+=d,o/=256,n-=8);for(a=a<<n|o,u+=n;u>0;t[i+p]=255&a,p+=d,a/=256,u-=8);t[i+p-d]|=128*y}},717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}}},801:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>Ee});var r=484813681109536e-20,n=Math.PI/2,s=1e-10,a=.017453292519943295,o=57.29577951308232,h=Math.PI/4,u=2*Math.PI,l=3.14159265359,c={greenwich:0,lisbon:-9.131906111111,paris:2.337229166667,bogota:-74.080916666667,madrid:-3.687938888889,rome:12.452333333333,bern:7.439583333333,jakarta:106.807719444444,ferro:-17.666666666667,brussels:4.367975,stockholm:18.058277777778,athens:23.7163375,oslo:10.722916666667};const f={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}};var p=/[\s_\-\/\(\)]/g;function d(t,e){if(t[e])return t[e];for(var i,r=Object.keys(t),n=e.toLowerCase().replace(p,""),s=-1;++s<r.length;)if((i=r[s]).toLowerCase().replace(p,"")===n)return t[i]}function y(t){var e,i,r,n={},s=t.split("+").map((function(t){return t.trim()})).filter((function(t){return t})).reduce((function(t,e){var i=e.split("=");return i.push(!0),t[i[0].toLowerCase()]=i[1],t}),{}),o={proj:"projName",datum:"datumCode",rf:function(t){n.rf=parseFloat(t)},lat_0:function(t){n.lat0=t*a},lat_1:function(t){n.lat1=t*a},lat_2:function(t){n.lat2=t*a},lat_ts:function(t){n.lat_ts=t*a},lon_0:function(t){n.long0=t*a},lon_1:function(t){n.long1=t*a},lon_2:function(t){n.long2=t*a},alpha:function(t){n.alpha=parseFloat(t)*a},lonc:function(t){n.longc=t*a},x_0:function(t){n.x0=parseFloat(t)},y_0:function(t){n.y0=parseFloat(t)},k_0:function(t){n.k0=parseFloat(t)},k:function(t){n.k0=parseFloat(t)},a:function(t){n.a=parseFloat(t)},b:function(t){n.b=parseFloat(t)},r_a:function(){n.R_A=!0},zone:function(t){n.zone=parseInt(t,10)},south:function(){n.utmSouth=!0},towgs84:function(t){n.datum_params=t.split(",").map((function(t){return parseFloat(t)}))},to_meter:function(t){n.to_meter=parseFloat(t)},units:function(t){n.units=t;var e=d(f,t);e&&(n.to_meter=e.to_meter)},from_greenwich:function(t){n.from_greenwich=t*a},pm:function(t){var e=d(c,t);n.from_greenwich=(e||parseFloat(t))*a},nadgrids:function(t){"@null"===t?n.datumCode="none":n.nadgrids=t},axis:function(t){var e="ewnsud";3===t.length&&-1!==e.indexOf(t.substr(0,1))&&-1!==e.indexOf(t.substr(1,1))&&-1!==e.indexOf(t.substr(2,1))&&(n.axis=t)}};for(e in s)i=s[e],e in o?"function"==typeof(r=o[e])?r(i):n[r]=i:n[e]=i;return"string"==typeof n.datumCode&&"WGS84"!==n.datumCode&&(n.datumCode=n.datumCode.toLowerCase()),n}var g=/\s/,m=/[A-Za-z]/,M=/[A-Za-z84]/,b=/[,\]]/,v=/[\d\.E\-\+]/;function _(t){if("string"!=typeof t)throw new Error("not a string");this.text=t.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=1}function w(t,e,i){Array.isArray(e)&&(i.unshift(e),e=null);var r=e?{}:t,n=i.reduce((function(t,e){return x(e,t),t}),r);e&&(t[e]=n)}function x(t,e){if(Array.isArray(t)){var i=t.shift();if("PARAMETER"===i&&(i=t.shift()),1===t.length)return Array.isArray(t[0])?(e[i]={},void x(t[0],e[i])):void(e[i]=t[0]);if(t.length)if("TOWGS84"!==i){if("AXIS"===i)return i in e||(e[i]=[]),void e[i].push(t);var r;switch(Array.isArray(i)||(e[i]={}),i){case"UNIT":case"PRIMEM":case"VERT_DATUM":return e[i]={name:t[0].toLowerCase(),convert:t[1]},void(3===t.length&&x(t[2],e[i]));case"SPHEROID":case"ELLIPSOID":return e[i]={name:t[0],a:t[1],rf:t[2]},void(4===t.length&&x(t[3],e[i]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return t[0]=["name",t[0]],void w(e,i,t);default:for(r=-1;++r<t.length;)if(!Array.isArray(t[r]))return x(t,e[i]);return w(e,i,t)}}else e[i]=t;else e[i]=!0}else e[t]=!0}function S(t){return.017453292519943295*t}function E(t){var e=new _(t).output(),i=e.shift(),r=e.shift();e.unshift(["name",r]),e.unshift(["type",i]);var n={};return x(e,n),function(t){if("GEOGCS"===t.type?t.projName="longlat":"LOCAL_CS"===t.type?(t.projName="identity",t.local=!0):"object"==typeof t.PROJECTION?t.projName=Object.keys(t.PROJECTION)[0]:t.projName=t.PROJECTION,t.AXIS){for(var e="",i=0,r=t.AXIS.length;i<r;++i){var n=t.AXIS[i][0].toLowerCase();-1!==n.indexOf("north")?e+="n":-1!==n.indexOf("south")?e+="s":-1!==n.indexOf("east")?e+="e":-1!==n.indexOf("west")&&(e+="w")}2===e.length&&(e+="u"),3===e.length&&(t.axis=e)}t.UNIT&&(t.units=t.UNIT.name.toLowerCase(),"metre"===t.units&&(t.units="meter"),t.UNIT.convert&&("GEOGCS"===t.type?t.DATUM&&t.DATUM.SPHEROID&&(t.to_meter=t.UNIT.convert*t.DATUM.SPHEROID.a):t.to_meter=t.UNIT.convert));var s=t.GEOGCS;function a(e){return e*(t.to_meter||1)}"GEOGCS"===t.type&&(s=t),s&&(s.DATUM?t.datumCode=s.DATUM.name.toLowerCase():t.datumCode=s.name.toLowerCase(),"d_"===t.datumCode.slice(0,2)&&(t.datumCode=t.datumCode.slice(2)),"new_zealand_geodetic_datum_1949"!==t.datumCode&&"new_zealand_1949"!==t.datumCode||(t.datumCode="nzgd49"),"wgs_1984"!==t.datumCode&&"world_geodetic_system_1984"!==t.datumCode||("Mercator_Auxiliary_Sphere"===t.PROJECTION&&(t.sphere=!0),t.datumCode="wgs84"),"_ferro"===t.datumCode.slice(-6)&&(t.datumCode=t.datumCode.slice(0,-6)),"_jakarta"===t.datumCode.slice(-8)&&(t.datumCode=t.datumCode.slice(0,-8)),~t.datumCode.indexOf("belge")&&(t.datumCode="rnb72"),s.DATUM&&s.DATUM.SPHEROID&&(t.ellps=s.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk"),"international"===t.ellps.toLowerCase().slice(0,13)&&(t.ellps="intl"),t.a=s.DATUM.SPHEROID.a,t.rf=parseFloat(s.DATUM.SPHEROID.rf,10)),s.DATUM&&s.DATUM.TOWGS84&&(t.datum_params=s.DATUM.TOWGS84),~t.datumCode.indexOf("osgb_1936")&&(t.datumCode="osgb36"),~t.datumCode.indexOf("osni_1952")&&(t.datumCode="osni52"),(~t.datumCode.indexOf("tm65")||~t.datumCode.indexOf("geodetic_datum_of_1965"))&&(t.datumCode="ire65"),"ch1903+"===t.datumCode&&(t.datumCode="ch1903"),~t.datumCode.indexOf("israel")&&(t.datumCode="isr93")),t.b&&!isFinite(t.b)&&(t.b=t.a),[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",S],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",S],["x0","false_easting",a],["y0","false_northing",a],["long0","central_meridian",S],["lat0","latitude_of_origin",S],["lat0","standard_parallel_1",S],["lat1","standard_parallel_1",S],["lat2","standard_parallel_2",S],["azimuth","Azimuth"],["alpha","azimuth",S],["srsCode","name"]].forEach((function(e){return function(t,e){var i=e[0],r=e[1];!(i in t)&&r in t&&(t[i]=t[r],3===e.length&&(t[i]=e[2](t[i])))}(t,e)})),t.long0||!t.longc||"Albers_Conic_Equal_Area"!==t.projName&&"Lambert_Azimuthal_Equal_Area"!==t.projName||(t.long0=t.longc),t.lat_ts||!t.lat1||"Stereographic_South_Pole"!==t.projName&&"Polar Stereographic (variant B)"!==t.projName||(t.lat0=S(t.lat1>0?90:-90),t.lat_ts=t.lat1)}(n),n}function R(t){var e=this;if(2===arguments.length){var i=arguments[1];"string"==typeof i?"+"===i.charAt(0)?R[t]=y(arguments[1]):R[t]=E(arguments[1]):R[t]=i}else if(1===arguments.length){if(Array.isArray(t))return t.map((function(t){Array.isArray(t)?R.apply(e,t):R(t)}));if("string"==typeof t){if(t in R)return R[t]}else"EPSG"in t?R["EPSG:"+t.EPSG]=t:"ESRI"in t?R["ESRI:"+t.ESRI]=t:"IAU2000"in t?R["IAU2000:"+t.IAU2000]=t:console.log(t);return}}_.prototype.readCharicter=function(){var t=this.text[this.place++];if(4!==this.state)for(;g.test(t);){if(this.place>=this.text.length)return;t=this.text[this.place++]}switch(this.state){case 1:return this.neutral(t);case 2:return this.keyword(t);case 4:return this.quoted(t);case 5:return this.afterquote(t);case 3:return this.number(t);case-1:return}},_.prototype.afterquote=function(t){if('"'===t)return this.word+='"',void(this.state=4);if(b.test(t))return this.word=this.word.trim(),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in afterquote yet, index '+this.place)},_.prototype.afterItem=function(t){return","===t?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=1)):"]"===t?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=1,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},_.prototype.number=function(t){if(!v.test(t)){if(b.test(t))return this.word=parseFloat(this.word),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in number yet, index '+this.place)}this.word+=t},_.prototype.quoted=function(t){'"'!==t?this.word+=t:this.state=5},_.prototype.keyword=function(t){if(M.test(t))this.word+=t;else{if("["===t){var e=[];return e.push(this.word),this.level++,null===this.root?this.root=e:this.currentObject.push(e),this.stack.push(this.currentObject),this.currentObject=e,void(this.state=1)}if(!b.test(t))throw new Error("havn't handled \""+t+'" in keyword yet, index '+this.place);this.afterItem(t)}},_.prototype.neutral=function(t){if(m.test(t))return this.word=t,void(this.state=2);if('"'===t)return this.word="",void(this.state=4);if(v.test(t))return this.word=t,void(this.state=3);if(!b.test(t))throw new Error("havn't handled \""+t+'" in neutral yet, index '+this.place);this.afterItem(t)},_.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(-1===this.state)return this.root;throw new Error('unable to parse string "'+this.text+'". State is '+this.state)},function(t){t("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"),t("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"),t("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),t.WGS84=t["EPSG:4326"],t["EPSG:3785"]=t["EPSG:3857"],t.GOOGLE=t["EPSG:3857"],t["EPSG:900913"]=t["EPSG:3857"],t["EPSG:102113"]=t["EPSG:3857"]}(R);const P=R;var T=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"],O=["3857","900913","3785","102113"];function C(t,e){var i,r;if(t=t||{},!e)return t;for(r in e)void 0!==(i=e[r])&&(t[r]=i);return t}function k(t,e,i){var r=t*e;return i/Math.sqrt(1-r*r)}function A(t){return t<0?-1:1}function I(t){return Math.abs(t)<=l?t:t-A(t)*u}function N(t,e,i){var r=t*i,s=.5*t;return r=Math.pow((1-r)/(1+r),s),Math.tan(.5*(n-e))/r}function L(t,e){for(var i,r,s=.5*t,a=n-2*Math.atan(e),o=0;o<=15;o++)if(i=t*Math.sin(a),a+=r=n-2*Math.atan(e*Math.pow((1-i)/(1+i),s))-a,Math.abs(r)<=1e-10)return a;return-9999}function j(t){return t}var U=[{init:function(){var t=this.b/this.a;this.es=1-t*t,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=Math.sqrt(this.es),this.lat_ts?this.sphere?this.k0=Math.cos(this.lat_ts):this.k0=k(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)):this.k0||(this.k?this.k0=this.k:this.k0=1)},forward:function(t){var e,i,r=t.x,a=t.y;if(a*o>90&&a*o<-90&&r*o>180&&r*o<-180)return null;if(Math.abs(Math.abs(a)-n)<=s)return null;if(this.sphere)e=this.x0+this.a*this.k0*I(r-this.long0),i=this.y0+this.a*this.k0*Math.log(Math.tan(h+.5*a));else{var u=Math.sin(a),l=N(this.e,a,u);e=this.x0+this.a*this.k0*I(r-this.long0),i=this.y0-this.a*this.k0*Math.log(l)}return t.x=e,t.y=i,t},inverse:function(t){var e,i,r=t.x-this.x0,s=t.y-this.y0;if(this.sphere)i=n-2*Math.atan(Math.exp(-s/(this.a*this.k0)));else{var a=Math.exp(-s/(this.a*this.k0));if(-9999===(i=L(this.e,a)))return null}return e=I(this.long0+r/(this.a*this.k0)),t.x=e,t.y=i,t},names:["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{init:function(){},forward:j,inverse:j,names:["longlat","identity"]}],q={},B=[];function G(t,e){var i=B.length;return t.names?(B[i]=t,t.names.forEach((function(t){q[t.toLowerCase()]=i})),this):(console.log(e),!0)}const D={start:function(){U.forEach(G)},add:G,get:function(t){if(!t)return!1;var e=t.toLowerCase();return void 0!==q[e]&&B[q[e]]?B[q[e]]:void 0}};var F={MERIT:{a:6378137,rf:298.257,ellipseName:"MERIT 1983"},SGS85:{a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"},GRS80:{a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"},IAU76:{a:6378140,rf:298.257,ellipseName:"IAU 1976"},airy:{a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"},APL4:{a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"},NWL9D:{a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"},mod_airy:{a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"},andrae:{a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"},aust_SA:{a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"},GRS67:{a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"},bessel:{a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"},bess_nam:{a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"},clrk66:{a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"},clrk80:{a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."},clrk58:{a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"},CPM:{a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"},delmbr:{a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"},engelis:{a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"},evrst30:{a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"},evrst48:{a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"},evrst56:{a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"},evrst69:{a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"},evrstSS:{a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"},fschr60:{a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"},fschr60m:{a:6378155,rf:298.3,ellipseName:"Fischer 1960"},fschr68:{a:6378150,rf:298.3,ellipseName:"Fischer 1968"},helmert:{a:6378200,rf:298.3,ellipseName:"Helmert 1906"},hough:{a:6378270,rf:297,ellipseName:"Hough"},intl:{a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"},kaula:{a:6378163,rf:298.24,ellipseName:"Kaula 1961"},lerch:{a:6378139,rf:298.257,ellipseName:"Lerch 1979"},mprts:{a:6397300,rf:191,ellipseName:"Maupertius 1738"},new_intl:{a:6378157.5,b:6356772.2,ellipseName:"New International 1967"},plessis:{a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"},krass:{a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"},SEasia:{a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"},walbeck:{a:6376896,b:6355834.8467,ellipseName:"Walbeck"},WGS60:{a:6378165,rf:298.3,ellipseName:"WGS 60"},WGS66:{a:6378145,rf:298.25,ellipseName:"WGS 66"},WGS7:{a:6378135,rf:298.26,ellipseName:"WGS 72"}},W=F.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};F.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};var z={wgs84:{towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"},ch1903:{towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"},ggrs87:{towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"},nad83:{towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"},nad27:{nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"},potsdam:{towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"},carthage:{towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"},hermannskogel:{towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"},osni52:{towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"},ire65:{towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"},rassadiran:{towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"},nzgd49:{towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"},osgb36:{towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"},s_jtsk:{towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"},beduaram:{towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"},gunung_segara:{towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"},rnb72:{towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"}};function H(t,e){if(!(this instanceof H))return new H(t);e=e||function(t){if(t)throw t};var i=function(t){if(!function(t){return"string"==typeof t}(t))return t;if(function(t){return t in P}(t))return P[t];if(function(t){return T.some((function(e){return t.indexOf(e)>-1}))}(t)){var e=E(t);if(function(t){var e=d(t,"authority");if(e){var i=d(e,"epsg");return i&&O.indexOf(i)>-1}}(e))return P["EPSG:3857"];var i=function(t){var e=d(t,"extension");if(e)return d(e,"proj4")}(e);return i?y(i):e}return function(t){return"+"===t[0]}(t)?y(t):void 0}(t);if("object"==typeof i){var n=H.projections.get(i.projName);if(n){if(i.datumCode&&"none"!==i.datumCode){var a=d(z,i.datumCode);a&&(i.datum_params=a.towgs84?a.towgs84.split(","):null,i.ellps=a.ellipse,i.datumName=a.datumName?a.datumName:i.datumCode)}i.k0=i.k0||1,i.axis=i.axis||"enu",i.ellps=i.ellps||"wgs84";var o,h,u,l,c,f,p=function(t,e,i,r,n){if(!t){var a=d(F,r);a||(a=W),t=a.a,e=a.b,i=a.rf}return i&&!e&&(e=(1-1/i)*t),(0===i||Math.abs(t-e)<s)&&(n=!0,e=t),{a:t,b:e,rf:i,sphere:n}}(i.a,i.b,i.rf,i.ellps,i.sphere),g=(o=p.a,h=p.b,p.rf,c=((u=o*o)-(l=h*h))/u,f=0,i.R_A?(u=(o*=1-c*(.16666666666666666+c*(.04722222222222222+.022156084656084655*c)))*o,c=0):f=Math.sqrt(c),{es:c,e:f,ep2:(u-l)/l}),m=i.datum||function(t,e,i,n,s,a){var o={};return o.datum_type=void 0===t||"none"===t?5:4,e&&(o.datum_params=e.map(parseFloat),0===o.datum_params[0]&&0===o.datum_params[1]&&0===o.datum_params[2]||(o.datum_type=1),o.datum_params.length>3&&(0===o.datum_params[3]&&0===o.datum_params[4]&&0===o.datum_params[5]&&0===o.datum_params[6]||(o.datum_type=2,o.datum_params[3]*=r,o.datum_params[4]*=r,o.datum_params[5]*=r,o.datum_params[6]=o.datum_params[6]/1e6+1))),o.a=i,o.b=n,o.es=s,o.ep2=a,o}(i.datumCode,i.datum_params,p.a,p.b,g.es,g.ep2);C(this,i),C(this,n),this.a=p.a,this.b=p.b,this.rf=p.rf,this.sphere=p.sphere,this.es=g.es,this.e=g.e,this.ep2=g.ep2,this.datum=m,this.init(),e(null,this)}else e(t)}else e(t)}H.projections=D,H.projections.start();const Q=H;function V(t,e,i){var r,s,a,o,h=t.x,u=t.y,l=t.z?t.z:0;if(u<-n&&u>-1.001*n)u=-n;else if(u>n&&u<1.001*n)u=n;else{if(u<-n)return{x:-1/0,y:-1/0,z:t.z};if(u>n)return{x:1/0,y:1/0,z:t.z}}return h>Math.PI&&(h-=2*Math.PI),s=Math.sin(u),o=Math.cos(u),a=s*s,{x:((r=i/Math.sqrt(1-e*a))+l)*o*Math.cos(h),y:(r+l)*o*Math.sin(h),z:(r*(1-e)+l)*s}}function X(t,e,i,r){var n,s,a,o,h,u,l,c,f,p,d,y,g,m,M,b=t.x,v=t.y,_=t.z?t.z:0;if(n=Math.sqrt(b*b+v*v),s=Math.sqrt(b*b+v*v+_*_),n/i<1e-12){if(m=0,s/i<1e-12)return M=-r,{x:t.x,y:t.y,z:t.z}}else m=Math.atan2(v,b);a=_/s,c=(o=n/s)*(1-e)*(h=1/Math.sqrt(1-e*(2-e)*o*o)),f=a*h,g=0;do{g++,u=e*(l=i/Math.sqrt(1-e*f*f))/(l+(M=n*c+_*f-l*(1-e*f*f))),y=(d=a*(h=1/Math.sqrt(1-u*(2-u)*o*o)))*c-(p=o*(1-u)*h)*f,c=p,f=d}while(y*y>1e-24&&g<30);return{x:m,y:Math.atan(d/Math.abs(p)),z:M}}function Y(t){return 1===t||2===t}function $(t,e,i){var r,n,s,a=i.x,o=i.y,h=i.z||0,u={};for(s=0;s<3;s++)if(!e||2!==s||void 0!==i.z)switch(0===s?(r=a,n=-1!=="ew".indexOf(t.axis[s])?"x":"y"):1===s?(r=o,n=-1!=="ns".indexOf(t.axis[s])?"y":"x"):(r=h,n="z"),t.axis[s]){case"e":u[n]=r;break;case"w":u[n]=-r;break;case"n":u[n]=r;break;case"s":u[n]=-r;break;case"u":void 0!==i[n]&&(u.z=r);break;case"d":void 0!==i[n]&&(u.z=-r);break;default:return null}return u}function J(t){var e={x:t[0],y:t[1]};return t.length>2&&(e.z=t[2]),t.length>3&&(e.m=t[3]),e}function K(t){if("function"==typeof Number.isFinite){if(Number.isFinite(t))return;throw new TypeError("coordinates must be finite numbers")}if("number"!=typeof t||t!=t||!isFinite(t))throw new TypeError("coordinates must be finite numbers")}function Z(t,e,i){var r;if(Array.isArray(i)&&(i=J(i)),function(t){K(t.x),K(t.y)}(i),t.datum&&e.datum&&function(t,e){return(1===t.datum.datum_type||2===t.datum.datum_type)&&"WGS84"!==e.datumCode||(1===e.datum.datum_type||2===e.datum.datum_type)&&"WGS84"!==t.datumCode}(t,e)&&(i=Z(t,r=new Q("WGS84"),i),t=r),"enu"!==t.axis&&(i=$(t,!1,i)),"longlat"===t.projName)i={x:i.x*a,y:i.y*a,z:i.z||0};else if(t.to_meter&&(i={x:i.x*t.to_meter,y:i.y*t.to_meter,z:i.z||0}),!(i=t.inverse(i)))return;return t.from_greenwich&&(i.x+=t.from_greenwich),i=function(t,e,i){return function(t,e){return t.datum_type===e.datum_type&&!(t.a!==e.a||Math.abs(t.es-e.es)>5e-11)&&(1===t.datum_type?t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]:2!==t.datum_type||t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]&&t.datum_params[3]===e.datum_params[3]&&t.datum_params[4]===e.datum_params[4]&&t.datum_params[5]===e.datum_params[5]&&t.datum_params[6]===e.datum_params[6])}(t,e)||5===t.datum_type||5===e.datum_type?i:t.es!==e.es||t.a!==e.a||Y(t.datum_type)||Y(e.datum_type)?(i=V(i,t.es,t.a),Y(t.datum_type)&&(i=function(t,e,i){if(1===e)return{x:t.x+i[0],y:t.y+i[1],z:t.z+i[2]};if(2===e){var r=i[0],n=i[1],s=i[2],a=i[3],o=i[4],h=i[5],u=i[6];return{x:u*(t.x-h*t.y+o*t.z)+r,y:u*(h*t.x+t.y-a*t.z)+n,z:u*(-o*t.x+a*t.y+t.z)+s}}}(i,t.datum_type,t.datum_params)),Y(e.datum_type)&&(i=function(t,e,i){if(1===e)return{x:t.x-i[0],y:t.y-i[1],z:t.z-i[2]};if(2===e){var r=i[0],n=i[1],s=i[2],a=i[3],o=i[4],h=i[5],u=i[6],l=(t.x-r)/u,c=(t.y-n)/u,f=(t.z-s)/u;return{x:l+h*c-o*f,y:-h*l+c+a*f,z:o*l-a*c+f}}}(i,e.datum_type,e.datum_params)),X(i,e.es,e.a,e.b)):i}(t.datum,e.datum,i),e.from_greenwich&&(i={x:i.x-e.from_greenwich,y:i.y,z:i.z||0}),"longlat"===e.projName?i={x:i.x*o,y:i.y*o,z:i.z||0}:(i=e.forward(i),e.to_meter&&(i={x:i.x/e.to_meter,y:i.y/e.to_meter,z:i.z||0})),"enu"!==e.axis?$(e,!0,i):i}var tt=Q("WGS84");function et(t,e,i){var r,n,s;return Array.isArray(i)?(r=Z(t,e,i)||{x:NaN,y:NaN},i.length>2?void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name?"number"==typeof r.z?[r.x,r.y,r.z].concat(i.splice(3)):[r.x,r.y,i[2]].concat(i.splice(3)):[r.x,r.y].concat(i.splice(2)):[r.x,r.y]):(n=Z(t,e,i),2===(s=Object.keys(i)).length||s.forEach((function(r){if(void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name){if("x"===r||"y"===r||"z"===r)return}else if("x"===r||"y"===r)return;n[r]=i[r]})),n)}function it(t){return t instanceof Q?t:t.oProj?t.oProj:Q(t)}const rt=function(t,e,i){t=it(t);var r,n=!1;return void 0===e?(e=t,t=tt,n=!0):(void 0!==e.x||Array.isArray(e))&&(i=e,e=t,t=tt,n=!0),e=it(e),i?et(t,e,i):(r={forward:function(i){return et(t,e,i)},inverse:function(i){return et(e,t,i)}},n&&(r.oProj=e),r)};var nt="AJSAJS",st="AFAFAF",at=65,ot=73,ht=79;const ut={forward:lt,inverse:function(t){var e=dt(gt(t.toUpperCase()));return e.lat&&e.lon?[e.lon,e.lat,e.lon,e.lat]:[e.left,e.bottom,e.right,e.top]},toPoint:ct};function lt(t,e){return e=e||5,function(t,e){var i,r,n,s,a,o,h,u,l,c,f,p="00000"+t.easting,d="00000"+t.northing;return t.zoneNumber+t.zoneLetter+(l=t.easting,c=t.northing,f=yt(t.zoneNumber),i=Math.floor(l/1e5),r=Math.floor(c/1e5)%20,s=nt.charCodeAt(n=f-1),a=st.charCodeAt(n),u=!1,(o=s+i-1)>90&&(o=o-90+at-1,u=!0),(o===ot||s<ot&&o>ot||(o>ot||s<ot)&&u)&&o++,(o===ht||s<ht&&o>ht||(o>ht||s<ht)&&u)&&++o===ot&&o++,o>90&&(o=o-90+at-1),(h=a+r)>86?(h=h-86+at-1,u=!0):u=!1,(h===ot||a<ot&&h>ot||(h>ot||a<ot)&&u)&&h++,(h===ht||a<ht&&h>ht||(h>ht||a<ht)&&u)&&++h===ot&&h++,h>86&&(h=h-86+at-1),String.fromCharCode(o)+String.fromCharCode(h))+p.substr(p.length-5,e)+d.substr(d.length-5,e)}(function(t){var e,i,r,n,s,a,o,h=t.lat,u=t.lon,l=6378137,c=.00669438,f=.9996,p=ft(h),d=ft(u);o=Math.floor((u+180)/6)+1,180===u&&(o=60),h>=56&&h<64&&u>=3&&u<12&&(o=32),h>=72&&h<84&&(u>=0&&u<9?o=31:u>=9&&u<21?o=33:u>=21&&u<33?o=35:u>=33&&u<42&&(o=37)),a=ft(6*(o-1)-180+3),e=.006739496752268451,i=l/Math.sqrt(1-c*Math.sin(p)*Math.sin(p)),r=Math.tan(p)*Math.tan(p),n=e*Math.cos(p)*Math.cos(p);var y,g,m=f*i*((s=Math.cos(p)*(d-a))+(1-r+n)*s*s*s/6+(5-18*r+r*r+72*n-58*e)*s*s*s*s*s/120)+5e5,M=f*(l*(.9983242984503243*p-.002514607064228144*Math.sin(2*p)+2639046602129982e-21*Math.sin(4*p)-3.418046101696858e-9*Math.sin(6*p))+i*Math.tan(p)*(s*s/2+(5-r+9*n+4*n*n)*s*s*s*s/24+(61-58*r+r*r+600*n-2.2240339282485886)*s*s*s*s*s*s/720));return h<0&&(M+=1e7),{northing:Math.round(M),easting:Math.round(m),zoneNumber:o,zoneLetter:(y=h,g="Z",84>=y&&y>=72?g="X":72>y&&y>=64?g="W":64>y&&y>=56?g="V":56>y&&y>=48?g="U":48>y&&y>=40?g="T":40>y&&y>=32?g="S":32>y&&y>=24?g="R":24>y&&y>=16?g="Q":16>y&&y>=8?g="P":8>y&&y>=0?g="N":0>y&&y>=-8?g="M":-8>y&&y>=-16?g="L":-16>y&&y>=-24?g="K":-24>y&&y>=-32?g="J":-32>y&&y>=-40?g="H":-40>y&&y>=-48?g="G":-48>y&&y>=-56?g="F":-56>y&&y>=-64?g="E":-64>y&&y>=-72?g="D":-72>y&&y>=-80&&(g="C"),g)}}({lat:t[1],lon:t[0]}),e)}function ct(t){var e=dt(gt(t.toUpperCase()));return e.lat&&e.lon?[e.lon,e.lat]:[(e.left+e.right)/2,(e.top+e.bottom)/2]}function ft(t){return t*(Math.PI/180)}function pt(t){return t/Math.PI*180}function dt(t){var e=t.northing,i=t.easting,r=t.zoneLetter,n=t.zoneNumber;if(n<0||n>60)return null;var s,a,o,h,u,l,c,f,p,d=.9996,y=6378137,g=.00669438,m=(1-Math.sqrt(.99330562))/(1+Math.sqrt(.99330562)),M=i-5e5,b=e;r<"N"&&(b-=1e7),c=6*(n-1)-180+3,s=.006739496752268451,p=(f=b/d/6367449.145945056)+(3*m/2-27*m*m*m/32)*Math.sin(2*f)+(21*m*m/16-55*m*m*m*m/32)*Math.sin(4*f)+151*m*m*m/96*Math.sin(6*f),a=y/Math.sqrt(1-g*Math.sin(p)*Math.sin(p)),o=Math.tan(p)*Math.tan(p),h=s*Math.cos(p)*Math.cos(p),u=.99330562*y/Math.pow(1-g*Math.sin(p)*Math.sin(p),1.5),l=M/(a*d);var v=p-a*Math.tan(p)/u*(l*l/2-(5+3*o+10*h-4*h*h-9*s)*l*l*l*l/24+(61+90*o+298*h+45*o*o-1.6983531815716497-3*h*h)*l*l*l*l*l*l/720);v=pt(v);var _,w=(l-(1+2*o+h)*l*l*l/6+(5-2*h+28*o-3*h*h+8*s+24*o*o)*l*l*l*l*l/120)/Math.cos(p);if(w=c+pt(w),t.accuracy){var x=dt({northing:t.northing+t.accuracy,easting:t.easting+t.accuracy,zoneLetter:t.zoneLetter,zoneNumber:t.zoneNumber});_={top:x.lat,right:x.lon,bottom:v,left:w}}else _={lat:v,lon:w};return _}function yt(t){var e=t%6;return 0===e&&(e=6),e}function gt(t){if(t&&0===t.length)throw"MGRSPoint coverting from nothing";for(var e,i=t.length,r=null,n="",s=0;!/[A-Z]/.test(e=t.charAt(s));){if(s>=2)throw"MGRSPoint bad conversion from: "+t;n+=e,s++}var a=parseInt(n,10);if(0===s||s+3>i)throw"MGRSPoint bad conversion from: "+t;var o=t.charAt(s++);if(o<="A"||"B"===o||"Y"===o||o>="Z"||"I"===o||"O"===o)throw"MGRSPoint zone letter "+o+" not handled: "+t;r=t.substring(s,s+=2);for(var h=yt(a),u=function(t,e){for(var i=nt.charCodeAt(e-1),r=1e5,n=!1;i!==t.charCodeAt(0);){if(++i===ot&&i++,i===ht&&i++,i>90){if(n)throw"Bad character: "+t;i=at,n=!0}r+=1e5}return r}(r.charAt(0),h),l=function(t,e){if(t>"V")throw"MGRSPoint given invalid Northing "+t;for(var i=st.charCodeAt(e-1),r=0,n=!1;i!==t.charCodeAt(0);){if(++i===ot&&i++,i===ht&&i++,i>86){if(n)throw"Bad character: "+t;i=at,n=!0}r+=1e5}return r}(r.charAt(1),h);l<mt(o);)l+=2e6;var c=i-s;if(c%2!=0)throw"MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+t;var f,p,d,y=c/2,g=0,m=0;return y>0&&(f=1e5/Math.pow(10,y),p=t.substring(s,s+y),g=parseFloat(p)*f,d=t.substring(s+y),m=parseFloat(d)*f),{easting:g+u,northing:m+l,zoneLetter:o,zoneNumber:a,accuracy:f}}function mt(t){var e;switch(t){case"C":e=11e5;break;case"D":e=2e6;break;case"E":e=28e5;break;case"F":e=37e5;break;case"G":e=46e5;break;case"H":e=55e5;break;case"J":e=64e5;break;case"K":e=73e5;break;case"L":e=82e5;break;case"M":e=91e5;break;case"N":e=0;break;case"P":e=8e5;break;case"Q":e=17e5;break;case"R":e=26e5;break;case"S":e=35e5;break;case"T":e=44e5;break;case"U":e=53e5;break;case"V":e=62e5;break;case"W":e=7e6;break;case"X":e=79e5;break;default:e=-1}if(e>=0)return e;throw"Invalid zone letter: "+t}function Mt(t,e,i){if(!(this instanceof Mt))return new Mt(t,e,i);if(Array.isArray(t))this.x=t[0],this.y=t[1],this.z=t[2]||0;else if("object"==typeof t)this.x=t.x,this.y=t.y,this.z=t.z||0;else if("string"==typeof t&&void 0===e){var r=t.split(",");this.x=parseFloat(r[0],10),this.y=parseFloat(r[1],10),this.z=parseFloat(r[2],10)||0}else this.x=t,this.y=e,this.z=i||0;console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}Mt.fromMGRS=function(t){return new Mt(ct(t))},Mt.prototype.toMGRS=function(t){return lt([this.x,this.y],t)};const bt=Mt;var vt=.046875,_t=.01953125,wt=.01068115234375;function xt(t){var e=[];e[0]=1-t*(.25+t*(vt+t*(_t+t*wt))),e[1]=t*(.75-t*(vt+t*(_t+t*wt)));var i=t*t;return e[2]=i*(.46875-t*(.013020833333333334+.007120768229166667*t)),i*=t,e[3]=i*(.3645833333333333-.005696614583333333*t),e[4]=i*t*.3076171875,e}function St(t,e,i,r){return i*=e,e*=e,r[0]*t-i*(r[1]+e*(r[2]+e*(r[3]+e*r[4])))}function Et(t,e,i){for(var r=1/(1-e),n=t,a=20;a;--a){var o=Math.sin(n),h=1-e*o*o;if(n-=h=(St(n,o,Math.cos(n),i)-t)*(h*Math.sqrt(h))*r,Math.abs(h)<s)return n}return n}const Rt={init:function(){this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.es&&(this.en=xt(this.es),this.ml0=St(this.lat0,Math.sin(this.lat0),Math.cos(this.lat0),this.en))},forward:function(t){var e,i,r,n=t.x,a=t.y,o=I(n-this.long0),h=Math.sin(a),u=Math.cos(a);if(this.es){var l=u*o,c=Math.pow(l,2),f=this.ep2*Math.pow(u,2),p=Math.pow(f,2),d=Math.abs(u)>s?Math.tan(a):0,y=Math.pow(d,2),g=Math.pow(y,2);e=1-this.es*Math.pow(h,2),l/=Math.sqrt(e);var m=St(a,h,u,this.en);i=this.a*(this.k0*l*(1+c/6*(1-y+f+c/20*(5-18*y+g+14*f-58*y*f+c/42*(61+179*g-g*y-479*y)))))+this.x0,r=this.a*(this.k0*(m-this.ml0+h*o*l/2*(1+c/12*(5-y+9*f+4*p+c/30*(61+g-58*y+270*f-330*y*f+c/56*(1385+543*g-g*y-3111*y))))))+this.y0}else{var M=u*Math.sin(o);if(Math.abs(Math.abs(M)-1)<s)return 93;if(i=.5*this.a*this.k0*Math.log((1+M)/(1-M))+this.x0,r=u*Math.cos(o)/Math.sqrt(1-Math.pow(M,2)),(M=Math.abs(r))>=1){if(M-1>s)return 93;r=0}else r=Math.acos(r);a<0&&(r=-r),r=this.a*this.k0*(r-this.lat0)+this.y0}return t.x=i,t.y=r,t},inverse:function(t){var e,i,r,a,o=(t.x-this.x0)*(1/this.a),h=(t.y-this.y0)*(1/this.a);if(this.es)if(i=Et(e=this.ml0+h/this.k0,this.es,this.en),Math.abs(i)<n){var u=Math.sin(i),l=Math.cos(i),c=Math.abs(l)>s?Math.tan(i):0,f=this.ep2*Math.pow(l,2),p=Math.pow(f,2),d=Math.pow(c,2),y=Math.pow(d,2);e=1-this.es*Math.pow(u,2);var g=o*Math.sqrt(e)/this.k0,m=Math.pow(g,2);r=i-(e*=c)*m/(1-this.es)*.5*(1-m/12*(5+3*d-9*f*d+f-4*p-m/30*(61+90*d-252*f*d+45*y+46*f-m/56*(1385+3633*d+4095*y+1574*y*d)))),a=I(this.long0+g*(1-m/6*(1+2*d+f-m/20*(5+28*d+24*y+8*f*d+6*f-m/42*(61+662*d+1320*y+720*y*d))))/l)}else r=n*A(h),a=0;else{var M=Math.exp(o/this.k0),b=.5*(M-1/M),v=this.lat0+h/this.k0,_=Math.cos(v);e=Math.sqrt((1-Math.pow(_,2))/(1+Math.pow(b,2))),r=Math.asin(e),h<0&&(r=-r),a=0===b&&0===_?0:I(Math.atan2(b,_)+this.long0)}return t.x=a,t.y=r,t},names:["Transverse_Mercator","Transverse Mercator","tmerc"]};function Pt(t){var e=Math.exp(t);return(e-1/e)/2}function Tt(t,e){t=Math.abs(t),e=Math.abs(e);var i=Math.max(t,e),r=Math.min(t,e)/(i||1);return i*Math.sqrt(1+Math.pow(r,2))}function Ot(t,e){for(var i,r=2*Math.cos(2*e),n=t.length-1,s=t[n],a=0;--n>=0;)i=r*s-a+t[n],a=s,s=i;return e+i*Math.sin(2*e)}function Ct(t,e,i){for(var r,n,s=Math.sin(e),a=Math.cos(e),o=Pt(i),h=function(t){var e=Math.exp(t);return(e+1/e)/2}(i),u=2*a*h,l=-2*s*o,c=t.length-1,f=t[c],p=0,d=0,y=0;--c>=0;)r=d,n=p,f=u*(d=f)-r-l*(p=y)+t[c],y=l*d-n+u*p;return[(u=s*h)*f-(l=a*o)*y,u*y+l*f]}const kt={init:function(){if(void 0===this.es||this.es<=0)throw new Error("incorrect elliptical usage");this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.cgb=[],this.cbg=[],this.utg=[],this.gtu=[];var t=this.es/(1+Math.sqrt(1-this.es)),e=t/(2-t),i=e;this.cgb[0]=e*(2+e*(-2/3+e*(e*(116/45+e*(26/45+e*(-2854/675)))-2))),this.cbg[0]=e*(e*(2/3+e*(4/3+e*(-82/45+e*(32/45+e*(4642/4725)))))-2),i*=e,this.cgb[1]=i*(7/3+e*(e*(-227/45+e*(2704/315+e*(2323/945)))-1.6)),this.cbg[1]=i*(5/3+e*(-16/15+e*(-13/9+e*(904/315+e*(-1522/945))))),i*=e,this.cgb[2]=i*(56/15+e*(-136/35+e*(-1262/105+e*(73814/2835)))),this.cbg[2]=i*(-26/15+e*(34/21+e*(1.6+e*(-12686/2835)))),i*=e,this.cgb[3]=i*(4279/630+e*(-332/35+e*(-399572/14175))),this.cbg[3]=i*(1237/630+e*(e*(-24832/14175)-2.4)),i*=e,this.cgb[4]=i*(4174/315+e*(-144838/6237)),this.cbg[4]=i*(-734/315+e*(109598/31185)),i*=e,this.cgb[5]=i*(601676/22275),this.cbg[5]=i*(444337/155925),i=Math.pow(e,2),this.Qn=this.k0/(1+e)*(1+i*(1/4+i*(1/64+i/256))),this.utg[0]=e*(e*(2/3+e*(-37/96+e*(1/360+e*(81/512+e*(-96199/604800)))))-.5),this.gtu[0]=e*(.5+e*(-2/3+e*(5/16+e*(41/180+e*(-127/288+e*(7891/37800)))))),this.utg[1]=i*(-1/48+e*(-1/15+e*(437/1440+e*(-46/105+e*(1118711/3870720))))),this.gtu[1]=i*(13/48+e*(e*(557/1440+e*(281/630+e*(-1983433/1935360)))-.6)),i*=e,this.utg[2]=i*(-17/480+e*(37/840+e*(209/4480+e*(-5569/90720)))),this.gtu[2]=i*(61/240+e*(-103/140+e*(15061/26880+e*(167603/181440)))),i*=e,this.utg[3]=i*(-4397/161280+e*(11/504+e*(830251/7257600))),this.gtu[3]=i*(49561/161280+e*(-179/168+e*(6601661/7257600))),i*=e,this.utg[4]=i*(-4583/161280+e*(108847/3991680)),this.gtu[4]=i*(34729/80640+e*(-3418889/1995840)),i*=e,this.utg[5]=i*(-20648693/638668800),this.gtu[5]=.6650675310896665*i;var r=Ot(this.cbg,this.lat0);this.Zb=-this.Qn*(r+function(t,e){for(var i,r=2*Math.cos(e),n=t.length-1,s=t[n],a=0;--n>=0;)i=r*s-a+t[n],a=s,s=i;return Math.sin(e)*i}(this.gtu,2*r))},forward:function(t){var e=I(t.x-this.long0),i=t.y;i=Ot(this.cbg,i);var r=Math.sin(i),n=Math.cos(i),s=Math.sin(e),a=Math.cos(e);i=Math.atan2(r,a*n),e=Math.atan2(s*n,Tt(r,n*a)),e=function(t){var e=Math.abs(t);return e=function(t){var e=1+t,i=e-1;return 0===i?t:t*Math.log(e)/i}(e*(1+e/(Tt(1,e)+1))),t<0?-e:e}(Math.tan(e));var o,h,u=Ct(this.gtu,2*i,2*e);return i+=u[0],e+=u[1],Math.abs(e)<=2.623395162778?(o=this.a*(this.Qn*e)+this.x0,h=this.a*(this.Qn*i+this.Zb)+this.y0):(o=1/0,h=1/0),t.x=o,t.y=h,t},inverse:function(t){var e,i,r=(t.x-this.x0)*(1/this.a),n=(t.y-this.y0)*(1/this.a);if(n=(n-this.Zb)/this.Qn,r/=this.Qn,Math.abs(r)<=2.623395162778){var s=Ct(this.utg,2*n,2*r);n+=s[0],r+=s[1],r=Math.atan(Pt(r));var a=Math.sin(n),o=Math.cos(n),h=Math.sin(r),u=Math.cos(r);n=Math.atan2(a*u,Tt(h,u*o)),e=I((r=Math.atan2(h,u*o))+this.long0),i=Ot(this.cgb,n)}else e=1/0,i=1/0;return t.x=e,t.y=i,t},names:["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc"]},At={init:function(){var t=function(t,e){if(void 0===t){if((t=Math.floor(30*(I(e)+Math.PI)/Math.PI)+1)<0)return 0;if(t>60)return 60}return t}(this.zone,this.long0);if(void 0===t)throw new Error("unknown utm zone");this.lat0=0,this.long0=(6*Math.abs(t)-183)*a,this.x0=5e5,this.y0=this.utmSouth?1e7:0,this.k0=.9996,kt.init.apply(this),this.forward=kt.forward,this.inverse=kt.inverse},names:["Universal Transverse Mercator System","utm"],dependsOn:"etmerc"};function It(t,e){return Math.pow((1-t)/(1+t),e)}const Nt={init:function(){var t=Math.sin(this.lat0),e=Math.cos(this.lat0);e*=e,this.rc=Math.sqrt(1-this.es)/(1-this.es*t*t),this.C=Math.sqrt(1+this.es*e*e/(1-this.es)),this.phic0=Math.asin(t/this.C),this.ratexp=.5*this.C*this.e,this.K=Math.tan(.5*this.phic0+h)/(Math.pow(Math.tan(.5*this.lat0+h),this.C)*It(this.e*t,this.ratexp))},forward:function(t){var e=t.x,i=t.y;return t.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*i+h),this.C)*It(this.e*Math.sin(i),this.ratexp))-n,t.x=this.C*e,t},inverse:function(t){for(var e=t.x/this.C,i=t.y,r=Math.pow(Math.tan(.5*i+h)/this.K,1/this.C),s=20;s>0&&(i=2*Math.atan(r*It(this.e*Math.sin(t.y),-.5*this.e))-n,!(Math.abs(i-t.y)<1e-14));--s)t.y=i;return s?(t.x=e,t.y=i,t):null},names:["gauss"]},Lt={init:function(){Nt.init.apply(this),this.rc&&(this.sinc0=Math.sin(this.phic0),this.cosc0=Math.cos(this.phic0),this.R2=2*this.rc,this.title||(this.title="Oblique Stereographic Alternative"))},forward:function(t){var e,i,r,n;return t.x=I(t.x-this.long0),Nt.forward.apply(this,[t]),e=Math.sin(t.y),i=Math.cos(t.y),r=Math.cos(t.x),n=this.k0*this.R2/(1+this.sinc0*e+this.cosc0*i*r),t.x=n*i*Math.sin(t.x),t.y=n*(this.cosc0*e-this.sinc0*i*r),t.x=this.a*t.x+this.x0,t.y=this.a*t.y+this.y0,t},inverse:function(t){var e,i,r,n,s;if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,s=Math.sqrt(t.x*t.x+t.y*t.y)){var a=2*Math.atan2(s,this.R2);e=Math.sin(a),i=Math.cos(a),n=Math.asin(i*this.sinc0+t.y*e*this.cosc0/s),r=Math.atan2(t.x*e,s*this.cosc0*i-t.y*this.sinc0*e)}else n=this.phic0,r=0;return t.x=r,t.y=n,Nt.inverse.apply(this,[t]),t.x=I(t.x+this.long0),t},names:["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative","Double_Stereographic"]},jt={init:function(){this.coslat0=Math.cos(this.lat0),this.sinlat0=Math.sin(this.lat0),this.sphere?1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=s&&(this.k0=.5*(1+A(this.lat0)*Math.sin(this.lat_ts))):(Math.abs(this.coslat0)<=s&&(this.lat0>0?this.con=1:this.con=-1),this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e)),1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=s&&(this.k0=.5*this.cons*k(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/N(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))),this.ms1=k(this.e,this.sinlat0,this.coslat0),this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-n,this.cosX0=Math.cos(this.X0),this.sinX0=Math.sin(this.X0))},forward:function(t){var e,i,r,a,o,h,u=t.x,l=t.y,c=Math.sin(l),f=Math.cos(l),p=I(u-this.long0);return Math.abs(Math.abs(u-this.long0)-Math.PI)<=s&&Math.abs(l+this.lat0)<=s?(t.x=NaN,t.y=NaN,t):this.sphere?(e=2*this.k0/(1+this.sinlat0*c+this.coslat0*f*Math.cos(p)),t.x=this.a*e*f*Math.sin(p)+this.x0,t.y=this.a*e*(this.coslat0*c-this.sinlat0*f*Math.cos(p))+this.y0,t):(i=2*Math.atan(this.ssfn_(l,c,this.e))-n,a=Math.cos(i),r=Math.sin(i),Math.abs(this.coslat0)<=s?(o=N(this.e,l*this.con,this.con*c),h=2*this.a*this.k0*o/this.cons,t.x=this.x0+h*Math.sin(u-this.long0),t.y=this.y0-this.con*h*Math.cos(u-this.long0),t):(Math.abs(this.sinlat0)<s?(e=2*this.a*this.k0/(1+a*Math.cos(p)),t.y=e*r):(e=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*r+this.cosX0*a*Math.cos(p))),t.y=e*(this.cosX0*r-this.sinX0*a*Math.cos(p))+this.y0),t.x=e*a*Math.sin(p)+this.x0,t))},inverse:function(t){var e,i,r,a,o;t.x-=this.x0,t.y-=this.y0;var h=Math.sqrt(t.x*t.x+t.y*t.y);if(this.sphere){var u=2*Math.atan(h/(2*this.a*this.k0));return e=this.long0,i=this.lat0,h<=s?(t.x=e,t.y=i,t):(i=Math.asin(Math.cos(u)*this.sinlat0+t.y*Math.sin(u)*this.coslat0/h),e=Math.abs(this.coslat0)<s?this.lat0>0?I(this.long0+Math.atan2(t.x,-1*t.y)):I(this.long0+Math.atan2(t.x,t.y)):I(this.long0+Math.atan2(t.x*Math.sin(u),h*this.coslat0*Math.cos(u)-t.y*this.sinlat0*Math.sin(u))),t.x=e,t.y=i,t)}if(Math.abs(this.coslat0)<=s){if(h<=s)return i=this.lat0,e=this.long0,t.x=e,t.y=i,t;t.x*=this.con,t.y*=this.con,r=h*this.cons/(2*this.a*this.k0),i=this.con*L(this.e,r),e=this.con*I(this.con*this.long0+Math.atan2(t.x,-1*t.y))}else a=2*Math.atan(h*this.cosX0/(2*this.a*this.k0*this.ms1)),e=this.long0,h<=s?o=this.X0:(o=Math.asin(Math.cos(a)*this.sinX0+t.y*Math.sin(a)*this.cosX0/h),e=I(this.long0+Math.atan2(t.x*Math.sin(a),h*this.cosX0*Math.cos(a)-t.y*this.sinX0*Math.sin(a)))),i=-1*L(this.e,Math.tan(.5*(n+o)));return t.x=e,t.y=i,t},names:["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"],ssfn_:function(t,e,i){return e*=i,Math.tan(.5*(n+t))*Math.pow((1-e)/(1+e),.5*i)}},Ut={init:function(){var t=this.lat0;this.lambda0=this.long0;var e=Math.sin(t),i=this.a,r=1/this.rf,n=2*r-Math.pow(r,2),s=this.e=Math.sqrt(n);this.R=this.k0*i*Math.sqrt(1-n)/(1-n*Math.pow(e,2)),this.alpha=Math.sqrt(1+n/(1-n)*Math.pow(Math.cos(t),4)),this.b0=Math.asin(e/this.alpha);var a=Math.log(Math.tan(Math.PI/4+this.b0/2)),o=Math.log(Math.tan(Math.PI/4+t/2)),h=Math.log((1+s*e)/(1-s*e));this.K=a-this.alpha*o+this.alpha*s/2*h},forward:function(t){var e=Math.log(Math.tan(Math.PI/4-t.y/2)),i=this.e/2*Math.log((1+this.e*Math.sin(t.y))/(1-this.e*Math.sin(t.y))),r=-this.alpha*(e+i)+this.K,n=2*(Math.atan(Math.exp(r))-Math.PI/4),s=this.alpha*(t.x-this.lambda0),a=Math.atan(Math.sin(s)/(Math.sin(this.b0)*Math.tan(n)+Math.cos(this.b0)*Math.cos(s))),o=Math.asin(Math.cos(this.b0)*Math.sin(n)-Math.sin(this.b0)*Math.cos(n)*Math.cos(s));return t.y=this.R/2*Math.log((1+Math.sin(o))/(1-Math.sin(o)))+this.y0,t.x=this.R*a+this.x0,t},inverse:function(t){for(var e=t.x-this.x0,i=t.y-this.y0,r=e/this.R,n=2*(Math.atan(Math.exp(i/this.R))-Math.PI/4),s=Math.asin(Math.cos(this.b0)*Math.sin(n)+Math.sin(this.b0)*Math.cos(n)*Math.cos(r)),a=Math.atan(Math.sin(r)/(Math.cos(this.b0)*Math.cos(r)-Math.sin(this.b0)*Math.tan(n))),o=this.lambda0+a/this.alpha,h=0,u=s,l=-1e3,c=0;Math.abs(u-l)>1e-7;){if(++c>20)return;h=1/this.alpha*(Math.log(Math.tan(Math.PI/4+s/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(u))/2)),l=u,u=2*Math.atan(Math.exp(h))-Math.PI/2}return t.x=o,t.y=u,t},names:["somerc"]},qt={init:function(){this.no_off=this.no_off||!1,this.no_rot=this.no_rot||!1,isNaN(this.k0)&&(this.k0=1);var t=Math.sin(this.lat0),e=Math.cos(this.lat0),i=this.e*t;this.bl=Math.sqrt(1+this.es/(1-this.es)*Math.pow(e,4)),this.al=this.a*this.bl*this.k0*Math.sqrt(1-this.es)/(1-i*i);var r,n,s=N(this.e,this.lat0,t),a=this.bl/e*Math.sqrt((1-this.es)/(1-i*i));if(a*a<1&&(a=1),isNaN(this.longc)){var o=N(this.e,this.lat1,Math.sin(this.lat1)),h=N(this.e,this.lat2,Math.sin(this.lat2));this.lat0>=0?this.el=(a+Math.sqrt(a*a-1))*Math.pow(s,this.bl):this.el=(a-Math.sqrt(a*a-1))*Math.pow(s,this.bl);var u=Math.pow(o,this.bl),l=Math.pow(h,this.bl);n=.5*((r=this.el/u)-1/r);var c=(this.el*this.el-l*u)/(this.el*this.el+l*u),f=(l-u)/(l+u),p=I(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-Math.atan(c*Math.tan(.5*this.bl*p)/f)/this.bl,this.long0=I(this.long0);var d=I(this.long1-this.long0);this.gamma0=Math.atan(Math.sin(this.bl*d)/n),this.alpha=Math.asin(a*Math.sin(this.gamma0))}else r=this.lat0>=0?a+Math.sqrt(a*a-1):a-Math.sqrt(a*a-1),this.el=r*Math.pow(s,this.bl),n=.5*(r-1/r),this.gamma0=Math.asin(Math.sin(this.alpha)/a),this.long0=this.longc-Math.asin(n*Math.tan(this.gamma0))/this.bl;this.no_off?this.uc=0:this.lat0>=0?this.uc=this.al/this.bl*Math.atan2(Math.sqrt(a*a-1),Math.cos(this.alpha)):this.uc=-1*this.al/this.bl*Math.atan2(Math.sqrt(a*a-1),Math.cos(this.alpha))},forward:function(t){var e,i,r,a=t.x,o=t.y,u=I(a-this.long0);if(Math.abs(Math.abs(o)-n)<=s)r=o>0?-1:1,i=this.al/this.bl*Math.log(Math.tan(h+r*this.gamma0*.5)),e=-1*r*n*this.al/this.bl;else{var l=N(this.e,o,Math.sin(o)),c=this.el/Math.pow(l,this.bl),f=.5*(c-1/c),p=.5*(c+1/c),d=Math.sin(this.bl*u),y=(f*Math.sin(this.gamma0)-d*Math.cos(this.gamma0))/p;i=Math.abs(Math.abs(y)-1)<=s?Number.POSITIVE_INFINITY:.5*this.al*Math.log((1-y)/(1+y))/this.bl,e=Math.abs(Math.cos(this.bl*u))<=s?this.al*this.bl*u:this.al*Math.atan2(f*Math.cos(this.gamma0)+d*Math.sin(this.gamma0),Math.cos(this.bl*u))/this.bl}return this.no_rot?(t.x=this.x0+e,t.y=this.y0+i):(e-=this.uc,t.x=this.x0+i*Math.cos(this.alpha)+e*Math.sin(this.alpha),t.y=this.y0+e*Math.cos(this.alpha)-i*Math.sin(this.alpha)),t},inverse:function(t){var e,i;this.no_rot?(i=t.y-this.y0,e=t.x-this.x0):(i=(t.x-this.x0)*Math.cos(this.alpha)-(t.y-this.y0)*Math.sin(this.alpha),e=(t.y-this.y0)*Math.cos(this.alpha)+(t.x-this.x0)*Math.sin(this.alpha),e+=this.uc);var r=Math.exp(-1*this.bl*i/this.al),a=.5*(r-1/r),o=.5*(r+1/r),h=Math.sin(this.bl*e/this.al),u=(h*Math.cos(this.gamma0)+a*Math.sin(this.gamma0))/o,l=Math.pow(this.el/Math.sqrt((1+u)/(1-u)),1/this.bl);return Math.abs(u-1)<s?(t.x=this.long0,t.y=n):Math.abs(u+1)<s?(t.x=this.long0,t.y=-1*n):(t.y=L(this.e,l),t.x=I(this.long0-Math.atan2(a*Math.cos(this.gamma0)-h*Math.sin(this.gamma0),Math.cos(this.bl*e/this.al))/this.bl)),t},names:["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"]},Bt={init:function(){if(this.lat2||(this.lat2=this.lat1),this.k0||(this.k0=1),this.x0=this.x0||0,this.y0=this.y0||0,!(Math.abs(this.lat1+this.lat2)<s)){var t=this.b/this.a;this.e=Math.sqrt(1-t*t);var e=Math.sin(this.lat1),i=Math.cos(this.lat1),r=k(this.e,e,i),n=N(this.e,this.lat1,e),a=Math.sin(this.lat2),o=Math.cos(this.lat2),h=k(this.e,a,o),u=N(this.e,this.lat2,a),l=N(this.e,this.lat0,Math.sin(this.lat0));Math.abs(this.lat1-this.lat2)>s?this.ns=Math.log(r/h)/Math.log(n/u):this.ns=e,isNaN(this.ns)&&(this.ns=e),this.f0=r/(this.ns*Math.pow(n,this.ns)),this.rh=this.a*this.f0*Math.pow(l,this.ns),this.title||(this.title="Lambert Conformal Conic")}},forward:function(t){var e=t.x,i=t.y;Math.abs(2*Math.abs(i)-Math.PI)<=s&&(i=A(i)*(n-2e-10));var r,a,o=Math.abs(Math.abs(i)-n);if(o>s)r=N(this.e,i,Math.sin(i)),a=this.a*this.f0*Math.pow(r,this.ns);else{if((o=i*this.ns)<=0)return null;a=0}var h=this.ns*I(e-this.long0);return t.x=this.k0*(a*Math.sin(h))+this.x0,t.y=this.k0*(this.rh-a*Math.cos(h))+this.y0,t},inverse:function(t){var e,i,r,s,a,o=(t.x-this.x0)/this.k0,h=this.rh-(t.y-this.y0)/this.k0;this.ns>0?(e=Math.sqrt(o*o+h*h),i=1):(e=-Math.sqrt(o*o+h*h),i=-1);var u=0;if(0!==e&&(u=Math.atan2(i*o,i*h)),0!==e||this.ns>0){if(i=1/this.ns,r=Math.pow(e/(this.a*this.f0),i),-9999===(s=L(this.e,r)))return null}else s=-n;return a=I(u/this.ns+this.long0),t.x=a,t.y=s,t},names:["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"]},Gt={init:function(){this.a=6377397.155,this.es=.006674372230614,this.e=Math.sqrt(this.es),this.lat0||(this.lat0=.863937979737193),this.long0||(this.long0=.4334234309119251),this.k0||(this.k0=.9999),this.s45=.785398163397448,this.s90=2*this.s45,this.fi0=this.lat0,this.e2=this.es,this.e=Math.sqrt(this.e2),this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2)),this.uq=1.04216856380474,this.u0=Math.asin(Math.sin(this.fi0)/this.alfa),this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2),this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g,this.k1=this.k0,this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2)),this.s0=1.37008346281555,this.n=Math.sin(this.s0),this.ro0=this.k1*this.n0/Math.tan(this.s0),this.ad=this.s90-this.uq},forward:function(t){var e,i,r,n,s,a,o,h=t.x,u=t.y,l=I(h-this.long0);return e=Math.pow((1+this.e*Math.sin(u))/(1-this.e*Math.sin(u)),this.alfa*this.e/2),i=2*(Math.atan(this.k*Math.pow(Math.tan(u/2+this.s45),this.alfa)/e)-this.s45),r=-l*this.alfa,n=Math.asin(Math.cos(this.ad)*Math.sin(i)+Math.sin(this.ad)*Math.cos(i)*Math.cos(r)),s=Math.asin(Math.cos(i)*Math.sin(r)/Math.cos(n)),a=this.n*s,o=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(n/2+this.s45),this.n),t.y=o*Math.cos(a)/1,t.x=o*Math.sin(a)/1,this.czech||(t.y*=-1,t.x*=-1),t},inverse:function(t){var e,i,r,n,s,a,o,h=t.x;t.x=t.y,t.y=h,this.czech||(t.y*=-1,t.x*=-1),s=Math.sqrt(t.x*t.x+t.y*t.y),n=Math.atan2(t.y,t.x)/Math.sin(this.s0),r=2*(Math.atan(Math.pow(this.ro0/s,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45),e=Math.asin(Math.cos(this.ad)*Math.sin(r)-Math.sin(this.ad)*Math.cos(r)*Math.cos(n)),i=Math.asin(Math.cos(r)*Math.sin(n)/Math.cos(e)),t.x=this.long0-i/this.alfa,a=e,o=0;var u=0;do{t.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(e/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(a))/(1-this.e*Math.sin(a)),this.e/2))-this.s45),Math.abs(a-t.y)<1e-10&&(o=1),a=t.y,u+=1}while(0===o&&u<15);return u>=15?null:t},names:["Krovak","krovak"]};function Dt(t,e,i,r,n){return t*n-e*Math.sin(2*n)+i*Math.sin(4*n)-r*Math.sin(6*n)}function Ft(t){return 1-.25*t*(1+t/16*(3+1.25*t))}function Wt(t){return.375*t*(1+.25*t*(1+.46875*t))}function zt(t){return.05859375*t*t*(1+.75*t)}function Ht(t){return t*t*t*(35/3072)}function Qt(t,e,i){var r=e*i;return t/Math.sqrt(1-r*r)}function Vt(t){return Math.abs(t)<n?t:t-A(t)*Math.PI}function Xt(t,e,i,r,n){var s,a;s=t/e;for(var o=0;o<15;o++)if(s+=a=(t-(e*s-i*Math.sin(2*s)+r*Math.sin(4*s)-n*Math.sin(6*s)))/(e-2*i*Math.cos(2*s)+4*r*Math.cos(4*s)-6*n*Math.cos(6*s)),Math.abs(a)<=1e-10)return s;return NaN}const Yt={init:function(){this.sphere||(this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.ml0=this.a*Dt(this.e0,this.e1,this.e2,this.e3,this.lat0))},forward:function(t){var e,i,r=t.x,n=t.y;if(r=I(r-this.long0),this.sphere)e=this.a*Math.asin(Math.cos(n)*Math.sin(r)),i=this.a*(Math.atan2(Math.tan(n),Math.cos(r))-this.lat0);else{var s=Math.sin(n),a=Math.cos(n),o=Qt(this.a,this.e,s),h=Math.tan(n)*Math.tan(n),u=r*Math.cos(n),l=u*u,c=this.es*a*a/(1-this.es);e=o*u*(1-l*h*(1/6-(8-h+8*c)*l/120)),i=this.a*Dt(this.e0,this.e1,this.e2,this.e3,n)-this.ml0+o*s/a*l*(.5+(5-h+6*c)*l/24)}return t.x=e+this.x0,t.y=i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,i,r=t.x/this.a,a=t.y/this.a;if(this.sphere){var o=a+this.lat0;e=Math.asin(Math.sin(o)*Math.cos(r)),i=Math.atan2(Math.tan(r),Math.cos(o))}else{var h=Xt(this.ml0/this.a+a,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(h)-n)<=s)return t.x=this.long0,t.y=n,a<0&&(t.y*=-1),t;var u=Qt(this.a,this.e,Math.sin(h)),l=u*u*u/this.a/this.a*(1-this.es),c=Math.pow(Math.tan(h),2),f=r*this.a/u,p=f*f;e=h-u*Math.tan(h)/l*f*f*(.5-(1+3*c)*f*f/24),i=f*(1-p*(c/3+(1+3*c)*c*p/15))/Math.cos(h)}return t.x=I(i+this.long0),t.y=Vt(e),t},names:["Cassini","Cassini_Soldner","cass"]};function $t(t,e){var i;return t>1e-7?(1-t*t)*(e/(1-(i=t*e)*i)-.5/t*Math.log((1-i)/(1+i))):2*e}const Jt={init:function(){var t,e=Math.abs(this.lat0);if(Math.abs(e-n)<s?this.mode=this.lat0<0?this.S_POLE:this.N_POLE:Math.abs(e)<s?this.mode=this.EQUIT:this.mode=this.OBLIQ,this.es>0)switch(this.qp=$t(this.e,1),this.mmf=.5/(1-this.es),this.apa=function(t){var e,i=[];return i[0]=.3333333333333333*t,e=t*t,i[0]+=.17222222222222222*e,i[1]=.06388888888888888*e,e*=t,i[0]+=.10257936507936508*e,i[1]+=.0664021164021164*e,i[2]=.016415012942191543*e,i}(this.es),this.mode){case this.N_POLE:case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp),this.dd=1/this.rq,this.xmf=1,this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp),t=Math.sin(this.lat0),this.sinb1=$t(this.e,t)/this.qp,this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1),this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*t*t)*this.rq*this.cosb1),this.ymf=(this.xmf=this.rq)/this.dd,this.xmf*=this.dd}else this.mode===this.OBLIQ&&(this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0))},forward:function(t){var e,i,r,a,o,u,l,c,f,p,d=t.x,y=t.y;if(d=I(d-this.long0),this.sphere){if(o=Math.sin(y),p=Math.cos(y),r=Math.cos(d),this.mode===this.OBLIQ||this.mode===this.EQUIT){if((i=this.mode===this.EQUIT?1+p*r:1+this.sinph0*o+this.cosph0*p*r)<=s)return null;e=(i=Math.sqrt(2/i))*p*Math.sin(d),i*=this.mode===this.EQUIT?o:this.cosph0*o-this.sinph0*p*r}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(r=-r),Math.abs(y+this.lat0)<s)return null;i=h-.5*y,e=(i=2*(this.mode===this.S_POLE?Math.cos(i):Math.sin(i)))*Math.sin(d),i*=r}}else{switch(l=0,c=0,f=0,r=Math.cos(d),a=Math.sin(d),o=Math.sin(y),u=$t(this.e,o),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(l=u/this.qp,c=Math.sqrt(1-l*l)),this.mode){case this.OBLIQ:f=1+this.sinb1*l+this.cosb1*c*r;break;case this.EQUIT:f=1+c*r;break;case this.N_POLE:f=n+y,u=this.qp-u;break;case this.S_POLE:f=y-n,u=this.qp+u}if(Math.abs(f)<s)return null;switch(this.mode){case this.OBLIQ:case this.EQUIT:f=Math.sqrt(2/f),i=this.mode===this.OBLIQ?this.ymf*f*(this.cosb1*l-this.sinb1*c*r):(f=Math.sqrt(2/(1+c*r)))*l*this.ymf,e=this.xmf*f*c*a;break;case this.N_POLE:case this.S_POLE:u>=0?(e=(f=Math.sqrt(u))*a,i=r*(this.mode===this.S_POLE?f:-f)):e=i=0}}return t.x=this.a*e+this.x0,t.y=this.a*i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,i,r,a,o,h,u,l,c,f,p=t.x/this.a,d=t.y/this.a;if(this.sphere){var y,g=0,m=0;if((i=.5*(y=Math.sqrt(p*p+d*d)))>1)return null;switch(i=2*Math.asin(i),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(m=Math.sin(i),g=Math.cos(i)),this.mode){case this.EQUIT:i=Math.abs(y)<=s?0:Math.asin(d*m/y),p*=m,d=g*y;break;case this.OBLIQ:i=Math.abs(y)<=s?this.lat0:Math.asin(g*this.sinph0+d*m*this.cosph0/y),p*=m*this.cosph0,d=(g-Math.sin(i)*this.sinph0)*y;break;case this.N_POLE:d=-d,i=n-i;break;case this.S_POLE:i-=n}e=0!==d||this.mode!==this.EQUIT&&this.mode!==this.OBLIQ?Math.atan2(p,d):0}else{if(u=0,this.mode===this.OBLIQ||this.mode===this.EQUIT){if(p/=this.dd,d*=this.dd,(h=Math.sqrt(p*p+d*d))<s)return t.x=this.long0,t.y=this.lat0,t;a=2*Math.asin(.5*h/this.rq),r=Math.cos(a),p*=a=Math.sin(a),this.mode===this.OBLIQ?(u=r*this.sinb1+d*a*this.cosb1/h,o=this.qp*u,d=h*this.cosb1*r-d*this.sinb1*a):(u=d*a/h,o=this.qp*u,d=h*r)}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(d=-d),!(o=p*p+d*d))return t.x=this.long0,t.y=this.lat0,t;u=1-o/this.qp,this.mode===this.S_POLE&&(u=-u)}e=Math.atan2(p,d),f=(l=Math.asin(u))+l,i=l+(c=this.apa)[0]*Math.sin(f)+c[1]*Math.sin(f+f)+c[2]*Math.sin(f+f+f)}return t.x=I(this.long0+e),t.y=i,t},names:["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"],S_POLE:1,N_POLE:2,EQUIT:3,OBLIQ:4};function Kt(t){return Math.abs(t)>1&&(t=t>1?1:-1),Math.asin(t)}const Zt={init:function(){Math.abs(this.lat1+this.lat2)<s||(this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e3=Math.sqrt(this.es),this.sin_po=Math.sin(this.lat1),this.cos_po=Math.cos(this.lat1),this.t1=this.sin_po,this.con=this.sin_po,this.ms1=k(this.e3,this.sin_po,this.cos_po),this.qs1=$t(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat2),this.cos_po=Math.cos(this.lat2),this.t2=this.sin_po,this.ms2=k(this.e3,this.sin_po,this.cos_po),this.qs2=$t(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat0),this.cos_po=Math.cos(this.lat0),this.t3=this.sin_po,this.qs0=$t(this.e3,this.sin_po,this.cos_po),Math.abs(this.lat1-this.lat2)>s?this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1):this.ns0=this.con,this.c=this.ms1*this.ms1+this.ns0*this.qs1,this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0)},forward:function(t){var e=t.x,i=t.y;this.sin_phi=Math.sin(i),this.cos_phi=Math.cos(i);var r=$t(this.e3,this.sin_phi,this.cos_phi),n=this.a*Math.sqrt(this.c-this.ns0*r)/this.ns0,s=this.ns0*I(e-this.long0),a=n*Math.sin(s)+this.x0,o=this.rh-n*Math.cos(s)+this.y0;return t.x=a,t.y=o,t},inverse:function(t){var e,i,r,n,s,a;return t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns0>=0?(e=Math.sqrt(t.x*t.x+t.y*t.y),r=1):(e=-Math.sqrt(t.x*t.x+t.y*t.y),r=-1),n=0,0!==e&&(n=Math.atan2(r*t.x,r*t.y)),r=e*this.ns0/this.a,this.sphere?a=Math.asin((this.c-r*r)/(2*this.ns0)):(i=(this.c-r*r)/this.ns0,a=this.phi1z(this.e3,i)),s=I(n/this.ns0+this.long0),t.x=s,t.y=a,t},names:["Albers_Conic_Equal_Area","Albers","aea"],phi1z:function(t,e){var i,r,n,a,o=Kt(.5*e);if(t<s)return o;for(var h=t*t,u=1;u<=25;u++)if(o+=a=.5*(n=1-(r=t*(i=Math.sin(o)))*r)*n/Math.cos(o)*(e/(1-h)-i/n+.5/t*Math.log((1-r)/(1+r))),Math.abs(a)<=1e-7)return o;return null}},te={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0),this.infinity_dist=1e3*this.a,this.rc=1},forward:function(t){var e,i,r,n,a,o,h,u=t.x,l=t.y;return r=I(u-this.long0),e=Math.sin(l),i=Math.cos(l),n=Math.cos(r),(a=this.sin_p14*e+this.cos_p14*i*n)>0||Math.abs(a)<=s?(o=this.x0+1*this.a*i*Math.sin(r)/a,h=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*i*n)/a):(o=this.x0+this.infinity_dist*i*Math.sin(r),h=this.y0+this.infinity_dist*(this.cos_p14*e-this.sin_p14*i*n)),t.x=o,t.y=h,t},inverse:function(t){var e,i,r,n,s,a;return t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,(e=Math.sqrt(t.x*t.x+t.y*t.y))?(n=Math.atan2(e,this.rc),i=Math.sin(n),a=Kt((r=Math.cos(n))*this.sin_p14+t.y*i*this.cos_p14/e),s=Math.atan2(t.x*i,e*this.cos_p14*r-t.y*this.sin_p14*i),s=I(this.long0+s)):(a=this.phic0,s=0),t.x=s,t.y=a,t},names:["gnom"]},ee={init:function(){this.sphere||(this.k0=k(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)))},forward:function(t){var e,i,r=t.x,n=t.y,s=I(r-this.long0);if(this.sphere)e=this.x0+this.a*s*Math.cos(this.lat_ts),i=this.y0+this.a*Math.sin(n)/Math.cos(this.lat_ts);else{var a=$t(this.e,Math.sin(n));e=this.x0+this.a*this.k0*s,i=this.y0+this.a*a*.5/this.k0}return t.x=e,t.y=i,t},inverse:function(t){var e,i;return t.x-=this.x0,t.y-=this.y0,this.sphere?(e=I(this.long0+t.x/this.a/Math.cos(this.lat_ts)),i=Math.asin(t.y/this.a*Math.cos(this.lat_ts))):(i=function(t,e){var i=1-(1-t*t)/(2*t)*Math.log((1-t)/(1+t));if(Math.abs(Math.abs(e)-i)<1e-6)return e<0?-1*n:n;for(var r,s,a,o,h=Math.asin(.5*e),u=0;u<30;u++)if(s=Math.sin(h),a=Math.cos(h),o=t*s,h+=r=Math.pow(1-o*o,2)/(2*a)*(e/(1-t*t)-s/(1-o*o)+.5/t*Math.log((1-o)/(1+o))),Math.abs(r)<=1e-10)return h;return NaN}(this.e,2*t.y*this.k0/this.a),e=I(this.long0+t.x/(this.a*this.k0))),t.x=e,t.y=i,t},names:["cea"]},ie={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Equidistant Cylindrical (Plate Carre)",this.rc=Math.cos(this.lat_ts)},forward:function(t){var e=t.x,i=t.y,r=I(e-this.long0),n=Vt(i-this.lat0);return t.x=this.x0+this.a*r*this.rc,t.y=this.y0+this.a*n,t},inverse:function(t){var e=t.x,i=t.y;return t.x=I(this.long0+(e-this.x0)/(this.a*this.rc)),t.y=Vt(this.lat0+(i-this.y0)/this.a),t},names:["Equirectangular","Equidistant_Cylindrical","eqc"]},re={init:function(){this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.ml0=this.a*Dt(this.e0,this.e1,this.e2,this.e3,this.lat0)},forward:function(t){var e,i,r,n=t.x,a=t.y,o=I(n-this.long0);if(r=o*Math.sin(a),this.sphere)Math.abs(a)<=s?(e=this.a*o,i=-1*this.a*this.lat0):(e=this.a*Math.sin(r)/Math.tan(a),i=this.a*(Vt(a-this.lat0)+(1-Math.cos(r))/Math.tan(a)));else if(Math.abs(a)<=s)e=this.a*o,i=-1*this.ml0;else{var h=Qt(this.a,this.e,Math.sin(a))/Math.tan(a);e=h*Math.sin(r),i=this.a*Dt(this.e0,this.e1,this.e2,this.e3,a)-this.ml0+h*(1-Math.cos(r))}return t.x=e+this.x0,t.y=i+this.y0,t},inverse:function(t){var e,i,r,n,a,o,h,u,l;if(r=t.x-this.x0,n=t.y-this.y0,this.sphere)if(Math.abs(n+this.a*this.lat0)<=s)e=I(r/this.a+this.long0),i=0;else{var c;for(o=this.lat0+n/this.a,h=r*r/this.a/this.a+o*o,u=o,a=20;a;--a)if(u+=l=-1*(o*(u*(c=Math.tan(u))+1)-u-.5*(u*u+h)*c)/((u-o)/c-1),Math.abs(l)<=s){i=u;break}e=I(this.long0+Math.asin(r*Math.tan(u)/this.a)/Math.sin(i))}else if(Math.abs(n+this.ml0)<=s)i=0,e=I(this.long0+r/this.a);else{var f,p,d,y,g;for(o=(this.ml0+n)/this.a,h=r*r/this.a/this.a+o*o,u=o,a=20;a;--a)if(g=this.e*Math.sin(u),f=Math.sqrt(1-g*g)*Math.tan(u),p=this.a*Dt(this.e0,this.e1,this.e2,this.e3,u),d=this.e0-2*this.e1*Math.cos(2*u)+4*this.e2*Math.cos(4*u)-6*this.e3*Math.cos(6*u),u-=l=(o*(f*(y=p/this.a)+1)-y-.5*f*(y*y+h))/(this.es*Math.sin(2*u)*(y*y+h-2*o*y)/(4*f)+(o-y)*(f*d-2/Math.sin(2*u))-d),Math.abs(l)<=s){i=u;break}f=Math.sqrt(1-this.es*Math.pow(Math.sin(i),2))*Math.tan(i),e=I(this.long0+Math.asin(r*f/this.a)/Math.sin(i))}return t.x=e,t.y=i,t},names:["Polyconic","poly"]},ne={init:function(){this.A=[],this.A[1]=.6399175073,this.A[2]=-.1358797613,this.A[3]=.063294409,this.A[4]=-.02526853,this.A[5]=.0117879,this.A[6]=-.0055161,this.A[7]=.0026906,this.A[8]=-.001333,this.A[9]=67e-5,this.A[10]=-34e-5,this.B_re=[],this.B_im=[],this.B_re[1]=.7557853228,this.B_im[1]=0,this.B_re[2]=.249204646,this.B_im[2]=.003371507,this.B_re[3]=-.001541739,this.B_im[3]=.04105856,this.B_re[4]=-.10162907,this.B_im[4]=.01727609,this.B_re[5]=-.26623489,this.B_im[5]=-.36249218,this.B_re[6]=-.6870983,this.B_im[6]=-1.1651967,this.C_re=[],this.C_im=[],this.C_re[1]=1.3231270439,this.C_im[1]=0,this.C_re[2]=-.577245789,this.C_im[2]=-.007809598,this.C_re[3]=.508307513,this.C_im[3]=-.112208952,this.C_re[4]=-.15094762,this.C_im[4]=.18200602,this.C_re[5]=1.01418179,this.C_im[5]=1.64497696,this.C_re[6]=1.9660549,this.C_im[6]=2.5127645,this.D=[],this.D[1]=1.5627014243,this.D[2]=.5185406398,this.D[3]=-.03333098,this.D[4]=-.1052906,this.D[5]=-.0368594,this.D[6]=.007317,this.D[7]=.0122,this.D[8]=.00394,this.D[9]=-.0013},forward:function(t){var e,i=t.x,n=t.y-this.lat0,s=i-this.long0,a=n/r*1e-5,o=s,h=1,u=0;for(e=1;e<=10;e++)h*=a,u+=this.A[e]*h;var l,c=u,f=o,p=1,d=0,y=0,g=0;for(e=1;e<=6;e++)l=d*c+p*f,p=p*c-d*f,d=l,y=y+this.B_re[e]*p-this.B_im[e]*d,g=g+this.B_im[e]*p+this.B_re[e]*d;return t.x=g*this.a+this.x0,t.y=y*this.a+this.y0,t},inverse:function(t){var e,i,n=t.x,s=t.y,a=n-this.x0,o=(s-this.y0)/this.a,h=a/this.a,u=1,l=0,c=0,f=0;for(e=1;e<=6;e++)i=l*o+u*h,u=u*o-l*h,l=i,c=c+this.C_re[e]*u-this.C_im[e]*l,f=f+this.C_im[e]*u+this.C_re[e]*l;for(var p=0;p<this.iterations;p++){var d,y=c,g=f,m=o,M=h;for(e=2;e<=6;e++)d=g*c+y*f,y=y*c-g*f,g=d,m+=(e-1)*(this.B_re[e]*y-this.B_im[e]*g),M+=(e-1)*(this.B_im[e]*y+this.B_re[e]*g);y=1,g=0;var b=this.B_re[1],v=this.B_im[1];for(e=2;e<=6;e++)d=g*c+y*f,y=y*c-g*f,g=d,b+=e*(this.B_re[e]*y-this.B_im[e]*g),v+=e*(this.B_im[e]*y+this.B_re[e]*g);var _=b*b+v*v;c=(m*b+M*v)/_,f=(M*b-m*v)/_}var w=c,x=f,S=1,E=0;for(e=1;e<=9;e++)S*=w,E+=this.D[e]*S;var R=this.lat0+E*r*1e5,P=this.long0+x;return t.x=P,t.y=R,t},names:["New_Zealand_Map_Grid","nzmg"]},se={init:function(){},forward:function(t){var e=t.x,i=t.y,r=I(e-this.long0),n=this.x0+this.a*r,s=this.y0+this.a*Math.log(Math.tan(Math.PI/4+i/2.5))*1.25;return t.x=n,t.y=s,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e=I(this.long0+t.x/this.a),i=2.5*(Math.atan(Math.exp(.8*t.y/this.a))-Math.PI/4);return t.x=e,t.y=i,t},names:["Miller_Cylindrical","mill"]},ae={init:function(){this.sphere?(this.n=1,this.m=0,this.es=0,this.C_y=Math.sqrt((this.m+1)/this.n),this.C_x=this.C_y/(this.m+1)):this.en=xt(this.es)},forward:function(t){var e,i,r=t.x,n=t.y;if(r=I(r-this.long0),this.sphere){if(this.m)for(var a=this.n*Math.sin(n),o=20;o;--o){var h=(this.m*n+Math.sin(n)-a)/(this.m+Math.cos(n));if(n-=h,Math.abs(h)<s)break}else n=1!==this.n?Math.asin(this.n*Math.sin(n)):n;e=this.a*this.C_x*r*(this.m+Math.cos(n)),i=this.a*this.C_y*n}else{var u=Math.sin(n),l=Math.cos(n);i=this.a*St(n,u,l,this.en),e=this.a*r*l/Math.sqrt(1-this.es*u*u)}return t.x=e,t.y=i,t},inverse:function(t){var e,i,r;return t.x-=this.x0,i=t.x/this.a,t.y-=this.y0,e=t.y/this.a,this.sphere?(e/=this.C_y,i/=this.C_x*(this.m+Math.cos(e)),this.m?e=Kt((this.m*e+Math.sin(e))/this.n):1!==this.n&&(e=Kt(Math.sin(e)/this.n)),i=I(i+this.long0),e=Vt(e)):(e=Et(t.y/this.a,this.es,this.en),(r=Math.abs(e))<n?(r=Math.sin(e),i=I(this.long0+t.x*Math.sqrt(1-this.es*r*r)/(this.a*Math.cos(e)))):r-s<n&&(i=this.long0)),t.x=i,t.y=e,t},names:["Sinusoidal","sinu"]},oe={init:function(){},forward:function(t){for(var e=t.x,i=t.y,r=I(e-this.long0),n=i,a=Math.PI*Math.sin(i);;){var o=-(n+Math.sin(n)-a)/(1+Math.cos(n));if(n+=o,Math.abs(o)<s)break}n/=2,Math.PI/2-Math.abs(i)<s&&(r=0);var h=.900316316158*this.a*r*Math.cos(n)+this.x0,u=1.4142135623731*this.a*Math.sin(n)+this.y0;return t.x=h,t.y=u,t},inverse:function(t){var e,i;t.x-=this.x0,t.y-=this.y0,i=t.y/(1.4142135623731*this.a),Math.abs(i)>.999999999999&&(i=.999999999999),e=Math.asin(i);var r=I(this.long0+t.x/(.900316316158*this.a*Math.cos(e)));r<-Math.PI&&(r=-Math.PI),r>Math.PI&&(r=Math.PI),i=(2*e+Math.sin(2*e))/Math.PI,Math.abs(i)>1&&(i=1);var n=Math.asin(i);return t.x=r,t.y=n,t},names:["Mollweide","moll"]},he={init:function(){Math.abs(this.lat1+this.lat2)<s||(this.lat2=this.lat2||this.lat1,this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ft(this.es),this.e1=Wt(this.es),this.e2=zt(this.es),this.e3=Ht(this.es),this.sinphi=Math.sin(this.lat1),this.cosphi=Math.cos(this.lat1),this.ms1=k(this.e,this.sinphi,this.cosphi),this.ml1=Dt(this.e0,this.e1,this.e2,this.e3,this.lat1),Math.abs(this.lat1-this.lat2)<s?this.ns=this.sinphi:(this.sinphi=Math.sin(this.lat2),this.cosphi=Math.cos(this.lat2),this.ms2=k(this.e,this.sinphi,this.cosphi),this.ml2=Dt(this.e0,this.e1,this.e2,this.e3,this.lat2),this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)),this.g=this.ml1+this.ms1/this.ns,this.ml0=Dt(this.e0,this.e1,this.e2,this.e3,this.lat0),this.rh=this.a*(this.g-this.ml0))},forward:function(t){var e,i=t.x,r=t.y;if(this.sphere)e=this.a*(this.g-r);else{var n=Dt(this.e0,this.e1,this.e2,this.e3,r);e=this.a*(this.g-n)}var s=this.ns*I(i-this.long0),a=this.x0+e*Math.sin(s),o=this.y0+this.rh-e*Math.cos(s);return t.x=a,t.y=o,t},inverse:function(t){var e,i,r,n;t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns>=0?(i=Math.sqrt(t.x*t.x+t.y*t.y),e=1):(i=-Math.sqrt(t.x*t.x+t.y*t.y),e=-1);var s=0;return 0!==i&&(s=Math.atan2(e*t.x,e*t.y)),this.sphere?(n=I(this.long0+s/this.ns),r=Vt(this.g-i/this.a),t.x=n,t.y=r,t):(r=Xt(this.g-i/this.a,this.e0,this.e1,this.e2,this.e3),n=I(this.long0+s/this.ns),t.x=n,t.y=r,t)},names:["Equidistant_Conic","eqdc"]},ue={init:function(){this.R=this.a},forward:function(t){var e,i,r=t.x,a=t.y,o=I(r-this.long0);Math.abs(a)<=s&&(e=this.x0+this.R*o,i=this.y0);var h=Kt(2*Math.abs(a/Math.PI));(Math.abs(o)<=s||Math.abs(Math.abs(a)-n)<=s)&&(e=this.x0,i=a>=0?this.y0+Math.PI*this.R*Math.tan(.5*h):this.y0+Math.PI*this.R*-Math.tan(.5*h));var u=.5*Math.abs(Math.PI/o-o/Math.PI),l=u*u,c=Math.sin(h),f=Math.cos(h),p=f/(c+f-1),d=p*p,y=p*(2/c-1),g=y*y,m=Math.PI*this.R*(u*(p-g)+Math.sqrt(l*(p-g)*(p-g)-(g+l)*(d-g)))/(g+l);o<0&&(m=-m),e=this.x0+m;var M=l+p;return m=Math.PI*this.R*(y*M-u*Math.sqrt((g+l)*(l+1)-M*M))/(g+l),i=a>=0?this.y0+m:this.y0-m,t.x=e,t.y=i,t},inverse:function(t){var e,i,r,n,a,o,h,u,l,c,f,p;return t.x-=this.x0,t.y-=this.y0,f=Math.PI*this.R,a=(r=t.x/f)*r+(n=t.y/f)*n,f=3*(n*n/(u=-2*(o=-Math.abs(n)*(1+a))+1+2*n*n+a*a)+(2*(h=o-2*n*n+r*r)*h*h/u/u/u-9*o*h/u/u)/27)/(l=(o-h*h/3/u)/u)/(c=2*Math.sqrt(-l/3)),Math.abs(f)>1&&(f=f>=0?1:-1),p=Math.acos(f)/3,i=t.y>=0?(-c*Math.cos(p+Math.PI/3)-h/3/u)*Math.PI:-(-c*Math.cos(p+Math.PI/3)-h/3/u)*Math.PI,e=Math.abs(r)<s?this.long0:I(this.long0+Math.PI*(a-1+Math.sqrt(1+2*(r*r-n*n)+a*a))/2/r),t.x=e,t.y=i,t},names:["Van_der_Grinten_I","VanDerGrinten","vandg"]},le={init:function(){this.sin_p12=Math.sin(this.lat0),this.cos_p12=Math.cos(this.lat0)},forward:function(t){var e,i,r,a,o,h,u,l,c,f,p,d,y,g,m,M,b,v,_,w,x,S,E=t.x,R=t.y,P=Math.sin(t.y),T=Math.cos(t.y),O=I(E-this.long0);return this.sphere?Math.abs(this.sin_p12-1)<=s?(t.x=this.x0+this.a*(n-R)*Math.sin(O),t.y=this.y0-this.a*(n-R)*Math.cos(O),t):Math.abs(this.sin_p12+1)<=s?(t.x=this.x0+this.a*(n+R)*Math.sin(O),t.y=this.y0+this.a*(n+R)*Math.cos(O),t):(v=this.sin_p12*P+this.cos_p12*T*Math.cos(O),b=(M=Math.acos(v))?M/Math.sin(M):1,t.x=this.x0+this.a*b*T*Math.sin(O),t.y=this.y0+this.a*b*(this.cos_p12*P-this.sin_p12*T*Math.cos(O)),t):(e=Ft(this.es),i=Wt(this.es),r=zt(this.es),a=Ht(this.es),Math.abs(this.sin_p12-1)<=s?(o=this.a*Dt(e,i,r,a,n),h=this.a*Dt(e,i,r,a,R),t.x=this.x0+(o-h)*Math.sin(O),t.y=this.y0-(o-h)*Math.cos(O),t):Math.abs(this.sin_p12+1)<=s?(o=this.a*Dt(e,i,r,a,n),h=this.a*Dt(e,i,r,a,R),t.x=this.x0+(o+h)*Math.sin(O),t.y=this.y0+(o+h)*Math.cos(O),t):(u=P/T,l=Qt(this.a,this.e,this.sin_p12),c=Qt(this.a,this.e,P),f=Math.atan((1-this.es)*u+this.es*l*this.sin_p12/(c*T)),_=0===(p=Math.atan2(Math.sin(O),this.cos_p12*Math.tan(f)-this.sin_p12*Math.cos(O)))?Math.asin(this.cos_p12*Math.sin(f)-this.sin_p12*Math.cos(f)):Math.abs(Math.abs(p)-Math.PI)<=s?-Math.asin(this.cos_p12*Math.sin(f)-this.sin_p12*Math.cos(f)):Math.asin(Math.sin(O)*Math.cos(f)/Math.sin(p)),d=this.e*this.sin_p12/Math.sqrt(1-this.es),M=l*_*(1-(w=_*_)*(m=(y=this.e*this.cos_p12*Math.cos(p)/Math.sqrt(1-this.es))*y)*(1-m)/6+(x=w*_)/8*(g=d*y)*(1-2*m)+(S=x*_)/120*(m*(4-7*m)-3*d*d*(1-7*m))-S*_/48*g),t.x=this.x0+M*Math.sin(p),t.y=this.y0+M*Math.cos(p),t))},inverse:function(t){var e,i,r,a,o,h,u,l,c,f,p,d,y,g,m,M,b,v,_,w,x,S,E;if(t.x-=this.x0,t.y-=this.y0,this.sphere){if((e=Math.sqrt(t.x*t.x+t.y*t.y))>2*n*this.a)return;return i=e/this.a,r=Math.sin(i),a=Math.cos(i),o=this.long0,Math.abs(e)<=s?h=this.lat0:(h=Kt(a*this.sin_p12+t.y*r*this.cos_p12/e),u=Math.abs(this.lat0)-n,o=Math.abs(u)<=s?this.lat0>=0?I(this.long0+Math.atan2(t.x,-t.y)):I(this.long0-Math.atan2(-t.x,t.y)):I(this.long0+Math.atan2(t.x*r,e*this.cos_p12*a-t.y*this.sin_p12*r))),t.x=o,t.y=h,t}return l=Ft(this.es),c=Wt(this.es),f=zt(this.es),p=Ht(this.es),Math.abs(this.sin_p12-1)<=s?(h=Xt(((d=this.a*Dt(l,c,f,p,n))-(e=Math.sqrt(t.x*t.x+t.y*t.y)))/this.a,l,c,f,p),o=I(this.long0+Math.atan2(t.x,-1*t.y)),t.x=o,t.y=h,t):Math.abs(this.sin_p12+1)<=s?(d=this.a*Dt(l,c,f,p,n),h=Xt(((e=Math.sqrt(t.x*t.x+t.y*t.y))-d)/this.a,l,c,f,p),o=I(this.long0+Math.atan2(t.x,t.y)),t.x=o,t.y=h,t):(e=Math.sqrt(t.x*t.x+t.y*t.y),m=Math.atan2(t.x,t.y),y=Qt(this.a,this.e,this.sin_p12),M=Math.cos(m),v=-(b=this.e*this.cos_p12*M)*b/(1-this.es),_=3*this.es*(1-v)*this.sin_p12*this.cos_p12*M/(1-this.es),S=1-v*(x=(w=e/y)-v*(1+v)*Math.pow(w,3)/6-_*(1+3*v)*Math.pow(w,4)/24)*x/2-w*x*x*x/6,g=Math.asin(this.sin_p12*Math.cos(x)+this.cos_p12*Math.sin(x)*M),o=I(this.long0+Math.asin(Math.sin(m)*Math.sin(x)/Math.cos(g))),E=Math.sin(g),h=Math.atan2((E-this.es*S*this.sin_p12)*Math.tan(g),E*(1-this.es)),t.x=o,t.y=h,t)},names:["Azimuthal_Equidistant","aeqd"]},ce={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0)},forward:function(t){var e,i,r,n,a,o,h,u=t.x,l=t.y;return r=I(u-this.long0),e=Math.sin(l),i=Math.cos(l),n=Math.cos(r),((a=this.sin_p14*e+this.cos_p14*i*n)>0||Math.abs(a)<=s)&&(o=1*this.a*i*Math.sin(r),h=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*i*n)),t.x=o,t.y=h,t},inverse:function(t){var e,i,r,a,o,h,u;return t.x-=this.x0,t.y-=this.y0,i=Kt((e=Math.sqrt(t.x*t.x+t.y*t.y))/this.a),r=Math.sin(i),a=Math.cos(i),h=this.long0,Math.abs(e)<=s?(u=this.lat0,t.x=h,t.y=u,t):(u=Kt(a*this.sin_p14+t.y*r*this.cos_p14/e),o=Math.abs(this.lat0)-n,Math.abs(o)<=s?(h=this.lat0>=0?I(this.long0+Math.atan2(t.x,-t.y)):I(this.long0-Math.atan2(-t.x,t.y)),t.x=h,t.y=u,t):(h=I(this.long0+Math.atan2(t.x*r,e*this.cos_p14*a-t.y*this.sin_p14*r)),t.x=h,t.y=u,t))},names:["ortho"]};function fe(t,e,i,r){var a;return t<s?(r.value=1,a=0):(a=Math.atan2(e,i),Math.abs(a)<=h?r.value=1:a>h&&a<=n+h?(r.value=2,a-=n):a>n+h||a<=-(n+h)?(r.value=3,a=a>=0?a-l:a+l):(r.value=4,a+=n)),a}function pe(t,e){var i=t+e;return i<-l?i+=u:i>+l&&(i-=u),i}const de={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Quadrilateralized Spherical Cube",this.lat0>=n-h/2?this.face=5:this.lat0<=-(n-h/2)?this.face=6:Math.abs(this.long0)<=h?this.face=1:Math.abs(this.long0)<=n+h?this.face=this.long0>0?2:4:this.face=3,0!==this.es&&(this.one_minus_f=1-(this.a-this.b)/this.a,this.one_minus_f_squared=this.one_minus_f*this.one_minus_f)},forward:function(t){var e,i,r,s,a,o,u={x:0,y:0},c={value:0};if(t.x-=this.long0,e=0!==this.es?Math.atan(this.one_minus_f_squared*Math.tan(t.y)):t.y,i=t.x,5===this.face)s=n-e,i>=h&&i<=n+h?(c.value=1,r=i-n):i>n+h||i<=-(n+h)?(c.value=2,r=i>0?i-l:i+l):i>-(n+h)&&i<=-h?(c.value=3,r=i+n):(c.value=4,r=i);else if(6===this.face)s=n+e,i>=h&&i<=n+h?(c.value=1,r=-i+n):i<h&&i>=-h?(c.value=2,r=-i):i<-h&&i>=-(n+h)?(c.value=3,r=-i-n):(c.value=4,r=i>0?-i+l:-i-l);else{var f,p,d,y,g,m;2===this.face?i=pe(i,+n):3===this.face?i=pe(i,+l):4===this.face&&(i=pe(i,-n)),y=Math.sin(e),g=Math.cos(e),m=Math.sin(i),f=g*Math.cos(i),p=g*m,d=y,1===this.face?r=fe(s=Math.acos(f),d,p,c):2===this.face?r=fe(s=Math.acos(p),d,-f,c):3===this.face?r=fe(s=Math.acos(-f),d,-p,c):4===this.face?r=fe(s=Math.acos(-p),d,f,c):(s=r=0,c.value=1)}return o=Math.atan(12/l*(r+Math.acos(Math.sin(r)*Math.cos(h))-n)),a=Math.sqrt((1-Math.cos(s))/(Math.cos(o)*Math.cos(o))/(1-Math.cos(Math.atan(1/Math.cos(r))))),2===c.value?o+=n:3===c.value?o+=l:4===c.value&&(o+=1.5*l),u.x=a*Math.cos(o),u.y=a*Math.sin(o),u.x=u.x*this.a+this.x0,u.y=u.y*this.a+this.y0,t.x=u.x,t.y=u.y,t},inverse:function(t){var e,i,r,s,a,o,h,u,c,f,p,d,y={lam:0,phi:0},g={value:0};if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,i=Math.atan(Math.sqrt(t.x*t.x+t.y*t.y)),e=Math.atan2(t.y,t.x),t.x>=0&&t.x>=Math.abs(t.y)?g.value=1:t.y>=0&&t.y>=Math.abs(t.x)?(g.value=2,e-=n):t.x<0&&-t.x>=Math.abs(t.y)?(g.value=3,e=e<0?e+l:e-l):(g.value=4,e+=n),c=l/12*Math.tan(e),a=Math.sin(c)/(Math.cos(c)-1/Math.sqrt(2)),o=Math.atan(a),(h=1-(r=Math.cos(e))*r*(s=Math.tan(i))*s*(1-Math.cos(Math.atan(1/Math.cos(o)))))<-1?h=-1:h>1&&(h=1),5===this.face)u=Math.acos(h),y.phi=n-u,1===g.value?y.lam=o+n:2===g.value?y.lam=o<0?o+l:o-l:3===g.value?y.lam=o-n:y.lam=o;else if(6===this.face)u=Math.acos(h),y.phi=u-n,1===g.value?y.lam=-o+n:2===g.value?y.lam=-o:3===g.value?y.lam=-o-n:y.lam=o<0?-o-l:-o+l;else{var m,M,b;c=(m=h)*m,M=(c+=(b=c>=1?0:Math.sqrt(1-c)*Math.sin(o))*b)>=1?0:Math.sqrt(1-c),2===g.value?(c=M,M=-b,b=c):3===g.value?(M=-M,b=-b):4===g.value&&(c=M,M=b,b=-c),2===this.face?(c=m,m=-M,M=c):3===this.face?(m=-m,M=-M):4===this.face&&(c=m,m=M,M=-c),y.phi=Math.acos(-b)-n,y.lam=Math.atan2(M,m),2===this.face?y.lam=pe(y.lam,-n):3===this.face?y.lam=pe(y.lam,-l):4===this.face&&(y.lam=pe(y.lam,+n))}return 0!==this.es&&(f=y.phi<0?1:0,p=Math.tan(y.phi),d=this.b/Math.sqrt(p*p+this.one_minus_f_squared),y.phi=Math.atan(Math.sqrt(this.a*this.a-d*d)/(this.one_minus_f*d)),f&&(y.phi=-y.phi)),y.lam+=this.long0,t.x=y.lam,t.y=y.phi,t},names:["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"]};var ye=[[1,22199e-21,-715515e-10,31103e-10],[.9986,-482243e-9,-24897e-9,-13309e-10],[.9954,-83103e-8,-448605e-10,-9.86701e-7],[.99,-.00135364,-59661e-9,36777e-10],[.9822,-.00167442,-449547e-11,-572411e-11],[.973,-.00214868,-903571e-10,1.8736e-8],[.96,-.00305085,-900761e-10,164917e-11],[.9427,-.00382792,-653386e-10,-26154e-10],[.9216,-.00467746,-10457e-8,481243e-11],[.8962,-.00536223,-323831e-10,-543432e-11],[.8679,-.00609363,-113898e-9,332484e-11],[.835,-.00698325,-640253e-10,9.34959e-7],[.7986,-.00755338,-500009e-10,9.35324e-7],[.7597,-.00798324,-35971e-9,-227626e-11],[.7186,-.00851367,-701149e-10,-86303e-10],[.6732,-.00986209,-199569e-9,191974e-10],[.6213,-.010418,883923e-10,624051e-11],[.5722,-.00906601,182e-6,624051e-11],[.5322,-.00677797,275608e-9,624051e-11]],ge=[[-520417e-23,.0124,121431e-23,-845284e-16],[.062,.0124,-1.26793e-9,4.22642e-10],[.124,.0124,5.07171e-9,-1.60604e-9],[.186,.0123999,-1.90189e-8,6.00152e-9],[.248,.0124002,7.10039e-8,-2.24e-8],[.31,.0123992,-2.64997e-7,8.35986e-8],[.372,.0124029,9.88983e-7,-3.11994e-7],[.434,.0123893,-369093e-11,-4.35621e-7],[.4958,.0123198,-102252e-10,-3.45523e-7],[.5571,.0121916,-154081e-10,-5.82288e-7],[.6176,.0119938,-241424e-10,-5.25327e-7],[.6769,.011713,-320223e-10,-5.16405e-7],[.7346,.0113541,-397684e-10,-6.09052e-7],[.7903,.0109107,-489042e-10,-104739e-11],[.8435,.0103431,-64615e-9,-1.40374e-9],[.8936,.00969686,-64636e-9,-8547e-9],[.9394,.00840947,-192841e-9,-42106e-10],[.9761,.00616527,-256e-6,-42106e-10],[1,.00328947,-319159e-9,-42106e-10]],me=.8487,Me=1.3523,be=function(t,e){return t[0]+e*(t[1]+e*(t[2]+e*t[3]))};const ve={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.long0=this.long0||0,this.es=0,this.title=this.title||"Robinson"},forward:function(t){var e=I(t.x-this.long0),i=Math.abs(t.y),r=Math.floor(11.459155902616464*i);r<0?r=0:r>=18&&(r=17);var n={x:be(ye[r],i=o*(i-.08726646259971647*r))*e,y:be(ge[r],i)};return t.y<0&&(n.y=-n.y),n.x=n.x*this.a*me+this.x0,n.y=n.y*this.a*Me+this.y0,n},inverse:function(t){var e={x:(t.x-this.x0)/(this.a*me),y:Math.abs(t.y-this.y0)/(this.a*Me)};if(e.y>=1)e.x/=ye[18][0],e.y=t.y<0?-n:n;else{var i=Math.floor(18*e.y);for(i<0?i=0:i>=18&&(i=17);;)if(ge[i][0]>e.y)--i;else{if(!(ge[i+1][0]<=e.y))break;++i}var r=ge[i],s=5*(e.y-r[0])/(ge[i+1][0]-r[0]);s=function(t,e,i,r){for(var n=e;r;--r){var s=t(n);if(n-=s,Math.abs(s)<1e-10)break}return n}((function(t){return(be(r,t)-e.y)/function(t,e){return t[1]+e*(2*t[2]+3*e*t[3])}(r,t)}),s,0,100),e.x/=be(ye[i],s),e.y=(5*i+s)*a,t.y<0&&(e.y=-e.y)}return e.x=I(e.x+this.long0),e},names:["Robinson","robin"]},_e={init:function(){this.name="geocent"},forward:function(t){return V(t,this.es,this.a)},inverse:function(t){return X(t,this.es,this.a,this.b)},names:["Geocentric","geocentric","geocent","Geocent"]};var we={h:{def:1e5,num:!0},azi:{def:0,num:!0,degrees:!0},tilt:{def:0,num:!0,degrees:!0},long0:{def:0,num:!0},lat0:{def:0,num:!0}};const xe={init:function(){if(Object.keys(we).forEach(function(t){if(void 0===this[t])this[t]=we[t].def;else{if(we[t].num&&isNaN(this[t]))throw new Error("Invalid parameter value, must be numeric "+t+" = "+this[t]);we[t].num&&(this[t]=parseFloat(this[t]))}we[t].degrees&&(this[t]=this[t]*a)}.bind(this)),Math.abs(Math.abs(this.lat0)-n)<s?this.mode=this.lat0<0?1:0:Math.abs(this.lat0)<s?this.mode=2:(this.mode=3,this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0)),this.pn1=this.h/this.a,this.pn1<=0||this.pn1>1e10)throw new Error("Invalid height");this.p=1+this.pn1,this.rp=1/this.p,this.h1=1/this.pn1,this.pfact=(this.p+1)*this.h1,this.es=0;var t=this.tilt,e=this.azi;this.cg=Math.cos(e),this.sg=Math.sin(e),this.cw=Math.cos(t),this.sw=Math.sin(t)},forward:function(t){t.x-=this.long0;var e,i,r,n,s=Math.sin(t.y),a=Math.cos(t.y),o=Math.cos(t.x);switch(this.mode){case 3:i=this.sinph0*s+this.cosph0*a*o;break;case 2:i=a*o;break;case 1:i=-s;break;case 0:i=s}switch(e=(i=this.pn1/(this.p-i))*a*Math.sin(t.x),this.mode){case 3:i*=this.cosph0*s-this.sinph0*a*o;break;case 2:i*=s;break;case 0:i*=-a*o;break;case 1:i*=a*o}return n=1/((r=i*this.cg+e*this.sg)*this.sw*this.h1+this.cw),e=(e*this.cg-i*this.sg)*this.cw*n,i=r*n,t.x=e*this.a,t.y=i*this.a,t},inverse:function(t){t.x/=this.a,t.y/=this.a;var e,i,r,n={x:t.x,y:t.y};r=1/(this.pn1-t.y*this.sw),e=this.pn1*t.x*r,i=this.pn1*t.y*this.cw*r,t.x=e*this.cg+i*this.sg,t.y=i*this.cg-e*this.sg;var a=Tt(t.x,t.y);if(Math.abs(a)<s)n.x=0,n.y=t.y;else{var o,h;switch(h=1-a*a*this.pfact,h=(this.p-Math.sqrt(h))/(this.pn1/a+a/this.pn1),o=Math.sqrt(1-h*h),this.mode){case 3:n.y=Math.asin(o*this.sinph0+t.y*h*this.cosph0/a),t.y=(o-this.sinph0*Math.sin(n.y))*a,t.x*=h*this.cosph0;break;case 2:n.y=Math.asin(t.y*h/a),t.y=o*a,t.x*=h;break;case 0:n.y=Math.asin(o),t.y=-t.y;break;case 1:n.y=-Math.asin(o)}n.x=Math.atan2(t.x,t.y)}return t.x=n.x+this.long0,t.y=n.y,t},names:["Tilted_Perspective","tpers"]};var Se;rt.defaultDatum="WGS84",rt.Proj=Q,rt.WGS84=new rt.Proj("WGS84"),rt.Point=bt,rt.toPoint=J,rt.defs=P,rt.transform=Z,rt.mgrs=ut,rt.version="__VERSION__",(Se=rt).Proj.projections.add(Rt),Se.Proj.projections.add(kt),Se.Proj.projections.add(At),Se.Proj.projections.add(Lt),Se.Proj.projections.add(jt),Se.Proj.projections.add(Ut),Se.Proj.projections.add(qt),Se.Proj.projections.add(Bt),Se.Proj.projections.add(Gt),Se.Proj.projections.add(Yt),Se.Proj.projections.add(Jt),Se.Proj.projections.add(Zt),Se.Proj.projections.add(te),Se.Proj.projections.add(ee),Se.Proj.projections.add(ie),Se.Proj.projections.add(re),Se.Proj.projections.add(ne),Se.Proj.projections.add(se),Se.Proj.projections.add(ae),Se.Proj.projections.add(oe),Se.Proj.projections.add(he),Se.Proj.projections.add(ue),Se.Proj.projections.add(le),Se.Proj.projections.add(ce),Se.Proj.projections.add(de),Se.Proj.projections.add(ve),Se.Proj.projections.add(_e),Se.Proj.projections.add(xe);const Ee=rt},587:t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,i,r,n){i=i||"&",r=r||"=";var s={};if("string"!=typeof t||0===t.length)return s;var a=/\+/g;t=t.split(i);var o=1e3;n&&"number"==typeof n.maxKeys&&(o=n.maxKeys);var h=t.length;o>0&&h>o&&(h=o);for(var u=0;u<h;++u){var l,c,f,p,d=t[u].replace(a,"%20"),y=d.indexOf(r);y>=0?(l=d.substr(0,y),c=d.substr(y+1)):(l=d,c=""),f=decodeURIComponent(l),p=decodeURIComponent(c),e(s,f)?Array.isArray(s[f])?s[f].push(p):s[f]=[s[f],p]:s[f]=p}return s}},361:t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,i,r,n){return i=i||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(n){var s=encodeURIComponent(e(n))+r;return Array.isArray(t[n])?t[n].map((function(t){return s+encodeURIComponent(e(t))})).join(i):s+encodeURIComponent(e(t[n]))})).join(i):n?encodeURIComponent(e(n))+r+encodeURIComponent(e(t)):""}},673:(t,e,i)=>{"use strict";e.decode=e.parse=i(587),e.encode=e.stringify=i(361)},509:(t,e,i)=>{var r=i(764),n=r.Buffer;function s(t,e){for(var i in t)e[i]=t[i]}function a(t,e,i){return n(t,e,i)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=r:(s(r,e),e.Buffer=a),s(n,a),a.from=function(t,e,i){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,e,i)},a.alloc=function(t,e,i){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=n(t);return void 0!==e?"string"==typeof i?r.fill(e,i):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},501:(t,e,i)=>{var r=i(989),n=i(676),s=i(529),a=i(584),o=i(575),h=e;h.request=function(t,e){t="string"==typeof t?o.parse(t):s(t);var n=-1===i.g.location.protocol.search(/^https?:$/)?"http:":"",a=t.protocol||n,h=t.hostname||t.host,u=t.port,l=t.path||"/";h&&-1!==h.indexOf(":")&&(h="["+h+"]"),t.url=(h?a+"//"+h:"")+(u?":"+u:"")+l,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var c=new r(t);return e&&c.on("response",e),c},h.get=function(t,e){var i=h.request(t,e);return i.end(),i},h.ClientRequest=r,h.IncomingMessage=n.IncomingMessage,h.Agent=function(){},h.Agent.defaultMaxSockets=4,h.globalAgent=new h.Agent,h.STATUS_CODES=a,h.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]},725:(t,e,i)=>{var r;function n(){if(void 0!==r)return r;if(i.g.XMLHttpRequest){r=new i.g.XMLHttpRequest;try{r.open("GET",i.g.XDomainRequest?"/":"https://example.com")}catch(t){r=null}}else r=null;return r}function s(t){var e=n();if(!e)return!1;try{return e.responseType=t,e.responseType===t}catch(t){}return!1}function a(t){return"function"==typeof t}e.fetch=a(i.g.fetch)&&a(i.g.ReadableStream),e.writableStream=a(i.g.WritableStream),e.abortController=a(i.g.AbortController),e.arraybuffer=e.fetch||s("arraybuffer"),e.msstream=!e.fetch&&s("ms-stream"),e.mozchunkedarraybuffer=!e.fetch&&s("moz-chunked-arraybuffer"),e.overrideMimeType=e.fetch||!!n()&&a(n().overrideMimeType),r=null},989:(t,e,i)=>{var r=i(725),n=i(717),s=i(676),a=i(925),o=s.IncomingMessage,h=s.readyStates,u=t.exports=function(t){var e,i=this;a.Writable.call(i),i._opts=t,i._body=[],i._headers={},t.auth&&i.setHeader("Authorization","Basic "+Buffer.from(t.auth).toString("base64")),Object.keys(t.headers).forEach((function(e){i.setHeader(e,t.headers[e])}));var n=!0;if("disable-fetch"===t.mode||"requestTimeout"in t&&!r.abortController)n=!1,e=!0;else if("prefer-streaming"===t.mode)e=!1;else if("allow-wrong-content-type"===t.mode)e=!r.overrideMimeType;else{if(t.mode&&"default"!==t.mode&&"prefer-fast"!==t.mode)throw new Error("Invalid value for opts.mode");e=!0}i._mode=function(t,e){return r.fetch&&e?"fetch":r.mozchunkedarraybuffer?"moz-chunked-arraybuffer":r.msstream?"ms-stream":r.arraybuffer&&t?"arraybuffer":"text"}(e,n),i._fetchTimer=null,i.on("finish",(function(){i._onFinish()}))};n(u,a.Writable),u.prototype.setHeader=function(t,e){var i=t.toLowerCase();-1===l.indexOf(i)&&(this._headers[i]={name:t,value:e})},u.prototype.getHeader=function(t){var e=this._headers[t.toLowerCase()];return e?e.value:null},u.prototype.removeHeader=function(t){delete this._headers[t.toLowerCase()]},u.prototype._onFinish=function(){var t=this;if(!t._destroyed){var e=t._opts,n=t._headers,s=null;"GET"!==e.method&&"HEAD"!==e.method&&(s=new Blob(t._body,{type:(n["content-type"]||{}).value||""}));var a=[];if(Object.keys(n).forEach((function(t){var e=n[t].name,i=n[t].value;Array.isArray(i)?i.forEach((function(t){a.push([e,t])})):a.push([e,i])})),"fetch"===t._mode){var o=null;if(r.abortController){var u=new AbortController;o=u.signal,t._fetchAbortController=u,"requestTimeout"in e&&0!==e.requestTimeout&&(t._fetchTimer=i.g.setTimeout((function(){t.emit("requestTimeout"),t._fetchAbortController&&t._fetchAbortController.abort()}),e.requestTimeout))}i.g.fetch(t._opts.url,{method:t._opts.method,headers:a,body:s||void 0,mode:"cors",credentials:e.withCredentials?"include":"same-origin",signal:o}).then((function(e){t._fetchResponse=e,t._connect()}),(function(e){i.g.clearTimeout(t._fetchTimer),t._destroyed||t.emit("error",e)}))}else{var l=t._xhr=new i.g.XMLHttpRequest;try{l.open(t._opts.method,t._opts.url,!0)}catch(e){return void process.nextTick((function(){t.emit("error",e)}))}"responseType"in l&&(l.responseType=t._mode),"withCredentials"in l&&(l.withCredentials=!!e.withCredentials),"text"===t._mode&&"overrideMimeType"in l&&l.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in e&&(l.timeout=e.requestTimeout,l.ontimeout=function(){t.emit("requestTimeout")}),a.forEach((function(t){l.setRequestHeader(t[0],t[1])})),t._response=null,l.onreadystatechange=function(){switch(l.readyState){case h.LOADING:case h.DONE:t._onXHRProgress()}},"moz-chunked-arraybuffer"===t._mode&&(l.onprogress=function(){t._onXHRProgress()}),l.onerror=function(){t._destroyed||t.emit("error",new Error("XHR error"))};try{l.send(s)}catch(e){return void process.nextTick((function(){t.emit("error",e)}))}}}},u.prototype._onXHRProgress=function(){var t=this;(function(t){try{var e=t.status;return null!==e&&0!==e}catch(t){return!1}})(t._xhr)&&!t._destroyed&&(t._response||t._connect(),t._response._onXHRProgress())},u.prototype._connect=function(){var t=this;t._destroyed||(t._response=new o(t._xhr,t._fetchResponse,t._mode,t._fetchTimer),t._response.on("error",(function(e){t.emit("error",e)})),t.emit("response",t._response))},u.prototype._write=function(t,e,i){this._body.push(t),i()},u.prototype.abort=u.prototype.destroy=function(){var t=this;t._destroyed=!0,i.g.clearTimeout(t._fetchTimer),t._response&&(t._response._destroyed=!0),t._xhr?t._xhr.abort():t._fetchAbortController&&t._fetchAbortController.abort()},u.prototype.end=function(t,e,i){"function"==typeof t&&(i=t,t=void 0),a.Writable.prototype.end.call(this,t,e,i)},u.prototype.flushHeaders=function(){},u.prototype.setTimeout=function(){},u.prototype.setNoDelay=function(){},u.prototype.setSocketKeepAlive=function(){};var l=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]},676:(t,e,i)=>{var r=i(725),n=i(717),s=i(925),a=e.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},o=e.IncomingMessage=function(t,e,n,a){var o=this;if(s.Readable.call(o),o._mode=n,o.headers={},o.rawHeaders=[],o.trailers={},o.rawTrailers=[],o.on("end",(function(){process.nextTick((function(){o.emit("close")}))})),"fetch"===n){if(o._fetchResponse=e,o.url=e.url,o.statusCode=e.status,o.statusMessage=e.statusText,e.headers.forEach((function(t,e){o.headers[e.toLowerCase()]=t,o.rawHeaders.push(e,t)})),r.writableStream){var h=new WritableStream({write:function(t){return new Promise((function(e,i){o._destroyed?i():o.push(Buffer.from(t))?e():o._resumeFetch=e}))},close:function(){i.g.clearTimeout(a),o._destroyed||o.push(null)},abort:function(t){o._destroyed||o.emit("error",t)}});try{return void e.body.pipeTo(h).catch((function(t){i.g.clearTimeout(a),o._destroyed||o.emit("error",t)}))}catch(t){}}var u=e.body.getReader();!function t(){u.read().then((function(e){if(!o._destroyed){if(e.done)return i.g.clearTimeout(a),void o.push(null);o.push(Buffer.from(e.value)),t()}})).catch((function(t){i.g.clearTimeout(a),o._destroyed||o.emit("error",t)}))}()}else if(o._xhr=t,o._pos=0,o.url=t.responseURL,o.statusCode=t.status,o.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach((function(t){var e=t.match(/^([^:]+):\s*(.*)/);if(e){var i=e[1].toLowerCase();"set-cookie"===i?(void 0===o.headers[i]&&(o.headers[i]=[]),o.headers[i].push(e[2])):void 0!==o.headers[i]?o.headers[i]+=", "+e[2]:o.headers[i]=e[2],o.rawHeaders.push(e[1],e[2])}})),o._charset="x-user-defined",!r.overrideMimeType){var l=o.rawHeaders["mime-type"];if(l){var c=l.match(/;\s*charset=([^;])(;|$)/);c&&(o._charset=c[1].toLowerCase())}o._charset||(o._charset="utf-8")}};n(o,s.Readable),o.prototype._read=function(){var t=this._resumeFetch;t&&(this._resumeFetch=null,t())},o.prototype._onXHRProgress=function(){var t=this,e=t._xhr,r=null;switch(t._mode){case"text":if((r=e.responseText).length>t._pos){var n=r.substr(t._pos);if("x-user-defined"===t._charset){for(var s=Buffer.alloc(n.length),o=0;o<n.length;o++)s[o]=255&n.charCodeAt(o);t.push(s)}else t.push(n,t._charset);t._pos=r.length}break;case"arraybuffer":if(e.readyState!==a.DONE||!e.response)break;r=e.response,t.push(Buffer.from(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=e.response,e.readyState!==a.LOADING||!r)break;t.push(Buffer.from(new Uint8Array(r)));break;case"ms-stream":if(r=e.response,e.readyState!==a.LOADING)break;var h=new i.g.MSStreamReader;h.onprogress=function(){h.result.byteLength>t._pos&&(t.push(Buffer.from(new Uint8Array(h.result.slice(t._pos)))),t._pos=h.result.byteLength)},h.onload=function(){t.push(null)},h.readAsArrayBuffer(r)}t._xhr.readyState===a.DONE&&"ms-stream"!==t._mode&&t.push(null)}},303:t=>{"use strict";var e={};function i(t,i,r){r||(r=Error);var n=function(t){var e,r;function n(e,r,n){return t.call(this,function(t,e,r){return"string"==typeof i?i:i(t,e,r)}(e,r,n))||this}return r=t,(e=n).prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r,n}(r);n.prototype.name=r.name,n.prototype.code=t,e[t]=n}function r(t,e){if(Array.isArray(t)){var i=t.length;return t=t.map((function(t){return String(t)})),i>2?"one of ".concat(e," ").concat(t.slice(0,i-1).join(", "),", or ")+t[i-1]:2===i?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}i("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),i("ERR_INVALID_ARG_TYPE",(function(t,e,i){var n,s,a,o,h;if("string"==typeof e&&(s="not ",e.substr(0,s.length)===s)?(n="must not be",e=e.replace(/^not /,"")):n="must be",function(t,e,i){return(void 0===i||i>t.length)&&(i=t.length),t.substring(i-e.length,i)===e}(t," argument"))a="The ".concat(t," ").concat(n," ").concat(r(e,"type"));else{var u=("number"!=typeof h&&(h=0),h+".".length>(o=t).length||-1===o.indexOf(".",h)?"argument":"property");a='The "'.concat(t,'" ').concat(u," ").concat(n," ").concat(r(e,"type"))}return a+". Received type ".concat(typeof i)}),TypeError),i("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),i("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),i("ERR_STREAM_PREMATURE_CLOSE","Premature close"),i("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),i("ERR_STREAM_WRITE_AFTER_END","write after end"),i("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),i("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},560:(t,e,i)=>{"use strict";var r=Object.keys||function(t){var e=[];for(var i in t)e.push(i);return e};t.exports=u;var n=i(2),s=i(313);i(717)(u,n);for(var a=r(s.prototype),o=0;o<a.length;o++){var h=a[o];u.prototype[h]||(u.prototype[h]=s.prototype[h])}function u(t){if(!(this instanceof u))return new u(t);n.call(this,t),s.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",l)))}function l(){this._writableState.ended||process.nextTick(c,this)}function c(t){t.end()}Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(u.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(u.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(u.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},842:(t,e,i)=>{"use strict";t.exports=n;var r=i(846);function n(t){if(!(this instanceof n))return new n(t);r.call(this,t)}i(717)(n,r),n.prototype._transform=function(t,e,i){i(null,t)}},2:(t,e,i)=>{"use strict";var r;t.exports=S,S.ReadableState=x,i(187).EventEmitter;var n,s=function(t,e){return t.listeners(e).length},a=i(463),o=i(764).Buffer,h=i.g.Uint8Array||function(){},u=i(758);n=u&&u.debuglog?u.debuglog("stream"):function(){};var l,c,f,p=i(641),d=i(369),y=i(624).getHighWaterMark,g=i(303).q,m=g.ERR_INVALID_ARG_TYPE,M=g.ERR_STREAM_PUSH_AFTER_EOF,b=g.ERR_METHOD_NOT_IMPLEMENTED,v=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;i(717)(S,a);var _=d.errorOrDestroy,w=["error","close","destroy","pause","resume"];function x(t,e,n){r=r||i(560),t=t||{},"boolean"!=typeof n&&(n=e instanceof r),this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=y(this,t,"readableHighWaterMark",n),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(l||(l=i(553).s),this.decoder=new l(t.encoding),this.encoding=t.encoding)}function S(t){if(r=r||i(560),!(this instanceof S))return new S(t);var e=this instanceof r;this._readableState=new x(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function E(t,e,i,r,s){n("readableAddChunk",e);var a,u=t._readableState;if(null===e)u.reading=!1,function(t,e){if(n("onEofChunk"),!e.ended){if(e.decoder){var i=e.decoder.end();i&&i.length&&(e.buffer.push(i),e.length+=e.objectMode?1:i.length)}e.ended=!0,e.sync?O(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,C(t)))}}(t,u);else if(s||(a=function(t,e){var i,r;return r=e,o.isBuffer(r)||r instanceof h||"string"==typeof e||void 0===e||t.objectMode||(i=new m("chunk",["string","Buffer","Uint8Array"],e)),i}(u,e)),a)_(t,a);else if(u.objectMode||e&&e.length>0)if("string"==typeof e||u.objectMode||Object.getPrototypeOf(e)===o.prototype||(e=function(t){return o.from(t)}(e)),r)u.endEmitted?_(t,new v):R(t,u,e,!0);else if(u.ended)_(t,new M);else{if(u.destroyed)return!1;u.reading=!1,u.decoder&&!i?(e=u.decoder.write(e),u.objectMode||0!==e.length?R(t,u,e,!1):k(t,u)):R(t,u,e,!1)}else r||(u.reading=!1,k(t,u));return!u.ended&&(u.length<u.highWaterMark||0===u.length)}function R(t,e,i,r){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",i)):(e.length+=e.objectMode?1:i.length,r?e.buffer.unshift(i):e.buffer.push(i),e.needReadable&&O(t)),k(t,e)}Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),S.prototype.destroy=d.destroy,S.prototype._undestroy=d.undestroy,S.prototype._destroy=function(t,e){e(t)},S.prototype.push=function(t,e){var i,r=this._readableState;return r.objectMode?i=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=o.from(t,e),e=""),i=!0),E(this,t,e,!1,i)},S.prototype.unshift=function(t){return E(this,t,null,!0,!1)},S.prototype.isPaused=function(){return!1===this._readableState.flowing},S.prototype.setEncoding=function(t){l||(l=i(553).s);var e=new l(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,n="";null!==r;)n+=e.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==n&&this._readableState.buffer.push(n),this._readableState.length=n.length,this};var P=1073741824;function T(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=P?t=P:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function O(t){var e=t._readableState;n("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(n("emitReadable",e.flowing),e.emittedReadable=!0,process.nextTick(C,t))}function C(t){var e=t._readableState;n("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function k(t,e){e.readingMore||(e.readingMore=!0,process.nextTick(A,t,e))}function A(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var i=e.length;if(n("maybeReadMore read 0"),t.read(0),i===e.length)break}e.readingMore=!1}function I(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function N(t){n("readable nexttick read 0"),t.read(0)}function L(t,e){n("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(n("flow",e.flowing);e.flowing&&null!==t.read(););}function U(t,e){return 0===e.length?null:(e.objectMode?i=e.buffer.shift():!t||t>=e.length?(i=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):i=e.buffer.consume(t,e.decoder),i);var i}function q(t){var e=t._readableState;n("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,process.nextTick(B,e,t))}function B(t,e){if(n("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var i=e._writableState;(!i||i.autoDestroy&&i.finished)&&e.destroy()}}function G(t,e){for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i;return-1}S.prototype.read=function(t){n("read",t),t=parseInt(t,10);var e=this._readableState,i=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return n("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?q(this):O(this),null;if(0===(t=T(t,e))&&e.ended)return 0===e.length&&q(this),null;var r,s=e.needReadable;return n("need readable",s),(0===e.length||e.length-t<e.highWaterMark)&&n("length less than watermark",s=!0),e.ended||e.reading?n("reading or ended",s=!1):s&&(n("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=T(i,e))),null===(r=t>0?U(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),i!==t&&e.ended&&q(this)),null!==r&&this.emit("data",r),r},S.prototype._read=function(t){_(this,new b("_read()"))},S.prototype.pipe=function(t,e){var i=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=t;break;case 1:r.pipes=[r.pipes,t];break;default:r.pipes.push(t)}r.pipesCount+=1,n("pipe count=%d opts=%j",r.pipesCount,e);var a=e&&!1===e.end||t===process.stdout||t===process.stderr?d:o;function o(){n("onend"),t.end()}r.endEmitted?process.nextTick(a):i.once("end",a),t.on("unpipe",(function e(s,a){n("onunpipe"),s===i&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,n("cleanup"),t.removeListener("close",f),t.removeListener("finish",p),t.removeListener("drain",h),t.removeListener("error",c),t.removeListener("unpipe",e),i.removeListener("end",o),i.removeListener("end",d),i.removeListener("data",l),u=!0,!r.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}));var h=function(t){return function(){var e=t._readableState;n("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,j(t))}}(i);t.on("drain",h);var u=!1;function l(e){n("ondata");var s=t.write(e);n("dest.write",s),!1===s&&((1===r.pipesCount&&r.pipes===t||r.pipesCount>1&&-1!==G(r.pipes,t))&&!u&&(n("false write response, pause",r.awaitDrain),r.awaitDrain++),i.pause())}function c(e){n("onerror",e),d(),t.removeListener("error",c),0===s(t,"error")&&_(t,e)}function f(){t.removeListener("finish",p),d()}function p(){n("onfinish"),t.removeListener("close",f),d()}function d(){n("unpipe"),i.unpipe(t)}return i.on("data",l),function(t,e,i){if("function"==typeof t.prependListener)return t.prependListener(e,i);t._events&&t._events.error?Array.isArray(t._events.error)?t._events.error.unshift(i):t._events.error=[i,t._events.error]:t.on(e,i)}(t,"error",c),t.once("close",f),t.once("finish",p),t.emit("pipe",i),r.flowing||(n("pipe resume"),i.resume()),t},S.prototype.unpipe=function(t){var e=this._readableState,i={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,i)),this;if(!t){var r=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var s=0;s<n;s++)r[s].emit("unpipe",this,{hasUnpiped:!1});return this}var a=G(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,i)),this},S.prototype.on=function(t,e){var i=a.prototype.on.call(this,t,e),r=this._readableState;return"data"===t?(r.readableListening=this.listenerCount("readable")>0,!1!==r.flowing&&this.resume()):"readable"===t&&(r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.flowing=!1,r.emittedReadable=!1,n("on readable",r.length,r.reading),r.length?O(this):r.reading||process.nextTick(N,this))),i},S.prototype.addListener=S.prototype.on,S.prototype.removeListener=function(t,e){var i=a.prototype.removeListener.call(this,t,e);return"readable"===t&&process.nextTick(I,this),i},S.prototype.removeAllListeners=function(t){var e=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||process.nextTick(I,this),e},S.prototype.resume=function(){var t=this._readableState;return t.flowing||(n("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,process.nextTick(L,t,e))}(this,t)),t.paused=!1,this},S.prototype.pause=function(){return n("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(n("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},S.prototype.wrap=function(t){var e=this,i=this._readableState,r=!1;for(var s in t.on("end",(function(){if(n("wrapped end"),i.decoder&&!i.ended){var t=i.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(s){n("wrapped data"),i.decoder&&(s=i.decoder.write(s)),i.objectMode&&null==s||(i.objectMode||s&&s.length)&&(e.push(s)||(r=!0,t.pause()))})),t)void 0===this[s]&&"function"==typeof t[s]&&(this[s]=function(e){return function(){return t[e].apply(t,arguments)}}(s));for(var a=0;a<w.length;a++)t.on(w[a],this.emit.bind(this,w[a]));return this._read=function(e){n("wrapped _read",e),r&&(r=!1,t.resume())},this},"function"==typeof Symbol&&(S.prototype[Symbol.asyncIterator]=function(){return void 0===c&&(c=i(819)),c(this)}),Object.defineProperty(S.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(S.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(S.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),S._fromList=U,Object.defineProperty(S.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(S.from=function(t,e){return void 0===f&&(f=i(869)),f(S,t,e)})},846:(t,e,i)=>{"use strict";t.exports=l;var r=i(303).q,n=r.ERR_METHOD_NOT_IMPLEMENTED,s=r.ERR_MULTIPLE_CALLBACK,a=r.ERR_TRANSFORM_ALREADY_TRANSFORMING,o=r.ERR_TRANSFORM_WITH_LENGTH_0,h=i(560);function u(t,e){var i=this._transformState;i.transforming=!1;var r=i.writecb;if(null===r)return this.emit("error",new s);i.writechunk=null,i.writecb=null,null!=e&&this.push(e),r(t);var n=this._readableState;n.reading=!1,(n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);h.call(this,t),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",c)}function c(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?f(this,null,null):this._flush((function(e,i){f(t,e,i)}))}function f(t,e,i){if(e)return t.emit("error",e);if(null!=i&&t.push(i),t._writableState.length)throw new o;if(t._transformState.transforming)throw new a;return t.push(null)}i(717)(l,h),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,h.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,i){i(new n("_transform()"))},l.prototype._write=function(t,e,i){var r=this._transformState;if(r.writecb=i,r.writechunk=t,r.writeencoding=e,!r.transforming){var n=this._readableState;(r.needTransform||n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){h.prototype._destroy.call(this,t,(function(t){e(t)}))}},313:(t,e,i)=>{"use strict";function r(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,i){var r=t.entry;for(t.entry=null;r;){var n=r.callback;e.pendingcb--,n(undefined),r=r.next}e.corkedRequestsFree.next=t}(e,t)}}var n;t.exports=S,S.WritableState=x;var s,a={deprecate:i(927)},o=i(463),h=i(764).Buffer,u=i.g.Uint8Array||function(){},l=i(369),c=i(624).getHighWaterMark,f=i(303).q,p=f.ERR_INVALID_ARG_TYPE,d=f.ERR_METHOD_NOT_IMPLEMENTED,y=f.ERR_MULTIPLE_CALLBACK,g=f.ERR_STREAM_CANNOT_PIPE,m=f.ERR_STREAM_DESTROYED,M=f.ERR_STREAM_NULL_VALUES,b=f.ERR_STREAM_WRITE_AFTER_END,v=f.ERR_UNKNOWN_ENCODING,_=l.errorOrDestroy;function w(){}function x(t,e,s){n=n||i(560),t=t||{},"boolean"!=typeof s&&(s=e instanceof n),this.objectMode=!!t.objectMode,s&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=c(this,t,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===t.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var i=t._writableState,r=i.sync,n=i.writecb;if("function"!=typeof n)throw new y;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(i),e)!function(t,e,i,r,n){--e.pendingcb,i?(process.nextTick(n,r),process.nextTick(C,t,e),t._writableState.errorEmitted=!0,_(t,r)):(n(r),t._writableState.errorEmitted=!0,_(t,r),C(t,e))}(t,i,r,e,n);else{var s=T(i)||t.destroyed;s||i.corked||i.bufferProcessing||!i.bufferedRequest||P(t,i),r?process.nextTick(R,t,i,s,n):R(t,i,s,n)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new r(this)}function S(t){var e=this instanceof(n=n||i(560));if(!e&&!s.call(S,this))return new S(t);this._writableState=new x(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),o.call(this)}function E(t,e,i,r,n,s,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new m("write")):i?t._writev(n,e.onwrite):t._write(n,s,e.onwrite),e.sync=!1}function R(t,e,i,r){i||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),C(t,e)}function P(t,e){e.bufferProcessing=!0;var i=e.bufferedRequest;if(t._writev&&i&&i.next){var n=e.bufferedRequestCount,s=new Array(n),a=e.corkedRequestsFree;a.entry=i;for(var o=0,h=!0;i;)s[o]=i,i.isBuf||(h=!1),i=i.next,o+=1;s.allBuffers=h,E(t,e,!0,e.length,s,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new r(e),e.bufferedRequestCount=0}else{for(;i;){var u=i.chunk,l=i.encoding,c=i.callback;if(E(t,e,!1,e.objectMode?1:u.length,u,l,c),i=i.next,e.bufferedRequestCount--,e.writing)break}null===i&&(e.lastBufferedRequest=null)}e.bufferedRequest=i,e.bufferProcessing=!1}function T(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function O(t,e){t._final((function(i){e.pendingcb--,i&&_(t,i),e.prefinished=!0,t.emit("prefinish"),C(t,e)}))}function C(t,e){var i=T(e);if(i&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,process.nextTick(O,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var r=t._readableState;(!r||r.autoDestroy&&r.endEmitted)&&t.destroy()}return i}i(717)(S,o),x.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(x.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(S,Symbol.hasInstance,{value:function(t){return!!s.call(this,t)||this===S&&t&&t._writableState instanceof x}})):s=function(t){return t instanceof this},S.prototype.pipe=function(){_(this,new g)},S.prototype.write=function(t,e,i){var r,n=this._writableState,s=!1,a=!n.objectMode&&(r=t,h.isBuffer(r)||r instanceof u);return a&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(i=e,e=null),a?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof i&&(i=w),n.ending?function(t,e){var i=new b;_(t,i),process.nextTick(e,i)}(this,i):(a||function(t,e,i,r){var n;return null===i?n=new M:"string"==typeof i||e.objectMode||(n=new p("chunk",["string","Buffer"],i)),!n||(_(t,n),process.nextTick(r,n),!1)}(this,n,t,i))&&(n.pendingcb++,s=function(t,e,i,r,n,s){if(!i){var a=function(t,e,i){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,i)),e}(e,r,n);r!==a&&(i=!0,n="buffer",r=a)}var o=e.objectMode?1:r.length;e.length+=o;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:n,isBuf:i,callback:s,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else E(t,e,!1,o,r,n,s);return u}(this,n,a,t,e,i)),s},S.prototype.cork=function(){this._writableState.corked++},S.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||P(this,t))},S.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new v(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(S.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(S.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),S.prototype._write=function(t,e,i){i(new d("_write()"))},S.prototype._writev=null,S.prototype.end=function(t,e,i){var r=this._writableState;return"function"==typeof t?(i=t,t=null,e=null):"function"==typeof e&&(i=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||function(t,e,i){e.ending=!0,C(t,e),i&&(e.finished?process.nextTick(i):t.once("finish",i)),e.ended=!0,t.writable=!1}(this,r,i),this},Object.defineProperty(S.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(S.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),S.prototype.destroy=l.destroy,S.prototype._undestroy=l.undestroy,S.prototype._destroy=function(t,e){e(t)}},819:(t,e,i)=>{"use strict";var r;function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var s=i(467),a=Symbol("lastResolve"),o=Symbol("lastReject"),h=Symbol("error"),u=Symbol("ended"),l=Symbol("lastPromise"),c=Symbol("handlePromise"),f=Symbol("stream");function p(t,e){return{value:t,done:e}}function d(t){var e=t[a];if(null!==e){var i=t[f].read();null!==i&&(t[l]=null,t[a]=null,t[o]=null,e(p(i,!1)))}}function y(t){process.nextTick(d,t)}var g=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((n(r={get stream(){return this[f]},next:function(){var t=this,e=this[h];if(null!==e)return Promise.reject(e);if(this[u])return Promise.resolve(p(void 0,!0));if(this[f].destroyed)return new Promise((function(e,i){process.nextTick((function(){t[h]?i(t[h]):e(p(void 0,!0))}))}));var i,r=this[l];if(r)i=new Promise(function(t,e){return function(i,r){t.then((function(){e[u]?i(p(void 0,!0)):e[c](i,r)}),r)}}(r,this));else{var n=this[f].read();if(null!==n)return Promise.resolve(p(n,!1));i=new Promise(this[c])}return this[l]=i,i}},Symbol.asyncIterator,(function(){return this})),n(r,"return",(function(){var t=this;return new Promise((function(e,i){t[f].destroy(null,(function(t){t?i(t):e(p(void 0,!0))}))}))})),r),g);t.exports=function(t){var e,i=Object.create(m,(n(e={},f,{value:t,writable:!0}),n(e,a,{value:null,writable:!0}),n(e,o,{value:null,writable:!0}),n(e,h,{value:null,writable:!0}),n(e,u,{value:t._readableState.endEmitted,writable:!0}),n(e,c,{value:function(t,e){var r=i[f].read();r?(i[l]=null,i[a]=null,i[o]=null,t(p(r,!1))):(i[a]=t,i[o]=e)},writable:!0}),e));return i[l]=null,s(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=i[o];return null!==e&&(i[l]=null,i[a]=null,i[o]=null,e(t)),void(i[h]=t)}var r=i[a];null!==r&&(i[l]=null,i[a]=null,i[o]=null,r(p(void 0,!0))),i[u]=!0})),t.on("readable",y.bind(null,i)),i}},641:(t,e,i)=>{"use strict";function r(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,r)}return i}function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function s(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=i(764).Buffer,o=i(758).inspect,h=o&&o.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,i;return e=t,(i=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,i=""+e.data;e=e.next;)i+=t+e.data;return i}},{key:"concat",value:function(t){if(0===this.length)return a.alloc(0);for(var e,i,r,n=a.allocUnsafe(t>>>0),s=this.head,o=0;s;)e=s.data,i=n,r=o,a.prototype.copy.call(e,i,r),o+=s.data.length,s=s.next;return n}},{key:"consume",value:function(t,e){var i;return t<this.head.data.length?(i=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):i=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),i}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,i=1,r=e.data;for(t-=r.length;e=e.next;){var n=e.data,s=t>n.length?n.length:t;if(s===n.length?r+=n:r+=n.slice(0,t),0==(t-=s)){s===n.length?(++i,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=n.slice(s));break}++i}return this.length-=i,r}},{key:"_getBuffer",value:function(t){var e=a.allocUnsafe(t),i=this.head,r=1;for(i.data.copy(e),t-=i.data.length;i=i.next;){var n=i.data,s=t>n.length?n.length:t;if(n.copy(e,e.length-t,0,s),0==(t-=s)){s===n.length?(++r,i.next?this.head=i.next:this.head=this.tail=null):(this.head=i,i.data=n.slice(s));break}++r}return this.length-=r,e}},{key:h,value:function(t,e){return o(this,function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?r(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}])&&s(e.prototype,i),t}()},369:t=>{"use strict";function e(t,e){r(t,e),i(t)}function i(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function r(t,e){t.emit("error",e)}t.exports={destroy:function(t,n){var s=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(n?n(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(r,this,t)):process.nextTick(r,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!n&&t?s._writableState?s._writableState.errorEmitted?process.nextTick(i,s):(s._writableState.errorEmitted=!0,process.nextTick(e,s,t)):process.nextTick(e,s,t):n?(process.nextTick(i,s),n(t)):process.nextTick(i,s)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var i=t._readableState,r=t._writableState;i&&i.autoDestroy||r&&r.autoDestroy?t.destroy(e):t.emit("error",e)}}},467:(t,e,i)=>{"use strict";var r=i(303).q.ERR_STREAM_PREMATURE_CLOSE;function n(){}t.exports=function t(e,i,s){if("function"==typeof i)return t(e,null,i);i||(i={}),s=function(t){var e=!1;return function(){if(!e){e=!0;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];t.apply(this,r)}}}(s||n);var a=i.readable||!1!==i.readable&&e.readable,o=i.writable||!1!==i.writable&&e.writable,h=function(){e.writable||l()},u=e._writableState&&e._writableState.finished,l=function(){o=!1,u=!0,a||s.call(e)},c=e._readableState&&e._readableState.endEmitted,f=function(){a=!1,c=!0,o||s.call(e)},p=function(t){s.call(e,t)},d=function(){var t;return a&&!c?(e._readableState&&e._readableState.ended||(t=new r),s.call(e,t)):o&&!u?(e._writableState&&e._writableState.ended||(t=new r),s.call(e,t)):void 0},y=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",d),e.req?y():e.on("request",y)):o&&!e._writableState&&(e.on("end",h),e.on("close",h)),e.on("end",f),e.on("finish",l),!1!==i.error&&e.on("error",p),e.on("close",d),function(){e.removeListener("complete",l),e.removeListener("abort",d),e.removeListener("request",y),e.req&&e.req.removeListener("finish",l),e.removeListener("end",h),e.removeListener("close",h),e.removeListener("finish",l),e.removeListener("end",f),e.removeListener("error",p),e.removeListener("close",d)}}},869:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},689:(t,e,i)=>{"use strict";var r,n=i(303).q,s=n.ERR_MISSING_ARGS,a=n.ERR_STREAM_DESTROYED;function o(t){if(t)throw t}function h(t,e,n,s){s=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(s);var o=!1;t.on("close",(function(){o=!0})),void 0===r&&(r=i(467)),r(t,{readable:e,writable:n},(function(t){if(t)return s(t);o=!0,s()}));var h=!1;return function(e){if(!o&&!h)return h=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void s(e||new a("pipe"))}}function u(t){t()}function l(t,e){return t.pipe(e)}function c(t){return t.length?"function"!=typeof t[t.length-1]?o:t.pop():o}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r,n=c(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new s("streams");var a=e.map((function(t,i){var s=i<e.length-1;return h(t,s,i>0,(function(t){r||(r=t),t&&a.forEach(u),s||(a.forEach(u),n(r))}))}));return e.reduce(l)}},624:(t,e,i)=>{"use strict";var r=i(303).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,i,n){var s=function(t,e,i){return null!=t.highWaterMark?t.highWaterMark:e?t[i]:null}(e,n,i);if(null!=s){if(!isFinite(s)||Math.floor(s)!==s||s<0)throw new r(n?i:"highWaterMark",s);return Math.floor(s)}return t.objectMode?16:16384}}},463:(t,e,i)=>{t.exports=i(187).EventEmitter},925:(t,e,i)=>{(e=t.exports=i(2)).Stream=e,e.Readable=e,e.Writable=i(313),e.Duplex=i(560),e.Transform=i(846),e.PassThrough=i(842),e.finished=i(467),e.pipeline=i(689)},553:(t,e,i)=>{"use strict";var r=i(509).Buffer,n=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function s(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===n||!n(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=h,this.end=u,e=4;break;case"utf8":this.fillLast=o,e=4;break;case"base64":this.text=l,this.end=c,e=3;break;default:return this.write=f,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function o(t){var e=this.lastTotal-this.lastNeed,i=function(t,e,i){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==i?i:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function h(t,e){if((t.length-e)%2==0){var i=t.toString("utf16le",e);if(i){var r=i.charCodeAt(i.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],i.slice(0,-1)}return i}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function u(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var i=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,i)}return e}function l(t,e){var i=(t.length-e)%3;return 0===i?t.toString("base64",e):(this.lastNeed=3-i,this.lastTotal=3,1===i?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-i))}function c(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function f(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.s=s,s.prototype.write=function(t){if(0===t.length)return"";var e,i;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";i=this.lastNeed,this.lastNeed=0}else i=0;return i<t.length?e?e+this.text(t,i):this.text(t,i):e||""},s.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},s.prototype.text=function(t,e){var i=function(t,e,i){var r=e.length-1;if(r<i)return 0;var n=a(e[r]);return n>=0?(n>0&&(t.lastNeed=n-1),n):--r<i||-2===n?0:(n=a(e[r]))>=0?(n>0&&(t.lastNeed=n-2),n):--r<i||-2===n?0:(n=a(e[r]))>=0?(n>0&&(2===n?n=0:t.lastNeed=n-3),n):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=i;var r=t.length-(i-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},s.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},741:function(t){t.exports=function(t){function e(r){if(i[r])return i[r].exports;var n=i[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,e),n.l=!0,n.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,r){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=1)}([function(t,e,i){"use strict";var r,n=this&&this.__assign||Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t};Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return r.execute(t)},function(t){t.execute=function(e){var i;return null===e?i=e:e instanceof Date?i=new Date(e.getTime()):Array.isArray(e)?(i=[],e.forEach((function(t,e,r){i.push(t)})),i=i.map((function(e){return t.execute(e)}))):"object"==typeof e&&e!=={}?(i=n({},e),Object.keys(i).forEach((function(e){i[e]=t.execute(i[e])}))):i=e,i},t.isPrimitive=function(){}}(r||(r={}))},function(t,e,i){t.exports=i(0)}])},655:(t,e,i)=>{"use strict";i.r(e),i.d(e,{__extends:()=>n,__assign:()=>s,__rest:()=>a,__decorate:()=>o,__param:()=>h,__metadata:()=>u,__awaiter:()=>l,__generator:()=>c,__createBinding:()=>f,__exportStar:()=>p,__values:()=>d,__read:()=>y,__spread:()=>g,__spreadArrays:()=>m,__await:()=>M,__asyncGenerator:()=>b,__asyncDelegator:()=>v,__asyncValues:()=>_,__makeTemplateObject:()=>w,__importStar:()=>x,__importDefault:()=>S,__classPrivateFieldGet:()=>E,__classPrivateFieldSet:()=>R});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};function n(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var s=function(){return(s=Object.assign||function(t){for(var e,i=1,r=arguments.length;i<r;i++)for(var n in e=arguments[i])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function a(t,e){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(i[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(t);n<r.length;n++)e.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(t,r[n])&&(i[r[n]]=t[r[n]])}return i}function o(t,e,i,r){var n,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,i,r);else for(var o=t.length-1;o>=0;o--)(n=t[o])&&(a=(s<3?n(a):s>3?n(e,i,a):n(e,i))||a);return s>3&&a&&Object.defineProperty(e,i,a),a}function h(t,e){return function(i,r){e(i,r,t)}}function u(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,i,r){return new(i||(i=Promise))((function(n,s){function a(t){try{h(r.next(t))}catch(t){s(t)}}function o(t){try{h(r.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,o)}h((r=r.apply(t,e||[])).next())}))}function c(t,e){var i,r,n,s,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((n=(n=a.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){a.label=s[1];break}if(6===s[0]&&a.label<n[1]){a.label=n[1],n=s;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(s);break}n[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}function f(t,e,i,r){void 0===r&&(r=i),t[r]=e[i]}function p(t,e){for(var i in t)"default"===i||e.hasOwnProperty(i)||(e[i]=t[i])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],r=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var r,n,s=i.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=s.next()).done;)a.push(r.value)}catch(t){n={error:t}}finally{try{r&&!r.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}return a}function g(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function m(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var r=Array(t),n=0;for(e=0;e<i;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,n++)r[n]=s[a];return r}function M(t){return this instanceof M?(this.v=t,this):new M(t)}function b(t,e,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,n=i.apply(t,e||[]),s=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){n[t]&&(r[t]=function(e){return new Promise((function(i,r){s.push([t,e,i,r])>1||o(t,e)}))})}function o(t,e){try{(i=n[t](e)).value instanceof M?Promise.resolve(i.value.v).then(h,u):l(s[0][2],i)}catch(t){l(s[0][3],t)}var i}function h(t){o("next",t)}function u(t){o("throw",t)}function l(t,e){t(e),s.shift(),s.length&&o(s[0][0],s[0][1])}}function v(t){var e,i;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,n){e[r]=t[r]?function(e){return(i=!i)?{value:M(t[r](e)),done:"return"===r}:n?n(e):e}:n}}function _(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,i=t[Symbol.asyncIterator];return i?i.call(t):(t=d(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(i){e[i]=t[i]&&function(e){return new Promise((function(r,n){!function(t,e,i,r){Promise.resolve(r).then((function(e){t({value:e,done:i})}),e)}(r,n,(e=t[i](e)).done,e.value)}))}}}function w(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function x(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}function S(t){return t&&t.__esModule?t:{default:t}}function E(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function R(t,e,i){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,i),i}},511:function(t,e,i){var r;t=i.nmd(t),function(n){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof i.g&&i.g;s.global!==s&&s.window!==s&&s.self;var a,o=2147483647,h=36,u=/^xn--/,l=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,d=String.fromCharCode;function y(t){throw RangeError(f[t])}function g(t,e){for(var i=t.length,r=[];i--;)r[i]=e(t[i]);return r}function m(t,e){var i=t.split("@"),r="";return i.length>1&&(r=i[0]+"@",t=i[1]),r+g((t=t.replace(c,".")).split("."),e).join(".")}function M(t){for(var e,i,r=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(i=t.charCodeAt(n++)))?r.push(((1023&e)<<10)+(1023&i)+65536):(r.push(e),n--):r.push(e);return r}function b(t){return g(t,(function(t){var e="";return t>65535&&(e+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+d(t)})).join("")}function v(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function _(t,e,i){var r=0;for(t=i?p(t/700):t>>1,t+=p(t/e);t>455;r+=h)t=p(t/35);return p(r+36*t/(t+38))}function w(t){var e,i,r,n,s,a,u,l,c,f,d,g=[],m=t.length,M=0,v=128,w=72;for((i=t.lastIndexOf("-"))<0&&(i=0),r=0;r<i;++r)t.charCodeAt(r)>=128&&y("not-basic"),g.push(t.charCodeAt(r));for(n=i>0?i+1:0;n<m;){for(s=M,a=1,u=h;n>=m&&y("invalid-input"),((l=(d=t.charCodeAt(n++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:h)>=h||l>p((o-M)/a))&&y("overflow"),M+=l*a,!(l<(c=u<=w?1:u>=w+26?26:u-w));u+=h)a>p(o/(f=h-c))&&y("overflow"),a*=f;w=_(M-s,e=g.length+1,0==s),p(M/e)>o-v&&y("overflow"),v+=p(M/e),M%=e,g.splice(M++,0,v)}return b(g)}function x(t){var e,i,r,n,s,a,u,l,c,f,g,m,b,w,x,S=[];for(m=(t=M(t)).length,e=128,i=0,s=72,a=0;a<m;++a)(g=t[a])<128&&S.push(d(g));for(r=n=S.length,n&&S.push("-");r<m;){for(u=o,a=0;a<m;++a)(g=t[a])>=e&&g<u&&(u=g);for(u-e>p((o-i)/(b=r+1))&&y("overflow"),i+=(u-e)*b,e=u,a=0;a<m;++a)if((g=t[a])<e&&++i>o&&y("overflow"),g==e){for(l=i,c=h;!(l<(f=c<=s?1:c>=s+26?26:c-s));c+=h)x=l-f,w=h-f,S.push(d(v(f+x%w,0))),l=p(x/w);S.push(d(v(l,0))),s=_(i,b,r==n),i=0,++r}++i,++e}return S.join("")}a={version:"1.3.2",ucs2:{decode:M,encode:b},decode:w,encode:x,toASCII:function(t){return m(t,(function(t){return l.test(t)?"xn--"+x(t):t}))},toUnicode:function(t){return m(t,(function(t){return u.test(t)?w(t.slice(4).toLowerCase()):t}))}},void 0===(r=function(){return a}.call(e,i,e,t))||(t.exports=r)}()},575:(t,e,i)=>{"use strict";var r=i(511),n=i(502);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=b,e.resolve=function(t,e){return b(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?b(t,!1,!0).resolveObject(e):e},e.format=function(t){return n.isString(t)&&(t=b(t)),t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var a=/^([a-z0-9.+-]+:)/i,o=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(u),c=["%","/","?",";","#"].concat(l),f=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,y={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},M=i(673);function b(t,e,i){if(t&&n.isObject(t)&&t instanceof s)return t;var r=new s;return r.parse(t,e,i),r}s.prototype.parse=function(t,e,i){if(!n.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),o=-1!==s&&s<t.indexOf("#")?"?":"#",u=t.split(o);u[0]=u[0].replace(/\\/g,"/");var b=t=u.join(o);if(b=b.trim(),!i&&1===t.split("#").length){var v=h.exec(b);if(v)return this.path=b,this.href=b,this.pathname=v[1],v[2]?(this.search=v[2],this.query=e?M.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var _=a.exec(b);if(_){var w=(_=_[0]).toLowerCase();this.protocol=w,b=b.substr(_.length)}if(i||_||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===b.substr(0,2);!x||_&&g[_]||(b=b.substr(2),this.slashes=!0)}if(!g[_]&&(x||_&&!m[_])){for(var S,E,R=-1,P=0;P<f.length;P++)-1!==(T=b.indexOf(f[P]))&&(-1===R||T<R)&&(R=T);for(-1!==(E=-1===R?b.lastIndexOf("@"):b.lastIndexOf("@",R))&&(S=b.slice(0,E),b=b.slice(E+1),this.auth=decodeURIComponent(S)),R=-1,P=0;P<c.length;P++){var T;-1!==(T=b.indexOf(c[P]))&&(-1===R||T<R)&&(R=T)}-1===R&&(R=b.length),this.host=b.slice(0,R),b=b.slice(R),this.parseHost(),this.hostname=this.hostname||"";var O="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!O)for(var C=this.hostname.split(/\./),k=(P=0,C.length);P<k;P++){var A=C[P];if(A&&!A.match(p)){for(var I="",N=0,L=A.length;N<L;N++)A.charCodeAt(N)>127?I+="x":I+=A[N];if(!I.match(p)){var j=C.slice(0,P),U=C.slice(P+1),q=A.match(d);q&&(j.push(q[1]),U.unshift(q[2])),U.length&&(b="/"+U.join(".")+b),this.hostname=j.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),O||(this.hostname=r.toASCII(this.hostname));var B=this.port?":"+this.port:"",G=this.hostname||"";this.host=G+B,this.href+=this.host,O&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!y[w])for(P=0,k=l.length;P<k;P++){var D=l[P];if(-1!==b.indexOf(D)){var F=encodeURIComponent(D);F===D&&(F=escape(D)),b=b.split(D).join(F)}}var W=b.indexOf("#");-1!==W&&(this.hash=b.substr(W),b=b.slice(0,W));var z=b.indexOf("?");if(-1!==z?(this.search=b.substr(z),this.query=b.substr(z+1),e&&(this.query=M.parse(this.query)),b=b.slice(0,z)):e&&(this.search="",this.query={}),b&&(this.pathname=b),m[w]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){B=this.pathname||"";var H=this.search||"";this.path=B+H}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",i=this.pathname||"",r=this.hash||"",s=!1,a="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&n.isObject(this.query)&&Object.keys(this.query).length&&(a=M.stringify(this.query));var o=this.search||a&&"?"+a||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||m[e])&&!1!==s?(s="//"+(s||""),i&&"/"!==i.charAt(0)&&(i="/"+i)):s||(s=""),r&&"#"!==r.charAt(0)&&(r="#"+r),o&&"?"!==o.charAt(0)&&(o="?"+o),e+s+(i=i.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(o=o.replace("#","%23"))+r},s.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(n.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var i=new s,r=Object.keys(this),a=0;a<r.length;a++){var o=r[a];i[o]=this[o]}if(i.hash=t.hash,""===t.href)return i.href=i.format(),i;if(t.slashes&&!t.protocol){for(var h=Object.keys(t),u=0;u<h.length;u++){var l=h[u];"protocol"!==l&&(i[l]=t[l])}return m[i.protocol]&&i.hostname&&!i.pathname&&(i.path=i.pathname="/"),i.href=i.format(),i}if(t.protocol&&t.protocol!==i.protocol){if(!m[t.protocol]){for(var c=Object.keys(t),f=0;f<c.length;f++){var p=c[f];i[p]=t[p]}return i.href=i.format(),i}if(i.protocol=t.protocol,t.host||g[t.protocol])i.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),i.pathname=d.join("/")}if(i.search=t.search,i.query=t.query,i.host=t.host||"",i.auth=t.auth,i.hostname=t.hostname||t.host,i.port=t.port,i.pathname||i.search){var y=i.pathname||"",M=i.search||"";i.path=y+M}return i.slashes=i.slashes||t.slashes,i.href=i.format(),i}var b=i.pathname&&"/"===i.pathname.charAt(0),v=t.host||t.pathname&&"/"===t.pathname.charAt(0),_=v||b||i.host&&t.pathname,w=_,x=i.pathname&&i.pathname.split("/")||[],S=(d=t.pathname&&t.pathname.split("/")||[],i.protocol&&!m[i.protocol]);if(S&&(i.hostname="",i.port=null,i.host&&(""===x[0]?x[0]=i.host:x.unshift(i.host)),i.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),_=_&&(""===d[0]||""===x[0])),v)i.host=t.host||""===t.host?t.host:i.host,i.hostname=t.hostname||""===t.hostname?t.hostname:i.hostname,i.search=t.search,i.query=t.query,x=d;else if(d.length)x||(x=[]),x.pop(),x=x.concat(d),i.search=t.search,i.query=t.query;else if(!n.isNullOrUndefined(t.search))return S&&(i.hostname=i.host=x.shift(),(O=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=O.shift(),i.host=i.hostname=O.shift())),i.search=t.search,i.query=t.query,n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.href=i.format(),i;if(!x.length)return i.pathname=null,i.search?i.path="/"+i.search:i.path=null,i.href=i.format(),i;for(var E=x.slice(-1)[0],R=(i.host||t.host||x.length>1)&&("."===E||".."===E)||""===E,P=0,T=x.length;T>=0;T--)"."===(E=x[T])?x.splice(T,1):".."===E?(x.splice(T,1),P++):P&&(x.splice(T,1),P--);if(!_&&!w)for(;P--;P)x.unshift("..");!_||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),R&&"/"!==x.join("/").substr(-1)&&x.push("");var O,C=""===x[0]||x[0]&&"/"===x[0].charAt(0);return S&&(i.hostname=i.host=C?"":x.length?x.shift():"",(O=!!(i.host&&i.host.indexOf("@")>0)&&i.host.split("@"))&&(i.auth=O.shift(),i.host=i.hostname=O.shift())),(_=_||i.host&&x.length)&&!C&&x.unshift(""),x.length?i.pathname=x.join("/"):(i.pathname=null,i.path=null),n.isNull(i.pathname)&&n.isNull(i.search)||(i.path=(i.pathname?i.pathname:"")+(i.search?i.search:"")),i.auth=t.auth||i.auth,i.slashes=i.slashes||t.slashes,i.href=i.format(),i},s.prototype.parseHost=function(){var t=this.host,e=o.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},502:t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},927:(t,e,i)=>{function r(t){try{if(!i.g.localStorage)return!1}catch(t){return!1}var e=i.g.localStorage[t];return null!=e&&"true"===String(e).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var i=!1;return function(){if(!i){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),i=!0}return t.apply(this,arguments)}}},529:t=>{t.exports=function(){for(var t={},i=0;i<arguments.length;i++){var r=arguments[i];for(var n in r)e.call(r,n)&&(t[n]=r[n])}return t};var e=Object.prototype.hasOwnProperty},758:()=>{}},e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.loaded=!0,n.exports}i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),i(45)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4uL3NyYy9mb3JtYXQtY29udmVydGVyLnRzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi4vc3JjL3JlcHJvamVjdG9yLnRzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi4vc3JjL3NwYXRpYWwtdHJhbnNmb3JtZXJzLnRzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi4vc3JjL3NwYXRpYWwtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9idWlsdGluLXN0YXR1cy1jb2Rlcy9icm93c2VyLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL2h0dHBzLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb25zdGFudHMvdmFsdWVzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbnN0YW50cy9QcmltZU1lcmlkaWFuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbnN0YW50cy91bml0cy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9tYXRjaC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qU3RyaW5nLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvd2t0LXBhcnNlci9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy93a3QtcGFyc2VyL3Byb2Nlc3MuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy93a3QtcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2RlZnMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvZ2xvYmFsLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3BhcnNlQ29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL21zZm56LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9zaWduLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9hZGp1c3RfbG9uLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi90c2Zuei5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vcGhpMnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbG9uZ2xhdC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9tZXJjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbnN0YW50cy9FbGxpcHNvaWQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29uc3RhbnRzL0RhdHVtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL1Byb2ouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvZGVyaXZlQ29uc3RhbnRzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2RhdHVtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2RhdHVtVXRpbHMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvZGF0dW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2FkanVzdF9heGlzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi90b1BvaW50LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NoZWNrU2FuaXR5LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb3JlLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvbWdycy9tZ3JzLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL1BvaW50LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9wal9lbmZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9wal9tbGZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9wal9pbnZfbWxmbi5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy90bWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vc2luaC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vaHlwb3QuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL2dhdGcuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL2NsZW5zX2NtcGx4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9jb3NoLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2V0bWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vY2xlbnMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL2FzaW5oeS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vbG9nMXB5LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3V0bS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vYWRqdXN0X3pvbmUuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvY29tbW9uL3NyYXQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvZ2F1c3MuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvc3RlcmVhLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3N0ZXJlLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3NvbWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9vbWVyYy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9sY2MuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMva3JvdmFrLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9tbGZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lMGZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lMWZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lMmZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9lM2ZuLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9nTi5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vYWRqdXN0X2xhdC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vaW1sZm4uanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvY2Fzcy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vcXNmbnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbGFlYS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9jb21tb24vYXNpbnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvYWVhLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2dub20uanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvY2VhLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL2NvbW1vbi9pcXNmbnouanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvZXFjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3BvbHkuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbnptZy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9taWxsLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3NpbnUuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvbW9sbC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9wcm9qZWN0aW9ucy9lcWRjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3ZhbmRnLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2FlcWQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvb3J0aG8uanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvcXNjLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL3JvYmluLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvcHJvajQvbGliL3Byb2plY3Rpb25zL2dlb2NlbnQuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9saWIvcHJvamVjdGlvbnMvdHBlcnMuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9wcm9qNC9wcm9qcy5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3Byb2o0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2VuY29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbGliL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvcmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2Vycm9ycy1icm93c2VyLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2J1ZmZlcl9saXN0LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9lbmQtb2Ytc3RyZWFtLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9mcm9tLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3BpcGVsaW5lLmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy90cy1kZWVwY29weS9kaXN0L2pzL2luZGV4LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3VybC91cmwuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyLy4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci8uL25vZGVfbW9kdWxlcy94dGVuZC9pbW11dGFibGUuanMiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3JlcHJvai1oZWxwZXIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZXByb2otaGVscGVyL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vcmVwcm9qLWhlbHBlci93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsic3BsaXQiLCJ0aGlzIiwiZ2VvbWV0cnkiLCJpIiwiZXhwb3J0cyIsImJ5dGVMZW5ndGgiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJ0bXAiLCJhcnIiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJsZW4iLCJyZXZMb29rdXAiLCJjaGFyQ29kZUF0IiwiZnJvbUJ5dGVBcnJheSIsInVpbnQ4IiwibGVuZ3RoIiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibWF4Q2h1bmtMZW5ndGgiLCJsZW4yIiwicHVzaCIsImVuY29kZUNodW5rIiwibG9va3VwIiwiam9pbiIsIlVpbnQ4QXJyYXkiLCJBcnJheSIsImNvZGUiLCJFcnJvciIsImluZGV4T2YiLCJzdGFydCIsImVuZCIsIm51bSIsIm91dHB1dCIsImJhc2U2NCIsImllZWU3NTQiLCJjdXN0b21JbnNwZWN0U3ltYm9sIiwiU3ltYm9sIiwiQnVmZmVyIiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJLX01BWF9MRU5HVEgiLCJjcmVhdGVCdWZmZXIiLCJSYW5nZUVycm9yIiwiYnVmIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiVHlwZUVycm9yIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwidmFsdWUiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbVN0cmluZyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYXJyYXlWaWV3IiwiaXNJbnN0YW5jZSIsImNvcHkiLCJmcm9tQXJyYXlCdWZmZXIiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheVZpZXciLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJiIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwidW5kZWZpbmVkIiwibnVtYmVySXNOYU4iLCJ0eXBlIiwiaXNBcnJheSIsImRhdGEiLCJmcm9tT2JqZWN0IiwidG9QcmltaXRpdmUiLCJhc3NlcnRTaXplIiwic2l6ZSIsImFycmF5IiwidG9TdHJpbmciLCJtdXN0TWF0Y2giLCJhcmd1bWVudHMiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJuIiwibSIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwidmFsIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwiY2FsbCIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInBhcnNlSW50Iiwic3Vic3RyIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJzdHIiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiYyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsIk1hdGgiLCJtaW4iLCJyZXMiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsInByb3RvIiwiZm9vIiwiZSIsInR5cGVkQXJyYXlTdXBwb3J0IiwiY29uc29sZSIsImVycm9yIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicG9vbFNpemUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwieSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzZXQiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJ0b0xvY2FsZVN0cmluZyIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJyZXBsYWNlIiwidHJpbSIsInRhcmdldCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsImhleFNsaWNlTG9va3VwVGFibGUiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJ3cnRCaWdVSW50NjRMRSIsImNoZWNrSW50QkkiLCJCaWdJbnQiLCJ3cnRCaWdVSW50NjRCRSIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJsaXR0bGVFbmRpYW4iLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic3ViYXJyYXkiLCJyZWFkVWludExFIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVaW50QkUiLCJyZWFkVUludEJFIiwicmVhZFVpbnQ4IiwicmVhZFVJbnQ4IiwicmVhZFVpbnQxNkxFIiwicmVhZFVJbnQxNkxFIiwicmVhZFVpbnQxNkJFIiwicmVhZFVpbnQzMkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVpbnQzMkJFIiwicmVhZFVJbnQzMkJFIiwicmVhZEJpZ1VJbnQ2NExFIiwiZGVmaW5lQmlnSW50TWV0aG9kIiwidmFsaWRhdGVOdW1iZXIiLCJmaXJzdCIsImxhc3QiLCJib3VuZHNFcnJvciIsInJlYWRCaWdVSW50NjRCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkQmlnSW50NjRMRSIsInJlYWRCaWdJbnQ2NEJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVWludExFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVpbnRCRSIsIndyaXRlVUludEJFIiwid3JpdGVVaW50OCIsIndyaXRlVUludDgiLCJ3cml0ZVVpbnQxNkxFIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVWludDE2QkUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVaW50MzJMRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVpbnQzMkJFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlQmlnVUludDY0TEUiLCJ3cml0ZUJpZ1VJbnQ2NEJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlQmlnSW50NjRMRSIsIndyaXRlQmlnSW50NjRCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJjb3B5V2l0aGluIiwiZXJyb3JzIiwiRSIsInN5bSIsImdldE1lc3NhZ2UiLCJCYXNlIiwic3VwZXIiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm5hbWUiLCJzdGFjayIsIm1lc3NhZ2UiLCJhZGROdW1lcmljYWxTZXBhcmF0b3IiLCJyYW5nZSIsIkVSUl9PVVRfT0ZfUkFOR0UiLCJjaGVja0JvdW5kcyIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiZmxvb3IiLCJFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMiLCJpbnB1dCIsIm1zZyIsInJlY2VpdmVkIiwiaXNJbnRlZ2VyIiwiYWJzIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsImNvbnN0cnVjdG9yIiwiYWxwaGFiZXQiLCJ0YWJsZSIsImkxNiIsImZuIiwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsIm1vZHVsZSIsIlJlZmxlY3RPd25LZXlzIiwiUiIsIlJlZmxlY3QiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJvbmNlIiwiZW1pdHRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXZlbnRMaXN0ZW5lciIsImVycm9yTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImVyciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsImNyZWF0ZSIsIm5ld0xpc3RlbmVyIiwiZW1pdCIsInVuc2hpZnQiLCJ3YXJuZWQiLCJ3IiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsImJpbmQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXIiLCJjb250ZXh0IiwiaGFuZGxlciIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwib24iLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInBvcCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleSIsImtleXMiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiaHR0cCIsInVybCIsImh0dHBzIiwiaGFzT3duUHJvcGVydHkiLCJ2YWxpZGF0ZVBhcmFtcyIsInBhcmFtcyIsInBhcnNlIiwicHJvdG9jb2wiLCJyZXF1ZXN0IiwiY2IiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImQiLCJzIiwiTmFOIiwicnQiLCJsb2ciLCJMTjIiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJTRUNfVE9fUkFEIiwiSEFMRl9QSSIsIlBJIiwiRVBTTE4iLCJEMlIiLCJSMkQiLCJGT1JUUEkiLCJUV09fUEkiLCJTUEkiLCJmdCIsInRvX21ldGVyIiwiaWdub3JlZENoYXIiLCJtYXRjaCIsInRlc3RrZXkiLCJsa2V5IiwiZGVmRGF0YSIsInBhcmFtTmFtZSIsInBhcmFtVmFsIiwicGFyYW1PdXRuYW1lIiwic2VsZiIsInBhcmFtT2JqIiwibWFwIiwidiIsImZpbHRlciIsInJlZHVjZSIsInAiLCJwcm9qIiwiZGF0dW0iLCJyZiIsInBhcnNlRmxvYXQiLCJsYXRfMCIsImxhdDAiLCJsYXRfMSIsImxhdDEiLCJsYXRfMiIsImxhdDIiLCJsYXRfdHMiLCJsb25fMCIsImxvbmcwIiwibG9uXzEiLCJsb25nMSIsImxvbl8yIiwibG9uZzIiLCJhbHBoYSIsImxvbmMiLCJsb25nYyIsInhfMCIsIngwIiwieV8wIiwieTAiLCJrXzAiLCJrMCIsImsiLCJyX2EiLCJSX0EiLCJ6b25lIiwic291dGgiLCJ1dG1Tb3V0aCIsInRvd2dzODQiLCJkYXR1bV9wYXJhbXMiLCJ1bml0IiwiZnJvbV9ncmVlbndpY2giLCJwbSIsIm5hZGdyaWRzIiwiZGF0dW1Db2RlIiwiYXhpcyIsImxlZ2FsQXhpcyIsIndoaXRlc3BhY2UiLCJsYXRpbiIsImtleXdvcmQiLCJlbmRUaGluZ3MiLCJkaWdldHMiLCJQYXJzZXIiLCJ0ZXh0IiwibGV2ZWwiLCJwbGFjZSIsInJvb3QiLCJjdXJyZW50T2JqZWN0IiwibWFwaXQiLCJ0aGluZyIsIm5ld09iaiIsIml0ZW0iLCJzRXhwciIsImNvbnZlcnQiLCJkMnIiLCJ3a3QiLCJsaXNwIiwicHJvak5hbWUiLCJsb2NhbCIsIlBST0pFQ1RJT04iLCJBWElTIiwiYXhpc09yZGVyIiwiaWkiLCJkZXNjcmlwdG9yIiwiVU5JVCIsIkRBVFVNIiwiU1BIRVJPSUQiLCJnZW9nY3MiLCJHRU9HQ1MiLCJ0b01ldGVyIiwic3BoZXJlIiwiZWxscHMiLCJUT1dHUzg0IiwiZm9yRWFjaCIsIm91dE5hbWUiLCJpbk5hbWUiLCJyZW5hbWUiLCJjbGVhbldLVCIsImRlZnMiLCJkZWYiLCJjaGFyQXQiLCJFUFNHIiwiRVNSSSIsIklBVTIwMDAiLCJyZWFkQ2hhcmljdGVyIiwiY2hhciIsInRlc3QiLCJuZXV0cmFsIiwicXVvdGVkIiwiYWZ0ZXJxdW90ZSIsIm51bWJlciIsIndvcmQiLCJhZnRlckl0ZW0iLCJuZXdPYmplY3RzIiwiV0dTODQiLCJHT09HTEUiLCJnbG9iYWwiLCJjb2RlV29yZHMiLCJjb2RlcyIsImRlc3RpbmF0aW9uIiwic291cmNlIiwicHJvcGVydHkiLCJlY2NlbnQiLCJzaW5waGkiLCJjb3NwaGkiLCJjb24iLCJzcXJ0Iiwic2lnbiIsInBoaSIsImNvbSIsInRhbiIsInRzIiwiZHBoaSIsImVjY250aCIsImF0YW4iLCJzaW4iLCJpZGVudGl0eSIsInB0IiwicHJvanMiLCJlcyIsImNvcyIsIm1zZm56IiwiZm9yd2FyZCIsImxvbiIsImxhdCIsImFkanVzdF9sb24iLCJ0c2ZueiIsImludmVyc2UiLCJleHAiLCJwaGkyeiIsIm5hbWVzIiwicHJvalN0b3JlIiwiYWRkIiwiZWxsaXBzZU5hbWUiLCJlbGxpcHNlIiwiZGF0dW1OYW1lIiwiUHJvamVjdGlvbiIsInNyc0NvZGUiLCJjYWxsYmFjayIsImpzb24iLCJ0ZXN0T2JqIiwidGVzdERlZiIsInNvbWUiLCJ0ZXN0V0tUIiwiYXV0aCIsImNoZWNrTWVyY2F0b3IiLCJtYXliZVByb2pTdHIiLCJjaGVja1Byb2pTdHIiLCJ0ZXN0UHJvaiIsInBhcnNlQ29kZSIsIm91clByb2oiLCJwcm9qZWN0aW9ucyIsImRhdHVtRGVmIiwiYTIiLCJiMiIsInNwaGVyZV8iLCJlY2MiLCJlcDIiLCJkYXR1bU9iaiIsImRhdHVtX3R5cGUiLCJleHRlbmQiLCJnZW9kZXRpY1RvR2VvY2VudHJpYyIsIlJuIiwiU2luX0xhdCIsIlNpbjJfTGF0IiwiQ29zX0xhdCIsIkxvbmdpdHVkZSIsIkxhdGl0dWRlIiwiSGVpZ2h0IiwieiIsImdlb2NlbnRyaWNUb0dlb2RldGljIiwiUCIsIlJSIiwiQ1QiLCJTVCIsIlJYIiwiUksiLCJSTiIsIkNQSEkwIiwiU1BISTAiLCJDUEhJIiwiU1BISSIsIlNEUEhJIiwiaXRlciIsIlgiLCJZIiwiWiIsImF0YW4yIiwiY2hlY2tQYXJhbXMiLCJjcnMiLCJkZW5vcm0iLCJwb2ludCIsInQiLCJ4aW4iLCJ5aW4iLCJ6aW4iLCJjaGVja0Nvb3JkIiwidHJhbnNmb3JtIiwiZGVzdCIsIndnczg0IiwidG9Qb2ludCIsImNoZWNrU2FuaXR5IiwiY2hlY2tOb3RXR1MiLCJhZGp1c3RfYXhpcyIsImNvbXBhcmVEYXR1bXMiLCJEeF9CRiIsIkR5X0JGIiwiRHpfQkYiLCJSeF9CRiIsIlJ5X0JGIiwiUnpfQkYiLCJNX0JGIiwiZ2VvY2VudHJpY1RvV2dzODQiLCJ4X3RtcCIsInlfdG1wIiwiel90bXAiLCJnZW9jZW50cmljRnJvbVdnczg0IiwiZGF0dW1fdHJhbnNmb3JtIiwidHJhbnNmb3JtZXIiLCJ0byIsImNvb3JkcyIsInRyYW5zZm9ybWVkQXJyYXkiLCJzcGxpY2UiLCJjaGVja1Byb2oiLCJvUHJvaiIsImZyb21Qcm9qIiwidG9Qcm9qIiwiY29vcmQiLCJzaW5nbGUiLCJTRVRfT1JJR0lOX0NPTFVNTl9MRVRURVJTIiwiU0VUX09SSUdJTl9ST1dfTEVUVEVSUyIsIkEiLCJJIiwiTyIsIm1ncnMiLCJiYm94IiwiVVRNdG9MTCIsImRlY29kZSIsInRvVXBwZXJDYXNlIiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwidG9wIiwibGwiLCJhY2N1cmFjeSIsInV0bSIsImNvbHVtbiIsInJvdyIsImNvbE9yaWdpbiIsInJvd09yaWdpbiIsImNvbEludCIsInJvd0ludCIsInJvbGxvdmVyIiwiZWFzdGluZyIsIm5vcnRoaW5nIiwic2V0UGFybSIsInNlYXN0aW5nIiwic25vcnRoaW5nIiwiem9uZU51bWJlciIsInpvbmVMZXR0ZXIiLCJnZXQxMDBrU2V0Rm9yWm9uZSIsImVuY29kZSIsImVjY1ByaW1lU3F1YXJlZCIsIk4iLCJUIiwiQyIsIkxvbmdPcmlnaW5SYWQiLCJab25lTnVtYmVyIiwiTGF0IiwiTG9uZyIsImVjY1NxdWFyZWQiLCJMYXRSYWQiLCJkZWdUb1JhZCIsIkxvbmdSYWQiLCJMZXR0ZXJEZXNpZ25hdG9yIiwiVVRNRWFzdGluZyIsIlVUTU5vcnRoaW5nIiwicm91bmQiLCJMTHRvVVRNIiwiZGVnIiwicmFkVG9EZWciLCJyYWQiLCJOMSIsIlQxIiwiQzEiLCJSMSIsIkQiLCJMb25nT3JpZ2luIiwibXUiLCJwaGkxUmFkIiwiZTEiLCJyZXN1bHQiLCJ0b3BSaWdodCIsIm1ncnNTdHJpbmciLCJ0ZXN0Q2hhciIsImh1bksiLCJzYiIsInN1YnN0cmluZyIsImVhc3QxMDBrIiwiY3VyQ29sIiwiZWFzdGluZ1ZhbHVlIiwicmV3aW5kTWFya2VyIiwiZ2V0RWFzdGluZ0Zyb21DaGFyIiwibm9ydGgxMDBrIiwiY3VyUm93Iiwibm9ydGhpbmdWYWx1ZSIsImdldE5vcnRoaW5nRnJvbUNoYXIiLCJnZXRNaW5Ob3J0aGluZyIsInJlbWFpbmRlciIsImFjY3VyYWN5Qm9udXMiLCJzZXBFYXN0aW5nU3RyaW5nIiwic2VwTm9ydGhpbmdTdHJpbmciLCJzZXAiLCJzZXBFYXN0aW5nIiwic2VwTm9ydGhpbmciLCJQb2ludCIsImZyb21NR1JTIiwibWdyc1N0ciIsInRvTUdSUyIsIkMwNCIsIkMwNiIsIkMwOCIsImVuIiwic3BoaSIsImNwaGkiLCJwal9tbGZuIiwicGpfZW5mbiIsIm1sMCIsImRlbHRhX2xvbiIsInNpbl9waGkiLCJjb3NfcGhpIiwiYWwiLCJhbHMiLCJjcyIsInRxIiwibWwiLCJhY29zIiwicGpfaW52X21sZm4iLCJ0YW5fcGhpIiwiZHMiLCJmIiwiZyIsInRlbXAiLCJoIiwiYXNpbiIsInIiLCJwcCIsIkIiLCJjb3NfMkIiLCJoMSIsImgyIiwiYXJnX3IiLCJhcmdfaSIsImhyMiIsImhpMiIsInNpbl9hcmdfciIsImNvc19hcmdfciIsInNpbmhfYXJnX2kiLCJzaW5oIiwiY29zaF9hcmdfaSIsImNvc2giLCJociIsImhpMSIsImhyMSIsImNnYiIsImNiZyIsInV0ZyIsImd0dSIsIm5wIiwiUW4iLCJnYXRnIiwiWmIiLCJjbGVucyIsIkNlIiwiQ24iLCJzaW5fQ24iLCJjb3NfQ24iLCJzaW5fQ2UiLCJjb3NfQ2UiLCJoeXBvdCIsImxvZzFweSIsImFzaW5oeSIsImNsZW5zX2NtcGx4IiwiYWRqdXN0X3pvbmUiLCJldG1lcmMiLCJkZXBlbmRzT24iLCJlc2lucCIsInJjIiwicGhpYzAiLCJyYXRleHAiLCJLIiwic3JhdCIsImdhdXNzIiwic2luYzAiLCJjb3NjMCIsIlIyIiwidGl0bGUiLCJzaW5jIiwiY29zYyIsImNvc2wiLCJyaG8iLCJjb3NsYXQwIiwic2lubGF0MCIsImNvbnMiLCJtczEiLCJYMCIsInNzZm5fIiwiY29zWDAiLCJzaW5YMCIsInNpblgiLCJjb3NYIiwicmgiLCJzaW5sYXQiLCJjb3NsYXQiLCJkbG9uIiwiY2UiLCJDaGkiLCJwaGl0IiwiZWNjZW4iLCJwaHkwIiwibGFtYmRhMCIsInNpblBoeTAiLCJzZW1pTWFqb3JBeGlzIiwiZmxhdHRlbmluZyIsImUyIiwiYjAiLCJrMSIsImsyIiwiazMiLCJTYTEiLCJTYTIiLCJTIiwicm90SSIsInJvdEIiLCJsYW1iZGEiLCJwaHkiLCJwcmV2UGh5IiwiaXRlcmF0aW9uIiwibm9fb2ZmIiwibm9fcm90IiwiYmwiLCJmbCIsImdsIiwidDAiLCJkbCIsInQxIiwidDIiLCJlbCIsImhsIiwiamwiLCJwbCIsImRsb24xMiIsImRsb24xMCIsImdhbW1hMCIsInVjIiwidXMiLCJ2cyIsInFsIiwic2wiLCJ0bCIsInZsIiwidWwiLCJQT1NJVElWRV9JTkZJTklUWSIsInFwIiwic3AiLCJ0cCIsInZwIiwidXAiLCJzaW4xIiwiY29zMSIsInRzMSIsInNpbjIiLCJjb3MyIiwibXMyIiwidHMyIiwidHMwIiwibnMiLCJmMCIsInJoMSIsInRoZXRhIiwiczQ1IiwiczkwIiwiZmkwIiwiYWxmYSIsInVxIiwidTAiLCJuMCIsInMwIiwicm8wIiwiYWQiLCJnZmkiLCJ1IiwiZGVsdGF2IiwiZXBzIiwicm8iLCJjemVjaCIsImZpMSIsIm9rIiwiZTAiLCJlMyIsImUwZm4iLCJlMWZuIiwiZTJmbiIsImUzZm4iLCJtbGZuIiwibGFtIiwibmwiLCJnTiIsImFzcSIsImNsIiwiZGQiLCJwaGkxIiwiaW1sZm4iLCJubDEiLCJybDEiLCJ0bDEiLCJkc3EiLCJhZGp1c3RfbGF0IiwibW9kZSIsIlNfUE9MRSIsIk5fUE9MRSIsIkVRVUlUIiwiT0JMSVEiLCJxc2ZueiIsIm1tZiIsImFwYSIsIkFQQSIsImF1dGhzZXQiLCJycSIsInhtZiIsInltZiIsInNpbmIxIiwiY29zYjEiLCJzaW5waDAiLCJjb3NwaDAiLCJjb3NsYW0iLCJzaW5sYW0iLCJxIiwic2luYiIsImNvc2IiLCJjQ2UiLCJzQ2UiLCJhYiIsImJldGEiLCJjb3N6Iiwic2lueiIsInNpbl9wbyIsImNvc19wbyIsInFzMSIsInFzMiIsInQzIiwicXMwIiwibnMwIiwicXMiLCJwaGkxeiIsImFzaW56IiwiZWNjbnRzIiwic2luX3AxNCIsImNvc19wMTQiLCJpbmZpbml0eV9kaXN0IiwiY29zbG9uIiwiaXFzZm56IiwiZGxhdCIsInRhbnBoaSIsIm1sbiIsIm1sbnAiLCJtYSIsIkJfcmUiLCJCX2ltIiwiQ19yZSIsIkNfaW0iLCJkZWx0YV9sYXQiLCJkX3BoaSIsImRfbGFtYmRhIiwiZF9waGlfbiIsImRfcHNpIiwidGhfbl9pbTEiLCJ0aF9yZSIsInRoX2ltIiwidGhfbl9yZSIsInRoX25faW0iLCJ6X3JlIiwiel9pbSIsInpfbl9pbTEiLCJkZWx0YV94Iiwiel9uX3JlIiwiel9uX2ltIiwiaXRlcmF0aW9ucyIsIm51bV9yZSIsIm51bV9pbSIsImRlbl9yZSIsImRlbl9pbSIsImRlbjIiLCJkX3BzaV9uIiwiQ195IiwiQ194IiwiViIsImRlbHRhX3RoZXRhIiwibWwxIiwibWwyIiwic2ludGgiLCJjb3N0aCIsImdzcSIsIm1zcSIsInh4IiwieXkiLCJ4eXMiLCJjMSIsImMyIiwiYzMiLCJhMSIsIm0xIiwidGgxIiwic2luX3AxMiIsImNvc19wMTIiLCJNbHAiLCJNbCIsIk5sMSIsIk5sIiwicHNpIiwiQXoiLCJHIiwiSCIsIkdIIiwiSHMiLCJrcCIsImNvc19jIiwiczIiLCJzMyIsInM0IiwiY29zQXoiLCJFZSIsIkYiLCJzaW5wc2kiLCJxc2NfZndkX2VxdWF0X2ZhY2VfdGhldGEiLCJhcmVhIiwicXNjX3NoaWZ0X2xvbl9vcmlnaW4iLCJzbG9uIiwiZmFjZSIsIm9uZV9taW51c19mIiwib25lX21pbnVzX2Zfc3F1YXJlZCIsInh5Iiwic2lubG9uIiwibnUiLCJjb3NtdSIsInRhbm51IiwidGFudGhldGEiLCJpbnZlcnRfc2lnbiIsInhhIiwibHAiLCJDT0VGU19YIiwiQ09FRlNfWSIsIkZYQyIsIkZZQyIsInBvbHkzX3ZhbCIsImNvZWZzIiwiTk9ERVMiLCJmX2RmIiwibWF4X2VyciIsIml0ZXJzIiwidXBkIiwibmV3dG9uX3JhcHNob24iLCJwb2x5M19kZXIiLCJhemkiLCJkZWdyZWVzIiwidGlsdCIsInBuMSIsInJwIiwicGZhY3QiLCJvbWVnYSIsImdhbW1hIiwiY2ciLCJzZyIsImN3Iiwic3ciLCJ5dCIsImJhIiwiYm0iLCJicSIsInByb2o0IiwiUHJvaiIsInRtZXJjIiwic3RlcmVhIiwic3RlcmUiLCJzb21lcmMiLCJvbWVyYyIsImxjYyIsImtyb3ZhayIsImNhc3MiLCJsYWVhIiwiYWVhIiwiZ25vbSIsImNlYSIsImVxYyIsInBvbHkiLCJuem1nIiwibWlsbCIsInNpbnUiLCJtb2xsIiwiZXFkYyIsInZhbmRnIiwiYWVxZCIsIm9ydGhvIiwicXNjIiwicm9iaW4iLCJnZW9jZW50IiwidHBlcnMiLCJwcm9wIiwiZXEiLCJvcHRpb25zIiwicmVnZXhwIiwibWF4S2V5cyIsImtzdHIiLCJ2c3RyIiwiaWR4IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3RyaW5naWZ5UHJpbWl0aXZlIiwia3MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnkiLCJjb3B5UHJvcHMiLCJTYWZlQnVmZmVyIiwiQ2xpZW50UmVxdWVzdCIsInJlc3BvbnNlIiwic3RhdHVzQ29kZXMiLCJvcHRzIiwiZGVmYXVsdFByb3RvY29sIiwibG9jYXRpb24iLCJzZWFyY2giLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aCIsIm1ldGhvZCIsImhlYWRlcnMiLCJyZXEiLCJJbmNvbWluZ01lc3NhZ2UiLCJBZ2VudCIsImRlZmF1bHRNYXhTb2NrZXRzIiwiZ2xvYmFsQWdlbnQiLCJTVEFUVVNfQ09ERVMiLCJNRVRIT0RTIiwieGhyIiwiZ2V0WEhSIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJjaGVja1R5cGVTdXBwb3J0IiwicmVzcG9uc2VUeXBlIiwiaXNGdW5jdGlvbiIsImZldGNoIiwiUmVhZGFibGVTdHJlYW0iLCJ3cml0YWJsZVN0cmVhbSIsIldyaXRhYmxlU3RyZWFtIiwiYWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYXJyYXlidWZmZXIiLCJtc3N0cmVhbSIsIm1vemNodW5rZWRhcnJheWJ1ZmZlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJjYXBhYmlsaXR5IiwiaW5oZXJpdHMiLCJzdHJlYW0iLCJyU3RhdGVzIiwicmVhZHlTdGF0ZXMiLCJwcmVmZXJCaW5hcnkiLCJXcml0YWJsZSIsIl9vcHRzIiwiX2JvZHkiLCJfaGVhZGVycyIsInNldEhlYWRlciIsInVzZUZldGNoIiwiX21vZGUiLCJkZWNpZGVNb2RlIiwiX2ZldGNoVGltZXIiLCJfb25GaW5pc2giLCJsb3dlck5hbWUiLCJ1bnNhZmVIZWFkZXJzIiwiZ2V0SGVhZGVyIiwiaGVhZGVyIiwicmVtb3ZlSGVhZGVyIiwiX2Rlc3Ryb3llZCIsImhlYWRlcnNPYmoiLCJib2R5IiwiQmxvYiIsImhlYWRlcnNMaXN0Iiwia2V5TmFtZSIsInNpZ25hbCIsImNvbnRyb2xsZXIiLCJfZmV0Y2hBYm9ydENvbnRyb2xsZXIiLCJyZXF1ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCJhYm9ydCIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwidGhlbiIsIl9mZXRjaFJlc3BvbnNlIiwiX2Nvbm5lY3QiLCJyZWFzb24iLCJjbGVhclRpbWVvdXQiLCJfeGhyIiwicHJvY2VzcyIsIm5leHRUaWNrIiwidGltZW91dCIsIm9udGltZW91dCIsInNldFJlcXVlc3RIZWFkZXIiLCJfcmVzcG9uc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiTE9BRElORyIsIkRPTkUiLCJfb25YSFJQcm9ncmVzcyIsIm9ucHJvZ3Jlc3MiLCJvbmVycm9yIiwic2VuZCIsInN0YXR1cyIsInN0YXR1c1ZhbGlkIiwiX3dyaXRlIiwiY2h1bmsiLCJkZXN0cm95IiwiZmx1c2hIZWFkZXJzIiwic2V0Tm9EZWxheSIsInNldFNvY2tldEtlZXBBbGl2ZSIsIlVOU0VOVCIsIk9QRU5FRCIsIkhFQURFUlNfUkVDRUlWRUQiLCJmZXRjaFRpbWVyIiwiUmVhZGFibGUiLCJyYXdIZWFkZXJzIiwidHJhaWxlcnMiLCJyYXdUcmFpbGVycyIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwic3RhdHVzVGV4dCIsIl9yZXN1bWVGZXRjaCIsImNsb3NlIiwicGlwZVRvIiwiY2F0Y2giLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkb25lIiwiX3BvcyIsInJlc3BvbnNlVVJMIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibWF0Y2hlcyIsIl9jaGFyc2V0IiwibWltZVR5cGUiLCJjaGFyc2V0TWF0Y2giLCJfcmVhZCIsInJlc3BvbnNlVGV4dCIsIm5ld0RhdGEiLCJNU1N0cmVhbVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiY3JlYXRlRXJyb3JUeXBlIiwiTm9kZUVycm9yIiwiX0Jhc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJfX3Byb3RvX18iLCJvbmVPZiIsImV4cGVjdGVkIiwiZGV0ZXJtaW5lciIsInRoaXNfbGVuIiwiZW5kc1dpdGgiLCJvYmplY3RLZXlzIiwiRHVwbGV4IiwiYWxsb3dIYWxmT3BlbiIsInJlYWRhYmxlIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsImhpZ2hXYXRlck1hcmsiLCJnZXRCdWZmZXIiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIlBhc3NUaHJvdWdoIiwiVHJhbnNmb3JtIiwiX3RyYW5zZm9ybSIsIlJlYWRhYmxlU3RhdGUiLCJkZWJ1ZyIsIkVFbGlzdGVuZXJDb3VudCIsIlN0cmVhbSIsIk91clVpbnQ4QXJyYXkiLCJkZWJ1Z1V0aWwiLCJkZWJ1Z2xvZyIsIlN0cmluZ0RlY29kZXIiLCJjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IiLCJCdWZmZXJMaXN0IiwiZGVzdHJveUltcGwiLCJnZXRIaWdoV2F0ZXJNYXJrIiwiX3JlcXVpcmUkY29kZXMiLCJFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GIiwiRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQiLCJFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UIiwiZXJyb3JPckRlc3Ryb3kiLCJrUHJveHlFdmVudHMiLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJzeW5jIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJwYXVzZWQiLCJlbWl0Q2xvc2UiLCJhdXRvRGVzdHJveSIsImRlZmF1bHRFbmNvZGluZyIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfZGVzdHJveSIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJlbWl0UmVhZGFibGVfIiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJhZGRDaHVuayIsIm1heWJlUmVhZE1vcmUiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsImVuYyIsImhlYWQiLCJjb250ZW50IiwibmV4dCIsImNsZWFyIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImZsb3ciLCJtYXliZVJlYWRNb3JlXyIsInVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNvbnN1bWUiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ3U3RhdGUiLCJmaW5pc2hlZCIsInhzIiwibCIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZSIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25jbG9zZSIsIm9uZmluaXNoIiwib25kcmFpbiIsIm9uZGF0YSIsImNsZWFuZWRVcCIsIm5lZWREcmFpbiIsInBpcGVPbkRyYWluIiwicGF1c2UiLCJldmVudCIsImRlc3RzIiwiZXYiLCJ3cmFwIiwiX3RoaXMiLCJhc3luY0l0ZXJhdG9yIiwiX2Zyb21MaXN0IiwiaXRlcmFibGUiLCJFUlJfTVVMVElQTEVfQ0FMTEJBQ0siLCJFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HIiwiRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNiIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJmbHVzaCIsIl9mbHVzaCIsInByZWZpbmlzaCIsImVycjIiLCJDb3JrZWRSZXF1ZXN0IiwiZW50cnkiLCJmaW5pc2giLCJjb3JrUmVxIiwicGVuZGluZ2NiIiwib25Db3JrZWRGaW5pc2giLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJXcml0YWJsZVN0YXRlIiwicmVhbEhhc0luc3RhbmNlIiwiaW50ZXJuYWxVdGlsIiwiZGVwcmVjYXRlIiwiRVJSX1NUUkVBTV9DQU5OT1RfUElQRSIsIkVSUl9TVFJFQU1fREVTVFJPWUVEIiwiRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyIsIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EIiwiRVJSX1VOS05PV05fRU5DT0RJTkciLCJub3AiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJmaW5hbENhbGxlZCIsImVuZGluZyIsIm5vRGVjb2RlIiwiZGVjb2RlU3RyaW5ncyIsIndyaXRpbmciLCJjb3JrZWQiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZmluYWwiLCJfZmluYWwiLCJkb1dyaXRlIiwib253cml0ZURyYWluIiwiaG9sZGVyIiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInJTdGF0ZSIsImN1cnJlbnQiLCJfIiwiaGFzSW5zdGFuY2UiLCJvYmplY3QiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX09iamVjdCRzZXRQcm90b3R5cGVPIiwiX2RlZmluZVByb3BlcnR5Iiwia0xhc3RSZXNvbHZlIiwia0xhc3RSZWplY3QiLCJrRXJyb3IiLCJrRW5kZWQiLCJrTGFzdFByb21pc2UiLCJrSGFuZGxlUHJvbWlzZSIsImtTdHJlYW0iLCJjcmVhdGVJdGVyUmVzdWx0IiwicmVhZEFuZFJlc29sdmUiLCJvblJlYWRhYmxlIiwiQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsIlJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsInByb21pc2UiLCJsYXN0UHJvbWlzZSIsIndyYXBGb3JOZXh0IiwiX3RoaXMyIiwiX09iamVjdCRjcmVhdGUiLCJpdGVyYXRvciIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJjdXN0b20iLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGFpbCIsInByb3RvUHJvcHMiLCJoYXNTdHJpbmdzIiwiX2dldFN0cmluZyIsIl9nZXRCdWZmZXIiLCJuYiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX29iamVjdFNwcmVhZCIsImRlcHRoIiwiY3VzdG9tSW5zcGVjdCIsImVtaXRFcnJvckFuZENsb3NlTlQiLCJlbWl0RXJyb3JOVCIsImVtaXRDbG9zZU5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFIiwibm9vcCIsImVvcyIsImNhbGxlZCIsIl9sZW4iLCJfa2V5Iiwib25sZWdhY3lmaW5pc2giLCJ3cml0YWJsZUVuZGVkIiwicmVhZGFibGVFbmRlZCIsIm9ucmVxdWVzdCIsImlzUmVxdWVzdCIsIkVSUl9NSVNTSU5HX0FSR1MiLCJkZXN0cm95ZXIiLCJjbG9zZWQiLCJwb3BDYWxsYmFjayIsInN0cmVhbXMiLCJkZXN0cm95cyIsIkVSUl9JTlZBTElEX09QVF9WQUxVRSIsImR1cGxleEtleSIsImh3bSIsImhpZ2hXYXRlck1hcmtGcm9tIiwicGlwZWxpbmUiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJ0b3RhbCIsInV0ZjhDaGVja0luY29tcGxldGUiLCJvIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfX2Fzc2lnbiIsImFzc2lnbiIsImV4ZWN1dGUiLCJEYXRlIiwiZ2V0VGltZSIsImlzUHJpbWl0aXZlIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fIiwiX19yZXN0IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJkZWNvcmF0ZSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm1ldGFkYXRhIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJfX2dlbmVyYXRvciIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwib3AiLCJfX2NyZWF0ZUJpbmRpbmciLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsImFyIiwiX19zcHJlYWQiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJmdWxmaWxsIiwic2V0dGxlIiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImNvb2tlZCIsInJhdyIsIl9faW1wb3J0U3RhciIsIm1vZCIsIl9faW1wb3J0RGVmYXVsdCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJwcml2YXRlTWFwIiwiaGFzIiwiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsIm5vZGVUeXBlIiwiZnJlZUdsb2JhbCIsIndpbmRvdyIsInB1bnljb2RlIiwibWF4SW50IiwiYmFzZSIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwibWFwRG9tYWluIiwidWNzMmRlY29kZSIsImV4dHJhIiwiY291bnRlciIsInVjczJlbmNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImZsYWciLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiYmFzZU1pbnVzVE1pbiIsImJhc2ljIiwib2xkaSIsImJhc2VNaW51c1QiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJoYW5kbGVkQ1BDb3VudCIsImJhc2ljTGVuZ3RoIiwiY3VycmVudFZhbHVlIiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicU1pbnVzVCIsInV0aWwiLCJVcmwiLCJzbGFzaGVzIiwiaGFzaCIsInF1ZXJ5IiwicGF0aG5hbWUiLCJocmVmIiwidXJsUGFyc2UiLCJyZWxhdGl2ZSIsInJlc29sdmVPYmplY3QiLCJmb3JtYXQiLCJpc1N0cmluZyIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwicXVlcnlzdHJpbmciLCJwYXJzZVF1ZXJ5U3RyaW5nIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJpc09iamVjdCIsInF1ZXJ5SW5kZXgiLCJzcGxpdHRlciIsInVTcGxpdCIsInJlc3QiLCJzaW1wbGVQYXRoIiwiZXhlYyIsImxvd2VyUHJvdG8iLCJhdFNpZ24iLCJob3N0RW5kIiwiaGVjIiwicGFyc2VIb3N0IiwiaXB2Nkhvc3RuYW1lIiwiaG9zdHBhcnRzIiwicGFydCIsIm5ld3BhcnQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsInRvQVNDSUkiLCJhZSIsImVzYyIsImVzY2FwZSIsInFtIiwicmVsIiwidGtleXMiLCJ0ayIsInRrZXkiLCJya2V5cyIsInJrIiwicmtleSIsInJlbFBhdGgiLCJpc1NvdXJjZUFicyIsImlzUmVsQWJzIiwibXVzdEVuZEFicyIsInJlbW92ZUFsbERvdHMiLCJzcmNQYXRoIiwicHN5Y2hvdGljIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJhdXRoSW5Ib3N0IiwiaXNOdWxsIiwiaGFzVHJhaWxpbmdTbGFzaCIsImlzQWJzb2x1dGUiLCJjb25maWciLCJsb2NhbFN0b3JhZ2UiLCJ0cmFjZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwidG9TdHJpbmdUYWciLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiO2tIQUNBLEksT0FBQSxTLDJCQVVBLGFBQUUsU0FBRixJQUNVLGVBQTJCLEtBQzNCLGdCQUE0RCxLQTZTdEUsT0F4U2dCLFdBQWQsV0FDRSxPQUFPLElBQUksR0FRTixvQkFBUCxTQUFnQixHQVNkLE9BUkksS0FBQyxVQUFZLEVBQUksT0FFakIsS0FBQyxXQUFhLENBQ2hCLEtBQU0sVUFDTixXQUFZLEdBQ1osU0FBVSxLQUFLLG9CQUdWLE1BTUYsa0JBQVAsU0FBYyxHQUNaLFlBRFksY0FDTCxLQUFLLGFBQWEsSUFPcEIsd0JBQVAsU0FBb0IsR0FFbEIsT0FEQSxLQUFLLFlBQWEsYUFBUyxHQUNwQixNQU1GLHNCQUFQLFdBQ00sT0FBRyxLQUFLLFlBT04sNkJBQVIsV0FDTSxJQUFDLEtBQUssV0FBdUMsSUFBMUIsS0FBSyxVQUFVLE9BQ3BDLE1BQU0sSUFBSSxNQUFNLHdCQUlkLEtBQUssVUFBVSxTQUFTLE1BQTRELE1BQXBELEtBQUssVUFBVSxLQUFLLFVBQVUsUUFBUSxLQUFPLEtBQy9FLEtBQUssVUFBWSxLQUFLLFVBQVUsTUFBTSxFQUFHLEtBQUssVUFBVSxRQUFRLE1BQVEsSUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFVBQVUsUUFBUSxPQUd4SCxJQUFFLEVBQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxHQUFHLE9BQU8sY0FDM0MsRUFBVSxLQUFLLFVBQVUsTUFBTSxLQUFLLEdBQUcsT0FBTyxjQUdoRCxHQUZnQixDQUFDLFNBQVMsU0FBUyxHQUcvQixZQUFNLGtEQUdWLElBQUUsRUFBTyxLQUFLLFVBQVUsVUFBVSxLQUFLLFVBQVUsUUFBUSxLQUFPLEVBQUcsS0FBSyxVQUFVLE9BQVMsR0FFM0YsT0FBRyxLQUFLLGlCQUFpQixFQUFNLElBRzNCLEVBQUYsMkJBQVIsU0FBMEIsRUFBYyxHQUNsQyxJQUNJLE9BQUUsR0FDRSxJQUFILFFBQ0gs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IGRlZXBDb3B5IGZyb20gXCJ0cy1kZWVwY29weVwiO1xyXG4vKipcclxuICogRm9ybWF0Q29udmVydGVyIGlzIGEgdXRpbGl0IGNsYXNzIHRoYXQgYXNzaXN0cyB3aXRoIGNvbnZlcnRpbmdcclxuICogc29tZSBzcGF0aWFsIGZvcm1hdHMgdG8gb3RoZXJzLlxyXG4gKlxyXG4gKiBDdXJyZW50bHkgc3VwcG9ydHMgY29udmVydGluZyBmcm9tL3RvIFdlbGwgS25vd24gVGV4dCBhbmQgR2VvSnNvblxyXG4gKiBJJ20gc3VyZSB5b3UncmUgaW1tZWRpYXRlbHkgd29uZGVyaW5nIHdoeSBJIGRpZCBXS1QgUGFyc2luZyB3aXRob3V0IFJlZ2V4XHJcbiAqIE1lIHRvby4uLiBtZSB0b28uLi5cclxuICovXHJcbnZhciBGb3JtYXRDb252ZXJ0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGb3JtYXRDb252ZXJ0ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VXa3QgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc291cmNlSnNvbiA9IG51bGw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYyBpbnN0YW5jZSBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBGb3JtYXRDb252ZXJ0ZXIuaW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGb3JtYXRDb252ZXJ0ZXIoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN1cHBseSBhIFdLVCBzdHJpbmcgdG8gY29udmVydFxyXG4gICAgICogVGhpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRzIHRvIEdlb0pzb25cclxuICAgICAqIEBwYXJhbSB3a3QgWW91ciBXS1Qgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUuZnJvbVdrdCA9IGZ1bmN0aW9uICh3a3QpIHtcclxuICAgICAgICB0aGlzLnNvdXJjZVdrdCA9IHdrdC50cmltKCk7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VKc29uID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5jb252ZXJ0V2t0VG9Kc29uKClcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgdG8gV2VsbCBLbm93biBUZXh0XHJcbiAgICAgKi9cclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUudG9Xa3QgPSBmdW5jdGlvbiAoekNvb3JkQ29udmVyc2lvbikge1xyXG4gICAgICAgIGlmICh6Q29vcmRDb252ZXJzaW9uID09PSB2b2lkIDApIHsgekNvb3JkQ29udmVyc2lvbiA9IGZhbHNlOyB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydFRvV2t0KHpDb29yZENvbnZlcnNpb24pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydCBhIGdlb2pzb24gZmVhdHVyZVxyXG4gICAgICogQHBhcmFtIGpzb24gR2VvSlNPTiBmZWF0dXJlXHJcbiAgICAgKi9cclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUuZnJvbUdlb0pzb24gPSBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgIHRoaXMuc291cmNlSnNvbiA9IGRlZXBDb3B5KGpzb24pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjb252ZXJ0ZWQgZGF0YSBhcyBHZW9KU09OXHJcbiAgICAgKi9cclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUudG9HZW9Kc29uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZUpzb247XHJcbiAgICB9O1xyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgLyogV0tUIHRvIEpTT04gY29udmVyc2lvbiAqL1xyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5jb252ZXJ0V2t0VG9Kc29uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zb3VyY2VXa3QgfHwgdGhpcy5zb3VyY2VXa3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gV0tUIGRhdGEgc3VwcGxpZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWRkIGEgc3BhY2UgYmV0d2VlbiB0aGUgZmlyc3QgYnJhY2tldCBhbmQgdGhlIHR5cGUsIGlmIHRoZXJlIGlzbid0IG9uZVxyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZVdrdC5pbmNsdWRlcygnKCcpICYmIHRoaXMuc291cmNlV2t0W3RoaXMuc291cmNlV2t0LmluZGV4T2YoJygnKSAtIDFdICE9PSAnICcpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VXa3QgPSB0aGlzLnNvdXJjZVdrdC5zbGljZSgwLCB0aGlzLnNvdXJjZVdrdC5pbmRleE9mKCcoJykpICsgJyAnICsgdGhpcy5zb3VyY2VXa3Quc2xpY2UodGhpcy5zb3VyY2VXa3QuaW5kZXhPZignKCcpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHR5cGUgPSB0aGlzLnNvdXJjZVdrdC5zcGxpdCgnICcpWzBdLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIHZhciB0eXBlTW9kID0gdGhpcy5zb3VyY2VXa3Quc3BsaXQoJyAnKVsxXS50cmltKCkudG9VcHBlckNhc2UoKTtcclxuICAgICAgICB2YXIgdW5zdXBwb3J0ZWQgPSBbJ0VNUFRZJ10uaW5jbHVkZXModHlwZU1vZCk7XHJcbiAgICAgICAgaWYgKHVuc3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdHZW9tZXRyeSBpcyBlbXB0eSBvciB1c2luZyBhbiB1bnVwcG9ydGVkIHR5cGUhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5zb3VyY2VXa3Quc3Vic3RyaW5nKHRoaXMuc291cmNlV2t0LmluZGV4T2YoJygnKSArIDEsIHRoaXMuc291cmNlV2t0Lmxlbmd0aCAtIDEpOyAvLyBnZXQgdGhlIHN0cmluZywgbWludXMgb3Blbi9jbG9zZSBicmFja2V0cy5cclxuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFdrdEdlb21ldHJ5KHR5cGUsIGRhdGEpO1xyXG4gICAgfTtcclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUuYnVpbGRXa3RHZW9tZXRyeSA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQT0lOVCc6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUG9pbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlczogdGhpcy5wYXJzZVdrdENvb3JkKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ01VTFRJUE9JTlQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZXJ5IGxhc3QgYnJhY2tldCBmcm9tIHRoZSBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmRzID0gZGF0YS50cmltKCkucmVwbGFjZSgvXFwoL2csICcnKS5yZXBsYWNlKC9cXCkvZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNdWx0aVBvaW50JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHRoaXMucGFyc2VXa3RMaW5lKGNvb3JkcylcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTElORVNUUklORyc6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTGluZVN0cmluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiB0aGlzLnBhcnNlV2t0TGluZShkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdNVUxUSUxJTkVTVFJJTkcnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ011bHRpTGluZVN0cmluZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiB0aGlzLnBhcnNlV2t0UmluZyhkYXRhKSAvLyBNdWx0aSBMaW5lc3RyaW5nIGlzIGlkZW50aWNhbCB0byBQb2x5Z29uXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1RSSUFOR0xFJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1BPTFlHT04nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BvbHlnb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlczogdGhpcy5wYXJzZVdrdFJpbmcoZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnVElOJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ01VTFRJUE9MWUdPTic6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbXVsdGlQb2x5R2VvbSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ011bHRpUG9seWdvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvbHlnb25zID0gZGF0YS5zcGxpdCgnKSksJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwb2x5Z29uc18xID0gcG9seWdvbnM7IF9pIDwgcG9seWdvbnNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvbHkgPSBwb2x5Z29uc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGRvdWJsZSBicmFja2V0cyBhcmUgZ29uZSwgYW5kIHRoZSBzdHJpbmcgZW5kcyB3aXRoIGEgYnJhY2tldCAobWlnaHQgaGF2ZSBiZWVuIHRyaW1tZWQgYnkgdGhlIHNwbGl0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xlYW5Qb2x5ID0gcG9seS5yZXBsYWNlKCcoKCcsICcoJykgKyAocG9seS5lbmRzV2l0aCgnKScpID8gJycgOiAnKScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aVBvbHlHZW9tLmNvb3JkaW5hdGVzLnB1c2godGhpcy5wYXJzZVdrdFJpbmcoY2xlYW5Qb2x5LnRyaW0oKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbXVsdGlQb2x5R2VvbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0dFT01FVFJZQ09MTEVDVElPTic6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbUNvbGxlY3Rpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHZW9tZXRyeUNvbGxlY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyaWVzOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGEgZ2VvbWV0cnkgY29sbGVjdGlvbiwgd2UgbmVlZCB0byBzcGxpdCB1cCB0aGUgZ2VvbXMgaW4gdGhlIGxpc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgY2FuJ3Qgc3BsaXQgYnkgJywnIG9yIGV2ZW4gJyksJyB0aG91Z2gsIGJlY2F1c2UgaXQncyBwb3NzaWJsZSB0aGF0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UnZCBoYXZlIG11bHRpZmVhdHVyZSBnZW9tcyBvciBwb2x5J3Mgd2l0aCByaW5ncy5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWR4RGF0YSA9IGRhdGEudG9VcHBlckNhc2UoKS5yZXBsYWNlKC9QT0lOVC9nLCAnLVBPSU5UJykucmVwbGFjZSgvTElORVNUUklORy9nLCAnLUxJTkVTVFJJTkcnKS5yZXBsYWNlKC9QT0xZR09OL2csICctUE9MWUdPTicpLnJlcGxhY2UoL01VTFRJLS9nLCAnLU1VTFRJJykudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9tcyA9IGlkeERhdGEuc3BsaXQoJy0nKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGdlb21zXzEgPSBnZW9tczsgX2EgPCBnZW9tc18xLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbSA9IGdlb21zXzFbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvbSAmJiBnZW9tLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGVhbkdlb20gPSBnZW9tLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSB0cmFpbGluZyBjb21tYXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGVhbkdlb20uZW5kc1dpdGgoJywnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFuR2VvbSA9IGNsZWFuR2VvbS5zdWJzdHJpbmcoMCwgY2xlYW5HZW9tLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlb21UeXBlID0gY2xlYW5HZW9tLnNwbGl0KCcgJylbMF0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGVNb2QgPSBjbGVhbkdlb20uc3BsaXQoJyAnKVsxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5zdXBwb3J0ZWQgPSBbJ0VNUFRZJywgJ1pNJywgJ00nXS5pbmNsdWRlcyh0eXBlTW9kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bnN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdHZW9tZXRyeSBpcyBlbXB0eSBvciB1c2luZyBhbiB1bnVwcG9ydGVkIHR5cGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbURhdGEgPSBjbGVhbkdlb20uc3Vic3RyaW5nKGNsZWFuR2VvbS5pbmRleE9mKCcoJykgKyAxLCBjbGVhbkdlb20ubGVuZ3RoIC0gMSk7IC8vIGdldCB0aGUgc3RyaW5nLCBtaW51cyBvcGVuL2Nsb3NlIGJyYWNrZXRzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbUNvbGxlY3Rpb24uZ2VvbWV0cmllcy5wdXNoKHRoaXMuYnVpbGRXa3RHZW9tZXRyeShnZW9tVHlwZSwgZ2VvbURhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VvbUNvbGxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV0tUIHR5cGUgb2YgXCIgKyB0eXBlICsgXCIgaXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBQYXJzaW5nIGZvciBXS1QgdG8ganNvblxyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5wYXJzZVdrdENvb3JkID0gZnVuY3Rpb24gKGNvb3JkKSB7XHJcbiAgICAgICAgdmFyIGNvb3JkVmFsdWVzID0gY29vcmQudHJpbSgpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgdmFyIGpzb25Db29yZCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29vcmRWYWx1ZXNfMSA9IGNvb3JkVmFsdWVzOyBfaSA8IGNvb3JkVmFsdWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSBjb29yZFZhbHVlc18xW19pXTtcclxuICAgICAgICAgICAganNvbkNvb3JkLnB1c2gocGFyc2VGbG9hdCh2YWwpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGpzb25Db29yZDtcclxuICAgIH07XHJcbiAgICAvLyBQYXJzaW5nIGEgTGluZSBXS1QgdG8ganNvblxyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5wYXJzZVdrdExpbmUgPSBmdW5jdGlvbiAobGluZSkge1xyXG4gICAgICAgIHZhciBsaW5lQ29vcmRzID0gW107XHJcbiAgICAgICAgdmFyIGNvb3JkcyA9IGxpbmUudHJpbSgpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb29yZHNfMSA9IGNvb3JkczsgX2kgPCBjb29yZHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGNvb3JkID0gY29vcmRzXzFbX2ldO1xyXG4gICAgICAgICAgICBsaW5lQ29vcmRzLnB1c2godGhpcy5wYXJzZVdrdENvb3JkKGNvb3JkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaW5lQ29vcmRzO1xyXG4gICAgfTtcclxuICAgIC8vIFBhcnNpbmcgYSByaW5nL3BvbHlnb24gaW50ZXJpb3Igb3IgZXh0ZXJpb3JcclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUucGFyc2VXa3RSaW5nID0gZnVuY3Rpb24gKHBvbHkpIHtcclxuICAgICAgICB2YXIgcmluZ0Nvb3JkcyA9IFtdO1xyXG4gICAgICAgIHZhciByaW5ncyA9IHBvbHkuc3BsaXQoJyksJyk7XHJcbiAgICAgICAgdmFyIGlkeCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByaW5nc18xID0gcmluZ3M7IF9pIDwgcmluZ3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHJpbmcgPSByaW5nc18xW19pXTtcclxuICAgICAgICAgICAgLy8gcmluZyBsZW5ndGgsIGJ1dCAtMSBpZiB3ZSBlbmQgaW4gYSBicmFja2V0XHJcbiAgICAgICAgICAgIHZhciBjbGVhbmVkUmluZyA9IHJpbmcudHJpbSgpLnN1YnN0cmluZyhyaW5nLnRyaW0oKS5pbmRleE9mKCcoJykgKyAxLCByaW5nLnRyaW0oKS5sZW5ndGggLSAocmluZy5lbmRzV2l0aCgnKScpID8gMSA6IDApKTtcclxuICAgICAgICAgICAgcmluZ0Nvb3Jkc1tpZHhdID0gdGhpcy5wYXJzZVdrdExpbmUoY2xlYW5lZFJpbmcpO1xyXG4gICAgICAgICAgICBpZHggKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJpbmdDb29yZHM7XHJcbiAgICB9O1xyXG4gICAgLyoqKioqKioqKioqKioqKioqXHJcbiAgICAgKiBKc29uIHRvIFdLVFxyXG4gICAgICoqKioqKioqKioqKioqKioqL1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5jb252ZXJ0VG9Xa3QgPSBmdW5jdGlvbiAoekNvb3JkQ29udmVyc2lvbikge1xyXG4gICAgICAgIGlmICh6Q29vcmRDb252ZXJzaW9uID09PSB2b2lkIDApIHsgekNvb3JkQ29udmVyc2lvbiA9IGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKHRoaXMuc291cmNlSnNvbikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zb3VyY2VKc29uLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3a3RTdHJpbmcgPSAnR0VPTUVUUllDT0xMRUNUSU9OICgnO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc291cmNlSnNvbi5mZWF0dXJlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRGZWF0dXJlID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHdrdFN0cmluZyArPSB0aGlzLndrdFN0cmluZ0Zyb21HZW9tZXRyeShjaGlsZEZlYXR1cmUuZ2VvbWV0cnksIHpDb29yZENvbnZlcnNpb24pICsgXCIsIFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdrdFN0cmluZy5zdWJzdHJpbmcoMCwgd2t0U3RyaW5nLmxlbmd0aCAtIDIpICsgJyknO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc291cmNlSnNvbi50eXBlID09PSAnRmVhdHVyZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndrdFN0cmluZ0Zyb21HZW9tZXRyeSh0aGlzLnNvdXJjZUpzb24uZ2VvbWV0cnksIHpDb29yZENvbnZlcnNpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2t0U3RyaW5nRnJvbUdlb21ldHJ5KHRoaXMuc291cmNlSnNvbiwgekNvb3JkQ29udmVyc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfTtcclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUud2t0U3RyaW5nRnJvbUdlb21ldHJ5ID0gZnVuY3Rpb24gKGdlb21ldHJ5LCB6Q29vcmRDb252ZXJzaW9uKSB7XHJcbiAgICAgICAgaWYgKHpDb29yZENvbnZlcnNpb24gPT09IHZvaWQgMCkgeyB6Q29vcmRDb252ZXJzaW9uID0gZmFsc2U7IH1cclxuICAgICAgICBzd2l0Y2ggKGdlb21ldHJ5LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJQT0lOVFwiICsgKGdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMiA/ICcgJyA6IGdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gMyA/ICcgTSAnIDogJyBaTSAnKSArIFwiKFwiICsgdGhpcy50b1drdENvb3JkU3RyaW5nKGdlb21ldHJ5LmNvb3JkaW5hdGVzKSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJNVUxUSVBPSU5UIChcIiArIHRoaXMubGluZVRvV2t0U3RyaW5nKGdlb21ldHJ5LmNvb3JkaW5hdGVzKSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJMSU5FU1RSSU5HIChcIiArIHRoaXMubGluZVRvV2t0U3RyaW5nKGdlb21ldHJ5LmNvb3JkaW5hdGVzKSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIk1VTFRJTElORVNUUklORyAoXCIgKyB0aGlzLnJpbmdUb1drdFN0cmluZyhnZW9tZXRyeS5jb29yZGluYXRlcykgKyBcIilcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdQb2x5Z29uJzoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChnZW9tZXRyeS5jb29yZGluYXRlc1swXVswXS5sZW5ndGggPT09IDMgJiYgekNvb3JkQ29udmVyc2lvbiA/ICdUUklBTkdMRScgOiAnUE9MWUdPTicpICsgXCIgKFwiICsgdGhpcy5yaW5nVG9Xa3RTdHJpbmcoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpICsgXCIpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2x5Z29uJzoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChnZW9tZXRyeS5jb29yZGluYXRlc1swXVswXVswXS5sZW5ndGggPT09IDMgJiYgekNvb3JkQ29udmVyc2lvbiA/ICdUSU4nIDogJ01VTFRJUE9MWUdPTicpICsgXCIgKFwiICsgdGhpcy5wb2x5Z29uVG9Xa3RTdHJpbmcoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpICsgXCIpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnR2VvbWV0cnlDb2xsZWN0aW9uJzoge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdrdFN0cmluZyA9ICdHRU9NRVRSWUNPTExFQ1RJT04gKCc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZ2VvbWV0cnkuZ2VvbWV0cmllczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRHZW9tZXRyeSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB3a3RTdHJpbmcgKz0gdGhpcy53a3RTdHJpbmdGcm9tR2VvbWV0cnkoY2hpbGRHZW9tZXRyeSkgKyBcIiwgXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2t0U3RyaW5nLnN1YnN0cmluZygwLCB3a3RTdHJpbmcubGVuZ3RoIC0gMikgKyAnKSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRm9ybWF0Q29udmVydGVyLnByb3RvdHlwZS5wb2x5Z29uVG9Xa3RTdHJpbmcgPSBmdW5jdGlvbiAoY29vcmRpbmF0ZXMpIHtcclxuICAgICAgICB2YXIgY29vcmRTdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvb3JkaW5hdGVzXzEgPSBjb29yZGluYXRlczsgX2kgPCBjb29yZGluYXRlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgY29vcmQgPSBjb29yZGluYXRlc18xW19pXTtcclxuICAgICAgICAgICAgY29vcmRTdHJpbmcgKz0gXCIoXCIgKyB0aGlzLnJpbmdUb1drdFN0cmluZyhjb29yZCkgKyBcIiksIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29vcmRTdHJpbmcuc3Vic3RyaW5nKDAsIGNvb3JkU3RyaW5nLmxlbmd0aCAtIDIpO1xyXG4gICAgfTtcclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUucmluZ1RvV2t0U3RyaW5nID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzKSB7XHJcbiAgICAgICAgdmFyIGNvb3JkU3RyaW5nID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb29yZGluYXRlc18yID0gY29vcmRpbmF0ZXM7IF9pIDwgY29vcmRpbmF0ZXNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGNvb3JkID0gY29vcmRpbmF0ZXNfMltfaV07XHJcbiAgICAgICAgICAgIGNvb3JkU3RyaW5nICs9IFwiKFwiICsgdGhpcy5saW5lVG9Xa3RTdHJpbmcoY29vcmQpICsgXCIpLCBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvb3JkU3RyaW5nLnN1YnN0cmluZygwLCBjb29yZFN0cmluZy5sZW5ndGggLSAyKTtcclxuICAgIH07XHJcbiAgICBGb3JtYXRDb252ZXJ0ZXIucHJvdG90eXBlLmxpbmVUb1drdFN0cmluZyA9IGZ1bmN0aW9uIChjb29yZGluYXRlcykge1xyXG4gICAgICAgIHZhciBjb29yZFN0cmluZyA9ICcnO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29vcmRpbmF0ZXNfMyA9IGNvb3JkaW5hdGVzOyBfaSA8IGNvb3JkaW5hdGVzXzMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjb29yZCA9IGNvb3JkaW5hdGVzXzNbX2ldO1xyXG4gICAgICAgICAgICBjb29yZFN0cmluZyArPSB0aGlzLnRvV2t0Q29vcmRTdHJpbmcoY29vcmQpICsgXCIsIFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29vcmRTdHJpbmcuc3Vic3RyaW5nKDAsIGNvb3JkU3RyaW5nLmxlbmd0aCAtIDIpO1xyXG4gICAgfTtcclxuICAgIEZvcm1hdENvbnZlcnRlci5wcm90b3R5cGUudG9Xa3RDb29yZFN0cmluZyA9IGZ1bmN0aW9uIChjb29yZGluYXRlKSB7XHJcbiAgICAgICAgdmFyIGNvb3JkU3RyaW5nID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb29yZGluYXRlXzEgPSBjb29yZGluYXRlOyBfaSA8IGNvb3JkaW5hdGVfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGNvb3JkID0gY29vcmRpbmF0ZV8xW19pXTtcclxuICAgICAgICAgICAgY29vcmRTdHJpbmcgKz0gY29vcmQgKyBcIiBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvb3JkU3RyaW5nLnRyaW0oKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRm9ybWF0Q29udmVydGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBGb3JtYXRDb252ZXJ0ZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LWNvbnZlcnRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCBwcm9qNCBmcm9tIFwicHJvajRcIjtcclxuaW1wb3J0IGRlZXBDb3B5IGZyb20gXCJ0cy1kZWVwY29weVwiO1xyXG5pbXBvcnQgaHR0cHMgZnJvbSBcImh0dHBzXCI7XHJcbi8qKlxyXG4gKiBBIHNpbXBsZSBSZXByb2plY3Rpb24gY2xhc3MgdGhhdCB3b3JrcyB3aXRoIFByb2o0IGZvclxyXG4gKiBzaW1wbGlmeWluZyByZXByb2plY3Rpb24gb2YgR2VvSnNvbiBvYmplY3RzLlxyXG4gKlxyXG4gKiBEZWZhdWx0cyB0byBCQyBBbGJlcnMgYW5kIFdHUzg0LCBidXQgYW55IHByb2plY3Rpb24gc3RyaW5nXHJcbiAqIFByb2o0IHN1cHBvcnRzIGNhbiBiZSBpbmNsdWRlZC5cclxuICpcclxuICogU3VwcG9ydHMgcHJvamVjdGluZyBHZW9KU09OIEdlb21ldHJ5LCBHZW9tZXRyeUNvbGxlY3Rpb24sIEZlYXR1cmUgYW5kIEZlYXR1cmVDb2xsZWN0aW9uIG9iamVjdHNcclxuICpcclxuICogU3VwcG9ydHMgY2hhaW5pbmcgZnVuY3Rpb25zIHRvZ2V0aGVyIGZvciBjb252aW5pZW5jZSwgaWU6XHJcbiAqIHByb2plY3Rvci5mcm9tKCkudG8oKS5zb3VyY2UoKS5wcm9qZWN0KCk7XHJcbiAqL1xyXG52YXIgUmVQcm9qZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIGZvciBSZVByb2plY3RvciBjbGFzcy4gVGhpcyB3aWxsIGluaXRpYWxpemUgYSBzZXQgb2YgcHJvZWpjdGlvbiBkZWZpbml0aW9ucyBhcyB3ZWxsLlxyXG4gICAgICogRGVmaW5pdGlvbnMgaW5jbHVkZTogWyBFUFNHOjMwMDUsIEVQU0c6Mzg1NywgRVBTRzozMzQ4LCBFUFNHOjM5NzksIEVQU0c6MzU3OSwgRVBTRzozNDAyIF0gYXMgd2VsbCBhc1xyXG4gICAgICogVVRNIHpvbmVzIDdOIHRocm91Z2ggMTVOIChBcyBjb2RlcyBVVE08em9uZSBudW1iZXI+KVxyXG4gICAgICogRGVmYXVsdCBGcm9tIFByb2plY3Rpb24gaXMgRUdTUDozMDA1XHJcbiAgICAgKiBEZWZhdWx0IFRvIHByb2plY3Rpb24gaXMgV0dTODRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVQcm9qZWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VGZWF0dXJlID0gbnVsbDtcclxuICAgICAgICAvLyBEZWZhdWx0cyB0byBwcm9qZWN0aW5nIEJDIEFsYmVycyBpbnRvIFdHUyA4NCwgb3VyIG1vc3QgY29tbW9uIHVzZSBjYXNlXHJcbiAgICAgICAgdGhpcy5mcm9tUHJvamVjdGlvbiA9ICdFUFNHOjMwMDUnO1xyXG4gICAgICAgIHRoaXMudG9Qcm9qZWN0aW9uID0gJ1dHUzg0JztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhdGljIGluaXRpYWxpemVyIGZvciBhIFJlUHJvamVjdG9yIGluc3RhbmNlXHJcbiAgICAgKiBVc2VmdWwgaWYgeW91IGludGVuZCBvbiBjaGFpbmluZywgaWU6XHJcbiAgICAgKiBSZVByb2plY3Rvci5pbnN0YW5jZSgpLmZlYXR1cmUoey4uLn0pLmZyb20oJ0VQU0c6MzAwNScpLnRvKCdFUFNHOjM1NzknKS5wcm9qZWN0KCk7XHJcbiAgICAgKi9cclxuICAgIFJlUHJvamVjdG9yLmluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVQcm9qZWN0b3IoKTtcclxuICAgIH07XHJcbiAgICBSZVByb2plY3Rvci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKCdJbml0aWFsaXppbmcgUmVQcm9qZWN0b3InKTtcclxuICAgICAgICAvLyBMb2FkIGFueSBwcmVzZXQgcHJvamVjdGlvbnNcclxuICAgICAgICAvLyBCQyBBbGJlcnNcclxuICAgICAgICBwcm9qNC5kZWZzKCdFUFNHOjMwMDUnLCAnUFJPSkNTW1wiTkFEODMgLyBCQyBBbGJlcnNcIiwgR0VPR0NTW1wiTkFEODNcIiwgREFUVU1bXCJOb3J0aF9BbWVyaWNhbl9EYXR1bV8xOTgzXCIsIFNQSEVST0lEW1wiR1JTIDE5ODBcIiw2Mzc4MTM3LDI5OC4yNTcyMjIxMDEsIEFVVEhPUklUWVtcIkVQU0dcIixcIjcwMTlcIl1dLCBUT1dHUzg0WzAsMCwwLDAsMCwwLDBdLCBBVVRIT1JJVFlbXCJFUFNHXCIsXCI2MjY5XCJdXSwgUFJJTUVNW1wiR3JlZW53aWNoXCIsMCwgQVVUSE9SSVRZW1wiRVBTR1wiLFwiODkwMVwiXV0sIFVOSVRbXCJkZWdyZWVcIiwwLjAxNzQ1MzI5MjUxOTk0MzMsIEFVVEhPUklUWVtcIkVQU0dcIixcIjkxMjJcIl1dLCBBVVRIT1JJVFlbXCJFUFNHXCIsXCI0MjY5XCJdXSwgUFJPSkVDVElPTltcIkFsYmVyc19Db25pY19FcXVhbF9BcmVhXCJdLCBQQVJBTUVURVJbXCJzdGFuZGFyZF9wYXJhbGxlbF8xXCIsNTBdLCBQQVJBTUVURVJbXCJzdGFuZGFyZF9wYXJhbGxlbF8yXCIsNTguNV0sIFBBUkFNRVRFUltcImxhdGl0dWRlX29mX2NlbnRlclwiLDQ1XSwgUEFSQU1FVEVSW1wibG9uZ2l0dWRlX29mX2NlbnRlclwiLC0xMjZdLCBQQVJBTUVURVJbXCJmYWxzZV9lYXN0aW5nXCIsMTAwMDAwMF0sIFBBUkFNRVRFUltcImZhbHNlX25vcnRoaW5nXCIsMF0sIFVOSVRbXCJtZXRyZVwiLDEsIEFVVEhPUklUWVtcIkVQU0dcIixcIjkwMDFcIl1dLCBBWElTW1wiRWFzdGluZ1wiLEVBU1RdLCBBWElTW1wiTm9ydGhpbmdcIixOT1JUSF0sIEFVVEhPUklUWVtcIkVQU0dcIixcIjMwMDVcIl1dJyk7XHJcbiAgICAgICAgLy8gUHNldWRvIE1lcmNhdG9yXHJcbiAgICAgICAgcHJvajQuZGVmcyhcIkVQU0c6Mzg1N1wiLCBcIitwcm9qPW1lcmMgK2E9NjM3ODEzNyArYj02Mzc4MTM3ICtsYXRfdHM9MC4wICtsb25fMD0wLjAgK3hfMD0wLjAgK3lfMD0wICtrPTEuMCArdW5pdHM9bSArbmFkZ3JpZHM9QG51bGwgK3drdGV4dCAgK25vX2RlZnNcIik7XHJcbiAgICAgICAgLy8gU3RhdHNDYW4gTGFtYmVydFxyXG4gICAgICAgIHByb2o0LmRlZnMoXCJFUFNHOjMzNDhcIiwgXCIrcHJvaj1sY2MgK2xhdF8xPTQ5ICtsYXRfMj03NyArbGF0XzA9NjMuMzkwNjc1ICtsb25fMD0tOTEuODY2NjY2NjY2NjY2NjYgK3hfMD02MjAwMDAwICt5XzA9MzAwMDAwMCArZWxscHM9R1JTODAgK3Rvd2dzODQ9MCwwLDAsMCwwLDAsMCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICAvLyBDYW5hZGEgQXRsYXMgTGFtYmVydFxyXG4gICAgICAgIHByb2o0LmRlZnMoXCJFUFNHOjM5NzlcIiwgXCIrcHJvaj1sY2MgK2xhdF8xPTQ5ICtsYXRfMj03NyArbGF0XzA9NDkgK2xvbl8wPS05NSAreF8wPTAgK3lfMD0wICtlbGxwcz1HUlM4MCArdG93Z3M4ND0wLDAsMCwwLDAsMCwwICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIC8vIFl1a29uIEFsYmVyc1xyXG4gICAgICAgIHByb2o0LmRlZnMoXCJFUFNHOjM1NzlcIiwgXCIrcHJvaj1hZWEgK2xhdF8xPTYxLjY2NjY2NjY2NjY2NjY2ICtsYXRfMj02OCArbGF0XzA9NTkgK2xvbl8wPS0xMzIuNSAreF8wPTUwMDAwMCAreV8wPTUwMDAwMCArZWxscHM9R1JTODAgK3Rvd2dzODQ9MCwwLDAsMCwwLDAsMCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICAvLyBBbGJlcnRhIDEwLVRNIEZvcmVzdFxyXG4gICAgICAgIHByb2o0LmRlZnMoXCJFUFNHOjM0MDJcIiwgXCIrcHJvaj10bWVyYyArbGF0XzA9MCArbG9uXzA9LTExNSAraz0wLjk5OTIgK3hfMD01MDAwMDAgK3lfMD0wICtlbGxwcz1HUlM4MCArdG93Z3M4ND0wLDAsMCwwLDAsMCwwICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIC8vIHV0bXMgN04gdGhyb3VnaCAxNW5cclxuICAgICAgICBwcm9qNC5kZWZzKFwiVVRNN1wiLCBcIitwcm9qPXV0bSArem9uZT03ICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICBwcm9qNC5kZWZzKFwiVVRNOFwiLCBcIitwcm9qPXV0bSArem9uZT04ICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICBwcm9qNC5kZWZzKFwiVVRNOVwiLCBcIitwcm9qPXV0bSArem9uZT05ICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICBwcm9qNC5kZWZzKFwiVVRNMTBcIiwgXCIrcHJvaj11dG0gK3pvbmU9MTAgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIHByb2o0LmRlZnMoXCJVVE0xMVwiLCBcIitwcm9qPXV0bSArem9uZT0xMSArZGF0dW09V0dTODQgK3VuaXRzPW0gK25vX2RlZnNcIik7XHJcbiAgICAgICAgcHJvajQuZGVmcyhcIlVUTTEyXCIsIFwiK3Byb2o9dXRtICt6b25lPTEyICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgICAgICBwcm9qNC5kZWZzKFwiVVRNMTNcIiwgXCIrcHJvaj11dG0gK3pvbmU9MTMgK2RhdHVtPVdHUzg0ICt1bml0cz1tICtub19kZWZzXCIpO1xyXG4gICAgICAgIHByb2o0LmRlZnMoXCJVVE0xNFwiLCBcIitwcm9qPXV0bSArem9uZT0xNCArZGF0dW09V0dTODQgK3VuaXRzPW0gK25vX2RlZnNcIik7XHJcbiAgICAgICAgcHJvajQuZGVmcyhcIlVUTTE1XCIsIFwiK3Byb2o9dXRtICt6b25lPTE1ICtkYXR1bT1XR1M4NCArdW5pdHM9bSArbm9fZGVmc1wiKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBkZWZpbml0aW9uIHN0cmluZyB0byBQcm9qNC4gVXNlIHRoZSBkZWZpbml0aW9uIGJ5IHNwZWNpZnlpbmcgdGhlXHJcbiAgICAgKiBjb2RlIHNldCBoZXJlIGluIHRoZSB0byBhbmQgZnJvbSBmdW5jdGlvbnNcclxuICAgICAqIEBwYXJhbSBjb2RlIFlvdXIgZGVzaXJlZCBjb2RlXHJcbiAgICAgKiBAcGFyYW0gZGVmaW5pdGlvbiBUaGUgcHJvajQgZGVmaW5pdGlvbiBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgUmVQcm9qZWN0b3IucHJvdG90eXBlLmFkZERlZmluaXRpb24gPSBmdW5jdGlvbiAoY29kZSwgZGVmaW5pdGlvbikge1xyXG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJBZGRpbmcgZGVmaW5pdGlvbiBcIiArIGNvZGUgKyBcIiAtIFwiICsgZGVmaW5pdGlvbik7XHJcbiAgICAgICAgcHJvajQuZGVmcyhjb2RlLCBkZWZpbml0aW9uKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZmVhdHVyZSB5b3Ugd2lzaCB0byBwcm9qZWN0LiBUaGUgcHJvamVjdGVkIGZlYXR1cmUgd2lsbCBiZSBhIGRlZXAgY29weVxyXG4gICAgICogVGhlIG9yaWdpbmFsIGZlYXR1cmUgcGFzc2VkIGluIHdpbGwgYmUgdW50b3VjaGVkLlxyXG4gICAgICogQHBhcmFtIGZlYXR1cmUgRmVhdHVyZSBUeXBlXHJcbiAgICAgKi9cclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS5mZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKCdTb3VyY2UgRmVhdHVyZSBzZXQnKTtcclxuICAgICAgICB0aGlzLnNvdXJjZUZlYXR1cmUgPSBmZWF0dXJlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHJvamVjdGlvbiBjb2RlIHRvIHVzZSBvbiB0aGUgXCJmcm9tXCIgcHJvamVjdGlvblxyXG4gICAgICogQHBhcmFtIGZyb20gQ29kZSAodXN1YWxseSBhbiBFUFNHIENvZGUpXHJcbiAgICAgKi9cclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS5mcm9tID0gZnVuY3Rpb24gKGZyb20pIHtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKFwiUHJvamVjdGluZyBmcm9tIFwiICsgZnJvbSk7XHJcbiAgICAgICAgdGhpcy5mcm9tUHJvamVjdGlvbiA9IGZyb207XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9qZWN0aW9uIGNvZGUgdG8gdXNlIG9uIHRoZSBcIlRvXCIgcHJvamVjdGlvblxyXG4gICAgICogQHBhcmFtIGZyb20gQ29kZSAodXN1YWxseSBhbiBFUFNHIENvZGUpXHJcbiAgICAgKi9cclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uICh0bykge1xyXG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJQcm9qZWN0aW5nIHRvIFwiICsgdG8pO1xyXG4gICAgICAgIHRoaXMudG9Qcm9qZWN0aW9uID0gdG87XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIGF0dGVtcHQgdG8gbG9hZCBhIHByb2o0IGRlZmluaXRpb24gZnJvbSBlcHNnLmlvXHJcbiAgICAgKiBAcGFyYW0gZXBzZ0NvZGUgQW4gRVBTRyBDb2RlLCAzMDA1IG9yIEVQU0c6MzAwNVxyXG4gICAgICovXHJcbiAgICBSZVByb2plY3Rvci5wcm90b3R5cGUuYWRkRGVmaW5pdGlvbkZyb21FcHNnSW8gPSBmdW5jdGlvbiAoZXBzZ0NvZGUpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlLCBuZXdEZWY7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBlcHNnQ29kZS50cmltKCkuaW5jbHVkZXMoJzonKSA/IGVwc2dDb2RlLnNwbGl0KCc6JylbMV0udHJpbSgpIDogZXBzZ0NvZGUudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHMuZ2V0KFwiaHR0cHM6Ly9lcHNnLmlvL1wiICsgY29kZSArIFwiLnByb2o0XCIsIGZ1bmN0aW9uIChyZXNwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3Aub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gY2h1bms7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEZWYgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdEZWYgJiYgbmV3RGVmLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRGVmaW5pdGlvbihlcHNnQ29kZSwgbmV3RGVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGRlZmluaXRpb24gZm9yIFxcXCJcIiArIGVwc2dDb2RlICsgXCJcXFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXdEZWZdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJ1biB0aGUgcHJvamVjdGlvbi4gVGhpcyBmdW5jdGlvbiBpcyBhc3luY3Jvbm91cyBhbmQgd2lsbFxyXG4gICAgICogcmV0dXJuIGEgcHJvbWlzZSBieSBkZWZhdWx0LiBUaGUgc291cmNlIGZlYXR1cmUgbXVzdCBiZSBzZXQgcHJpb3JcclxuICAgICAqIFlvdXIgc291cmNlIGZlYXR1cmUgd2lsbCBiZSBkZWVwIGNsb25lZCBhbmQgbm90IG1vZGlmaWVkIGJ5IHRoaXMgcHJvY2Vzc1xyXG4gICAgICovXHJcbiAgICBSZVByb2plY3Rvci5wcm90b3R5cGUucHJvamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjbG9uZWRGZWF0dXJlLCBfaSwgX2EsIGZlYXR1cmUsIF9iLCBfYywgZ2VvbWV0cnksIF9kLCBfZSwgZ2VvbWV0cnksIF9mLCBfZywgZ2VvbWV0cnk7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1N0YXJ0aW5nIHByb2plY3Rpb24nKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zb3VyY2VGZWF0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gZmVhdHVyZSB0byBwcm9qZWN0ISBTdG9wcGluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBTb3VyY2UgRmVhdHVyZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2xvbmVkRmVhdHVyZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZEZlYXR1cmUgPSBkZWVwQ29weSh0aGlzLnNvdXJjZUZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbG9uZWRGZWF0dXJlLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIF9hID0gY2xvbmVkRmVhdHVyZS5mZWF0dXJlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2IgPSAwLCBfYyA9IGZlYXR1cmUuZ2VvbWV0cnkuZ2VvbWV0cmllczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdEdlb21ldHJ5KGdlb21ldHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RHZW9tZXRyeShmZWF0dXJlLmdlb21ldHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjbG9uZWRGZWF0dXJlLnR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2QgPSAwLCBfZSA9IGNsb25lZEZlYXR1cmUuZ2VvbWV0cmllczsgX2QgPCBfZS5sZW5ndGg7IF9kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5ID0gX2VbX2RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0R2VvbWV0cnkoZ2VvbWV0cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNsb25lZEZlYXR1cmUudHlwZSA9PT0gJ0ZlYXR1cmUnICYmIGNsb25lZEZlYXR1cmUuZ2VvbWV0cnkudHlwZSA9PT0gJ0dlb21ldHJ5Q29sbGVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChfZiA9IDAsIF9nID0gY2xvbmVkRmVhdHVyZS5nZW9tZXRyeS5nZW9tZXRyaWVzOyBfZiA8IF9nLmxlbmd0aDsgX2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSBfZ1tfZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RHZW9tZXRyeShnZW9tZXRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2xvbmVkRmVhdHVyZS50eXBlID09PSAnRmVhdHVyZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0R2VvbWV0cnkoY2xvbmVkRmVhdHVyZS5nZW9tZXRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RHZW9tZXRyeShjbG9uZWRGZWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byByZXByb2plY3QgZmVhdHVyZTogXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNsb25lZEZlYXR1cmVdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBSZVByb2plY3Rvci5wcm90b3R5cGUucHJvamVjdEdlb21ldHJ5ID0gZnVuY3Rpb24gKGdlb21ldHJ5KSB7XHJcbiAgICAgICAgc3dpdGNoIChnZW9tZXRyeS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ1BvaW50Jzoge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0UG9pbnQoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RMaW5lU3RyaW5nKGdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ1BvbHlnb24nOlxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RQb2x5Z29uKGdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBnZW9tZXRyeS5jb29yZGluYXRlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9seSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3RQb2x5Z29uKHBvbHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gdmFsaWQgdHlwZSBmb3VuZCBmb3IgdGhpcyBnZW9tZXRyeS4gUHJvamVjdGlvbiBjYW5jZWxsZWQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZ2VvbWV0cnkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVQcm9qZWN0b3IucHJvdG90eXBlLnByb2plY3RQb2x5Z29uID0gZnVuY3Rpb24gKHBvbHlnb24pIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvbHlnb24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0TGluZVN0cmluZyhwb2x5Z29uW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVQcm9qZWN0b3IucHJvdG90eXBlLnByb2plY3RMaW5lU3RyaW5nID0gZnVuY3Rpb24gKGxpbmVTdHJpbmcpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVTdHJpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0UG9pbnQobGluZVN0cmluZ1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlUHJvamVjdG9yLnByb3RvdHlwZS5wcm9qZWN0UG9pbnQgPSBmdW5jdGlvbiAoY29vcmRzKSB7XHJcbiAgICAgICAgdmFyIHByb2plY3RlZENvb3JkcyA9IHByb2o0KHRoaXMuZnJvbVByb2plY3Rpb24sIHRoaXMudG9Qcm9qZWN0aW9uLCBjb29yZHMpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvamVjdGVkQ29vcmRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvb3Jkc1tpXSA9IHByb2plY3RlZENvb3Jkc1tpXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlUHJvamVjdG9yO1xyXG59KCkpO1xyXG5leHBvcnQgeyBSZVByb2plY3RvciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXByb2plY3Rvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCBkZWVwQ29weSBmcm9tIFwidHMtZGVlcGNvcHlcIjtcclxuaW1wb3J0IHsgU3BhdGlhbFV0aWxzIH0gZnJvbSAnLi9zcGF0aWFsLXV0aWxzJztcclxuLyoqXHJcbiAqIEEgU3BhdGlhbCBUcmFuc2Zvcm1hdGlvbiBoZWxwZXIgdGhhdCB0YWtlcyBhbiBpbnB1dCBnZW9tZXRyeSBvciBjb2xsZWN0aW9uXHJcbiAqIG9mIGdlb21ldHJpZXMsIGFuZCB0cmFuc2Zvcm1zIHRoZSBkYXRhIGludG8gc29tZXRoaW5nIGVsc2UuIFRoZSBmdW5jdGlvbnNcclxuICogaW4gdGhpcyBjbGFzcyB3aWxsIGJlIG5vbi1kZXN0cnVjdGl2ZSB0byB0aGUgc3VwcGxpZWQgZmVhdHVyZXMsIGFsd2F5c1xyXG4gKiByZXR1cm5pbmcgYSBtb2RpZmllZCBjbG9uZSBvZiB0aGUgb3JpZ2luYWwuXHJcbiAqL1xyXG52YXIgU3BhdGlhbFRyYW5zZm9ybWVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNwYXRpYWxUcmFuc2Zvcm1lcnMoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIElkZW50aWZ5IGludGVyaW9yIHJpbmdzIHdpdGhpbiBhIHBvbHlnb24gZmVhdHVyZSwgYW5kIGV4dHJhY3QgdGhlbSBhcyBwb2x5Z29uIG9iamVjdHNcclxuICAgICAqIEBwYXJhbSBmZWF0dXJlIFRoZSBmZWF0dXJlIHRvIGZpbmQgaW50ZXJpb3IgcmluZ3Mgd2l0aGluXHJcbiAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiBwb2x5Z29ucyBkZXJpdmVkIGZyb20gdGhlIGlucHV0IGZlYXR1cmVzIGludGVyaW9yIHJpbmdzXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxUcmFuc2Zvcm1lcnMuZmluZEludGVyaW9yUmluZ3MgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBvbHlzLCBnZW9tZXRyeSwgaSwgX2ksIF9hLCBjaGlsZEdlb20sIGk7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgIHBvbHlzID0gW107XHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IGZlYXR1cmUudHlwZSA9PT0gJ0ZlYXR1cmUnID8gZmVhdHVyZS5nZW9tZXRyeSA6IGZlYXR1cmU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ1BvbHlnb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BvbHlnb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtnZW9tZXRyeS5jb29yZGluYXRlc1tpXV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgX2EgPSBnZW9tZXRyeS5jb29yZGluYXRlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRHZW9tID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgY2hpbGRHZW9tLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2x5cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUG9seWdvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtjaGlsZEdlb21baV1dXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBwb2x5c107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAqIEdpdmVuIGEgR2VvSlNPTiBwb2x5Z29uIGZlYXR1cmUsIGxvY2F0ZSBhbmQgZXh0cmFjdCB0aGUgaW50ZXJpb3IgcmluZ3NcclxuICAgKiBBIG5ldyBnZW9tZXRyeSB3aXRob3V0IGludGVyaW9yIHJpbmdzIHdpbGwgYmUgcmV0dXJuZWQuIFRoaXMgd2lsbCBub3QgYWx0ZXIgdGhlIHByb3ZpZGVkIGdlb21ldHJ5LlxyXG4gICAqIEBwYXJhbSBmZWF0dXJlIFRoZSBmZWF0dXJlIHRvIGZpbmQgaW50ZXJpb3IgcmluZ3MgaW5cclxuICAgKiBAcmV0dXJucyBhIGNsb25lZCBjb3B5IG9mIHRoZSBpbnB1dCBmZWF0dXJlLCB3aXRoIGludGVyaW9yIHJpbmdzIHJlbW92ZWRcclxuICAgKi9cclxuICAgIFNwYXRpYWxUcmFuc2Zvcm1lcnMucmVtb3ZlSW50ZXJpb3JSaW5ncyA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY2xvbmUsIGdlb21ldHJ5LCBpO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBjbG9uZSA9IGRlZXBDb3B5KGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSBjbG9uZS50eXBlID09PSAnRmVhdHVyZScgPyBjbG9uZS5nZW9tZXRyeSA6IGZlYXR1cmU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ1BvbHlnb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuY29vcmRpbmF0ZXMgPSBbZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuY29vcmRpbmF0ZXNbaV0gPSBbZ2VvbWV0cnkuY29vcmRpbmF0ZXNbaV1bMF1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjbG9uZS50eXBlID09PSAnRmVhdHVyZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5nZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNsb25lXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZSB0aGUgYm91bmRpbmcgYm94IGZvciBhIHN1cHBsaWVkIEZlYXR1cmUgb3IgRmVhdHVyZUNvbGxlY3Rpb25cclxuICAgICAqIEBwYXJhbSBmZWF0dXJlc1xyXG4gICAgICogQHJldHVybnMgYSBQb2x5Z29uIHJlcHJlc2VudGluZyB0aGUgYm91bmRpbmcgYm94LiBUaGUgYmJveCBhdHRyaWJ1dGUgY29udGFpbnMgdGhlIGJib3ggZGVmaW5pdGlvblxyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVHJhbnNmb3JtZXJzLmJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKGZlYXR1cmVzKSB7XHJcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IHBhc3MgaW4gYW4gYXJyYXksIG1ha2UgaXQgb25lIGFueXdheVxyXG4gICAgICAgIC8vIHNvIHdlIGNhbiBwcm9jZXNzIHRoZSBzYW1lIHdheSBiZWxvd1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmZWF0dXJlcykpIHtcclxuICAgICAgICAgICAgaWYgKGZlYXR1cmVzLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuZmVhdHVyZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmZWF0dXJlcyA9IFtmZWF0dXJlc107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1pblggPSBJbmZpbml0eTtcclxuICAgICAgICB2YXIgbWF4WCA9IC1JbmZpbml0eTtcclxuICAgICAgICB2YXIgbWluWSA9IEluZmluaXR5O1xyXG4gICAgICAgIHZhciBtYXhZID0gLUluZmluaXR5O1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZmVhdHVyZXNfMSA9IGZlYXR1cmVzOyBfaSA8IGZlYXR1cmVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBmZWF0dXJlID0gZmVhdHVyZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSBcclxuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIGdlb21ldHJ5IGNvbGxlY3Rpb24sIHRoZW4gZ2V0IGl0cyBiYm94IGFzIGEgcG9seWdvblxyXG4gICAgICAgICAgICA9IHZvaWQgMDtcclxuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIGdlb21ldHJ5IGNvbGxlY3Rpb24sIHRoZW4gZ2V0IGl0cyBiYm94IGFzIGEgcG9seWdvblxyXG4gICAgICAgICAgICBpZiAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSB0aGlzLmJvdW5kaW5nQm94KGZlYXR1cmUuZ2VvbWV0cnkuZ2VvbWV0cmllcy5tYXAoZnVuY3Rpb24gKGdlb20pIHsgcmV0dXJuIHsgdHlwZTogJ0ZlYXR1cmUnLCBnZW9tZXRyeTogZ2VvbSwgcHJvcGVydGllczoge30gfTsgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnkgPSBmZWF0dXJlLmdlb21ldHJ5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZ2VvbWV0cnkudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluWCA9IG1pblggPiBnZW9tZXRyeS5jb29yZGluYXRlc1swXSA/IGdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdIDogbWluWDtcclxuICAgICAgICAgICAgICAgICAgICBtYXhYID0gbWF4WCA8IGdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdID8gZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0gOiBtYXhYO1xyXG4gICAgICAgICAgICAgICAgICAgIG1pblkgPSBtaW5ZID4gZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0gPyBnZW9tZXRyeS5jb29yZGluYXRlc1sxXSA6IG1pblk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4WSA9IG1heFkgPCBnZW9tZXRyeS5jb29yZGluYXRlc1sxXSA/IGdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdIDogbWF4WTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gZ2VvbWV0cnkuY29vcmRpbmF0ZXM7IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZCA9IF9iW19hXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluWCA9IG1pblggPiBjb29yZFswXSA/IGNvb3JkWzBdIDogbWluWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4WCA9IG1heFggPCBjb29yZFswXSA/IGNvb3JkWzBdIDogbWF4WDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluWSA9IG1pblkgPiBjb29yZFsxXSA/IGNvb3JkWzFdIDogbWluWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4WSA9IG1heFkgPCBjb29yZFsxXSA/IGNvb3JkWzFdIDogbWF4WTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYyA9IDAsIF9kID0gZ2VvbWV0cnkuY29vcmRpbmF0ZXM7IF9jIDwgX2QubGVuZ3RoOyBfYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByaW5nID0gX2RbX2NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IDAsIHJpbmdfMSA9IHJpbmc7IF9lIDwgcmluZ18xLmxlbmd0aDsgX2UrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gcmluZ18xW19lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblggPSBtaW5YID4gY29vcmRbMF0gPyBjb29yZFswXSA6IG1pblg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhYID0gbWF4WCA8IGNvb3JkWzBdID8gY29vcmRbMF0gOiBtYXhYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluWSA9IG1pblkgPiBjb29yZFsxXSA/IGNvb3JkWzFdIDogbWluWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFkgPSBtYXhZIDwgY29vcmRbMV0gPyBjb29yZFsxXSA6IG1heFk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2YgPSAwLCBfZyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfZiA8IF9nLmxlbmd0aDsgX2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9seSA9IF9nW19mXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ggPSAwLCBwb2x5XzEgPSBwb2x5OyBfaCA8IHBvbHlfMS5sZW5ndGg7IF9oKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByaW5nID0gcG9seV8xW19oXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9qID0gMCwgcmluZ18yID0gcmluZzsgX2ogPCByaW5nXzIubGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gcmluZ18yW19qXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5YID0gbWluWCA+IGNvb3JkWzBdID8gY29vcmRbMF0gOiBtaW5YO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFggPSBtYXhYIDwgY29vcmRbMF0gPyBjb29yZFswXSA6IG1heFg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluWSA9IG1pblkgPiBjb29yZFsxXSA/IGNvb3JkWzFdIDogbWluWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhZID0gbWF4WSA8IGNvb3JkWzFdID8gY29vcmRbMV0gOiBtYXhZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcclxuICAgICAgICAgICAgYmJveDogW21pblgsIG1pblksIG1heFgsIG1heFldLFxyXG4gICAgICAgICAgICBjb29yZGluYXRlczogW1tbbWluWCwgbWF4WV0sIFttYXhYLCBtYXhZXSwgW21heFgsIG1pblldLCBbbWluWCwgbWluWV0sIFttaW5YLCBtYXhZXV1dXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIGNlbnRyb2lkIGZyb20gdGhlIHN1cHBsaWVkIGZlYXR1cmVcclxuICAgICAqIEBwYXJhbSBmZWF0dXJlIEEgZmVhdHVyZSB0byBkZXJpdmUgYSBjZW50cm9pZCBmcm9tXHJcbiAgICAgKiBAcmV0dXJucyBhIFBvaW50IGRlZmluaW5nIHRoZSBjZW50cm9pZCBvZiB0aGUgc3VwcGxpZWQgZmVhdHVyZVxyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVHJhbnNmb3JtZXJzLmZlYXR1cmVDZW50cm9pZCA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XHJcbiAgICAgICAgdmFyIHRvdGFsWCA9IDA7XHJcbiAgICAgICAgdmFyIHRvdGFsWSA9IDA7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICBzd2l0Y2ggKGZlYXR1cmUuZ2VvbWV0cnkudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmZWF0dXJlLmdlb21ldHJ5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvaW50Jzoge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsWCArPSBjb29yZFswXTtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbFkgKz0gY29vcmRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpTGluZVN0cmluZyc6XHJcbiAgICAgICAgICAgIGNhc2UgJ1BvbHlnb24nOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmluZyA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIHJpbmdfMyA9IHJpbmc7IF9kIDwgcmluZ18zLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSByaW5nXzNbX2RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFggKz0gY29vcmRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsWSArPSBjb29yZFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IDAsIF9mID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlczsgX2UgPCBfZi5sZW5ndGg7IF9lKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9seSA9IF9mW19lXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZyA9IDAsIHBvbHlfMiA9IHBvbHk7IF9nIDwgcG9seV8yLmxlbmd0aDsgX2crKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmluZyA9IHBvbHlfMltfZ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9oID0gMCwgcmluZ180ID0gcmluZzsgX2ggPCByaW5nXzQubGVuZ3RoOyBfaCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSByaW5nXzRbX2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxYICs9IGNvb3JkWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxZICs9IGNvb3JkWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6IHtcclxuICAgICAgICAgICAgICAgIHZhciBjZW50cm9pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9qID0gMCwgX2sgPSBmZWF0dXJlLmdlb21ldHJ5Lmdlb21ldHJpZXM7IF9qIDwgX2subGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gX2tbX2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbnRyb2lkcy5wdXNoKHRoaXMuZmVhdHVyZUNlbnRyb2lkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9KS5jb29yZGluYXRlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZWF0dXJlQ2VudHJvaWQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcclxuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTXVsdGlQb2ludCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBjZW50cm9pZHNcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IG51bGxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdQb2ludCcsXHJcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbKHRvdGFsWCAvIGNvdW50KSwgKHRvdGFsWSAvIGNvdW50KV1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVkdWNlIHRoZSBwcmVjaXNpb24gb2YgdGhlIGZlYXR1cmUuIHVzZXMgdGhlIFNwYXRpYWxVdGlscy5yZWR1Y2VDb29yZGluYXRlUHJlY2lzaW9uIGZ1bmN0aW9uXHJcbiAgICAgKiBAcGFyYW0gZmVhdHVyZSBUaGUgZmVhdHVyZSB0byByZWR1Y2UgcHJlY2lzaW9uIGZvclxyXG4gICAgICogQHJldHVybnMgYSBjbG9uZWQgY29weSBvZiB0aGUgZmVhdHVyZSB3aXRoIHByZWNpc2lvbiByZWR1Y2VkXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxUcmFuc2Zvcm1lcnMucmVkdWNlUHJlY2lzaW9uID0gZnVuY3Rpb24gKGZlYXR1cmUsIHJlZHVjZVRvKSB7XHJcbiAgICAgICAgdmFyIGNsb25lID0gZGVlcENvcHkoZmVhdHVyZSk7XHJcbiAgICAgICAgaWYgKGNsb25lLnR5cGUgIT09ICdGZWF0dXJlJykge1xyXG4gICAgICAgICAgICBjbG9uZSA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcclxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBjbG9uZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IG51bGxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChjbG9uZS5nZW9tZXRyeS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ1BvaW50Jzoge1xyXG4gICAgICAgICAgICAgICAgY2xvbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMgPSBTcGF0aWFsVXRpbHMucmVkdWNlQ29vcmRpbmF0ZVByZWNpc2lvbihjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlcywgcmVkdWNlVG8pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTGluZVN0cmluZyc6XHJcbiAgICAgICAgICAgIGNhc2UgJ011bHRpUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbaV0gPSBTcGF0aWFsVXRpbHMucmVkdWNlQ29vcmRpbmF0ZVByZWNpc2lvbihjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlc1tpXSwgcmVkdWNlVG8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcclxuICAgICAgICAgICAgY2FzZSAnUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmluZyA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmluZ1tpXSA9IFNwYXRpYWxVdGlscy5yZWR1Y2VDb29yZGluYXRlUHJlY2lzaW9uKHJpbmdbaV0sIHJlZHVjZVRvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gY2xvbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvbHkgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2QgPSAwLCBwb2x5XzMgPSBwb2x5OyBfZCA8IHBvbHlfMy5sZW5ndGg7IF9kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpbmcgPSBwb2x5XzNbX2RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpbmdbaV0gPSBTcGF0aWFsVXRpbHMucmVkdWNlQ29vcmRpbmF0ZVByZWNpc2lvbihyaW5nW2ldLCByZWR1Y2VUbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdHZW9tZXRyeUNvbGxlY3Rpb24nOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lLmdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5nZW9tZXRyeS5nZW9tZXRyaWVzW2ldID0gdGhpcy5yZWR1Y2VQcmVjaXNpb24oY2xvbmUuZ2VvbWV0cnkuZ2VvbWV0cmllc1tpXSwgcmVkdWNlVG8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmZWF0dXJlLnR5cGUgIT09ICdGZWF0dXJlJyA/IGNsb25lLmdlb21ldHJ5IDogY2xvbmU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFsbCBvZiB0aGUgdmVydGljZXMgY29udGlhaW5lZCBpbiB0aGUgc3VwcGxpZWQgZmVhdHVyZVxyXG4gICAgICogQHBhcmFtIGZlYXR1cmUgVGhlIGZlYXR1cmUgdG8gZXhwbG9kZVxyXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgb2YgY29vcmRpbmF0ZXNcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFRyYW5zZm9ybWVycy5leHBsb2RlVmVydGljZXMgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IGRlZXBDb3B5KGZlYXR1cmUpO1xyXG4gICAgICAgIGlmIChjbG9uZS50eXBlICE9PSAnRmVhdHVyZScpIHtcclxuICAgICAgICAgICAgY2xvbmUgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeTogY2xvbmUsXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBudWxsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb29yZHMgPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKGNsb25lLmdlb21ldHJ5LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnUG9pbnQnOiB7XHJcbiAgICAgICAgICAgICAgICBjb29yZHMucHVzaChjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdMaW5lU3RyaW5nJzpcclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6IHtcclxuICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoLmFwcGx5KGNvb3JkcywgY2xvbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcclxuICAgICAgICAgICAgY2FzZSAnUG9seWdvbic6IHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjbG9uZS5nZW9tZXRyeS5jb29yZGluYXRlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmluZyA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaC5hcHBseShjb29yZHMsIHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTXVsdGlQb2x5Z29uJzoge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IGNsb25lLmdlb21ldHJ5LmNvb3JkaW5hdGVzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2x5ID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gMCwgcG9seV80ID0gcG9seTsgX2QgPCBwb2x5XzQubGVuZ3RoOyBfZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByaW5nID0gcG9seV80W19kXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzLnB1c2guYXBwbHkoY29vcmRzLCByaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdHZW9tZXRyeUNvbGxlY3Rpb24nOiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IDAsIF9mID0gY2xvbmUuZ2VvbWV0cnkuZ2VvbWV0cmllczsgX2UgPCBfZi5sZW5ndGg7IF9lKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbSA9IF9mW19lXTtcclxuICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaC5hcHBseShjb29yZHMsIHRoaXMuZXhwbG9kZVZlcnRpY2VzKGdlb20pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29vcmRzO1xyXG4gICAgfTtcclxuICAgIFNwYXRpYWxUcmFuc2Zvcm1lcnMuY29udmV4SHVsbCA9IGZ1bmN0aW9uIChmZWF0dXJlcykge1xyXG4gICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmZWF0dXJlcykgJiYgZmVhdHVyZXMudHlwZSA9PT0gJ0ZlYXR1cmVDb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZmVhdHVyZXMuZmVhdHVyZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2guYXBwbHkodmVydGljZXMsIHRoaXMuZXhwbG9kZVZlcnRpY2VzKGZlYXR1cmUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShmZWF0dXJlcykpIHtcclxuICAgICAgICAgICAgdmVydGljZXMucHVzaC5hcHBseSh2ZXJ0aWNlcywgdGhpcy5leHBsb2RlVmVydGljZXMoZmVhdHVyZXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSwgd2UgaGF2ZSBhbiBhcnJheSBvZiBGZWF0dXJlcywgR2VvbWV0cmllcywgb3IgUG9zaXRpb25zXHJcbiAgICAgICAgICAgIC8vIEJ1dCB0aGVzZSBhcmUgaW50ZXJmYWNlcywgc28gbm8gaW5zdGFuY2VvZiBjaGVjay4gV2UgY2FuIGxvb3AgdGhyb3VnaFxyXG4gICAgICAgICAgICAvLyB0aGUgaXRlbXMsIGFuZCBqdXN0IGRldGVybWluZSB3aGF0IHdlIGhhdmUgYmFzZWQgb24gcHJvcGVydHkuXHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBnZW9tZXRyeSBhdHRyaWJ1dGUsIGl0cyBhIGZlYXR1cmUsIGNvb3JkaW5hdGVzIG1lYW4gaXRzIGEgZ2VvbWV0cnlcclxuICAgICAgICAgICAgLy8gYW5kIGZpbmFsbHksIGl0IG11c3QgYmUgYSBwb3NpdGlvbiAobnVtYmVyW10pXHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgZmVhdHVyZXNfMiA9IGZlYXR1cmVzOyBfYiA8IGZlYXR1cmVzXzIubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGZlYXR1cmVzXzJbX2JdO1xyXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCAnY29vcmRpbmF0ZXMnKSB8fCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgJ2dlb21ldHJ5JykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoLmFwcGx5KHZlcnRpY2VzLCB0aGlzLmV4cGxvZGVWZXJ0aWNlcyhpdGVtKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2ZXJ0aWNlcy5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BvbHlnb24nLFxyXG4gICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5vdyB3ZSBoYXZlIGEgY29sbGVjdGlvbiBvZiB2ZXJ0aWNlcy4gU29ydFxyXG4gICAgICAgIHZlcnRpY2VzLnNvcnQoU3BhdGlhbFV0aWxzLmNvbXBhcmVDb29yZGluYXRlcyk7XHJcbiAgICAgICAgLy8gYW5kIHJldHVybiB0aGUgaHVsbCBhcyBhIHBvbHlnb25cclxuICAgICAgICAvLyBodHRwczovL2VuLndpa2lib29rcy5vcmcvd2lraS9BbGdvcml0aG1fSW1wbGVtZW50YXRpb24vR2VvbWV0cnkvQ29udmV4X2h1bGwvTW9ub3RvbmVfY2hhaW5cclxuICAgICAgICB2YXIgdXBwZXJIdWxsID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2MgPSAwLCB2ZXJ0aWNlc18xID0gdmVydGljZXM7IF9jIDwgdmVydGljZXNfMS5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICAgICAgdmFyIHZlcnRleCA9IHZlcnRpY2VzXzFbX2NdO1xyXG4gICAgICAgICAgICB3aGlsZSAodXBwZXJIdWxsLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHVwcGVySHVsbFt1cHBlckh1bGwubGVuZ3RoIC0gMV1bMF0gLSB1cHBlckh1bGxbdXBwZXJIdWxsLmxlbmd0aCAtIDJdWzBdKSAqICh2ZXJ0ZXhbMV0gLSB1cHBlckh1bGxbdXBwZXJIdWxsLmxlbmd0aCAtIDJdWzFdKSA+PVxyXG4gICAgICAgICAgICAgICAgICAgICh1cHBlckh1bGxbdXBwZXJIdWxsLmxlbmd0aCAtIDFdWzFdIC0gdXBwZXJIdWxsW3VwcGVySHVsbC5sZW5ndGggLSAyXVsxXSkgKiAodmVydGV4WzBdIC0gdXBwZXJIdWxsW3VwcGVySHVsbC5sZW5ndGggLSAyXVswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cHBlckh1bGwucG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1cHBlckh1bGwucHVzaCh2ZXJ0ZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1cHBlckh1bGwucG9wKCk7XHJcbiAgICAgICAgdmFyIGxvd2VySHVsbCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSB2ZXJ0aWNlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICB2YXIgdmVydGV4ID0gdmVydGljZXNbaV07XHJcbiAgICAgICAgICAgIHdoaWxlIChsb3dlckh1bGwubGVuZ3RoID49IDIpIHtcclxuICAgICAgICAgICAgICAgIGlmICgobG93ZXJIdWxsW2xvd2VySHVsbC5sZW5ndGggLSAxXVswXSAtIGxvd2VySHVsbFtsb3dlckh1bGwubGVuZ3RoIC0gMl1bMF0pICogKHZlcnRleFsxXSAtIGxvd2VySHVsbFtsb3dlckh1bGwubGVuZ3RoIC0gMl1bMV0pID49XHJcbiAgICAgICAgICAgICAgICAgICAgKGxvd2VySHVsbFtsb3dlckh1bGwubGVuZ3RoIC0gMV1bMV0gLSBsb3dlckh1bGxbbG93ZXJIdWxsLmxlbmd0aCAtIDJdWzFdKSAqICh2ZXJ0ZXhbMF0gLSBsb3dlckh1bGxbbG93ZXJIdWxsLmxlbmd0aCAtIDJdWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvd2VySHVsbC5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvd2VySHVsbC5wdXNoKHZlcnRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvd2VySHVsbC5wb3AoKTtcclxuICAgICAgICBpZiAodXBwZXJIdWxsLmxlbmd0aCA9PSAxICYmIGxvd2VySHVsbC5sZW5ndGggPT0gMSAmJiB1cHBlckh1bGxbMF1bMF0gPT0gbG93ZXJIdWxsWzBdWzBdICYmIHVwcGVySHVsbFswXVsxXSA9PSBsb3dlckh1bGxbMF1bMV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcclxuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbdXBwZXJIdWxsXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJyxcclxuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbdXBwZXJIdWxsLmNvbmNhdChsb3dlckh1bGwpXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIGNpcmNsZSBmcm9tIGEgZ2l2ZW4gcG9pbnQgYW5kIHJhZGl1cy4gT3B0aW9uYWxseSwgc3VwcGx5IGEgbWF4IHBvaW50cyBmb3IgdGhlIGNpcmNsZXMgY2lyY3VtZnJlbmNlLiBUaGUgZGVmYXVsdCBpcyA4OC5cclxuICAgICAqIEBwYXJhbSBwb2ludCBUaGUgY2VudHJlIHBvaW50IG9mIHRoZSBjaXJjbGVcclxuICAgICAqIEBwYXJhbSByYWRpdXMgVGhlIHJhZGl1cyBvZiB0aGUgY2lyY2xlXHJcbiAgICAgKiBAcGFyYW0gbWF4UG9pbnRzIFRoZSBtYXhpbXVtIG51bWVyIG9mIHBvaW50cyB0byBnZW5lcmF0ZSBmb3IgdGhlIGNpcmNsZXMgcG9seWxpbmUgKGl0cyBhIHBvbHlnb24gaW4gcmVhbGl0eSksIGRlZmF1bHRzIHRvIDg4XHJcbiAgICAgKiBAcmV0dXJucyBUaGUgR2VvSnNvbiBwb2x5Z29uIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjaXJjbGVcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFRyYW5zZm9ybWVycy5jaXJjbGVQb2x5ID0gZnVuY3Rpb24gKHBvaW50LCByYWRpdXMsIG1heFBvaW50cykge1xyXG4gICAgICAgIGlmIChtYXhQb2ludHMgPT09IHZvaWQgMCkgeyBtYXhQb2ludHMgPSA4ODsgfVxyXG4gICAgICAgIHZhciBjb29yZGluYXRlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4UG9pbnRzOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gdXNlIG1heFBvaW50cyB0byBkZXRlcm1pbmUgaG93IG1hbnkgcG9pbnRzIHRvIGNyZWF0ZVxyXG4gICAgICAgICAgICAvLyBmb3IgZWFjaCBwb2ludCwgdXNlIGRlc3RpbmF0aW9uUG9pbnQgdG8gZmluZCB0aGUgbG9jYXRpb25cclxuICAgICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChTcGF0aWFsVXRpbHMuZGVzdGluYXRpb25Qb2ludChwb2ludCwgcmFkaXVzLCAoaSAqIC0zNjApIC8gbWF4UG9pbnRzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNsb3NlIHRoZSBwb2x5XHJcbiAgICAgICAgY29vcmRpbmF0ZXMucHVzaChjb29yZGluYXRlc1swXSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogJ1BvbHlnb24nLFxyXG4gICAgICAgICAgICBjb29yZGluYXRlczogW2Nvb3JkaW5hdGVzXVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNwYXRpYWxUcmFuc2Zvcm1lcnM7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFNwYXRpYWxUcmFuc2Zvcm1lcnMgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhdGlhbC10cmFuc2Zvcm1lcnMuanMubWFwIiwiLyoqXHJcbiAqIEEgVXRpbGl0aWVzIGNsYXNzIGNvbnRhaW5pbmcgZnVuY3Rpb25zIGZvciBwZXJmb3JtaW5nIHZhcmlvdXNcclxuICogaGVscGZ1bCB1dGlsaXRpZXMsIGxpa2UgZGlzdGFuY2UgY2FsY3VsYXRpb25zLCBVVE0gem9uZSBoZWxwZXJzLCBldGMuXHJcbiAqL1xyXG52YXIgU3BhdGlhbFV0aWxzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3BhdGlhbFV0aWxzKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBVVE0gWm9uZSBmb3IgYSBnaXZlbiBsb25naXR1ZGUuIEluY2x1ZGVzIHJ1bGVzIGJleW9uZCBqdXN0IEJDL0NhbmFkYVxyXG4gICAgICogQHBhcmFtIGxhdGl0dWRlIFRoZSBMYXRpdHVkZS4gTmVlZGVkIHRvIGRldGVybWluZSB6b25lcyB3aXRoIHNwZWNpYWwgcnVsZXMgKFN2YWxiYXJkKVxyXG4gICAgICogQHBhcmFtIGxvbmdpdHVkZSBUaGUgTG9uZ2l0dWRlXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy51dG1ab25lID0gZnVuY3Rpb24gKGxhdGl0dWRlLCBsb25naXR1ZGUpIHtcclxuICAgICAgICB2YXIgem9uZU51bWJlciA9IE1hdGguZmxvb3IoKGxvbmdpdHVkZSArIDE4MCkgLyA2KSArIDE7XHJcbiAgICAgICAgaWYgKGxhdGl0dWRlID49IDU2LjAgJiYgbGF0aXR1ZGUgPCA2NC4wICYmIGxvbmdpdHVkZSA+PSAzLjAgJiYgbG9uZ2l0dWRlIDwgMTIuMCkge1xyXG4gICAgICAgICAgICB6b25lTnVtYmVyID0gMzI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNwZWNpYWwgem9uZXMgZm9yIFN2YWxiYXJkXHJcbiAgICAgICAgaWYgKGxhdGl0dWRlID49IDcyLjAgJiYgbGF0aXR1ZGUgPCA4NC4wKSB7XHJcbiAgICAgICAgICAgIGlmIChsb25naXR1ZGUgPj0gMC4wICYmIGxvbmdpdHVkZSA8IDkuMClcclxuICAgICAgICAgICAgICAgIHpvbmVOdW1iZXIgPSAzMTtcclxuICAgICAgICAgICAgZWxzZSBpZiAobG9uZ2l0dWRlID49IDkuMCAmJiBsb25naXR1ZGUgPCAyMS4wKVxyXG4gICAgICAgICAgICAgICAgem9uZU51bWJlciA9IDMzO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChsb25naXR1ZGUgPj0gMjEuMCAmJiBsb25naXR1ZGUgPCAzMy4wKVxyXG4gICAgICAgICAgICAgICAgem9uZU51bWJlciA9IDM1O1xyXG4gICAgICAgICAgICBlbHNlIGlmIChsb25naXR1ZGUgPj0gMzMuMCAmJiBsb25naXR1ZGUgPCA0Mi4wKVxyXG4gICAgICAgICAgICAgICAgem9uZU51bWJlciA9IDM3O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gem9uZU51bWJlcjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZSB0aGUgVVRNIFpvbmUgbGV0dGVyIGNvZGVcclxuICAgICAqIEBwYXJhbSBsYXRpdHVkZSB0aGUgTGF0aXR1ZGVcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLnV0bUxldHRlckRlc2lnbmF0aW9uID0gZnVuY3Rpb24gKGxhdGl0dWRlKSB7XHJcbiAgICAgICAgdmFyIGxldHRlciA9ICcnO1xyXG4gICAgICAgIGlmICgtODAgPD0gbGF0aXR1ZGUgJiYgbGF0aXR1ZGUgPD0gODQpIHtcclxuICAgICAgICAgICAgbGV0dGVyID0gJ0NERUZHSEpLTE1OUFFSU1RVVldYWCdbTWF0aC5mbG9vcigobGF0aXR1ZGUgKyA4MCkgLyA4KV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXR0ZXIgPSAnWic7IC8vIEVycm9yIGZsYWcuIE91dHNpZGUgVVRNIExpbWl0c1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGV0dGVyO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVUTSB6b25lIGFuZCBsZXR0ZXIgY29kZSBmb3IgYSBnaXZlbiBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlXHJcbiAgICAgKiBAcGFyYW0gbGF0aXR1ZGUgVGhlIGxhdGl0dWRlXHJcbiAgICAgKiBAcGFyYW0gbG9uZ2l0dWRlIFRoZSBsb25naXR1ZGVcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLnV0bVpvbmVTdHJpbmcgPSBmdW5jdGlvbiAobGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xyXG4gICAgICAgIHZhciB6b25lTnVtYmVyID0gdGhpcy51dG1ab25lKGxhdGl0dWRlLCBsb25naXR1ZGUpO1xyXG4gICAgICAgIHZhciB6b25lTGV0dGVyID0gdGhpcy51dG1MZXR0ZXJEZXNpZ25hdGlvbihsYXRpdHVkZSk7XHJcbiAgICAgICAgcmV0dXJuICdVVE0nICsgem9uZU51bWJlciArICcnICsgem9uZUxldHRlcjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIERNUyBzdHJpbmcgZnJvbSBhIGdpdmVuIGRlY2ltYWwgZGVncmVlLlxyXG4gICAgICogQHBhcmFtIGRkIFRoZSBkZWNpbWFsIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSBzaG93TWFya3MgU2hvdyBkZWdyZWUgY2hhcmFjdGVyc1xyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMuZGRUb0Rtc1N0cmluZyA9IGZ1bmN0aW9uIChkZCwgc2hvd01hcmtzLCBtYXhEZWNpbWFscykge1xyXG4gICAgICAgIGlmIChtYXhEZWNpbWFscyA9PT0gdm9pZCAwKSB7IG1heERlY2ltYWxzID0gMjsgfVxyXG4gICAgICAgIHZhciBkID0gTWF0aC50cnVuYyhkZCk7XHJcbiAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKChNYXRoLmFicyhkZCkgLSBNYXRoLmFicyhkKSkgKiA2MCk7XHJcbiAgICAgICAgdmFyIHMgPSB0aGlzLnJlZHVjZVByZWNpc2lvbigoTWF0aC5hYnMoZGQpIC0gTWF0aC5hYnMoZCkgLSBtIC8gNjApICogMzYwMCwgbWF4RGVjaW1hbHMpO1xyXG4gICAgICAgIGlmIChzID49IDYwKSB7XHJcbiAgICAgICAgICAgIHMgLT0gNjA7XHJcbiAgICAgICAgICAgIG0gKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNob3dNYXJrcyA/IGQgKyBcIlxcdTAwQjAgXCIgKyBtICsgXCInIFwiICsgcyArIFwiXFxcIlwiIDogZCArIFwiIFwiICsgbSArIFwiIFwiICsgcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZG1zIFRoZSBETVMgc3RyaW5nIHRvIHBhcnNlXHJcbiAgICAgKiBAcGFyYW0gbWF4RGVjaW1hbHMgVGhlIG1heGltdW0gZGVjaW1hbCBwcmVjaXNpb24gdG8gcmV0dXJuXHJcbiAgICAgKiBAcmV0dXJucyBDb252ZXJ0ZWQgZGVjaW1hbCBkZWdyZWVzLCBvciBOYU4gaWYgdGhlIERNUyBzdHJpbmcgaXMgaW52YWxpZFxyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMuZG1zVG9EZFN0cmluZyA9IGZ1bmN0aW9uIChkbXMsIG1heERlY2ltYWxzKSB7XHJcbiAgICAgICAgaWYgKG1heERlY2ltYWxzID09PSB2b2lkIDApIHsgbWF4RGVjaW1hbHMgPSA2OyB9XHJcbiAgICAgICAgdmFyIHNwbGl0RG1zID0gZG1zLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgaWYgKHNwbGl0RG1zLmxlbmd0aCA8IDMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5OYU47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkZWdyZWVzID0gcGFyc2VJbnQoc3BsaXREbXNbMF0ucmVwbGFjZSgvW14wLTkuLV0vZywgJycpKTtcclxuICAgICAgICB2YXIgbWludXRlcyA9IHBhcnNlSW50KHNwbGl0RG1zWzFdLnJlcGxhY2UoL1teMC05Li1dL2csICcnKSk7XHJcbiAgICAgICAgdmFyIHNlY29uZHMgPSBwYXJzZUZsb2F0KHNwbGl0RG1zWzJdLnJlcGxhY2UoL1teMC05Li1dL2csICcnKSk7XHJcbiAgICAgICAgaWYgKGlzTmFOKGRlZ3JlZXMpIHx8IGlzTmFOKG1pbnV0ZXMpIHx8IGlzTmFOKHNlY29uZHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuTmFOO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGQgPSBNYXRoLmFicyhkZWdyZWVzKSArIChtaW51dGVzIC8gNjApICsgKHNlY29uZHMgLyAzNjAwKTtcclxuICAgICAgICBpZiAoZGVncmVlcyA8IDApIHtcclxuICAgICAgICAgICAgZGQgKj0gLTE7IC8vIFNldCBpZiB3ZSdyZSB3ZXN0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRydW5jYXRlIHRvIG1heERlY2ltYWxzIGRlY2ltYWwgcGxhY2VzXHJcbiAgICAgICAgdmFyIGRkU3BsaXQgPSBkZC50b1N0cmluZygpLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgaWYgKGRkU3BsaXQubGVuZ3RoID4gMSAmJiBkZFNwbGl0WzFdLmxlbmd0aCA+IDUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZGQudG9GaXhlZChtYXhEZWNpbWFscykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvdGhlcndpc2UgcmV0dXJuIHdpdGggdGhlIHByZWNpc2lvbiBhcyBpc1xyXG4gICAgICAgIHJldHVybiBkZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBETVMgc3RyaW5nIGZvciBhIGdpdmVuIGxhdGl0dWRlIGFuZCBsb25naXR1ZGVcclxuICAgICAqIEBwYXJhbSBsYXRpdHVkZSBUaGUgbGF0aXR1ZGVcclxuICAgICAqIEBwYXJhbSBsb25naXR1ZGUgVGhlIGxvbmdpdHVkZVxyXG4gICAgICogQHBhcmFtIHNob3dNYXJrcyBTaG93IGRlZ3JlZSBjaGFyYWN0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyBPYmplY3QgY29udGFpbmluZyBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIGFzIERNUyBzdHJpbmdzXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5sYXRMb25Ub0Rtc1N0cmluZyA9IGZ1bmN0aW9uIChsYXRpdHVkZSwgbG9uZ2l0dWRlLCBzaG93TWFya3MpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsYXRpdHVkZURNUzogdGhpcy5kZFRvRG1zU3RyaW5nKGxhdGl0dWRlLCBzaG93TWFya3MpICsgXCIgXCIgKyAobGF0aXR1ZGUgPCAwID8gJ1MnIDogJ04nKSxcclxuICAgICAgICAgICAgbG9uZ2l0dWRlRE1TOiB0aGlzLmRkVG9EbXNTdHJpbmcobG9uZ2l0dWRlLCBzaG93TWFya3MpICsgXCIgXCIgKyAobG9uZ2l0dWRlIDwgMCA/ICdXJyA6ICdFJylcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMgaW4gTWV0cmVzLCB1c2luZyB0aGUgaGF2ZXJzaW5lIGZvcm11bGFcclxuICAgICAqIEBwYXJhbSBzdGFydENvb3JkIFN0YXJ0aW5nIGNvb3JkaW5hdGVzXHJcbiAgICAgKiBAcGFyYW0gZW5kQ29vcmQgRW5kaW5nIGNvb3JkaW5hdGVzXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnQgY29vcmRpbmF0ZSB0byB0aGUgZW5kIGNvb3JkaW5hdGVcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLmhhdmVyc2luZURpc3RhbmNlID0gZnVuY3Rpb24gKHN0YXJ0Q29vcmQsIGVuZENvb3JkKSB7XHJcbiAgICAgICAgdmFyIGxhdFJhZHMgPSB0aGlzLmRlZ3JlZXNUb1JhZGlhbnMoZW5kQ29vcmRbMV0gLSBzdGFydENvb3JkWzFdKTtcclxuICAgICAgICB2YXIgbG9uUmFkcyA9IHRoaXMuZGVncmVlc1RvUmFkaWFucyhlbmRDb29yZFswXSAtIHN0YXJ0Q29vcmRbMF0pO1xyXG4gICAgICAgIHZhciBsYXQxUmFkcyA9IHRoaXMuZGVncmVlc1RvUmFkaWFucyhzdGFydENvb3JkWzFdKTtcclxuICAgICAgICB2YXIgbGF0MlJhZHMgPSB0aGlzLmRlZ3JlZXNUb1JhZGlhbnMoZW5kQ29vcmRbMV0pO1xyXG4gICAgICAgIHZhciBhID0gTWF0aC5zaW4obGF0UmFkcyAvIDIpICogTWF0aC5zaW4obGF0UmFkcyAvIDIpICsgTWF0aC5jb3MobGF0MVJhZHMpICogTWF0aC5jb3MobGF0MlJhZHMpICogTWF0aC5zaW4obG9uUmFkcyAvIDIpICogTWF0aC5zaW4obG9uUmFkcyAvIDIpO1xyXG4gICAgICAgIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5SQURJVVMgKiBjO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlIHRoZSBsZW5ndGggb2YgYSBsaW5lc3RyaW5nIGluIG1ldHJlcywgdXNpbmcgdGhlXHJcbiAgICAgKiBIYXZlcnNpbmUgZGlzdGFuY2UgbWV0aG9kLiBNdWx0aUxpbmVzdHJpbmcgZGlzdGFuY2VzIHdpbGwgbm90IGJlIHNlcGFyYXRlZFxyXG4gICAgICogQHBhcmFtIGxpbmUgVGhlIGxpbmVzdHJpbmcgdG8gY2FsY3VsYXRlIGEgbGVuZ3RoIGZvclxyXG4gICAgICogQHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgbGluZSBpbiBtZXRyZXNcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLmxpbmVMZW5ndGggPSBmdW5jdGlvbiAobGluZSkge1xyXG4gICAgICAgIHZhciBkaXN0YW5jZSA9IDA7XHJcbiAgICAgICAgdmFyIGxpbmVzID0gbGluZS50eXBlID09PSAnTGluZVN0cmluZycgPyBbbGluZS5jb29yZGluYXRlc10gOiBsaW5lLmNvb3JkaW5hdGVzO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgbGluZXNfMSA9IGxpbmVzOyBfaSA8IGxpbmVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBsaW5lc3RyaW5nID0gbGluZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBsYXN0Q29vcmQgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGxpbmVzdHJpbmdfMSA9IGxpbmVzdHJpbmc7IF9hIDwgbGluZXN0cmluZ18xLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gbGluZXN0cmluZ18xW19hXTtcclxuICAgICAgICAgICAgICAgIGlmICghbGFzdENvb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvb3JkID0gY29vcmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSArPSB0aGlzLmhhdmVyc2luZURpc3RhbmNlKGxhc3RDb29yZCwgY29vcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb29yZCA9IGNvb3JkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaXN0YW5jZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZSB0aGUgcGVyaW1ldHJlIGZvciBhIHBvbHlnb24gaW4gbWV0cmVzLCB1c2luZ1xyXG4gICAgICogdGhlIGhhdmVyc2luZSBtZXRob2QuIE11bHRpUG9seWdvbiBwZXJpbWV0cmVzIHdpbGwgbm90IGJlIHNlcGFyYXRlZFxyXG4gICAgICogQHBhcmFtIHBvbHlnb24gdGhlIHBvbHlnb24gdG8gY2FsY3VsYXRlIHRoZSBwZXJpbWV0cmUgZm9yXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgcGVyaW1ldHJlIG9mIHRoZSBwb2x5Z29uIGluIG1ldHJlc1xyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMucG9seWdvblBlcmltZXRlciA9IGZ1bmN0aW9uIChwb2x5Z29uKSB7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gMDtcclxuICAgICAgICB2YXIgcG9seXMgPSBwb2x5Z29uLnR5cGUgPT09ICdQb2x5Z29uJyA/IFtwb2x5Z29uLmNvb3JkaW5hdGVzXSA6IHBvbHlnb24uY29vcmRpbmF0ZXM7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwb2x5c18xID0gcG9seXM7IF9pIDwgcG9seXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHBvbHkgPSBwb2x5c18xW19pXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBwb2x5XzEgPSBwb2x5OyBfYSA8IHBvbHlfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciByaW5nID0gcG9seV8xW19hXTtcclxuICAgICAgICAgICAgICAgIHZhciBmaXJzdENvb3JkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHZhciBsYXN0Q29vcmQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCByaW5nXzEgPSByaW5nOyBfYiA8IHJpbmdfMS5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSByaW5nXzFbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbGFzdENvb3JkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Q29vcmQgPSBjb29yZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENvb3JkID0gY29vcmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSArPSB0aGlzLmhhdmVyc2luZURpc3RhbmNlKGxhc3RDb29yZCwgY29vcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q29vcmQgPSBjb29yZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUganNvbiBkaWRuJ3QgaW5jbHVkZSB0aGUgZmluYWwgcG9pbnQgbGlua2luZyB0byB0aGUgZmlyc3QgcG9pbnRcclxuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0byBhZGQgdGhhdCB0byB0aGUgZGlzdGFuY2UuXHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdENvb3JkICYmIGZpcnN0Q29vcmQgJiYgKGxhc3RDb29yZFswXSAhPSBmaXJzdENvb3JkWzBdIHx8IGxhc3RDb29yZFsxXSAhPSBmaXJzdENvb3JkWzFdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlICs9IHRoaXMuaGF2ZXJzaW5lRGlzdGFuY2UobGFzdENvb3JkLCBmaXJzdENvb3JkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlzdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBhcmVhIG9mIGEgcG9seWdvbiBpbiBtZXRyZXMgc3F1YXJlZC5cclxuICAgICAqIE11bHRpcG9seWdvbiBmZWF0dXJlcyB3aWxsIG5vdCBoYXZlIHRoZWlyIGFyZWFzIHNlcGFyYXRlZC5cclxuICAgICAqIEBwYXJhbSBwb2x5Z29uIFRoZSBwb2x5Z29uIHRvIGNhbGN1bGF0ZSB0aGUgYXJlYSBmb3JcclxuICAgICAqIEByZXR1cm5zIHRoZSBhcmVhIG9mIHRoZSBwb2x5Z29uIGluIG1ldHJlcyBzcXVhcmVkXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5wb2x5Z29uQXJlYSA9IGZ1bmN0aW9uIChwb2x5Z29uKSB7XHJcbiAgICAgICAgdmFyIGFyZWEgPSAwO1xyXG4gICAgICAgIHZhciBwb2x5cyA9IHBvbHlnb24udHlwZSA9PT0gJ1BvbHlnb24nID8gW3BvbHlnb24uY29vcmRpbmF0ZXNdIDogcG9seWdvbi5jb29yZGluYXRlcztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHBvbHlzXzIgPSBwb2x5czsgX2kgPCBwb2x5c18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcG9seSA9IHBvbHlzXzJbX2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvbHkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciByaW5nQXJlYSA9IE1hdGguYWJzKHRoaXMucG9seWdvblJpbmdBcmVhKHBvbHlbaV0pKTtcclxuICAgICAgICAgICAgICAgIGFyZWEgKz0gaSA9PT0gMCA/IHJpbmdBcmVhIDogLXJpbmdBcmVhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcmVhO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIFJlZmVyZW5jZTpcclxuICAgICAqIFJvYmVydC4gRy4gQ2hhbWJlcmxhaW4gYW5kIFdpbGxpYW0gSC4gRHVxdWV0dGUsIFwiU29tZSBBbGdvcml0aG1zIGZvciBQb2x5Z29ucyBvbiBhIFNwaGVyZVwiLFxyXG4gICAgICogSlBMIFB1YmxpY2F0aW9uIDA3LTAzLCBKZXQgUHJvcHVsc2lvblxyXG4gICAgICogTGFib3JhdG9yeSwgUGFzYWRlbmEsIENBLCBKdW5lIDIwMDcgaHR0cHM6Ly90cnMuanBsLm5hc2EuZ292L2hhbmRsZS8yMDE0LzQwNDA5XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJpbmcgdGhlIHBvbHlnb24gcmluZyB0byBjYWxjdWxhdGVcclxuICAgICAqIEByZXR1cm5zIFRoZSBhcmVhIG9mIHRoZSByaW5nIGluIG1ldHJlcyBzcXVhcmVkXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5wb2x5Z29uUmluZ0FyZWEgPSBmdW5jdGlvbiAocmluZykge1xyXG4gICAgICAgIHZhciBhcmVhID0gMDtcclxuICAgICAgICBpZiAocmluZy5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvd2VySW5kZXggPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWlkZGxlSW5kZXggPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXBwZXJJbmRleCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSByaW5nLmxlbmd0aCAtIDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb3dlckluZGV4ID0gcmluZy5sZW5ndGggLSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZUluZGV4ID0gcmluZy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gcmluZy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJJbmRleCA9IHJpbmcubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBwZXJJbmRleCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsb3dlckluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBtaWRkbGVJbmRleCA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSBpICsgMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBwb2ludDEgPSByaW5nW2xvd2VySW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50MiA9IHJpbmdbbWlkZGxlSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50MyA9IHJpbmdbdXBwZXJJbmRleF07XHJcbiAgICAgICAgICAgICAgICBhcmVhICs9ICh0aGlzLmRlZ3JlZXNUb1JhZGlhbnMocG9pbnQzWzBdKSAtIHRoaXMuZGVncmVlc1RvUmFkaWFucyhwb2ludDFbMF0pKSAqIE1hdGguc2luKHRoaXMuZGVncmVlc1RvUmFkaWFucyhwb2ludDJbMV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcmVhID0gKGFyZWEgKiB0aGlzLlJBRElVUyAqIHRoaXMuUkFESVVTKSAvIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcmVhO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydCBkZWNpbWFsIGRlZ3JlZXMgdG8gcmFkaWFuc1xyXG4gICAgICogQHBhcmFtIGRlZ3JlZXMgdGhlIGRlY2ltYWwgZGVncmVlc1xyXG4gICAgICogQHJldHVybnMgdGhlIGRlZ3JlZSBpbiByYWRpYW5zXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5kZWdyZWVzVG9SYWRpYW5zID0gZnVuY3Rpb24gKGRlZ3JlZXMpIHtcclxuICAgICAgICByZXR1cm4gKGRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnQgcmFkaWFucyB0byBkZWNpbWFsIGRlZ3JlZXNcclxuICAgICAqIEBwYXJhbSByYWRpYW5zIHRoZSByYWRpYW5zXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgZGVjaW1hbCBkZWdyZWVzXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5yYWRpYW5zVG9EZWdyZWVzID0gZnVuY3Rpb24gKHJhZGlhbnMpIHtcclxuICAgICAgICByZXR1cm4gcmFkaWFucyAqICgxODAgLyBNYXRoLlBJKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlZHVjZXMgdGhlIHByZWNpc2lvbiBvZiBhIG51bWJlclxyXG4gICAgICogQHBhcmFtIGNvb3JkIFRoZSBudW1iZXIgdG8gcmVkdWNlXHJcbiAgICAgKiBAcGFyYW0gcmVkdWNlVG8gSG93IG1hbnkgZGVjaW1hbHMgdG8gcmVkdWNlIGl0IHRvXHJcbiAgICAgKiBAcmV0dXJucyBhIHByZWNpc2lvbiByZWR1Y2VkIG51bWJlclxyXG4gICAgICovXHJcbiAgICBTcGF0aWFsVXRpbHMucmVkdWNlUHJlY2lzaW9uID0gZnVuY3Rpb24gKGNvb3JkLCByZWR1Y2VUbykge1xyXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGNvb3JkLnRvRml4ZWQocmVkdWNlVG8pKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlZHVjZSB0aGUgcHJlY2lzaW9uIG9mIGEgY29vcmRpbmF0ZS4gVGhpcyB3aWxsIHJldHVybiBhIG5ldyBjb29yZGluYXRlXHJcbiAgICAgKiBhbmQgbm90IGFsdGVyIHRoZSBzdXBwbGllZCBjb29yZGluYXRlXHJcbiAgICAgKiBAcGFyYW0gY29vcmRzIFRoZSBjb29yZGluYXRlIHRvIHJlZHVjZSBwcmVjaXNpb24gZm9yXHJcbiAgICAgKiBAcGFyYW0gcmVkdWNlVG8gSG93IG1hbnkgZGVjaW1hbCBwbGFjZXMgdG8gcmVkdWNlIHRvXHJcbiAgICAgKiBAcmV0dXJucyBBIHByZWNpc2lvbi1yZWR1Y2VkIFBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5yZWR1Y2VDb29yZGluYXRlUHJlY2lzaW9uID0gZnVuY3Rpb24gKGNvb3JkcywgcmVkdWNlVG8pIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMucmVkdWNlUHJlY2lzaW9uKGNvb3Jkc1swXSwgcmVkdWNlVG8pLCB0aGlzLnJlZHVjZVByZWNpc2lvbihjb29yZHNbMV0sIHJlZHVjZVRvKV07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYXJlIGNvb3JkaW5hdGVzXHJcbiAgICAgKiBAcGFyYW0gYSBQb3NpdGlvbiBBXHJcbiAgICAgKiBAcGFyYW0gYiBQb3NpdGlvbiBCXHJcbiAgICAgKiBAcmV0dXJucyBDb21wYXJpc29uXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5jb21wYXJlQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIGlmIChhWzBdIDwgYlswXSlcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGVsc2UgaWYgKGFbMF0gPiBiWzBdKVxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBlbHNlIGlmIChhWzFdIDwgYlsxXSlcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGVsc2UgaWYgKGFbMV0gPiBiWzFdKVxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRmluZCBhIHBvaW50IGF0IHRoZSBtaWRkbGUgb2YgdHdvIG90aGVyIHBvaW50cy4gVGhpcyBtZXRob2QgaXMgbm90IGdlb2Rlc2ljLCB0aGVyZWZvcmUgb25seSB1c2VmdWwgd2hlbiBhY2N1cmFjeSBpcyBub3QgbmVlZGVkIG9yIGZvciB2ZXJ5IHNtYWxsIGRpc3RhbmNlc1xyXG4gICAgICogQHBhcmFtIHBvaW50QSBUaGUgZmlyc3QgcG9pbnRcclxuICAgICAqIEBwYXJhbSBwb2ludEIgVGhlIHNlY29uZCBwb2ludFxyXG4gICAgICogQHJldHVybnMgUG9zaXRpb24gcmVwcmVzZW50aW5nIHRoZSBNaWRwb2ludCBiZXR3ZWVuIFBvaW50ICdBJyBhbmQgUG9pbnQgJ0InXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5taWRQb2ludCA9IGZ1bmN0aW9uIChwb2ludEEsIHBvaW50Qikge1xyXG4gICAgICAgIHJldHVybiBbKHBvaW50QVswXSArIHBvaW50QlswXSkgLyAyLjAsIChwb2ludEFbMV0gKyBwb2ludEJbMV0pIC8gMi4wXTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQgYSBwb2ludCBhdCB0aGUgbWlkZGxlIG9mIHR3byBvdGhlciBwb2ludHMuIFRoaXMgbWV0aG9kIHVzZXMgaGF2ZXJzaW5lIGRpc3RhbmNlIGFuZCBjb25mb3JtcyB0byB0aGUgY3VydmF0dXJlIG9mIHRoZSBlYXJ0aFxyXG4gICAgICogQHBhcmFtIHBvaW50QSBUaGUgZmlyc3QgcG9pbnRcclxuICAgICAqIEBwYXJhbSBwb2ludEIgVGhlIHNlY29uZCBwb2ludFxyXG4gICAgICogQHJldHVybnMgUG9zaXRpb24gcmVwcmVzZW50aW5nIHRoZSBNaWRwb2ludCBiZXR3ZWVuIFBvaW50ICdBJyBhbmQgUG9pbnQgJ0InXHJcbiAgICAgKi9cclxuICAgIFNwYXRpYWxVdGlscy5taWRwb2ludEdlb2Rlc2ljID0gZnVuY3Rpb24gKHBvaW50QSwgcG9pbnRCKSB7XHJcbiAgICAgICAgLy8gZmluZCB0aGUgZ2VvZGVzaWMgZGlzdGFuY2UgdXNpbmcgdGhlIGhhdmVyc2luZSBtZXRob2RcclxuICAgICAgICB2YXIgZGlzdGFuY2UgPSB0aGlzLmhhdmVyc2luZURpc3RhbmNlKHBvaW50QSwgcG9pbnRCKTtcclxuICAgICAgICAvLyBmaW5kIHRoZSBiZWFyaW5nIGJldHdlZW4gdGhlIHR3byBwb2ludHNcclxuICAgICAgICB2YXIgYmVhcmluZyA9IHRoaXMuYmVhcmluZyhwb2ludEEsIHBvaW50Qik7XHJcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBwb2ludCBieSBmaW5kaW5nIHRoZSBkZXN0aW5hdGlvbiBhdCBoYWxmIHRoZSBkaXN0YW5jZSBhbmQgYXQgdGhlIGdpdmVuIGJlYXJpbmdcclxuICAgICAgICByZXR1cm4gdGhpcy5kZXN0aW5hdGlvblBvaW50KHBvaW50QSwgZGlzdGFuY2UgLyAyLjAsIGJlYXJpbmcpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRmluZCB0aGUgYmVhcmluZyBiZXR3ZWVuIHR3byBwb2ludHNcclxuICAgICAqIGh0dHBzOi8vd3d3LmlnaXNtYXAuY29tL2Zvcm11bGEtdG8tZmluZC1iZWFyaW5nLW9yLWhlYWRpbmctYW5nbGUtYmV0d2Vlbi10d28tcG9pbnRzLWxhdGl0dWRlLWxvbmdpdHVkZS9cclxuICAgICAqIEBwYXJhbSBwb2ludEEgdGhlIGZpcnN0IHBvaW50XHJcbiAgICAgKiBAcGFyYW0gcG9pbnRCIHRoZSBzZWNvbmQgcG9pbnRcclxuICAgICAqIEByZXR1cm5zIFRoZSBiZWFyaW5nLCBpbiBkZWNpbWFsIGRlZ3JlZXNcclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLmJlYXJpbmcgPSBmdW5jdGlvbiAocG9pbnRBLCBwb2ludEIpIHtcclxuICAgICAgICAvLyBnZXQgdGhlIGxhdC9sb25nIHJhZGlhbnNcclxuICAgICAgICB2YXIgbG9uZ2l0dWRlQSA9IHRoaXMuZGVncmVlc1RvUmFkaWFucyhwb2ludEFbMF0pO1xyXG4gICAgICAgIHZhciBsb25naXR1ZGVCID0gdGhpcy5kZWdyZWVzVG9SYWRpYW5zKHBvaW50QlswXSk7XHJcbiAgICAgICAgdmFyIGxhdGl0dWRlQSA9IHRoaXMuZGVncmVlc1RvUmFkaWFucyhwb2ludEFbMV0pO1xyXG4gICAgICAgIHZhciBsYXRpdHVkZUIgPSB0aGlzLmRlZ3JlZXNUb1JhZGlhbnMocG9pbnRCWzFdKTtcclxuICAgICAgICB2YXIgYSA9IE1hdGguc2luKGxvbmdpdHVkZUIgLSBsb25naXR1ZGVBKSAqIE1hdGguY29zKGxhdGl0dWRlQik7XHJcbiAgICAgICAgdmFyIGIgPSBNYXRoLmNvcyhsYXRpdHVkZUEpICogTWF0aC5zaW4obGF0aXR1ZGVCKSAtIE1hdGguc2luKGxhdGl0dWRlQSkgKiBNYXRoLmNvcyhsYXRpdHVkZUIpICogTWF0aC5jb3MobG9uZ2l0dWRlQiAtIGxvbmdpdHVkZUEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJhZGlhbnNUb0RlZ3JlZXMoTWF0aC5hdGFuMihhLCBiKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHBvaW50LCBiZWFyaW5nLCBhbmQgZGlzdGFuY2UgaW4gbWV0cmVzLCBsb2NhdGUgdGhlIGRlc3RpbmF0aW9uIHBvaW50XHJcbiAgICAgKiBAcGFyYW0gcG9pbnQgVGhlIHN0YXJ0aW5nIHBvaW50XHJcbiAgICAgKiBAcGFyYW0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIGluIG1ldHJlc1xyXG4gICAgICogQHBhcmFtIGJlYXJpbmcgVGhlIGJlYXJpbmdcclxuICAgICAqIEByZXR1cm5zIFBvc2l0aW9uIHJlcHJlc2VudGluZyB0aGUgZGVzdGluYXRpb25cclxuICAgICAqL1xyXG4gICAgU3BhdGlhbFV0aWxzLmRlc3RpbmF0aW9uUG9pbnQgPSBmdW5jdGlvbiAocG9pbnQsIGRpc3RhbmNlLCBiZWFyaW5nKSB7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBsYXQvbG9uZywgYmVhcmluZyBhbmQgZGlzdGFuY2UgcmFkaWFuc1xyXG4gICAgICAgIHZhciBsb25naXR1ZGVSYWRzID0gdGhpcy5kZWdyZWVzVG9SYWRpYW5zKHBvaW50WzBdKTtcclxuICAgICAgICB2YXIgbGF0aXR1ZGVSYWRzID0gdGhpcy5kZWdyZWVzVG9SYWRpYW5zKHBvaW50WzFdKTtcclxuICAgICAgICB2YXIgYmVhcmluZ1JhZHMgPSB0aGlzLmRlZ3JlZXNUb1JhZGlhbnMoYmVhcmluZyk7XHJcbiAgICAgICAgdmFyIGRpc3RSYWRzID0gZGlzdGFuY2UgLyB0aGlzLlJBRElVUztcclxuICAgICAgICAvLyBjbGFjdWxhdGUgdGhlIGRlc3RpbmF0aW9uIGxhdC9sb25nXHJcbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uTGF0ID0gTWF0aC5hc2luKE1hdGguc2luKGxhdGl0dWRlUmFkcykgKiBNYXRoLmNvcyhkaXN0UmFkcykgKyBNYXRoLmNvcyhsYXRpdHVkZVJhZHMpICogTWF0aC5zaW4oZGlzdFJhZHMpICogTWF0aC5jb3MoYmVhcmluZ1JhZHMpKTtcclxuICAgICAgICB2YXIgZGVzdGluYXRpb25Mb25nID0gbG9uZ2l0dWRlUmFkcyArIE1hdGguYXRhbjIoTWF0aC5zaW4oYmVhcmluZ1JhZHMpICogTWF0aC5zaW4oZGlzdFJhZHMpICogTWF0aC5jb3MobGF0aXR1ZGVSYWRzKSwgTWF0aC5jb3MoZGlzdFJhZHMpIC0gTWF0aC5zaW4obGF0aXR1ZGVSYWRzKSAqIE1hdGguc2luKGRlc3RpbmF0aW9uTGF0KSk7XHJcbiAgICAgICAgLy8gY29udmVydCB0aGUgcmFkcyB0byBkZWdyZWVzXHJcbiAgICAgICAgdmFyIGZpbmFsTG9uZyA9IHRoaXMucmFkaWFuc1RvRGVncmVlcyhkZXN0aW5hdGlvbkxvbmcpO1xyXG4gICAgICAgIHZhciBmaW5hbExhdCA9IHRoaXMucmFkaWFuc1RvRGVncmVlcyhkZXN0aW5hdGlvbkxhdCk7XHJcbiAgICAgICAgcmV0dXJuIFtmaW5hbExvbmcsIGZpbmFsTGF0XTtcclxuICAgIH07XHJcbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FYXJ0aF9yYWRpdXNcclxuICAgIFNwYXRpYWxVdGlscy5SQURJVVMgPSA2MzcxMDA4Ljc3MTQ7XHJcbiAgICByZXR1cm4gU3BhdGlhbFV0aWxzO1xyXG59KCkpO1xyXG5leHBvcnQgeyBTcGF0aWFsVXRpbHMgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhdGlhbC11dGlscy5qcy5tYXAiLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG5jb25zdCBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5jb25zdCBjdXN0b21JbnNwZWN0U3ltYm9sID1cbiAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbFsnZm9yJ10gPT09ICdmdW5jdGlvbicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgPyBTeW1ib2xbJ2ZvciddKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgOiBudWxsXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuY29uc3QgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBjb25zdCBwcm90byA9IHsgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJvdG8sIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhcnIsIHByb3RvKVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG4gIHJldHVybiBidWZcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlWaWV3KHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAoaXNJbnN0YW5jZSh2YWx1ZSwgU2hhcmVkQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIFNoYXJlZEFycmF5QnVmZmVyKSkpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mICYmIHZhbHVlLnZhbHVlT2YoKVxuICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlT2YsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGNvbnN0IGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0oJ3N0cmluZycpLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gIClcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzE0OFxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlci5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlciwgVWludDhBcnJheSlcblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgY29uc3QgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgbGV0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgY29uc3QgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlWaWV3IChhcnJheVZpZXcpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYXJyYXlWaWV3LCBVaW50OEFycmF5KSkge1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgVWludDhBcnJheShhcnJheVZpZXcpXG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpXG4gIH1cbiAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgbGV0IGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICBjb25zdCBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIGNvbnN0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICBsZXQgeCA9IGEubGVuZ3RoXG4gIGxldCB5ID0gYi5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIGxldCBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgbGV0IHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgYnVmID0gbGlzdFtpXVxuICAgIGlmIChpc0luc3RhbmNlKGJ1ZiwgVWludDhBcnJheSkpIHtcbiAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgIGJ1ZixcbiAgICAgICAgICBwb3NcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICB9XG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgaXNJbnN0YW5jZShzdHJpbmcsIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzdHJpbmdcbiAgICApXG4gIH1cblxuICBjb25zdCBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGNvbnN0IG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2VyY2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIGNvbnN0IGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIGxldCBzdHIgPSAnJ1xuICBjb25zdCBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuaWYgKGN1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgQnVmZmVyLnByb3RvdHlwZVtjdXN0b21JbnNwZWN0U3ltYm9sXSA9IEJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICBsZXQgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgbGV0IHkgPSBlbmQgLSBzdGFydFxuICBjb25zdCBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIGNvbnN0IHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIGNvbnN0IHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICBsZXQgaW5kZXhTaXplID0gMVxuICBsZXQgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICBsZXQgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICBsZXQgaVxuICBpZiAoZGlyKSB7XG4gICAgbGV0IGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICBjb25zdCByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgbGV0IGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIGNvbnN0IHJlcyA9IFtdXG5cbiAgbGV0IGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIGNvbnN0IGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIGxldCBjb2RlUG9pbnQgPSBudWxsXG4gICAgbGV0IGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRilcbiAgICAgID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERilcbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKVxuICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICBsZXQgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG5jb25zdCBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgY29uc3QgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBsZXQgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgbGV0IG91dCA9ICcnXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgbGV0IHJlcyA9ICcnXG4gIC8vIElmIGJ5dGVzLmxlbmd0aCBpcyBvZGQsIHRoZSBsYXN0IDggYml0cyBtdXN0IGJlIGlnbm9yZWQgKHNhbWUgYXMgbm9kZS5qcylcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgY29uc3QgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YobmV3QnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICBsZXQgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdVSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IGxvID0gZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNFxuXG4gIGNvbnN0IGhpID0gdGhpc1srK29mZnNldF0gK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIGxhc3QgKiAyICoqIDI0XG5cbiAgcmV0dXJuIEJpZ0ludChsbykgKyAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgaGkgPSBmaXJzdCAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdXG5cbiAgY29uc3QgbG8gPSB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3RcblxuICByZXR1cm4gKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSkgKyBCaWdJbnQobG8pXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXRdXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoXG4gIGxldCBtdWwgPSAxXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0TEUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDRdICtcbiAgICB0aGlzW29mZnNldCArIDVdICogMiAqKiA4ICtcbiAgICB0aGlzW29mZnNldCArIDZdICogMiAqKiAxNiArXG4gICAgKGxhc3QgPDwgMjQpIC8vIE92ZXJmbG93XG5cbiAgcmV0dXJuIChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArXG4gICAgQmlnSW50KGZpcnN0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgdmFsID0gKGZpcnN0IDw8IDI0KSArIC8vIE92ZXJmbG93XG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQodGhpc1srK29mZnNldF0gKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICBsYXN0KVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIGxldCBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiB3cnRCaWdVSW50NjRMRSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBtaW4sIG1heCkge1xuICBjaGVja0ludEJJKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIDcpXG5cbiAgbGV0IGxvID0gTnVtYmVyKHZhbHVlICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICByZXR1cm4gb2Zmc2V0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NEJFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyA3XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNl0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDVdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA0XSA9IGxvXG4gIGxldCBoaSA9IE51bWJlcih2YWx1ZSA+PiBCaWdJbnQoMzIpICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0ICsgM10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDJdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAxXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0XSA9IGhpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ1VJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgQmlnSW50KDApLCBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gMFxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnSW50NjRMRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NExFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIC1CaWdJbnQoJzB4ODAwMDAwMDAwMDAwMDAwMCcpLCBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NEJFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0QkUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgY29uc3QgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXNlIGJ1aWx0LWluIHdoZW4gYXZhaWxhYmxlLCBtaXNzaW5nIGZyb20gSUUxMVxuICAgIHRoaXMuY29weVdpdGhpbih0YXJnZXRTdGFydCwgc3RhcnQsIGVuZClcbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbClcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICBsZXQgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgY29uc3QgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBDVVNUT00gRVJST1JTXG4vLyA9PT09PT09PT09PT09XG5cbi8vIFNpbXBsaWZpZWQgdmVyc2lvbnMgZnJvbSBOb2RlLCBjaGFuZ2VkIGZvciBCdWZmZXItb25seSB1c2FnZVxuY29uc3QgZXJyb3JzID0ge31cbmZ1bmN0aW9uIEUgKHN5bSwgZ2V0TWVzc2FnZSwgQmFzZSkge1xuICBlcnJvcnNbc3ltXSA9IGNsYXNzIE5vZGVFcnJvciBleHRlbmRzIEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgIHN1cGVyKClcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdtZXNzYWdlJywge1xuICAgICAgICB2YWx1ZTogZ2V0TWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KVxuXG4gICAgICAvLyBBZGQgdGhlIGVycm9yIGNvZGUgdG8gdGhlIG5hbWUgdG8gaW5jbHVkZSBpdCBpbiB0aGUgc3RhY2sgdHJhY2UuXG4gICAgICB0aGlzLm5hbWUgPSBgJHt0aGlzLm5hbWV9IFske3N5bX1dYFxuICAgICAgLy8gQWNjZXNzIHRoZSBzdGFjayB0byBnZW5lcmF0ZSB0aGUgZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGVycm9yIGNvZGVcbiAgICAgIC8vIGZyb20gdGhlIG5hbWUuXG4gICAgICB0aGlzLnN0YWNrIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAvLyBSZXNldCB0aGUgbmFtZSB0byB0aGUgYWN0dWFsIG5hbWUuXG4gICAgICBkZWxldGUgdGhpcy5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IGNvZGUgKCkge1xuICAgICAgcmV0dXJuIHN5bVxuICAgIH1cblxuICAgIHNldCBjb2RlICh2YWx1ZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2RlJywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5uYW1lfSBbJHtzeW19XTogJHt0aGlzLm1lc3NhZ2V9YFxuICAgIH1cbiAgfVxufVxuXG5FKCdFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMnLFxuICBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gYCR7bmFtZX0gaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYFxuICAgIH1cblxuICAgIHJldHVybiAnQXR0ZW1wdCB0byBhY2Nlc3MgbWVtb3J5IG91dHNpZGUgYnVmZmVyIGJvdW5kcydcbiAgfSwgUmFuZ2VFcnJvcilcbkUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJyxcbiAgZnVuY3Rpb24gKG5hbWUsIGFjdHVhbCkge1xuICAgIHJldHVybiBgVGhlIFwiJHtuYW1lfVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgYWN0dWFsfWBcbiAgfSwgVHlwZUVycm9yKVxuRSgnRVJSX09VVF9PRl9SQU5HRScsXG4gIGZ1bmN0aW9uIChzdHIsIHJhbmdlLCBpbnB1dCkge1xuICAgIGxldCBtc2cgPSBgVGhlIHZhbHVlIG9mIFwiJHtzdHJ9XCIgaXMgb3V0IG9mIHJhbmdlLmBcbiAgICBsZXQgcmVjZWl2ZWQgPSBpbnB1dFxuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGlucHV0KSAmJiBNYXRoLmFicyhpbnB1dCkgPiAyICoqIDMyKSB7XG4gICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihTdHJpbmcoaW5wdXQpKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnYmlnaW50Jykge1xuICAgICAgcmVjZWl2ZWQgPSBTdHJpbmcoaW5wdXQpXG4gICAgICBpZiAoaW5wdXQgPiBCaWdJbnQoMikgKiogQmlnSW50KDMyKSB8fCBpbnB1dCA8IC0oQmlnSW50KDIpICoqIEJpZ0ludCgzMikpKSB7XG4gICAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKHJlY2VpdmVkKVxuICAgICAgfVxuICAgICAgcmVjZWl2ZWQgKz0gJ24nXG4gICAgfVxuICAgIG1zZyArPSBgIEl0IG11c3QgYmUgJHtyYW5nZX0uIFJlY2VpdmVkICR7cmVjZWl2ZWR9YFxuICAgIHJldHVybiBtc2dcbiAgfSwgUmFuZ2VFcnJvcilcblxuZnVuY3Rpb24gYWRkTnVtZXJpY2FsU2VwYXJhdG9yICh2YWwpIHtcbiAgbGV0IHJlcyA9ICcnXG4gIGxldCBpID0gdmFsLmxlbmd0aFxuICBjb25zdCBzdGFydCA9IHZhbFswXSA9PT0gJy0nID8gMSA6IDBcbiAgZm9yICg7IGkgPj0gc3RhcnQgKyA0OyBpIC09IDMpIHtcbiAgICByZXMgPSBgXyR7dmFsLnNsaWNlKGkgLSAzLCBpKX0ke3Jlc31gXG4gIH1cbiAgcmV0dXJuIGAke3ZhbC5zbGljZSgwLCBpKX0ke3Jlc31gXG59XG5cbi8vIENIRUNLIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGNoZWNrQm91bmRzIChidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBpZiAoYnVmW29mZnNldF0gPT09IHVuZGVmaW5lZCB8fCBidWZbb2Zmc2V0ICsgYnl0ZUxlbmd0aF0gPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgYnVmLmxlbmd0aCAtIChieXRlTGVuZ3RoICsgMSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbnRCSSAodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHtcbiAgICBjb25zdCBuID0gdHlwZW9mIG1pbiA9PT0gJ2JpZ2ludCcgPyAnbicgOiAnJ1xuICAgIGxldCByYW5nZVxuICAgIGlmIChieXRlTGVuZ3RoID4gMykge1xuICAgICAgaWYgKG1pbiA9PT0gMCB8fCBtaW4gPT09IEJpZ0ludCgwKSkge1xuICAgICAgICByYW5nZSA9IGA+PSAwJHtufSBhbmQgPCAyJHtufSAqKiAkeyhieXRlTGVuZ3RoICsgMSkgKiA4fSR7bn1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYW5nZSA9IGA+PSAtKDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn0pIGFuZCA8IDIgKiogYCArXG4gICAgICAgICAgICAgICAgYCR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn1gXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlID0gYD49ICR7bWlufSR7bn0gYW5kIDw9ICR7bWF4fSR7bn1gXG4gICAgfVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSgndmFsdWUnLCByYW5nZSwgdmFsdWUpXG4gIH1cbiAgY2hlY2tCb3VuZHMoYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyICh2YWx1ZSwgbmFtZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ251bWJlcicsIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0Vycm9yICh2YWx1ZSwgbGVuZ3RoLCB0eXBlKSB7XG4gIGlmIChNYXRoLmZsb29yKHZhbHVlKSAhPT0gdmFsdWUpIHtcbiAgICB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgdHlwZSlcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JywgJ2FuIGludGVnZXInLCB2YWx1ZSlcbiAgfVxuXG4gIGlmIChsZW5ndGggPCAwKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfQlVGRkVSX09VVF9PRl9CT1VORFMoKVxuICB9XG5cbiAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKHR5cGUgfHwgJ29mZnNldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPj0gJHt0eXBlID8gMSA6IDB9IGFuZCA8PSAke2xlbmd0aH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUpXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxuY29uc3QgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIGxldCBjb2RlUG9pbnRcbiAgY29uc3QgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICBsZXQgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgY29uc3QgYnl0ZXMgPSBbXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIGxldCBjLCBoaSwgbG9cbiAgY29uc3QgYnl0ZUFycmF5ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZSBmb3IgYHRvU3RyaW5nKCdoZXgnKWBcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzIxOVxuY29uc3QgaGV4U2xpY2VMb29rdXBUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFscGhhYmV0ID0gJzAxMjM0NTY3ODlhYmNkZWYnXG4gIGNvbnN0IHRhYmxlID0gbmV3IEFycmF5KDI1NilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgY29uc3QgaTE2ID0gaSAqIDE2XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICB0YWJsZVtpMTYgKyBqXSA9IGFscGhhYmV0W2ldICsgYWxwaGFiZXRbal1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhYmxlXG59KSgpXG5cbi8vIFJldHVybiBub3QgZnVuY3Rpb24gd2l0aCBFcnJvciBpZiBCaWdJbnQgbm90IHN1cHBvcnRlZFxuZnVuY3Rpb24gZGVmaW5lQmlnSW50TWV0aG9kIChmbikge1xuICByZXR1cm4gdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyBCdWZmZXJCaWdJbnROb3REZWZpbmVkIDogZm5cbn1cblxuZnVuY3Rpb24gQnVmZmVyQmlnSW50Tm90RGVmaW5lZCAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignQmlnSW50IG5vdCBzdXBwb3J0ZWQnKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiMTAwXCI6IFwiQ29udGludWVcIixcbiAgXCIxMDFcIjogXCJTd2l0Y2hpbmcgUHJvdG9jb2xzXCIsXG4gIFwiMTAyXCI6IFwiUHJvY2Vzc2luZ1wiLFxuICBcIjIwMFwiOiBcIk9LXCIsXG4gIFwiMjAxXCI6IFwiQ3JlYXRlZFwiLFxuICBcIjIwMlwiOiBcIkFjY2VwdGVkXCIsXG4gIFwiMjAzXCI6IFwiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb25cIixcbiAgXCIyMDRcIjogXCJObyBDb250ZW50XCIsXG4gIFwiMjA1XCI6IFwiUmVzZXQgQ29udGVudFwiLFxuICBcIjIwNlwiOiBcIlBhcnRpYWwgQ29udGVudFwiLFxuICBcIjIwN1wiOiBcIk11bHRpLVN0YXR1c1wiLFxuICBcIjIwOFwiOiBcIkFscmVhZHkgUmVwb3J0ZWRcIixcbiAgXCIyMjZcIjogXCJJTSBVc2VkXCIsXG4gIFwiMzAwXCI6IFwiTXVsdGlwbGUgQ2hvaWNlc1wiLFxuICBcIjMwMVwiOiBcIk1vdmVkIFBlcm1hbmVudGx5XCIsXG4gIFwiMzAyXCI6IFwiRm91bmRcIixcbiAgXCIzMDNcIjogXCJTZWUgT3RoZXJcIixcbiAgXCIzMDRcIjogXCJOb3QgTW9kaWZpZWRcIixcbiAgXCIzMDVcIjogXCJVc2UgUHJveHlcIixcbiAgXCIzMDdcIjogXCJUZW1wb3JhcnkgUmVkaXJlY3RcIixcbiAgXCIzMDhcIjogXCJQZXJtYW5lbnQgUmVkaXJlY3RcIixcbiAgXCI0MDBcIjogXCJCYWQgUmVxdWVzdFwiLFxuICBcIjQwMVwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICBcIjQwMlwiOiBcIlBheW1lbnQgUmVxdWlyZWRcIixcbiAgXCI0MDNcIjogXCJGb3JiaWRkZW5cIixcbiAgXCI0MDRcIjogXCJOb3QgRm91bmRcIixcbiAgXCI0MDVcIjogXCJNZXRob2QgTm90IEFsbG93ZWRcIixcbiAgXCI0MDZcIjogXCJOb3QgQWNjZXB0YWJsZVwiLFxuICBcIjQwN1wiOiBcIlByb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDA4XCI6IFwiUmVxdWVzdCBUaW1lb3V0XCIsXG4gIFwiNDA5XCI6IFwiQ29uZmxpY3RcIixcbiAgXCI0MTBcIjogXCJHb25lXCIsXG4gIFwiNDExXCI6IFwiTGVuZ3RoIFJlcXVpcmVkXCIsXG4gIFwiNDEyXCI6IFwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLFxuICBcIjQxM1wiOiBcIlBheWxvYWQgVG9vIExhcmdlXCIsXG4gIFwiNDE0XCI6IFwiVVJJIFRvbyBMb25nXCIsXG4gIFwiNDE1XCI6IFwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZVwiLFxuICBcIjQxNlwiOiBcIlJhbmdlIE5vdCBTYXRpc2ZpYWJsZVwiLFxuICBcIjQxN1wiOiBcIkV4cGVjdGF0aW9uIEZhaWxlZFwiLFxuICBcIjQxOFwiOiBcIkknbSBhIHRlYXBvdFwiLFxuICBcIjQyMVwiOiBcIk1pc2RpcmVjdGVkIFJlcXVlc3RcIixcbiAgXCI0MjJcIjogXCJVbnByb2Nlc3NhYmxlIEVudGl0eVwiLFxuICBcIjQyM1wiOiBcIkxvY2tlZFwiLFxuICBcIjQyNFwiOiBcIkZhaWxlZCBEZXBlbmRlbmN5XCIsXG4gIFwiNDI1XCI6IFwiVW5vcmRlcmVkIENvbGxlY3Rpb25cIixcbiAgXCI0MjZcIjogXCJVcGdyYWRlIFJlcXVpcmVkXCIsXG4gIFwiNDI4XCI6IFwiUHJlY29uZGl0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDI5XCI6IFwiVG9vIE1hbnkgUmVxdWVzdHNcIixcbiAgXCI0MzFcIjogXCJSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlXCIsXG4gIFwiNDUxXCI6IFwiVW5hdmFpbGFibGUgRm9yIExlZ2FsIFJlYXNvbnNcIixcbiAgXCI1MDBcIjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIixcbiAgXCI1MDFcIjogXCJOb3QgSW1wbGVtZW50ZWRcIixcbiAgXCI1MDJcIjogXCJCYWQgR2F0ZXdheVwiLFxuICBcIjUwM1wiOiBcIlNlcnZpY2UgVW5hdmFpbGFibGVcIixcbiAgXCI1MDRcIjogXCJHYXRld2F5IFRpbWVvdXRcIixcbiAgXCI1MDVcIjogXCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwiLFxuICBcIjUwNlwiOiBcIlZhcmlhbnQgQWxzbyBOZWdvdGlhdGVzXCIsXG4gIFwiNTA3XCI6IFwiSW5zdWZmaWNpZW50IFN0b3JhZ2VcIixcbiAgXCI1MDhcIjogXCJMb29wIERldGVjdGVkXCIsXG4gIFwiNTA5XCI6IFwiQmFuZHdpZHRoIExpbWl0IEV4Y2VlZGVkXCIsXG4gIFwiNTEwXCI6IFwiTm90IEV4dGVuZGVkXCIsXG4gIFwiNTExXCI6IFwiTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBldmVudExpc3RlbmVyKCkge1xuICAgICAgaWYgKGVycm9yTGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgdmFyIGVycm9yTGlzdGVuZXI7XG5cbiAgICAvLyBBZGRpbmcgYW4gZXJyb3IgbGlzdGVuZXIgaXMgbm90IG9wdGlvbmFsIGJlY2F1c2VcbiAgICAvLyBpZiBhbiBlcnJvciBpcyB0aHJvd24gb24gYW4gZXZlbnQgZW1pdHRlciB3ZSBjYW5ub3RcbiAgICAvLyBndWFyYW50ZWUgdGhhdCB0aGUgYWN0dWFsIGV2ZW50IHdlIGFyZSB3YWl0aW5nIHdpbGxcbiAgICAvLyBiZSBmaXJlZC4gVGhlIHJlc3VsdCBjb3VsZCBiZSBhIHNpbGVudCB3YXkgdG8gY3JlYXRlXG4gICAgLy8gbWVtb3J5IG9yIGZpbGUgZGVzY3JpcHRvciBsZWFrcywgd2hpY2ggaXMgc29tZXRoaW5nXG4gICAgLy8gd2Ugc2hvdWxkIGF2b2lkLlxuICAgIGlmIChuYW1lICE9PSAnZXJyb3InKSB7XG4gICAgICBlcnJvckxpc3RlbmVyID0gZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCBldmVudExpc3RlbmVyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9O1xuXG4gICAgICBlbWl0dGVyLm9uY2UoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgZW1pdHRlci5vbmNlKG5hbWUsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cbiIsInZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcblxudmFyIGh0dHBzID0gbW9kdWxlLmV4cG9ydHNcblxuZm9yICh2YXIga2V5IGluIGh0dHApIHtcbiAgaWYgKGh0dHAuaGFzT3duUHJvcGVydHkoa2V5KSkgaHR0cHNba2V5XSA9IGh0dHBba2V5XVxufVxuXG5odHRwcy5yZXF1ZXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2IpIHtcbiAgcGFyYW1zID0gdmFsaWRhdGVQYXJhbXMocGFyYW1zKVxuICByZXR1cm4gaHR0cC5yZXF1ZXN0LmNhbGwodGhpcywgcGFyYW1zLCBjYilcbn1cblxuaHR0cHMuZ2V0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2IpIHtcbiAgcGFyYW1zID0gdmFsaWRhdGVQYXJhbXMocGFyYW1zKVxuICByZXR1cm4gaHR0cC5nZXQuY2FsbCh0aGlzLCBwYXJhbXMsIGNiKVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVBhcmFtcyAocGFyYW1zKSB7XG4gIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgIHBhcmFtcyA9IHVybC5wYXJzZShwYXJhbXMpXG4gIH1cbiAgaWYgKCFwYXJhbXMucHJvdG9jb2wpIHtcbiAgICBwYXJhbXMucHJvdG9jb2wgPSAnaHR0cHM6J1xuICB9XG4gIGlmIChwYXJhbXMucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQcm90b2NvbCBcIicgKyBwYXJhbXMucHJvdG9jb2wgKyAnXCIgbm90IHN1cHBvcnRlZC4gRXhwZWN0ZWQgXCJodHRwczpcIicpXG4gIH1cbiAgcmV0dXJuIHBhcmFtc1xufVxuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCB2YXIgUEpEXzNQQVJBTSA9IDE7XG5leHBvcnQgdmFyIFBKRF83UEFSQU0gPSAyO1xuZXhwb3J0IHZhciBQSkRfV0dTODQgPSA0OyAvLyBXR1M4NCBvciBlcXVpdmFsZW50XG5leHBvcnQgdmFyIFBKRF9OT0RBVFVNID0gNTsgLy8gV0dTODQgb3IgZXF1aXZhbGVudFxuZXhwb3J0IHZhciBTRUNfVE9fUkFEID0gNC44NDgxMzY4MTEwOTUzNTk5MzU4OTkxNDEwMjM1N2UtNjtcbmV4cG9ydCB2YXIgSEFMRl9QSSA9IE1hdGguUEkvMjtcbi8vIGVsbGlwb2lkIHBqX3NldF9lbGwuY1xuZXhwb3J0IHZhciBTSVhUSCA9IDAuMTY2NjY2NjY2NjY2NjY2NjY2Nztcbi8qIDEvNiAqL1xuZXhwb3J0IHZhciBSQTQgPSAwLjA0NzIyMjIyMjIyMjIyMjIyMjIyO1xuLyogMTcvMzYwICovXG5leHBvcnQgdmFyIFJBNiA9IDAuMDIyMTU2MDg0NjU2MDg0NjU2MDg7XG5leHBvcnQgdmFyIEVQU0xOID0gMS4wZS0xMDtcbi8vIHlvdSdkIHRoaW5rIHlvdSBjb3VsZCB1c2UgTnVtYmVyLkVQU0lMT04gYWJvdmUgYnV0IHRoYXQgbWFrZXNcbi8vIE1vbGx3ZWlkZSBnZXQgaW50byBhbiBpbmZpbmF0ZSBsb29wLlxuXG5leHBvcnQgdmFyIEQyUiA9IDAuMDE3NDUzMjkyNTE5OTQzMjk1Nzc7XG5leHBvcnQgdmFyIFIyRCA9IDU3LjI5NTc3OTUxMzA4MjMyMDg4O1xuZXhwb3J0IHZhciBGT1JUUEkgPSBNYXRoLlBJLzQ7XG5leHBvcnQgdmFyIFRXT19QSSA9IE1hdGguUEkgKiAyO1xuLy8gU1BJIGlzIHNsaWdodGx5IGdyZWF0ZXIgdGhhbiBNYXRoLlBJLCBzbyB2YWx1ZXMgdGhhdCBleGNlZWQgdGhlIC0xODAuLjE4MFxuLy8gZGVncmVlIHJhbmdlIGJ5IGEgdGlueSBhbW91bnQgZG9uJ3QgZ2V0IHdyYXBwZWQuIFRoaXMgcHJldmVudHMgcG9pbnRzIHRoYXRcbi8vIGhhdmUgZHJpZnRlZCBmcm9tIHRoZWlyIG9yaWdpbmFsIGxvY2F0aW9uIGFsb25nIHRoZSAxODB0aCBtZXJpZGlhbiAoZHVlIHRvXG4vLyBmbG9hdGluZyBwb2ludCBlcnJvcikgZnJvbSBjaGFuZ2luZyB0aGVpciBzaWduLlxuZXhwb3J0IHZhciBTUEkgPSAzLjE0MTU5MjY1MzU5O1xuIiwidmFyIGV4cG9ydHMgPSB7fTtcbmV4cG9ydCB7ZXhwb3J0cyBhcyBkZWZhdWx0fTtcblxuZXhwb3J0cy5ncmVlbndpY2ggPSAwLjA7IC8vXCIwZEVcIixcbmV4cG9ydHMubGlzYm9uID0gLTkuMTMxOTA2MTExMTExOyAvL1wiOWQwNyc1NC44NjJcXFwiV1wiLFxuZXhwb3J0cy5wYXJpcyA9IDIuMzM3MjI5MTY2NjY3OyAvL1wiMmQyMCcxNC4wMjVcXFwiRVwiLFxuZXhwb3J0cy5ib2dvdGEgPSAtNzQuMDgwOTE2NjY2NjY3OyAvL1wiNzRkMDQnNTEuM1xcXCJXXCIsXG5leHBvcnRzLm1hZHJpZCA9IC0zLjY4NzkzODg4ODg4OTsgLy9cIjNkNDEnMTYuNThcXFwiV1wiLFxuZXhwb3J0cy5yb21lID0gMTIuNDUyMzMzMzMzMzMzOyAvL1wiMTJkMjcnOC40XFxcIkVcIixcbmV4cG9ydHMuYmVybiA9IDcuNDM5NTgzMzMzMzMzOyAvL1wiN2QyNicyMi41XFxcIkVcIixcbmV4cG9ydHMuamFrYXJ0YSA9IDEwNi44MDc3MTk0NDQ0NDQ7IC8vXCIxMDZkNDgnMjcuNzlcXFwiRVwiLFxuZXhwb3J0cy5mZXJybyA9IC0xNy42NjY2NjY2NjY2Njc7IC8vXCIxN2Q0MCdXXCIsXG5leHBvcnRzLmJydXNzZWxzID0gNC4zNjc5NzU7IC8vXCI0ZDIyJzQuNzFcXFwiRVwiLFxuZXhwb3J0cy5zdG9ja2hvbG0gPSAxOC4wNTgyNzc3Nzc3Nzg7IC8vXCIxOGQzJzI5LjhcXFwiRVwiLFxuZXhwb3J0cy5hdGhlbnMgPSAyMy43MTYzMzc1OyAvL1wiMjNkNDInNTguODE1XFxcIkVcIixcbmV4cG9ydHMub3NsbyA9IDEwLjcyMjkxNjY2NjY2NzsgLy9cIjEwZDQzJzIyLjVcXFwiRVwiXG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGZ0OiB7dG9fbWV0ZXI6IDAuMzA0OH0sXG4gICd1cy1mdCc6IHt0b19tZXRlcjogMTIwMCAvIDM5Mzd9XG59O1xuIiwidmFyIGlnbm9yZWRDaGFyID0gL1tcXHNfXFwtXFwvXFwoXFwpXS9nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF0Y2gob2JqLCBrZXkpIHtcbiAgaWYgKG9ialtrZXldKSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgdmFyIGxrZXkgPSBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKGlnbm9yZWRDaGFyLCAnJyk7XG4gIHZhciBpID0gLTE7XG4gIHZhciB0ZXN0a2V5LCBwcm9jZXNzZWRLZXk7XG4gIHdoaWxlICgrK2kgPCBrZXlzLmxlbmd0aCkge1xuICAgIHRlc3RrZXkgPSBrZXlzW2ldO1xuICAgIHByb2Nlc3NlZEtleSA9IHRlc3RrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKGlnbm9yZWRDaGFyLCAnJyk7XG4gICAgaWYgKHByb2Nlc3NlZEtleSA9PT0gbGtleSkge1xuICAgICAgcmV0dXJuIG9ialt0ZXN0a2V5XTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7RDJSfSBmcm9tICcuL2NvbnN0YW50cy92YWx1ZXMnO1xuaW1wb3J0IFByaW1lTWVyaWRpYW4gZnJvbSAnLi9jb25zdGFudHMvUHJpbWVNZXJpZGlhbic7XG5pbXBvcnQgdW5pdHMgZnJvbSAnLi9jb25zdGFudHMvdW5pdHMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vbWF0Y2gnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWZEYXRhKSB7XG4gIHZhciBzZWxmID0ge307XG4gIHZhciBwYXJhbU9iaiA9IGRlZkRhdGEuc3BsaXQoJysnKS5tYXAoZnVuY3Rpb24odikge1xuICAgIHJldHVybiB2LnRyaW0oKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uKGEpIHtcbiAgICByZXR1cm4gYTtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uKHAsIGEpIHtcbiAgICB2YXIgc3BsaXQgPSBhLnNwbGl0KCc9Jyk7XG4gICAgc3BsaXQucHVzaCh0cnVlKTtcbiAgICBwW3NwbGl0WzBdLnRvTG93ZXJDYXNlKCldID0gc3BsaXRbMV07XG4gICAgcmV0dXJuIHA7XG4gIH0sIHt9KTtcbiAgdmFyIHBhcmFtTmFtZSwgcGFyYW1WYWwsIHBhcmFtT3V0bmFtZTtcbiAgdmFyIHBhcmFtcyA9IHtcbiAgICBwcm9qOiAncHJvak5hbWUnLFxuICAgIGRhdHVtOiAnZGF0dW1Db2RlJyxcbiAgICByZjogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5yZiA9IHBhcnNlRmxvYXQodik7XG4gICAgfSxcbiAgICBsYXRfMDogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5sYXQwID0gdiAqIEQyUjtcbiAgICB9LFxuICAgIGxhdF8xOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmxhdDEgPSB2ICogRDJSO1xuICAgIH0sXG4gICAgbGF0XzI6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYubGF0MiA9IHYgKiBEMlI7XG4gICAgfSxcbiAgICBsYXRfdHM6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYubGF0X3RzID0gdiAqIEQyUjtcbiAgICB9LFxuICAgIGxvbl8wOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmxvbmcwID0gdiAqIEQyUjtcbiAgICB9LFxuICAgIGxvbl8xOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmxvbmcxID0gdiAqIEQyUjtcbiAgICB9LFxuICAgIGxvbl8yOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmxvbmcyID0gdiAqIEQyUjtcbiAgICB9LFxuICAgIGFscGhhOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmFscGhhID0gcGFyc2VGbG9hdCh2KSAqIEQyUjtcbiAgICB9LFxuICAgIGxvbmM6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYubG9uZ2MgPSB2ICogRDJSO1xuICAgIH0sXG4gICAgeF8wOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLngwID0gcGFyc2VGbG9hdCh2KTtcbiAgICB9LFxuICAgIHlfMDogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi55MCA9IHBhcnNlRmxvYXQodik7XG4gICAgfSxcbiAgICBrXzA6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYuazAgPSBwYXJzZUZsb2F0KHYpO1xuICAgIH0sXG4gICAgazogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5rMCA9IHBhcnNlRmxvYXQodik7XG4gICAgfSxcbiAgICBhOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLmEgPSBwYXJzZUZsb2F0KHYpO1xuICAgIH0sXG4gICAgYjogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5iID0gcGFyc2VGbG9hdCh2KTtcbiAgICB9LFxuICAgIHJfYTogZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLlJfQSA9IHRydWU7XG4gICAgfSxcbiAgICB6b25lOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLnpvbmUgPSBwYXJzZUludCh2LCAxMCk7XG4gICAgfSxcbiAgICBzb3V0aDogZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnV0bVNvdXRoID0gdHJ1ZTtcbiAgICB9LFxuICAgIHRvd2dzODQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHNlbGYuZGF0dW1fcGFyYW1zID0gdi5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRvX21ldGVyOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLnRvX21ldGVyID0gcGFyc2VGbG9hdCh2KTtcbiAgICB9LFxuICAgIHVuaXRzOiBmdW5jdGlvbih2KSB7XG4gICAgICBzZWxmLnVuaXRzID0gdjtcbiAgICAgIHZhciB1bml0ID0gbWF0Y2godW5pdHMsIHYpO1xuICAgICAgaWYgKHVuaXQpIHtcbiAgICAgICAgc2VsZi50b19tZXRlciA9IHVuaXQudG9fbWV0ZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICBmcm9tX2dyZWVud2ljaDogZnVuY3Rpb24odikge1xuICAgICAgc2VsZi5mcm9tX2dyZWVud2ljaCA9IHYgKiBEMlI7XG4gICAgfSxcbiAgICBwbTogZnVuY3Rpb24odikge1xuICAgICAgdmFyIHBtID0gbWF0Y2goUHJpbWVNZXJpZGlhbiwgdik7XG4gICAgICBzZWxmLmZyb21fZ3JlZW53aWNoID0gKHBtID8gcG0gOiBwYXJzZUZsb2F0KHYpKSAqIEQyUjtcbiAgICB9LFxuICAgIG5hZGdyaWRzOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAodiA9PT0gJ0BudWxsJykge1xuICAgICAgICBzZWxmLmRhdHVtQ29kZSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWxmLm5hZGdyaWRzID0gdjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGF4aXM6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHZhciBsZWdhbEF4aXMgPSBcImV3bnN1ZFwiO1xuICAgICAgaWYgKHYubGVuZ3RoID09PSAzICYmIGxlZ2FsQXhpcy5pbmRleE9mKHYuc3Vic3RyKDAsIDEpKSAhPT0gLTEgJiYgbGVnYWxBeGlzLmluZGV4T2Yodi5zdWJzdHIoMSwgMSkpICE9PSAtMSAmJiBsZWdhbEF4aXMuaW5kZXhPZih2LnN1YnN0cigyLCAxKSkgIT09IC0xKSB7XG4gICAgICAgIHNlbGYuYXhpcyA9IHY7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBmb3IgKHBhcmFtTmFtZSBpbiBwYXJhbU9iaikge1xuICAgIHBhcmFtVmFsID0gcGFyYW1PYmpbcGFyYW1OYW1lXTtcbiAgICBpZiAocGFyYW1OYW1lIGluIHBhcmFtcykge1xuICAgICAgcGFyYW1PdXRuYW1lID0gcGFyYW1zW3BhcmFtTmFtZV07XG4gICAgICBpZiAodHlwZW9mIHBhcmFtT3V0bmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwYXJhbU91dG5hbWUocGFyYW1WYWwpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlbGZbcGFyYW1PdXRuYW1lXSA9IHBhcmFtVmFsO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHNlbGZbcGFyYW1OYW1lXSA9IHBhcmFtVmFsO1xuICAgIH1cbiAgfVxuICBpZih0eXBlb2Ygc2VsZi5kYXR1bUNvZGUgPT09ICdzdHJpbmcnICYmIHNlbGYuZGF0dW1Db2RlICE9PSBcIldHUzg0XCIpe1xuICAgIHNlbGYuZGF0dW1Db2RlID0gc2VsZi5kYXR1bUNvZGUudG9Mb3dlckNhc2UoKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHBhcnNlU3RyaW5nO1xuXG52YXIgTkVVVFJBTCA9IDE7XG52YXIgS0VZV09SRCA9IDI7XG52YXIgTlVNQkVSID0gMztcbnZhciBRVU9URUQgPSA0O1xudmFyIEFGVEVSUVVPVEUgPSA1O1xudmFyIEVOREVEID0gLTE7XG52YXIgd2hpdGVzcGFjZSA9IC9cXHMvO1xudmFyIGxhdGluID0gL1tBLVphLXpdLztcbnZhciBrZXl3b3JkID0gL1tBLVphLXo4NF0vO1xudmFyIGVuZFRoaW5ncyA9IC9bLFxcXV0vO1xudmFyIGRpZ2V0cyA9IC9bXFxkXFwuRVxcLVxcK10vO1xuLy8gY29uc3QgaWdub3JlZENoYXIgPSAvW1xcc19cXC1cXC9cXChcXCldL2c7XG5mdW5jdGlvbiBQYXJzZXIodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdub3QgYSBzdHJpbmcnKTtcbiAgfVxuICB0aGlzLnRleHQgPSB0ZXh0LnRyaW0oKTtcbiAgdGhpcy5sZXZlbCA9IDA7XG4gIHRoaXMucGxhY2UgPSAwO1xuICB0aGlzLnJvb3QgPSBudWxsO1xuICB0aGlzLnN0YWNrID0gW107XG4gIHRoaXMuY3VycmVudE9iamVjdCA9IG51bGw7XG4gIHRoaXMuc3RhdGUgPSBORVVUUkFMO1xufVxuUGFyc2VyLnByb3RvdHlwZS5yZWFkQ2hhcmljdGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjaGFyID0gdGhpcy50ZXh0W3RoaXMucGxhY2UrK107XG4gIGlmICh0aGlzLnN0YXRlICE9PSBRVU9URUQpIHtcbiAgICB3aGlsZSAod2hpdGVzcGFjZS50ZXN0KGNoYXIpKSB7XG4gICAgICBpZiAodGhpcy5wbGFjZSA+PSB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNoYXIgPSB0aGlzLnRleHRbdGhpcy5wbGFjZSsrXTtcbiAgICB9XG4gIH1cbiAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgY2FzZSBORVVUUkFMOlxuICAgICAgcmV0dXJuIHRoaXMubmV1dHJhbChjaGFyKTtcbiAgICBjYXNlIEtFWVdPUkQ6XG4gICAgICByZXR1cm4gdGhpcy5rZXl3b3JkKGNoYXIpXG4gICAgY2FzZSBRVU9URUQ6XG4gICAgICByZXR1cm4gdGhpcy5xdW90ZWQoY2hhcik7XG4gICAgY2FzZSBBRlRFUlFVT1RFOlxuICAgICAgcmV0dXJuIHRoaXMuYWZ0ZXJxdW90ZShjaGFyKTtcbiAgICBjYXNlIE5VTUJFUjpcbiAgICAgIHJldHVybiB0aGlzLm51bWJlcihjaGFyKTtcbiAgICBjYXNlIEVOREVEOlxuICAgICAgcmV0dXJuO1xuICB9XG59O1xuUGFyc2VyLnByb3RvdHlwZS5hZnRlcnF1b3RlID0gZnVuY3Rpb24oY2hhcikge1xuICBpZiAoY2hhciA9PT0gJ1wiJykge1xuICAgIHRoaXMud29yZCArPSAnXCInO1xuICAgIHRoaXMuc3RhdGUgPSBRVU9URUQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbmRUaGluZ3MudGVzdChjaGFyKSkge1xuICAgIHRoaXMud29yZCA9IHRoaXMud29yZC50cmltKCk7XG4gICAgdGhpcy5hZnRlckl0ZW0oY2hhcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignaGF2blxcJ3QgaGFuZGxlZCBcIicgK2NoYXIgKyAnXCIgaW4gYWZ0ZXJxdW90ZSB5ZXQsIGluZGV4ICcgKyB0aGlzLnBsYWNlKTtcbn07XG5QYXJzZXIucHJvdG90eXBlLmFmdGVySXRlbSA9IGZ1bmN0aW9uKGNoYXIpIHtcbiAgaWYgKGNoYXIgPT09ICcsJykge1xuICAgIGlmICh0aGlzLndvcmQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuY3VycmVudE9iamVjdC5wdXNoKHRoaXMud29yZCk7XG4gICAgfVxuICAgIHRoaXMud29yZCA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZSA9IE5FVVRSQUw7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjaGFyID09PSAnXScpIHtcbiAgICB0aGlzLmxldmVsLS07XG4gICAgaWYgKHRoaXMud29yZCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5jdXJyZW50T2JqZWN0LnB1c2godGhpcy53b3JkKTtcbiAgICAgIHRoaXMud29yZCA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuc3RhdGUgPSBORVVUUkFMO1xuICAgIHRoaXMuY3VycmVudE9iamVjdCA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRPYmplY3QpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBFTkRFRDtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cbn07XG5QYXJzZXIucHJvdG90eXBlLm51bWJlciA9IGZ1bmN0aW9uKGNoYXIpIHtcbiAgaWYgKGRpZ2V0cy50ZXN0KGNoYXIpKSB7XG4gICAgdGhpcy53b3JkICs9IGNoYXI7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbmRUaGluZ3MudGVzdChjaGFyKSkge1xuICAgIHRoaXMud29yZCA9IHBhcnNlRmxvYXQodGhpcy53b3JkKTtcbiAgICB0aGlzLmFmdGVySXRlbShjaGFyKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdoYXZuXFwndCBoYW5kbGVkIFwiJyArY2hhciArICdcIiBpbiBudW1iZXIgeWV0LCBpbmRleCAnICsgdGhpcy5wbGFjZSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5xdW90ZWQgPSBmdW5jdGlvbihjaGFyKSB7XG4gIGlmIChjaGFyID09PSAnXCInKSB7XG4gICAgdGhpcy5zdGF0ZSA9IEFGVEVSUVVPVEU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMud29yZCArPSBjaGFyO1xuICByZXR1cm47XG59O1xuUGFyc2VyLnByb3RvdHlwZS5rZXl3b3JkID0gZnVuY3Rpb24oY2hhcikge1xuICBpZiAoa2V5d29yZC50ZXN0KGNoYXIpKSB7XG4gICAgdGhpcy53b3JkICs9IGNoYXI7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjaGFyID09PSAnWycpIHtcbiAgICB2YXIgbmV3T2JqZWN0cyA9IFtdO1xuICAgIG5ld09iamVjdHMucHVzaCh0aGlzLndvcmQpO1xuICAgIHRoaXMubGV2ZWwrKztcbiAgICBpZiAodGhpcy5yb290ID09PSBudWxsKSB7XG4gICAgICB0aGlzLnJvb3QgPSBuZXdPYmplY3RzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRPYmplY3QucHVzaChuZXdPYmplY3RzKTtcbiAgICB9XG4gICAgdGhpcy5zdGFjay5wdXNoKHRoaXMuY3VycmVudE9iamVjdCk7XG4gICAgdGhpcy5jdXJyZW50T2JqZWN0ID0gbmV3T2JqZWN0cztcbiAgICB0aGlzLnN0YXRlID0gTkVVVFJBTDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGVuZFRoaW5ncy50ZXN0KGNoYXIpKSB7XG4gICAgdGhpcy5hZnRlckl0ZW0oY2hhcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignaGF2blxcJ3QgaGFuZGxlZCBcIicgK2NoYXIgKyAnXCIgaW4ga2V5d29yZCB5ZXQsIGluZGV4ICcgKyB0aGlzLnBsYWNlKTtcbn07XG5QYXJzZXIucHJvdG90eXBlLm5ldXRyYWwgPSBmdW5jdGlvbihjaGFyKSB7XG4gIGlmIChsYXRpbi50ZXN0KGNoYXIpKSB7XG4gICAgdGhpcy53b3JkID0gY2hhcjtcbiAgICB0aGlzLnN0YXRlID0gS0VZV09SRDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGNoYXIgPT09ICdcIicpIHtcbiAgICB0aGlzLndvcmQgPSAnJztcbiAgICB0aGlzLnN0YXRlID0gUVVPVEVEO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZGlnZXRzLnRlc3QoY2hhcikpIHtcbiAgICB0aGlzLndvcmQgPSBjaGFyO1xuICAgIHRoaXMuc3RhdGUgPSBOVU1CRVI7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbmRUaGluZ3MudGVzdChjaGFyKSkge1xuICAgIHRoaXMuYWZ0ZXJJdGVtKGNoYXIpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ2hhdm5cXCd0IGhhbmRsZWQgXCInICtjaGFyICsgJ1wiIGluIG5ldXRyYWwgeWV0LCBpbmRleCAnICsgdGhpcy5wbGFjZSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5vdXRwdXQgPSBmdW5jdGlvbigpIHtcbiAgd2hpbGUgKHRoaXMucGxhY2UgPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgdGhpcy5yZWFkQ2hhcmljdGVyKCk7XG4gIH1cbiAgaWYgKHRoaXMuc3RhdGUgPT09IEVOREVEKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdDtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBwYXJzZSBzdHJpbmcgXCInICt0aGlzLnRleHQgKyAnXCIuIFN0YXRlIGlzICcgKyB0aGlzLnN0YXRlKTtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nKHR4dCkge1xuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcih0eHQpO1xuICByZXR1cm4gcGFyc2VyLm91dHB1dCgpO1xufVxuIiwiXG5cbmZ1bmN0aW9uIG1hcGl0KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XG4gICAgdmFsdWUudW5zaGlmdChrZXkpO1xuICAgIGtleSA9IG51bGw7XG4gIH1cbiAgdmFyIHRoaW5nID0ga2V5ID8ge30gOiBvYmo7XG5cbiAgdmFyIG91dCA9IHZhbHVlLnJlZHVjZShmdW5jdGlvbihuZXdPYmosIGl0ZW0pIHtcbiAgICBzRXhwcihpdGVtLCBuZXdPYmopO1xuICAgIHJldHVybiBuZXdPYmpcbiAgfSwgdGhpbmcpO1xuICBpZiAoa2V5KSB7XG4gICAgb2JqW2tleV0gPSBvdXQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNFeHByKHYsIG9iaikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkodikpIHtcbiAgICBvYmpbdl0gPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIga2V5ID0gdi5zaGlmdCgpO1xuICBpZiAoa2V5ID09PSAnUEFSQU1FVEVSJykge1xuICAgIGtleSA9IHYuc2hpZnQoKTtcbiAgfVxuICBpZiAodi5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2WzBdKSkge1xuICAgICAgb2JqW2tleV0gPSB7fTtcbiAgICAgIHNFeHByKHZbMF0sIG9ialtrZXldKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb2JqW2tleV0gPSB2WzBdO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXYubGVuZ3RoKSB7XG4gICAgb2JqW2tleV0gPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoa2V5ID09PSAnVE9XR1M4NCcpIHtcbiAgICBvYmpba2V5XSA9IHY7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChrZXkgPT09ICdBWElTJykge1xuICAgIGlmICghKGtleSBpbiBvYmopKSB7XG4gICAgICBvYmpba2V5XSA9IFtdO1xuICAgIH1cbiAgICBvYmpba2V5XS5wdXNoKHYpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgIG9ialtrZXldID0ge307XG4gIH1cblxuICB2YXIgaTtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlICdVTklUJzpcbiAgICBjYXNlICdQUklNRU0nOlxuICAgIGNhc2UgJ1ZFUlRfREFUVU0nOlxuICAgICAgb2JqW2tleV0gPSB7XG4gICAgICAgIG5hbWU6IHZbMF0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgY29udmVydDogdlsxXVxuICAgICAgfTtcbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICBzRXhwcih2WzJdLCBvYmpba2V5XSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnU1BIRVJPSUQnOlxuICAgIGNhc2UgJ0VMTElQU09JRCc6XG4gICAgICBvYmpba2V5XSA9IHtcbiAgICAgICAgbmFtZTogdlswXSxcbiAgICAgICAgYTogdlsxXSxcbiAgICAgICAgcmY6IHZbMl1cbiAgICAgIH07XG4gICAgICBpZiAodi5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgc0V4cHIodlszXSwgb2JqW2tleV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ1BST0pFQ1RFRENSUyc6XG4gICAgY2FzZSAnUFJPSkNSUyc6XG4gICAgY2FzZSAnR0VPR0NTJzpcbiAgICBjYXNlICdHRU9DQ1MnOlxuICAgIGNhc2UgJ1BST0pDUyc6XG4gICAgY2FzZSAnTE9DQUxfQ1MnOlxuICAgIGNhc2UgJ0dFT0RDUlMnOlxuICAgIGNhc2UgJ0dFT0RFVElDQ1JTJzpcbiAgICBjYXNlICdHRU9ERVRJQ0RBVFVNJzpcbiAgICBjYXNlICdFREFUVU0nOlxuICAgIGNhc2UgJ0VOR0lORUVSSU5HREFUVU0nOlxuICAgIGNhc2UgJ1ZFUlRfQ1MnOlxuICAgIGNhc2UgJ1ZFUlRDUlMnOlxuICAgIGNhc2UgJ1ZFUlRJQ0FMQ1JTJzpcbiAgICBjYXNlICdDT01QRF9DUyc6XG4gICAgY2FzZSAnQ09NUE9VTkRDUlMnOlxuICAgIGNhc2UgJ0VOR0lORUVSSU5HQ1JTJzpcbiAgICBjYXNlICdFTkdDUlMnOlxuICAgIGNhc2UgJ0ZJVFRFRF9DUyc6XG4gICAgY2FzZSAnTE9DQUxfREFUVU0nOlxuICAgIGNhc2UgJ0RBVFVNJzpcbiAgICAgIHZbMF0gPSBbJ25hbWUnLCB2WzBdXTtcbiAgICAgIG1hcGl0KG9iaiwga2V5LCB2KTtcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IHYubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2W2ldKSkge1xuICAgICAgICAgIHJldHVybiBzRXhwcih2LCBvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXBpdChvYmosIGtleSwgdik7XG4gIH1cbn1cbiIsInZhciBEMlIgPSAwLjAxNzQ1MzI5MjUxOTk0MzI5NTc3O1xuaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQge3NFeHByfSBmcm9tICcuL3Byb2Nlc3MnO1xuXG5cblxuZnVuY3Rpb24gcmVuYW1lKG9iaiwgcGFyYW1zKSB7XG4gIHZhciBvdXROYW1lID0gcGFyYW1zWzBdO1xuICB2YXIgaW5OYW1lID0gcGFyYW1zWzFdO1xuICBpZiAoIShvdXROYW1lIGluIG9iaikgJiYgKGluTmFtZSBpbiBvYmopKSB7XG4gICAgb2JqW291dE5hbWVdID0gb2JqW2luTmFtZV07XG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDMpIHtcbiAgICAgIG9ialtvdXROYW1lXSA9IHBhcmFtc1syXShvYmpbb3V0TmFtZV0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkMnIoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0ICogRDJSO1xufVxuXG5mdW5jdGlvbiBjbGVhbldLVCh3a3QpIHtcbiAgaWYgKHdrdC50eXBlID09PSAnR0VPR0NTJykge1xuICAgIHdrdC5wcm9qTmFtZSA9ICdsb25nbGF0JztcbiAgfSBlbHNlIGlmICh3a3QudHlwZSA9PT0gJ0xPQ0FMX0NTJykge1xuICAgIHdrdC5wcm9qTmFtZSA9ICdpZGVudGl0eSc7XG4gICAgd2t0LmxvY2FsID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHdrdC5QUk9KRUNUSU9OID09PSAnb2JqZWN0Jykge1xuICAgICAgd2t0LnByb2pOYW1lID0gT2JqZWN0LmtleXMod2t0LlBST0pFQ1RJT04pWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB3a3QucHJvak5hbWUgPSB3a3QuUFJPSkVDVElPTjtcbiAgICB9XG4gIH1cbiAgaWYgKHdrdC5BWElTKSB7XG4gICAgdmFyIGF4aXNPcmRlciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHdrdC5BWElTLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgIHZhciBheGlzID0gd2t0LkFYSVNbaV07XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IGF4aXNbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yLmluZGV4T2YoJ25vcnRoJykgIT09IC0xKSB7XG4gICAgICAgIGF4aXNPcmRlciArPSAnbic7XG4gICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IuaW5kZXhPZignc291dGgnKSAhPT0gLTEpIHtcbiAgICAgICAgYXhpc09yZGVyICs9ICdzJztcbiAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci5pbmRleE9mKCdlYXN0JykgIT09IC0xKSB7XG4gICAgICAgIGF4aXNPcmRlciArPSAnZSc7XG4gICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IuaW5kZXhPZignd2VzdCcpICE9PSAtMSkge1xuICAgICAgICBheGlzT3JkZXIgKz0gJ3cnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXhpc09yZGVyLmxlbmd0aCA9PT0gMikge1xuICAgICAgYXhpc09yZGVyICs9ICd1JztcbiAgICB9XG4gICAgaWYgKGF4aXNPcmRlci5sZW5ndGggPT09IDMpIHtcbiAgICAgIHdrdC5heGlzID0gYXhpc09yZGVyO1xuICAgIH1cbiAgfVxuICBpZiAod2t0LlVOSVQpIHtcbiAgICB3a3QudW5pdHMgPSB3a3QuVU5JVC5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHdrdC51bml0cyA9PT0gJ21ldHJlJykge1xuICAgICAgd2t0LnVuaXRzID0gJ21ldGVyJztcbiAgICB9XG4gICAgaWYgKHdrdC5VTklULmNvbnZlcnQpIHtcbiAgICAgIGlmICh3a3QudHlwZSA9PT0gJ0dFT0dDUycpIHtcbiAgICAgICAgaWYgKHdrdC5EQVRVTSAmJiB3a3QuREFUVU0uU1BIRVJPSUQpIHtcbiAgICAgICAgICB3a3QudG9fbWV0ZXIgPSB3a3QuVU5JVC5jb252ZXJ0KndrdC5EQVRVTS5TUEhFUk9JRC5hO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3a3QudG9fbWV0ZXIgPSB3a3QuVU5JVC5jb252ZXJ0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgZ2VvZ2NzID0gd2t0LkdFT0dDUztcbiAgaWYgKHdrdC50eXBlID09PSAnR0VPR0NTJykge1xuICAgIGdlb2djcyA9IHdrdDtcbiAgfVxuICBpZiAoZ2VvZ2NzKSB7XG4gICAgLy9pZih3a3QuR0VPR0NTLlBSSU1FTSYmd2t0LkdFT0dDUy5QUklNRU0uY29udmVydCl7XG4gICAgLy8gIHdrdC5mcm9tX2dyZWVud2ljaD13a3QuR0VPR0NTLlBSSU1FTS5jb252ZXJ0KkQyUjtcbiAgICAvL31cbiAgICBpZiAoZ2VvZ2NzLkRBVFVNKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gZ2VvZ2NzLkRBVFVNLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9IGdlb2djcy5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGlmICh3a3QuZGF0dW1Db2RlLnNsaWNlKDAsIDIpID09PSAnZF8nKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gd2t0LmRhdHVtQ29kZS5zbGljZSgyKTtcbiAgICB9XG4gICAgaWYgKHdrdC5kYXR1bUNvZGUgPT09ICduZXdfemVhbGFuZF9nZW9kZXRpY19kYXR1bV8xOTQ5JyB8fCB3a3QuZGF0dW1Db2RlID09PSAnbmV3X3plYWxhbmRfMTk0OScpIHtcbiAgICAgIHdrdC5kYXR1bUNvZGUgPSAnbnpnZDQ5JztcbiAgICB9XG4gICAgaWYgKHdrdC5kYXR1bUNvZGUgPT09ICd3Z3NfMTk4NCcgfHwgd2t0LmRhdHVtQ29kZSA9PT0gJ3dvcmxkX2dlb2RldGljX3N5c3RlbV8xOTg0Jykge1xuICAgICAgaWYgKHdrdC5QUk9KRUNUSU9OID09PSAnTWVyY2F0b3JfQXV4aWxpYXJ5X1NwaGVyZScpIHtcbiAgICAgICAgd2t0LnNwaGVyZSA9IHRydWU7XG4gICAgICB9XG4gICAgICB3a3QuZGF0dW1Db2RlID0gJ3dnczg0JztcbiAgICB9XG4gICAgaWYgKHdrdC5kYXR1bUNvZGUuc2xpY2UoLTYpID09PSAnX2ZlcnJvJykge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9IHdrdC5kYXR1bUNvZGUuc2xpY2UoMCwgLSA2KTtcbiAgICB9XG4gICAgaWYgKHdrdC5kYXR1bUNvZGUuc2xpY2UoLTgpID09PSAnX2pha2FydGEnKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gd2t0LmRhdHVtQ29kZS5zbGljZSgwLCAtIDgpO1xuICAgIH1cbiAgICBpZiAofndrdC5kYXR1bUNvZGUuaW5kZXhPZignYmVsZ2UnKSkge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9ICdybmI3Mic7XG4gICAgfVxuICAgIGlmIChnZW9nY3MuREFUVU0gJiYgZ2VvZ2NzLkRBVFVNLlNQSEVST0lEKSB7XG4gICAgICB3a3QuZWxscHMgPSBnZW9nY3MuREFUVU0uU1BIRVJPSUQubmFtZS5yZXBsYWNlKCdfMTknLCAnJykucmVwbGFjZSgvW0NjXWxhcmtlXFxfMTgvLCAnY2xyaycpO1xuICAgICAgaWYgKHdrdC5lbGxwcy50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsIDEzKSA9PT0gJ2ludGVybmF0aW9uYWwnKSB7XG4gICAgICAgIHdrdC5lbGxwcyA9ICdpbnRsJztcbiAgICAgIH1cblxuICAgICAgd2t0LmEgPSBnZW9nY3MuREFUVU0uU1BIRVJPSUQuYTtcbiAgICAgIHdrdC5yZiA9IHBhcnNlRmxvYXQoZ2VvZ2NzLkRBVFVNLlNQSEVST0lELnJmLCAxMCk7XG4gICAgfVxuXG4gICAgaWYgKGdlb2djcy5EQVRVTSAmJiBnZW9nY3MuREFUVU0uVE9XR1M4NCkge1xuICAgICAgd2t0LmRhdHVtX3BhcmFtcyA9IGdlb2djcy5EQVRVTS5UT1dHUzg0O1xuICAgIH1cbiAgICBpZiAofndrdC5kYXR1bUNvZGUuaW5kZXhPZignb3NnYl8xOTM2JykpIHtcbiAgICAgIHdrdC5kYXR1bUNvZGUgPSAnb3NnYjM2JztcbiAgICB9XG4gICAgaWYgKH53a3QuZGF0dW1Db2RlLmluZGV4T2YoJ29zbmlfMTk1MicpKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gJ29zbmk1Mic7XG4gICAgfVxuICAgIGlmICh+d2t0LmRhdHVtQ29kZS5pbmRleE9mKCd0bTY1JylcbiAgICAgIHx8IH53a3QuZGF0dW1Db2RlLmluZGV4T2YoJ2dlb2RldGljX2RhdHVtX29mXzE5NjUnKSkge1xuICAgICAgd2t0LmRhdHVtQ29kZSA9ICdpcmU2NSc7XG4gICAgfVxuICAgIGlmICh3a3QuZGF0dW1Db2RlID09PSAnY2gxOTAzKycpIHtcbiAgICAgIHdrdC5kYXR1bUNvZGUgPSAnY2gxOTAzJztcbiAgICB9XG4gICAgaWYgKH53a3QuZGF0dW1Db2RlLmluZGV4T2YoJ2lzcmFlbCcpKSB7XG4gICAgICB3a3QuZGF0dW1Db2RlID0gJ2lzcjkzJztcbiAgICB9XG4gIH1cbiAgaWYgKHdrdC5iICYmICFpc0Zpbml0ZSh3a3QuYikpIHtcbiAgICB3a3QuYiA9IHdrdC5hO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9NZXRlcihpbnB1dCkge1xuICAgIHZhciByYXRpbyA9IHdrdC50b19tZXRlciB8fCAxO1xuICAgIHJldHVybiBpbnB1dCAqIHJhdGlvO1xuICB9XG4gIHZhciByZW5hbWVyID0gZnVuY3Rpb24oYSkge1xuICAgIHJldHVybiByZW5hbWUod2t0LCBhKTtcbiAgfTtcbiAgdmFyIGxpc3QgPSBbXG4gICAgWydzdGFuZGFyZF9wYXJhbGxlbF8xJywgJ1N0YW5kYXJkX1BhcmFsbGVsXzEnXSxcbiAgICBbJ3N0YW5kYXJkX3BhcmFsbGVsXzInLCAnU3RhbmRhcmRfUGFyYWxsZWxfMiddLFxuICAgIFsnZmFsc2VfZWFzdGluZycsICdGYWxzZV9FYXN0aW5nJ10sXG4gICAgWydmYWxzZV9ub3J0aGluZycsICdGYWxzZV9Ob3J0aGluZyddLFxuICAgIFsnY2VudHJhbF9tZXJpZGlhbicsICdDZW50cmFsX01lcmlkaWFuJ10sXG4gICAgWydsYXRpdHVkZV9vZl9vcmlnaW4nLCAnTGF0aXR1ZGVfT2ZfT3JpZ2luJ10sXG4gICAgWydsYXRpdHVkZV9vZl9vcmlnaW4nLCAnQ2VudHJhbF9QYXJhbGxlbCddLFxuICAgIFsnc2NhbGVfZmFjdG9yJywgJ1NjYWxlX0ZhY3RvciddLFxuICAgIFsnazAnLCAnc2NhbGVfZmFjdG9yJ10sXG4gICAgWydsYXRpdHVkZV9vZl9jZW50ZXInLCAnTGF0aXR1ZGVfT2ZfQ2VudGVyJ10sXG4gICAgWydsYXRpdHVkZV9vZl9jZW50ZXInLCAnTGF0aXR1ZGVfb2ZfY2VudGVyJ10sXG4gICAgWydsYXQwJywgJ2xhdGl0dWRlX29mX2NlbnRlcicsIGQycl0sXG4gICAgWydsb25naXR1ZGVfb2ZfY2VudGVyJywgJ0xvbmdpdHVkZV9PZl9DZW50ZXInXSxcbiAgICBbJ2xvbmdpdHVkZV9vZl9jZW50ZXInLCAnTG9uZ2l0dWRlX29mX2NlbnRlciddLFxuICAgIFsnbG9uZ2MnLCAnbG9uZ2l0dWRlX29mX2NlbnRlcicsIGQycl0sXG4gICAgWyd4MCcsICdmYWxzZV9lYXN0aW5nJywgdG9NZXRlcl0sXG4gICAgWyd5MCcsICdmYWxzZV9ub3J0aGluZycsIHRvTWV0ZXJdLFxuICAgIFsnbG9uZzAnLCAnY2VudHJhbF9tZXJpZGlhbicsIGQycl0sXG4gICAgWydsYXQwJywgJ2xhdGl0dWRlX29mX29yaWdpbicsIGQycl0sXG4gICAgWydsYXQwJywgJ3N0YW5kYXJkX3BhcmFsbGVsXzEnLCBkMnJdLFxuICAgIFsnbGF0MScsICdzdGFuZGFyZF9wYXJhbGxlbF8xJywgZDJyXSxcbiAgICBbJ2xhdDInLCAnc3RhbmRhcmRfcGFyYWxsZWxfMicsIGQycl0sXG4gICAgWydhemltdXRoJywgJ0F6aW11dGgnXSxcbiAgICBbJ2FscGhhJywgJ2F6aW11dGgnLCBkMnJdLFxuICAgIFsnc3JzQ29kZScsICduYW1lJ11cbiAgXTtcbiAgbGlzdC5mb3JFYWNoKHJlbmFtZXIpO1xuICBpZiAoIXdrdC5sb25nMCAmJiB3a3QubG9uZ2MgJiYgKHdrdC5wcm9qTmFtZSA9PT0gJ0FsYmVyc19Db25pY19FcXVhbF9BcmVhJyB8fCB3a3QucHJvak5hbWUgPT09ICdMYW1iZXJ0X0F6aW11dGhhbF9FcXVhbF9BcmVhJykpIHtcbiAgICB3a3QubG9uZzAgPSB3a3QubG9uZ2M7XG4gIH1cbiAgaWYgKCF3a3QubGF0X3RzICYmIHdrdC5sYXQxICYmICh3a3QucHJvak5hbWUgPT09ICdTdGVyZW9ncmFwaGljX1NvdXRoX1BvbGUnIHx8IHdrdC5wcm9qTmFtZSA9PT0gJ1BvbGFyIFN0ZXJlb2dyYXBoaWMgKHZhcmlhbnQgQiknKSkge1xuICAgIHdrdC5sYXQwID0gZDJyKHdrdC5sYXQxID4gMCA/IDkwIDogLTkwKTtcbiAgICB3a3QubGF0X3RzID0gd2t0LmxhdDE7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHdrdCkge1xuICB2YXIgbGlzcCA9IHBhcnNlcih3a3QpO1xuICB2YXIgdHlwZSA9IGxpc3Auc2hpZnQoKTtcbiAgdmFyIG5hbWUgPSBsaXNwLnNoaWZ0KCk7XG4gIGxpc3AudW5zaGlmdChbJ25hbWUnLCBuYW1lXSk7XG4gIGxpc3AudW5zaGlmdChbJ3R5cGUnLCB0eXBlXSk7XG4gIHZhciBvYmogPSB7fTtcbiAgc0V4cHIobGlzcCwgb2JqKTtcbiAgY2xlYW5XS1Qob2JqKTtcbiAgcmV0dXJuIG9iajtcbn1cbiIsImltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCBwYXJzZVByb2ogZnJvbSAnLi9wcm9qU3RyaW5nJztcbmltcG9ydCB3a3QgZnJvbSAnd2t0LXBhcnNlcic7XG5cbmZ1bmN0aW9uIGRlZnMobmFtZSkge1xuICAvKmdsb2JhbCBjb25zb2xlKi9cbiAgdmFyIHRoYXQgPSB0aGlzO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhciBkZWYgPSBhcmd1bWVudHNbMV07XG4gICAgaWYgKHR5cGVvZiBkZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZGVmLmNoYXJBdCgwKSA9PT0gJysnKSB7XG4gICAgICAgIGRlZnNbbmFtZV0gPSBwYXJzZVByb2ooYXJndW1lbnRzWzFdKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBkZWZzW25hbWVdID0gd2t0KGFyZ3VtZW50c1sxXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZnNbbmFtZV0gPSBkZWY7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xuICAgICAgcmV0dXJuIG5hbWUubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgICBkZWZzLmFwcGx5KHRoYXQsIHYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlZnModik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChuYW1lIGluIGRlZnMpIHtcbiAgICAgICAgcmV0dXJuIGRlZnNbbmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCdFUFNHJyBpbiBuYW1lKSB7XG4gICAgICBkZWZzWydFUFNHOicgKyBuYW1lLkVQU0ddID0gbmFtZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoJ0VTUkknIGluIG5hbWUpIHtcbiAgICAgIGRlZnNbJ0VTUkk6JyArIG5hbWUuRVNSSV0gPSBuYW1lO1xuICAgIH1cbiAgICBlbHNlIGlmICgnSUFVMjAwMCcgaW4gbmFtZSkge1xuICAgICAgZGVmc1snSUFVMjAwMDonICsgbmFtZS5JQVUyMDAwXSA9IG5hbWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc29sZS5sb2cobmFtZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG5cbn1cbmdsb2JhbHMoZGVmcyk7XG5leHBvcnQgZGVmYXVsdCBkZWZzO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVmcykge1xuICBkZWZzKCdFUFNHOjQzMjYnLCBcIit0aXRsZT1XR1MgODQgKGxvbmcvbGF0KSArcHJvaj1sb25nbGF0ICtlbGxwcz1XR1M4NCArZGF0dW09V0dTODQgK3VuaXRzPWRlZ3JlZXNcIik7XG4gIGRlZnMoJ0VQU0c6NDI2OScsIFwiK3RpdGxlPU5BRDgzIChsb25nL2xhdCkgK3Byb2o9bG9uZ2xhdCArYT02Mzc4MTM3LjAgK2I9NjM1Njc1Mi4zMTQxNDAzNiArZWxscHM9R1JTODAgK2RhdHVtPU5BRDgzICt1bml0cz1kZWdyZWVzXCIpO1xuICBkZWZzKCdFUFNHOjM4NTcnLCBcIit0aXRsZT1XR1MgODQgLyBQc2V1ZG8tTWVyY2F0b3IgK3Byb2o9bWVyYyArYT02Mzc4MTM3ICtiPTYzNzgxMzcgK2xhdF90cz0wLjAgK2xvbl8wPTAuMCAreF8wPTAuMCAreV8wPTAgK2s9MS4wICt1bml0cz1tICtuYWRncmlkcz1AbnVsbCArbm9fZGVmc1wiKTtcblxuICBkZWZzLldHUzg0ID0gZGVmc1snRVBTRzo0MzI2J107XG4gIGRlZnNbJ0VQU0c6Mzc4NSddID0gZGVmc1snRVBTRzozODU3J107IC8vIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdCwgb2ZmaWNpYWwgY29kZSBpcyAzODU3XG4gIGRlZnMuR09PR0xFID0gZGVmc1snRVBTRzozODU3J107XG4gIGRlZnNbJ0VQU0c6OTAwOTEzJ10gPSBkZWZzWydFUFNHOjM4NTcnXTtcbiAgZGVmc1snRVBTRzoxMDIxMTMnXSA9IGRlZnNbJ0VQU0c6Mzg1NyddO1xufVxuIiwiaW1wb3J0IGRlZnMgZnJvbSAnLi9kZWZzJztcbmltcG9ydCB3a3QgZnJvbSAnd2t0LXBhcnNlcic7XG5pbXBvcnQgcHJvalN0ciBmcm9tICcuL3Byb2pTdHJpbmcnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vbWF0Y2gnO1xuZnVuY3Rpb24gdGVzdE9iaihjb2RlKXtcbiAgcmV0dXJuIHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJztcbn1cbmZ1bmN0aW9uIHRlc3REZWYoY29kZSl7XG4gIHJldHVybiBjb2RlIGluIGRlZnM7XG59XG4gdmFyIGNvZGVXb3JkcyA9IFsnUFJPSkVDVEVEQ1JTJywgJ1BST0pDUlMnLCAnR0VPR0NTJywnR0VPQ0NTJywnUFJPSkNTJywnTE9DQUxfQ1MnLCAnR0VPRENSUycsICdHRU9ERVRJQ0NSUycsICdHRU9ERVRJQ0RBVFVNJywgJ0VOR0NSUycsICdFTkdJTkVFUklOR0NSUyddO1xuZnVuY3Rpb24gdGVzdFdLVChjb2RlKXtcbiAgcmV0dXJuIGNvZGVXb3Jkcy5zb21lKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgcmV0dXJuIGNvZGUuaW5kZXhPZih3b3JkKSA+IC0xO1xuICB9KTtcbn1cbnZhciBjb2RlcyA9IFsnMzg1NycsICc5MDA5MTMnLCAnMzc4NScsICcxMDIxMTMnXTtcbmZ1bmN0aW9uIGNoZWNrTWVyY2F0b3IoaXRlbSkge1xuICB2YXIgYXV0aCA9IG1hdGNoKGl0ZW0sICdhdXRob3JpdHknKTtcbiAgaWYgKCFhdXRoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjb2RlID0gbWF0Y2goYXV0aCwgJ2Vwc2cnKTtcbiAgcmV0dXJuIGNvZGUgJiYgY29kZXMuaW5kZXhPZihjb2RlKSA+IC0xO1xufVxuZnVuY3Rpb24gY2hlY2tQcm9qU3RyKGl0ZW0pIHtcbiAgdmFyIGV4dCA9IG1hdGNoKGl0ZW0sICdleHRlbnNpb24nKTtcbiAgaWYgKCFleHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuIG1hdGNoKGV4dCwgJ3Byb2o0Jyk7XG59XG5mdW5jdGlvbiB0ZXN0UHJvaihjb2RlKXtcbiAgcmV0dXJuIGNvZGVbMF0gPT09ICcrJztcbn1cbmZ1bmN0aW9uIHBhcnNlKGNvZGUpe1xuICBpZiAodGVzdE9iaihjb2RlKSkge1xuICAgIC8vY2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBXS1Qgc3RyaW5nXG4gICAgaWYgKHRlc3REZWYoY29kZSkpIHtcbiAgICAgIHJldHVybiBkZWZzW2NvZGVdO1xuICAgIH1cbiAgICBpZiAodGVzdFdLVChjb2RlKSkge1xuICAgICAgdmFyIG91dCA9IHdrdChjb2RlKTtcbiAgICAgIC8vIHRlc3Qgb2Ygc3BldGlhbCBjYXNlLCBkdWUgdG8gdGhpcyBiZWluZyBhIHZlcnkgY29tbW9uIGFuZCBvZnRlbiBtYWxmb3JtZWRcbiAgICAgIGlmIChjaGVja01lcmNhdG9yKG91dCkpIHtcbiAgICAgICAgcmV0dXJuIGRlZnNbJ0VQU0c6Mzg1NyddO1xuICAgICAgfVxuICAgICAgdmFyIG1heWJlUHJvalN0ciA9IGNoZWNrUHJvalN0cihvdXQpO1xuICAgICAgaWYgKG1heWJlUHJvalN0cikge1xuICAgICAgICByZXR1cm4gcHJvalN0cihtYXliZVByb2pTdHIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgaWYgKHRlc3RQcm9qKGNvZGUpKSB7XG4gICAgICByZXR1cm4gcHJvalN0cihjb2RlKTtcbiAgICB9XG4gIH1lbHNle1xuICAgIHJldHVybiBjb2RlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICBkZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uIHx8IHt9O1xuICB2YXIgdmFsdWUsIHByb3BlcnR5O1xuICBpZiAoIXNvdXJjZSkge1xuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgfVxuICBmb3IgKHByb3BlcnR5IGluIHNvdXJjZSkge1xuICAgIHZhbHVlID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVzdGluYXRpb25bcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVjY2VudCwgc2lucGhpLCBjb3NwaGkpIHtcbiAgdmFyIGNvbiA9IGVjY2VudCAqIHNpbnBoaTtcbiAgcmV0dXJuIGNvc3BoaSAvIChNYXRoLnNxcnQoMSAtIGNvbiAqIGNvbikpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg8MCA/IC0xIDogMTtcbn0iLCJcbmltcG9ydCB7VFdPX1BJLCBTUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuaW1wb3J0IHNpZ24gZnJvbSAnLi9zaWduJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gKE1hdGguYWJzKHgpIDw9IFNQSSkgPyB4IDogKHggLSAoc2lnbih4KSAqIFRXT19QSSkpO1xufVxuIiwiaW1wb3J0IHtIQUxGX1BJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWNjZW50LCBwaGksIHNpbnBoaSkge1xuICB2YXIgY29uID0gZWNjZW50ICogc2lucGhpO1xuICB2YXIgY29tID0gMC41ICogZWNjZW50O1xuICBjb24gPSBNYXRoLnBvdygoKDEgLSBjb24pIC8gKDEgKyBjb24pKSwgY29tKTtcbiAgcmV0dXJuIChNYXRoLnRhbigwLjUgKiAoSEFMRl9QSSAtIHBoaSkpIC8gY29uKTtcbn1cbiIsImltcG9ydCB7SEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVjY2VudCwgdHMpIHtcbiAgdmFyIGVjY250aCA9IDAuNSAqIGVjY2VudDtcbiAgdmFyIGNvbiwgZHBoaTtcbiAgdmFyIHBoaSA9IEhBTEZfUEkgLSAyICogTWF0aC5hdGFuKHRzKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMTU7IGkrKykge1xuICAgIGNvbiA9IGVjY2VudCAqIE1hdGguc2luKHBoaSk7XG4gICAgZHBoaSA9IEhBTEZfUEkgLSAyICogTWF0aC5hdGFuKHRzICogKE1hdGgucG93KCgoMSAtIGNvbikgLyAoMSArIGNvbikpLCBlY2NudGgpKSkgLSBwaGk7XG4gICAgcGhpICs9IGRwaGk7XG4gICAgaWYgKE1hdGguYWJzKGRwaGkpIDw9IDAuMDAwMDAwMDAwMSkge1xuICAgICAgcmV0dXJuIHBoaTtcbiAgICB9XG4gIH1cbiAgLy9jb25zb2xlLmxvZyhcInBoaTJ6IGhhcyBOb0NvbnZlcmdlbmNlXCIpO1xuICByZXR1cm4gLTk5OTk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgLy9uby1vcCBmb3IgbG9uZ2xhdFxufVxuXG5mdW5jdGlvbiBpZGVudGl0eShwdCkge1xuICByZXR1cm4gcHQ7XG59XG5leHBvcnQge2lkZW50aXR5IGFzIGZvcndhcmR9O1xuZXhwb3J0IHtpZGVudGl0eSBhcyBpbnZlcnNlfTtcbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJsb25nbGF0XCIsIFwiaWRlbnRpdHlcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGlkZW50aXR5LFxuICBpbnZlcnNlOiBpZGVudGl0eSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IG1lcmMgZnJvbSBcIi4vcHJvamVjdGlvbnMvbWVyY1wiO1xuaW1wb3J0IGxvbmdsYXQgZnJvbSBcIi4vcHJvamVjdGlvbnMvbG9uZ2xhdFwiO1xudmFyIHByb2pzID0gW21lcmMsIGxvbmdsYXRdO1xudmFyIG5hbWVzID0ge307XG52YXIgcHJvalN0b3JlID0gW107XG5cbmZ1bmN0aW9uIGFkZChwcm9qLCBpKSB7XG4gIHZhciBsZW4gPSBwcm9qU3RvcmUubGVuZ3RoO1xuICBpZiAoIXByb2oubmFtZXMpIHtcbiAgICBjb25zb2xlLmxvZyhpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBwcm9qU3RvcmVbbGVuXSA9IHByb2o7XG4gIHByb2oubmFtZXMuZm9yRWFjaChmdW5jdGlvbihuKSB7XG4gICAgbmFtZXNbbi50b0xvd2VyQ2FzZSgpXSA9IGxlbjtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQge2FkZH07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobmFtZSkge1xuICBpZiAoIW5hbWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIG4gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGlmICh0eXBlb2YgbmFtZXNbbl0gIT09ICd1bmRlZmluZWQnICYmIHByb2pTdG9yZVtuYW1lc1tuXV0pIHtcbiAgICByZXR1cm4gcHJvalN0b3JlW25hbWVzW25dXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnQoKSB7XG4gIHByb2pzLmZvckVhY2goYWRkKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3RhcnQ6IHN0YXJ0LFxuICBhZGQ6IGFkZCxcbiAgZ2V0OiBnZXRcbn07XG4iLCJpbXBvcnQgbXNmbnogZnJvbSAnLi4vY29tbW9uL21zZm56JztcblxuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IHRzZm56IGZyb20gJy4uL2NvbW1vbi90c2Zueic7XG5pbXBvcnQgcGhpMnogZnJvbSAnLi4vY29tbW9uL3BoaTJ6JztcbmltcG9ydCB7Rk9SVFBJLCBSMkQsIEVQU0xOLCBIQUxGX1BJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB2YXIgY29uID0gdGhpcy5iIC8gdGhpcy5hO1xuICB0aGlzLmVzID0gMSAtIGNvbiAqIGNvbjtcbiAgaWYoISgneDAnIGluIHRoaXMpKXtcbiAgICB0aGlzLngwID0gMDtcbiAgfVxuICBpZighKCd5MCcgaW4gdGhpcykpe1xuICAgIHRoaXMueTAgPSAwO1xuICB9XG4gIHRoaXMuZSA9IE1hdGguc3FydCh0aGlzLmVzKTtcbiAgaWYgKHRoaXMubGF0X3RzKSB7XG4gICAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgICB0aGlzLmswID0gTWF0aC5jb3ModGhpcy5sYXRfdHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuazAgPSBtc2Zueih0aGlzLmUsIE1hdGguc2luKHRoaXMubGF0X3RzKSwgTWF0aC5jb3ModGhpcy5sYXRfdHMpKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKCF0aGlzLmswKSB7XG4gICAgICBpZiAodGhpcy5rKSB7XG4gICAgICAgIHRoaXMuazAgPSB0aGlzLms7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5rMCA9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qIE1lcmNhdG9yIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgLy8gY29udmVydCB0byByYWRpYW5zXG4gIGlmIChsYXQgKiBSMkQgPiA5MCAmJiBsYXQgKiBSMkQgPCAtOTAgJiYgbG9uICogUjJEID4gMTgwICYmIGxvbiAqIFIyRCA8IC0xODApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB4LCB5O1xuICBpZiAoTWF0aC5hYnMoTWF0aC5hYnMobGF0KSAtIEhBTEZfUEkpIDw9IEVQU0xOKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgICB4ID0gdGhpcy54MCArIHRoaXMuYSAqIHRoaXMuazAgKiBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICAgICAgeSA9IHRoaXMueTAgKyB0aGlzLmEgKiB0aGlzLmswICogTWF0aC5sb2coTWF0aC50YW4oRk9SVFBJICsgMC41ICogbGF0KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHNpbnBoaSA9IE1hdGguc2luKGxhdCk7XG4gICAgICB2YXIgdHMgPSB0c2Zueih0aGlzLmUsIGxhdCwgc2lucGhpKTtcbiAgICAgIHggPSB0aGlzLngwICsgdGhpcy5hICogdGhpcy5rMCAqIGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gICAgICB5ID0gdGhpcy55MCAtIHRoaXMuYSAqIHRoaXMuazAgKiBNYXRoLmxvZyh0cyk7XG4gICAgfVxuICAgIHAueCA9IHg7XG4gICAgcC55ID0geTtcbiAgICByZXR1cm4gcDtcbiAgfVxufVxuXG4vKiBNZXJjYXRvciBpbnZlcnNlIGVxdWF0aW9ucy0tbWFwcGluZyB4LHkgdG8gbGF0L2xvbmdcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuXG4gIHZhciB4ID0gcC54IC0gdGhpcy54MDtcbiAgdmFyIHkgPSBwLnkgLSB0aGlzLnkwO1xuICB2YXIgbG9uLCBsYXQ7XG5cbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgbGF0ID0gSEFMRl9QSSAtIDIgKiBNYXRoLmF0YW4oTWF0aC5leHAoLXkgLyAodGhpcy5hICogdGhpcy5rMCkpKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgdHMgPSBNYXRoLmV4cCgteSAvICh0aGlzLmEgKiB0aGlzLmswKSk7XG4gICAgbGF0ID0gcGhpMnoodGhpcy5lLCB0cyk7XG4gICAgaWYgKGxhdCA9PT0gLTk5OTkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyB4IC8gKHRoaXMuYSAqIHRoaXMuazApKTtcblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJNZXJjYXRvclwiLCBcIlBvcHVsYXIgVmlzdWFsaXNhdGlvbiBQc2V1ZG8gTWVyY2F0b3JcIiwgXCJNZXJjYXRvcl8xU1BcIiwgXCJNZXJjYXRvcl9BdXhpbGlhcnlfU3BoZXJlXCIsIFwibWVyY1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwidmFyIGV4cG9ydHMgPSB7fTtcbmV4cG9ydCB7ZXhwb3J0cyBhcyBkZWZhdWx0fTtcbmV4cG9ydHMuTUVSSVQgPSB7XG4gIGE6IDYzNzgxMzcuMCxcbiAgcmY6IDI5OC4yNTcsXG4gIGVsbGlwc2VOYW1lOiBcIk1FUklUIDE5ODNcIlxufTtcblxuZXhwb3J0cy5TR1M4NSA9IHtcbiAgYTogNjM3ODEzNi4wLFxuICByZjogMjk4LjI1NyxcbiAgZWxsaXBzZU5hbWU6IFwiU292aWV0IEdlb2RldGljIFN5c3RlbSA4NVwiXG59O1xuXG5leHBvcnRzLkdSUzgwID0ge1xuICBhOiA2Mzc4MTM3LjAsXG4gIHJmOiAyOTguMjU3MjIyMTAxLFxuICBlbGxpcHNlTmFtZTogXCJHUlMgMTk4MChJVUdHLCAxOTgwKVwiXG59O1xuXG5leHBvcnRzLklBVTc2ID0ge1xuICBhOiA2Mzc4MTQwLjAsXG4gIHJmOiAyOTguMjU3LFxuICBlbGxpcHNlTmFtZTogXCJJQVUgMTk3NlwiXG59O1xuXG5leHBvcnRzLmFpcnkgPSB7XG4gIGE6IDYzNzc1NjMuMzk2LFxuICBiOiA2MzU2MjU2LjkxMCxcbiAgZWxsaXBzZU5hbWU6IFwiQWlyeSAxODMwXCJcbn07XG5cbmV4cG9ydHMuQVBMNCA9IHtcbiAgYTogNjM3ODEzNyxcbiAgcmY6IDI5OC4yNSxcbiAgZWxsaXBzZU5hbWU6IFwiQXBwbC4gUGh5c2ljcy4gMTk2NVwiXG59O1xuXG5leHBvcnRzLk5XTDlEID0ge1xuICBhOiA2Mzc4MTQ1LjAsXG4gIHJmOiAyOTguMjUsXG4gIGVsbGlwc2VOYW1lOiBcIk5hdmFsIFdlYXBvbnMgTGFiLiwgMTk2NVwiXG59O1xuXG5leHBvcnRzLm1vZF9haXJ5ID0ge1xuICBhOiA2Mzc3MzQwLjE4OSxcbiAgYjogNjM1NjAzNC40NDYsXG4gIGVsbGlwc2VOYW1lOiBcIk1vZGlmaWVkIEFpcnlcIlxufTtcblxuZXhwb3J0cy5hbmRyYWUgPSB7XG4gIGE6IDYzNzcxMDQuNDMsXG4gIHJmOiAzMDAuMCxcbiAgZWxsaXBzZU5hbWU6IFwiQW5kcmFlIDE4NzYgKERlbi4sIEljbG5kLilcIlxufTtcblxuZXhwb3J0cy5hdXN0X1NBID0ge1xuICBhOiA2Mzc4MTYwLjAsXG4gIHJmOiAyOTguMjUsXG4gIGVsbGlwc2VOYW1lOiBcIkF1c3RyYWxpYW4gTmF0bCAmIFMuIEFtZXIuIDE5NjlcIlxufTtcblxuZXhwb3J0cy5HUlM2NyA9IHtcbiAgYTogNjM3ODE2MC4wLFxuICByZjogMjk4LjI0NzE2NzQyNzAsXG4gIGVsbGlwc2VOYW1lOiBcIkdSUyA2NyhJVUdHIDE5NjcpXCJcbn07XG5cbmV4cG9ydHMuYmVzc2VsID0ge1xuICBhOiA2Mzc3Mzk3LjE1NSxcbiAgcmY6IDI5OS4xNTI4MTI4LFxuICBlbGxpcHNlTmFtZTogXCJCZXNzZWwgMTg0MVwiXG59O1xuXG5leHBvcnRzLmJlc3NfbmFtID0ge1xuICBhOiA2Mzc3NDgzLjg2NSxcbiAgcmY6IDI5OS4xNTI4MTI4LFxuICBlbGxpcHNlTmFtZTogXCJCZXNzZWwgMTg0MSAoTmFtaWJpYSlcIlxufTtcblxuZXhwb3J0cy5jbHJrNjYgPSB7XG4gIGE6IDYzNzgyMDYuNCxcbiAgYjogNjM1NjU4My44LFxuICBlbGxpcHNlTmFtZTogXCJDbGFya2UgMTg2NlwiXG59O1xuXG5leHBvcnRzLmNscms4MCA9IHtcbiAgYTogNjM3ODI0OS4xNDUsXG4gIHJmOiAyOTMuNDY2MyxcbiAgZWxsaXBzZU5hbWU6IFwiQ2xhcmtlIDE4ODAgbW9kLlwiXG59O1xuXG5leHBvcnRzLmNscms1OCA9IHtcbiAgYTogNjM3ODI5My42NDUyMDg3NTksXG4gIHJmOiAyOTQuMjYwNjc2MzY5MjY1NCxcbiAgZWxsaXBzZU5hbWU6IFwiQ2xhcmtlIDE4NThcIlxufTtcblxuZXhwb3J0cy5DUE0gPSB7XG4gIGE6IDYzNzU3MzguNyxcbiAgcmY6IDMzNC4yOSxcbiAgZWxsaXBzZU5hbWU6IFwiQ29tbS4gZGVzIFBvaWRzIGV0IE1lc3VyZXMgMTc5OVwiXG59O1xuXG5leHBvcnRzLmRlbG1iciA9IHtcbiAgYTogNjM3NjQyOC4wLFxuICByZjogMzExLjUsXG4gIGVsbGlwc2VOYW1lOiBcIkRlbGFtYnJlIDE4MTAgKEJlbGdpdW0pXCJcbn07XG5cbmV4cG9ydHMuZW5nZWxpcyA9IHtcbiAgYTogNjM3ODEzNi4wNSxcbiAgcmY6IDI5OC4yNTY2LFxuICBlbGxpcHNlTmFtZTogXCJFbmdlbGlzIDE5ODVcIlxufTtcblxuZXhwb3J0cy5ldnJzdDMwID0ge1xuICBhOiA2Mzc3Mjc2LjM0NSxcbiAgcmY6IDMwMC44MDE3LFxuICBlbGxpcHNlTmFtZTogXCJFdmVyZXN0IDE4MzBcIlxufTtcblxuZXhwb3J0cy5ldnJzdDQ4ID0ge1xuICBhOiA2Mzc3MzA0LjA2MyxcbiAgcmY6IDMwMC44MDE3LFxuICBlbGxpcHNlTmFtZTogXCJFdmVyZXN0IDE5NDhcIlxufTtcblxuZXhwb3J0cy5ldnJzdDU2ID0ge1xuICBhOiA2Mzc3MzAxLjI0MyxcbiAgcmY6IDMwMC44MDE3LFxuICBlbGxpcHNlTmFtZTogXCJFdmVyZXN0IDE5NTZcIlxufTtcblxuZXhwb3J0cy5ldnJzdDY5ID0ge1xuICBhOiA2Mzc3Mjk1LjY2NCxcbiAgcmY6IDMwMC44MDE3LFxuICBlbGxpcHNlTmFtZTogXCJFdmVyZXN0IDE5NjlcIlxufTtcblxuZXhwb3J0cy5ldnJzdFNTID0ge1xuICBhOiA2Mzc3Mjk4LjU1NixcbiAgcmY6IDMwMC44MDE3LFxuICBlbGxpcHNlTmFtZTogXCJFdmVyZXN0IChTYWJhaCAmIFNhcmF3YWspXCJcbn07XG5cbmV4cG9ydHMuZnNjaHI2MCA9IHtcbiAgYTogNjM3ODE2Ni4wLFxuICByZjogMjk4LjMsXG4gIGVsbGlwc2VOYW1lOiBcIkZpc2NoZXIgKE1lcmN1cnkgRGF0dW0pIDE5NjBcIlxufTtcblxuZXhwb3J0cy5mc2NocjYwbSA9IHtcbiAgYTogNjM3ODE1NS4wLFxuICByZjogMjk4LjMsXG4gIGVsbGlwc2VOYW1lOiBcIkZpc2NoZXIgMTk2MFwiXG59O1xuXG5leHBvcnRzLmZzY2hyNjggPSB7XG4gIGE6IDYzNzgxNTAuMCxcbiAgcmY6IDI5OC4zLFxuICBlbGxpcHNlTmFtZTogXCJGaXNjaGVyIDE5NjhcIlxufTtcblxuZXhwb3J0cy5oZWxtZXJ0ID0ge1xuICBhOiA2Mzc4MjAwLjAsXG4gIHJmOiAyOTguMyxcbiAgZWxsaXBzZU5hbWU6IFwiSGVsbWVydCAxOTA2XCJcbn07XG5cbmV4cG9ydHMuaG91Z2ggPSB7XG4gIGE6IDYzNzgyNzAuMCxcbiAgcmY6IDI5Ny4wLFxuICBlbGxpcHNlTmFtZTogXCJIb3VnaFwiXG59O1xuXG5leHBvcnRzLmludGwgPSB7XG4gIGE6IDYzNzgzODguMCxcbiAgcmY6IDI5Ny4wLFxuICBlbGxpcHNlTmFtZTogXCJJbnRlcm5hdGlvbmFsIDE5MDkgKEhheWZvcmQpXCJcbn07XG5cbmV4cG9ydHMua2F1bGEgPSB7XG4gIGE6IDYzNzgxNjMuMCxcbiAgcmY6IDI5OC4yNCxcbiAgZWxsaXBzZU5hbWU6IFwiS2F1bGEgMTk2MVwiXG59O1xuXG5leHBvcnRzLmxlcmNoID0ge1xuICBhOiA2Mzc4MTM5LjAsXG4gIHJmOiAyOTguMjU3LFxuICBlbGxpcHNlTmFtZTogXCJMZXJjaCAxOTc5XCJcbn07XG5cbmV4cG9ydHMubXBydHMgPSB7XG4gIGE6IDYzOTczMDAuMCxcbiAgcmY6IDE5MS4wLFxuICBlbGxpcHNlTmFtZTogXCJNYXVwZXJ0aXVzIDE3MzhcIlxufTtcblxuZXhwb3J0cy5uZXdfaW50bCA9IHtcbiAgYTogNjM3ODE1Ny41LFxuICBiOiA2MzU2NzcyLjIsXG4gIGVsbGlwc2VOYW1lOiBcIk5ldyBJbnRlcm5hdGlvbmFsIDE5NjdcIlxufTtcblxuZXhwb3J0cy5wbGVzc2lzID0ge1xuICBhOiA2Mzc2NTIzLjAsXG4gIHJmOiA2MzU1ODYzLjAsXG4gIGVsbGlwc2VOYW1lOiBcIlBsZXNzaXMgMTgxNyAoRnJhbmNlKVwiXG59O1xuXG5leHBvcnRzLmtyYXNzID0ge1xuICBhOiA2Mzc4MjQ1LjAsXG4gIHJmOiAyOTguMyxcbiAgZWxsaXBzZU5hbWU6IFwiS3Jhc3NvdnNreSwgMTk0MlwiXG59O1xuXG5leHBvcnRzLlNFYXNpYSA9IHtcbiAgYTogNjM3ODE1NS4wLFxuICBiOiA2MzU2NzczLjMyMDUsXG4gIGVsbGlwc2VOYW1lOiBcIlNvdXRoZWFzdCBBc2lhXCJcbn07XG5cbmV4cG9ydHMud2FsYmVjayA9IHtcbiAgYTogNjM3Njg5Ni4wLFxuICBiOiA2MzU1ODM0Ljg0NjcsXG4gIGVsbGlwc2VOYW1lOiBcIldhbGJlY2tcIlxufTtcblxuZXhwb3J0cy5XR1M2MCA9IHtcbiAgYTogNjM3ODE2NS4wLFxuICByZjogMjk4LjMsXG4gIGVsbGlwc2VOYW1lOiBcIldHUyA2MFwiXG59O1xuXG5leHBvcnRzLldHUzY2ID0ge1xuICBhOiA2Mzc4MTQ1LjAsXG4gIHJmOiAyOTguMjUsXG4gIGVsbGlwc2VOYW1lOiBcIldHUyA2NlwiXG59O1xuXG5leHBvcnRzLldHUzcgPSB7XG4gIGE6IDYzNzgxMzUuMCxcbiAgcmY6IDI5OC4yNixcbiAgZWxsaXBzZU5hbWU6IFwiV0dTIDcyXCJcbn07XG5cbmV4cG9ydCB2YXIgV0dTODQgPSBleHBvcnRzLldHUzg0ID0ge1xuICBhOiA2Mzc4MTM3LjAsXG4gIHJmOiAyOTguMjU3MjIzNTYzLFxuICBlbGxpcHNlTmFtZTogXCJXR1MgODRcIlxufTtcblxuZXhwb3J0cy5zcGhlcmUgPSB7XG4gIGE6IDYzNzA5OTcuMCxcbiAgYjogNjM3MDk5Ny4wLFxuICBlbGxpcHNlTmFtZTogXCJOb3JtYWwgU3BoZXJlIChyPTYzNzA5OTcpXCJcbn07XG4iLCJ2YXIgZXhwb3J0cyA9IHt9O1xuZXhwb3J0IHtleHBvcnRzIGFzIGRlZmF1bHR9O1xuZXhwb3J0cy53Z3M4NCA9IHtcbiAgdG93Z3M4NDogXCIwLDAsMFwiLFxuICBlbGxpcHNlOiBcIldHUzg0XCIsXG4gIGRhdHVtTmFtZTogXCJXR1M4NFwiXG59O1xuXG5leHBvcnRzLmNoMTkwMyA9IHtcbiAgdG93Z3M4NDogXCI2NzQuMzc0LDE1LjA1Niw0MDUuMzQ2XCIsXG4gIGVsbGlwc2U6IFwiYmVzc2VsXCIsXG4gIGRhdHVtTmFtZTogXCJzd2lzc1wiXG59O1xuXG5leHBvcnRzLmdncnM4NyA9IHtcbiAgdG93Z3M4NDogXCItMTk5Ljg3LDc0Ljc5LDI0Ni42MlwiLFxuICBlbGxpcHNlOiBcIkdSUzgwXCIsXG4gIGRhdHVtTmFtZTogXCJHcmVla19HZW9kZXRpY19SZWZlcmVuY2VfU3lzdGVtXzE5ODdcIlxufTtcblxuZXhwb3J0cy5uYWQ4MyA9IHtcbiAgdG93Z3M4NDogXCIwLDAsMFwiLFxuICBlbGxpcHNlOiBcIkdSUzgwXCIsXG4gIGRhdHVtTmFtZTogXCJOb3J0aF9BbWVyaWNhbl9EYXR1bV8xOTgzXCJcbn07XG5cbmV4cG9ydHMubmFkMjcgPSB7XG4gIG5hZGdyaWRzOiBcIkBjb251cyxAYWxhc2thLEBudHYyXzAuZ3NiLEBudHYxX2Nhbi5kYXRcIixcbiAgZWxsaXBzZTogXCJjbHJrNjZcIixcbiAgZGF0dW1OYW1lOiBcIk5vcnRoX0FtZXJpY2FuX0RhdHVtXzE5MjdcIlxufTtcblxuZXhwb3J0cy5wb3RzZGFtID0ge1xuICB0b3dnczg0OiBcIjYwNi4wLDIzLjAsNDEzLjBcIixcbiAgZWxsaXBzZTogXCJiZXNzZWxcIixcbiAgZGF0dW1OYW1lOiBcIlBvdHNkYW0gUmF1ZW5iZXJnIDE5NTAgREhETlwiXG59O1xuXG5leHBvcnRzLmNhcnRoYWdlID0ge1xuICB0b3dnczg0OiBcIi0yNjMuMCw2LjAsNDMxLjBcIixcbiAgZWxsaXBzZTogXCJjbGFyazgwXCIsXG4gIGRhdHVtTmFtZTogXCJDYXJ0aGFnZSAxOTM0IFR1bmlzaWFcIlxufTtcblxuZXhwb3J0cy5oZXJtYW5uc2tvZ2VsID0ge1xuICB0b3dnczg0OiBcIjY1My4wLC0yMTIuMCw0NDkuMFwiLFxuICBlbGxpcHNlOiBcImJlc3NlbFwiLFxuICBkYXR1bU5hbWU6IFwiSGVybWFubnNrb2dlbFwiXG59O1xuXG5leHBvcnRzLm9zbmk1MiA9IHtcbiAgdG93Z3M4NDogXCI0ODIuNTMwLC0xMzAuNTk2LDU2NC41NTcsLTEuMDQyLC0wLjIxNCwtMC42MzEsOC4xNVwiLFxuICBlbGxpcHNlOiBcImFpcnlcIixcbiAgZGF0dW1OYW1lOiBcIklyaXNoIE5hdGlvbmFsXCJcbn07XG5cbmV4cG9ydHMuaXJlNjUgPSB7XG4gIHRvd2dzODQ6IFwiNDgyLjUzMCwtMTMwLjU5Niw1NjQuNTU3LC0xLjA0MiwtMC4yMTQsLTAuNjMxLDguMTVcIixcbiAgZWxsaXBzZTogXCJtb2RfYWlyeVwiLFxuICBkYXR1bU5hbWU6IFwiSXJlbGFuZCAxOTY1XCJcbn07XG5cbmV4cG9ydHMucmFzc2FkaXJhbiA9IHtcbiAgdG93Z3M4NDogXCItMTMzLjYzLC0xNTcuNSwtMTU4LjYyXCIsXG4gIGVsbGlwc2U6IFwiaW50bFwiLFxuICBkYXR1bU5hbWU6IFwiUmFzc2FkaXJhblwiXG59O1xuXG5leHBvcnRzLm56Z2Q0OSA9IHtcbiAgdG93Z3M4NDogXCI1OS40NywtNS4wNCwxODcuNDQsMC40NywtMC4xLDEuMDI0LC00LjU5OTNcIixcbiAgZWxsaXBzZTogXCJpbnRsXCIsXG4gIGRhdHVtTmFtZTogXCJOZXcgWmVhbGFuZCBHZW9kZXRpYyBEYXR1bSAxOTQ5XCJcbn07XG5cbmV4cG9ydHMub3NnYjM2ID0ge1xuICB0b3dnczg0OiBcIjQ0Ni40NDgsLTEyNS4xNTcsNTQyLjA2MCwwLjE1MDIsMC4yNDcwLDAuODQyMSwtMjAuNDg5NFwiLFxuICBlbGxpcHNlOiBcImFpcnlcIixcbiAgZGF0dW1OYW1lOiBcIkFpcnkgMTgzMFwiXG59O1xuXG5leHBvcnRzLnNfanRzayA9IHtcbiAgdG93Z3M4NDogXCI1ODksNzYsNDgwXCIsXG4gIGVsbGlwc2U6ICdiZXNzZWwnLFxuICBkYXR1bU5hbWU6ICdTLUpUU0sgKEZlcnJvKSdcbn07XG5cbmV4cG9ydHMuYmVkdWFyYW0gPSB7XG4gIHRvd2dzODQ6ICctMTA2LC04NywxODgnLFxuICBlbGxpcHNlOiAnY2xyazgwJyxcbiAgZGF0dW1OYW1lOiAnQmVkdWFyYW0nXG59O1xuXG5leHBvcnRzLmd1bnVuZ19zZWdhcmEgPSB7XG4gIHRvd2dzODQ6ICctNDAzLDY4NCw0MScsXG4gIGVsbGlwc2U6ICdiZXNzZWwnLFxuICBkYXR1bU5hbWU6ICdHdW51bmcgU2VnYXJhIEpha2FydGEnXG59O1xuXG5leHBvcnRzLnJuYjcyID0ge1xuICB0b3dnczg0OiBcIjEwNi44NjksLTUyLjI5NzgsMTAzLjcyNCwtMC4zMzY1NywwLjQ1Njk1NSwtMS44NDIxOCwxXCIsXG4gIGVsbGlwc2U6IFwiaW50bFwiLFxuICBkYXR1bU5hbWU6IFwiUmVzZWF1IE5hdGlvbmFsIEJlbGdlIDE5NzJcIlxufTtcbiIsImltcG9ydCBwYXJzZUNvZGUgZnJvbSAnLi9wYXJzZUNvZGUnO1xuaW1wb3J0IGV4dGVuZCBmcm9tICcuL2V4dGVuZCc7XG5pbXBvcnQgcHJvamVjdGlvbnMgZnJvbSAnLi9wcm9qZWN0aW9ucyc7XG5pbXBvcnQge3NwaGVyZSBhcyBkY19zcGhlcmUsIGVjY2VudHJpY2l0eSBhcyBkY19lY2NlbnRyaWNpdHl9IGZyb20gJy4vZGVyaXZlQ29uc3RhbnRzJztcbmltcG9ydCBEYXR1bSBmcm9tICcuL2NvbnN0YW50cy9EYXR1bSc7XG5pbXBvcnQgZGF0dW0gZnJvbSAnLi9kYXR1bSc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9tYXRjaCc7XG5cbmZ1bmN0aW9uIFByb2plY3Rpb24oc3JzQ29kZSxjYWxsYmFjaykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvamVjdGlvbikpIHtcbiAgICByZXR1cm4gbmV3IFByb2plY3Rpb24oc3JzQ29kZSk7XG4gIH1cbiAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbihlcnJvcil7XG4gICAgaWYoZXJyb3Ipe1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xuICB2YXIganNvbiA9IHBhcnNlQ29kZShzcnNDb2RlKTtcbiAgaWYodHlwZW9mIGpzb24gIT09ICdvYmplY3QnKXtcbiAgICBjYWxsYmFjayhzcnNDb2RlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG91clByb2ogPSBQcm9qZWN0aW9uLnByb2plY3Rpb25zLmdldChqc29uLnByb2pOYW1lKTtcbiAgaWYoIW91clByb2ope1xuICAgIGNhbGxiYWNrKHNyc0NvZGUpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoanNvbi5kYXR1bUNvZGUgJiYganNvbi5kYXR1bUNvZGUgIT09ICdub25lJykge1xuICAgIHZhciBkYXR1bURlZiA9IG1hdGNoKERhdHVtLCBqc29uLmRhdHVtQ29kZSk7XG4gICAgaWYgKGRhdHVtRGVmKSB7XG4gICAgICBqc29uLmRhdHVtX3BhcmFtcyA9IGRhdHVtRGVmLnRvd2dzODQgPyBkYXR1bURlZi50b3dnczg0LnNwbGl0KCcsJykgOiBudWxsO1xuICAgICAganNvbi5lbGxwcyA9IGRhdHVtRGVmLmVsbGlwc2U7XG4gICAgICBqc29uLmRhdHVtTmFtZSA9IGRhdHVtRGVmLmRhdHVtTmFtZSA/IGRhdHVtRGVmLmRhdHVtTmFtZSA6IGpzb24uZGF0dW1Db2RlO1xuICAgIH1cbiAgfVxuICBqc29uLmswID0ganNvbi5rMCB8fCAxLjA7XG4gIGpzb24uYXhpcyA9IGpzb24uYXhpcyB8fCAnZW51JztcbiAganNvbi5lbGxwcyA9IGpzb24uZWxscHMgfHwgJ3dnczg0JztcbiAgdmFyIHNwaGVyZV8gPSBkY19zcGhlcmUoanNvbi5hLCBqc29uLmIsIGpzb24ucmYsIGpzb24uZWxscHMsIGpzb24uc3BoZXJlKTtcbiAgdmFyIGVjYyA9IGRjX2VjY2VudHJpY2l0eShzcGhlcmVfLmEsIHNwaGVyZV8uYiwgc3BoZXJlXy5yZiwganNvbi5SX0EpO1xuICB2YXIgZGF0dW1PYmogPSBqc29uLmRhdHVtIHx8IGRhdHVtKGpzb24uZGF0dW1Db2RlLCBqc29uLmRhdHVtX3BhcmFtcywgc3BoZXJlXy5hLCBzcGhlcmVfLmIsIGVjYy5lcywgZWNjLmVwMik7XG5cbiAgZXh0ZW5kKHRoaXMsIGpzb24pOyAvLyB0cmFuc2ZlciBldmVyeXRoaW5nIG92ZXIgZnJvbSB0aGUgcHJvamVjdGlvbiBiZWNhdXNlIHdlIGRvbid0IGtub3cgd2hhdCB3ZSdsbCBuZWVkXG4gIGV4dGVuZCh0aGlzLCBvdXJQcm9qKTsgLy8gdHJhbnNmZXIgYWxsIHRoZSBtZXRob2RzIGZyb20gdGhlIHByb2plY3Rpb25cblxuICAvLyBjb3B5IHRoZSA0IHRoaW5ncyBvdmVyIHdlIGNhbHVsYXRlZCBpbiBkZXJpdmVDb25zdGFudHMuc3BoZXJlXG4gIHRoaXMuYSA9IHNwaGVyZV8uYTtcbiAgdGhpcy5iID0gc3BoZXJlXy5iO1xuICB0aGlzLnJmID0gc3BoZXJlXy5yZjtcbiAgdGhpcy5zcGhlcmUgPSBzcGhlcmVfLnNwaGVyZTtcblxuICAvLyBjb3B5IHRoZSAzIHRoaW5ncyB3ZSBjYWxjdWxhdGVkIGluIGRlcml2ZUNvbnN0YW50cy5lY2NlbnRyaWNpdHlcbiAgdGhpcy5lcyA9IGVjYy5lcztcbiAgdGhpcy5lID0gZWNjLmU7XG4gIHRoaXMuZXAyID0gZWNjLmVwMjtcblxuICAvLyBhZGQgaW4gdGhlIGRhdHVtIG9iamVjdFxuICB0aGlzLmRhdHVtID0gZGF0dW1PYmo7XG5cbiAgLy8gaW5pdCB0aGUgcHJvamVjdGlvblxuICB0aGlzLmluaXQoKTtcblxuICAvLyBsZWdlY3kgY2FsbGJhY2sgZnJvbSBiYWNrIGluIHRoZSBkYXkgd2hlbiBpdCB3ZW50IHRvIHNwYXRpYWxyZWZlcmVuY2Uub3JnXG4gIGNhbGxiYWNrKG51bGwsIHRoaXMpO1xuXG59XG5Qcm9qZWN0aW9uLnByb2plY3Rpb25zID0gcHJvamVjdGlvbnM7XG5Qcm9qZWN0aW9uLnByb2plY3Rpb25zLnN0YXJ0KCk7XG5leHBvcnQgZGVmYXVsdCBQcm9qZWN0aW9uO1xuIiwiaW1wb3J0IHtTSVhUSCwgUkE0LCBSQTYsIEVQU0xOfSBmcm9tICcuL2NvbnN0YW50cy92YWx1ZXMnO1xuaW1wb3J0IHtkZWZhdWx0IGFzIEVsbGlwc29pZCwgV0dTODR9IGZyb20gJy4vY29uc3RhbnRzL0VsbGlwc29pZCc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9tYXRjaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlY2NlbnRyaWNpdHkoYSwgYiwgcmYsIFJfQSkge1xuICB2YXIgYTIgPSBhICogYTsgLy8gdXNlZCBpbiBnZW9jZW50cmljXG4gIHZhciBiMiA9IGIgKiBiOyAvLyB1c2VkIGluIGdlb2NlbnRyaWNcbiAgdmFyIGVzID0gKGEyIC0gYjIpIC8gYTI7IC8vIGUgXiAyXG4gIHZhciBlID0gMDtcbiAgaWYgKFJfQSkge1xuICAgIGEgKj0gMSAtIGVzICogKFNJWFRIICsgZXMgKiAoUkE0ICsgZXMgKiBSQTYpKTtcbiAgICBhMiA9IGEgKiBhO1xuICAgIGVzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5zcXJ0KGVzKTsgLy8gZWNjZW50cmljaXR5XG4gIH1cbiAgdmFyIGVwMiA9IChhMiAtIGIyKSAvIGIyOyAvLyB1c2VkIGluIGdlb2NlbnRyaWNcbiAgcmV0dXJuIHtcbiAgICBlczogZXMsXG4gICAgZTogZSxcbiAgICBlcDI6IGVwMlxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNwaGVyZShhLCBiLCByZiwgZWxscHMsIHNwaGVyZSkge1xuICBpZiAoIWEpIHsgLy8gZG8gd2UgaGF2ZSBhbiBlbGxpcHNvaWQ/XG4gICAgdmFyIGVsbGlwc2UgPSBtYXRjaChFbGxpcHNvaWQsIGVsbHBzKTtcbiAgICBpZiAoIWVsbGlwc2UpIHtcbiAgICAgIGVsbGlwc2UgPSBXR1M4NDtcbiAgICB9XG4gICAgYSA9IGVsbGlwc2UuYTtcbiAgICBiID0gZWxsaXBzZS5iO1xuICAgIHJmID0gZWxsaXBzZS5yZjtcbiAgfVxuXG4gIGlmIChyZiAmJiAhYikge1xuICAgIGIgPSAoMS4wIC0gMS4wIC8gcmYpICogYTtcbiAgfVxuICBpZiAocmYgPT09IDAgfHwgTWF0aC5hYnMoYSAtIGIpIDwgRVBTTE4pIHtcbiAgICBzcGhlcmUgPSB0cnVlO1xuICAgIGIgPSBhO1xuICB9XG4gIHJldHVybiB7XG4gICAgYTogYSxcbiAgICBiOiBiLFxuICAgIHJmOiByZixcbiAgICBzcGhlcmU6IHNwaGVyZVxuICB9O1xufVxuIiwiaW1wb3J0IHtQSkRfM1BBUkFNLCBQSkRfN1BBUkFNLCBQSkRfV0dTODQsIFBKRF9OT0RBVFVNLCBTRUNfVE9fUkFEfSBmcm9tICcuL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5mdW5jdGlvbiBkYXR1bShkYXR1bUNvZGUsIGRhdHVtX3BhcmFtcywgYSwgYiwgZXMsIGVwMikge1xuICB2YXIgb3V0ID0ge307XG5cbiAgaWYgKGRhdHVtQ29kZSA9PT0gdW5kZWZpbmVkIHx8IGRhdHVtQ29kZSA9PT0gJ25vbmUnKSB7XG4gICAgb3V0LmRhdHVtX3R5cGUgPSBQSkRfTk9EQVRVTTtcbiAgfSBlbHNlIHtcbiAgICBvdXQuZGF0dW1fdHlwZSA9IFBKRF9XR1M4NDtcbiAgfVxuXG4gIGlmIChkYXR1bV9wYXJhbXMpIHtcbiAgICBvdXQuZGF0dW1fcGFyYW1zID0gZGF0dW1fcGFyYW1zLm1hcChwYXJzZUZsb2F0KTtcbiAgICBpZiAob3V0LmRhdHVtX3BhcmFtc1swXSAhPT0gMCB8fCBvdXQuZGF0dW1fcGFyYW1zWzFdICE9PSAwIHx8IG91dC5kYXR1bV9wYXJhbXNbMl0gIT09IDApIHtcbiAgICAgIG91dC5kYXR1bV90eXBlID0gUEpEXzNQQVJBTTtcbiAgICB9XG4gICAgaWYgKG91dC5kYXR1bV9wYXJhbXMubGVuZ3RoID4gMykge1xuICAgICAgaWYgKG91dC5kYXR1bV9wYXJhbXNbM10gIT09IDAgfHwgb3V0LmRhdHVtX3BhcmFtc1s0XSAhPT0gMCB8fCBvdXQuZGF0dW1fcGFyYW1zWzVdICE9PSAwIHx8IG91dC5kYXR1bV9wYXJhbXNbNl0gIT09IDApIHtcbiAgICAgICAgb3V0LmRhdHVtX3R5cGUgPSBQSkRfN1BBUkFNO1xuICAgICAgICBvdXQuZGF0dW1fcGFyYW1zWzNdICo9IFNFQ19UT19SQUQ7XG4gICAgICAgIG91dC5kYXR1bV9wYXJhbXNbNF0gKj0gU0VDX1RPX1JBRDtcbiAgICAgICAgb3V0LmRhdHVtX3BhcmFtc1s1XSAqPSBTRUNfVE9fUkFEO1xuICAgICAgICBvdXQuZGF0dW1fcGFyYW1zWzZdID0gKG91dC5kYXR1bV9wYXJhbXNbNl0gLyAxMDAwMDAwLjApICsgMS4wO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG91dC5hID0gYTsgLy9kYXR1bSBvYmplY3QgYWxzbyB1c2VzIHRoZXNlIHZhbHVlc1xuICBvdXQuYiA9IGI7XG4gIG91dC5lcyA9IGVzO1xuICBvdXQuZXAyID0gZXAyO1xuICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkYXR1bTtcbiIsIid1c2Ugc3RyaWN0JztcbmltcG9ydCB7UEpEXzNQQVJBTSwgUEpEXzdQQVJBTSwgSEFMRl9QSX0gZnJvbSAnLi9jb25zdGFudHMvdmFsdWVzJztcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlRGF0dW1zKHNvdXJjZSwgZGVzdCkge1xuICBpZiAoc291cmNlLmRhdHVtX3R5cGUgIT09IGRlc3QuZGF0dW1fdHlwZSkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gZmFsc2UsIGRhdHVtcyBhcmUgbm90IGVxdWFsXG4gIH0gZWxzZSBpZiAoc291cmNlLmEgIT09IGRlc3QuYSB8fCBNYXRoLmFicyhzb3VyY2UuZXMgLSBkZXN0LmVzKSA+IDAuMDAwMDAwMDAwMDUwKSB7XG4gICAgLy8gdGhlIHRvbGVyYW5jZSBmb3IgZXMgaXMgdG8gZW5zdXJlIHRoYXQgR1JTODAgYW5kIFdHUzg0XG4gICAgLy8gYXJlIGNvbnNpZGVyZWQgaWRlbnRpY2FsXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKHNvdXJjZS5kYXR1bV90eXBlID09PSBQSkRfM1BBUkFNKSB7XG4gICAgcmV0dXJuIChzb3VyY2UuZGF0dW1fcGFyYW1zWzBdID09PSBkZXN0LmRhdHVtX3BhcmFtc1swXSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzFdID09PSBkZXN0LmRhdHVtX3BhcmFtc1sxXSAmJiBzb3VyY2UuZGF0dW1fcGFyYW1zWzJdID09PSBkZXN0LmRhdHVtX3BhcmFtc1syXSk7XG4gIH0gZWxzZSBpZiAoc291cmNlLmRhdHVtX3R5cGUgPT09IFBKRF83UEFSQU0pIHtcbiAgICByZXR1cm4gKHNvdXJjZS5kYXR1bV9wYXJhbXNbMF0gPT09IGRlc3QuZGF0dW1fcGFyYW1zWzBdICYmIHNvdXJjZS5kYXR1bV9wYXJhbXNbMV0gPT09IGRlc3QuZGF0dW1fcGFyYW1zWzFdICYmIHNvdXJjZS5kYXR1bV9wYXJhbXNbMl0gPT09IGRlc3QuZGF0dW1fcGFyYW1zWzJdICYmIHNvdXJjZS5kYXR1bV9wYXJhbXNbM10gPT09IGRlc3QuZGF0dW1fcGFyYW1zWzNdICYmIHNvdXJjZS5kYXR1bV9wYXJhbXNbNF0gPT09IGRlc3QuZGF0dW1fcGFyYW1zWzRdICYmIHNvdXJjZS5kYXR1bV9wYXJhbXNbNV0gPT09IGRlc3QuZGF0dW1fcGFyYW1zWzVdICYmIHNvdXJjZS5kYXR1bV9wYXJhbXNbNl0gPT09IGRlc3QuZGF0dW1fcGFyYW1zWzZdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTsgLy8gZGF0dW1zIGFyZSBlcXVhbFxuICB9XG59IC8vIGNzX2NvbXBhcmVfZGF0dW1zKClcblxuLypcbiAqIFRoZSBmdW5jdGlvbiBDb252ZXJ0X0dlb2RldGljX1RvX0dlb2NlbnRyaWMgY29udmVydHMgZ2VvZGV0aWMgY29vcmRpbmF0ZXNcbiAqIChsYXRpdHVkZSwgbG9uZ2l0dWRlLCBhbmQgaGVpZ2h0KSB0byBnZW9jZW50cmljIGNvb3JkaW5hdGVzIChYLCBZLCBaKSxcbiAqIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBlbGxpcHNvaWQgcGFyYW1ldGVycy5cbiAqXG4gKiAgICBMYXRpdHVkZSAgOiBHZW9kZXRpYyBsYXRpdHVkZSBpbiByYWRpYW5zICAgICAgICAgICAgICAgICAgICAgKGlucHV0KVxuICogICAgTG9uZ2l0dWRlIDogR2VvZGV0aWMgbG9uZ2l0dWRlIGluIHJhZGlhbnMgICAgICAgICAgICAgICAgICAgIChpbnB1dClcbiAqICAgIEhlaWdodCAgICA6IEdlb2RldGljIGhlaWdodCwgaW4gbWV0ZXJzICAgICAgICAgICAgICAgICAgICAgICAoaW5wdXQpXG4gKiAgICBYICAgICAgICAgOiBDYWxjdWxhdGVkIEdlb2NlbnRyaWMgWCBjb29yZGluYXRlLCBpbiBtZXRlcnMgICAgKG91dHB1dClcbiAqICAgIFkgICAgICAgICA6IENhbGN1bGF0ZWQgR2VvY2VudHJpYyBZIGNvb3JkaW5hdGUsIGluIG1ldGVycyAgICAob3V0cHV0KVxuICogICAgWiAgICAgICAgIDogQ2FsY3VsYXRlZCBHZW9jZW50cmljIFogY29vcmRpbmF0ZSwgaW4gbWV0ZXJzICAgIChvdXRwdXQpXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VvZGV0aWNUb0dlb2NlbnRyaWMocCwgZXMsIGEpIHtcbiAgdmFyIExvbmdpdHVkZSA9IHAueDtcbiAgdmFyIExhdGl0dWRlID0gcC55O1xuICB2YXIgSGVpZ2h0ID0gcC56ID8gcC56IDogMDsgLy9aIHZhbHVlIG5vdCBhbHdheXMgc3VwcGxpZWRcblxuICB2YXIgUm47IC8qICBFYXJ0aCByYWRpdXMgYXQgbG9jYXRpb24gICovXG4gIHZhciBTaW5fTGF0OyAvKiAgTWF0aC5zaW4oTGF0aXR1ZGUpICAqL1xuICB2YXIgU2luMl9MYXQ7IC8qICBTcXVhcmUgb2YgTWF0aC5zaW4oTGF0aXR1ZGUpICAqL1xuICB2YXIgQ29zX0xhdDsgLyogIE1hdGguY29zKExhdGl0dWRlKSAgKi9cblxuICAvKlxuICAgKiogRG9uJ3QgYmxvdyB1cCBpZiBMYXRpdHVkZSBpcyBqdXN0IGEgbGl0dGxlIG91dCBvZiB0aGUgdmFsdWVcbiAgICoqIHJhbmdlIGFzIGl0IG1heSBqdXN0IGJlIGEgcm91bmRpbmcgaXNzdWUuICBBbHNvIHJlbW92ZWQgbG9uZ2l0dWRlXG4gICAqKiB0ZXN0LCBpdCBzaG91bGQgYmUgd3JhcHBlZCBieSBNYXRoLmNvcygpIGFuZCBNYXRoLnNpbigpLiAgTkZXIGZvciBQUk9KLjQsIFNlcC8yMDAxLlxuICAgKi9cbiAgaWYgKExhdGl0dWRlIDwgLUhBTEZfUEkgJiYgTGF0aXR1ZGUgPiAtMS4wMDEgKiBIQUxGX1BJKSB7XG4gICAgTGF0aXR1ZGUgPSAtSEFMRl9QSTtcbiAgfSBlbHNlIGlmIChMYXRpdHVkZSA+IEhBTEZfUEkgJiYgTGF0aXR1ZGUgPCAxLjAwMSAqIEhBTEZfUEkpIHtcbiAgICBMYXRpdHVkZSA9IEhBTEZfUEk7XG4gIH0gZWxzZSBpZiAoTGF0aXR1ZGUgPCAtSEFMRl9QSSkge1xuICAgIC8qIExhdGl0dWRlIG91dCBvZiByYW5nZSAqL1xuICAgIC8vLi5yZXBvcnRFcnJvcignZ2VvY2VudDpsYXQgb3V0IG9mIHJhbmdlOicgKyBMYXRpdHVkZSk7XG4gICAgcmV0dXJuIHsgeDogLUluZmluaXR5LCB5OiAtSW5maW5pdHksIHo6IHAueiB9O1xuICB9IGVsc2UgaWYgKExhdGl0dWRlID4gSEFMRl9QSSkge1xuICAgIC8qIExhdGl0dWRlIG91dCBvZiByYW5nZSAqL1xuICAgIHJldHVybiB7IHg6IEluZmluaXR5LCB5OiBJbmZpbml0eSwgejogcC56IH07XG4gIH1cblxuICBpZiAoTG9uZ2l0dWRlID4gTWF0aC5QSSkge1xuICAgIExvbmdpdHVkZSAtPSAoMiAqIE1hdGguUEkpO1xuICB9XG4gIFNpbl9MYXQgPSBNYXRoLnNpbihMYXRpdHVkZSk7XG4gIENvc19MYXQgPSBNYXRoLmNvcyhMYXRpdHVkZSk7XG4gIFNpbjJfTGF0ID0gU2luX0xhdCAqIFNpbl9MYXQ7XG4gIFJuID0gYSAvIChNYXRoLnNxcnQoMS4wZTAgLSBlcyAqIFNpbjJfTGF0KSk7XG4gIHJldHVybiB7XG4gICAgeDogKFJuICsgSGVpZ2h0KSAqIENvc19MYXQgKiBNYXRoLmNvcyhMb25naXR1ZGUpLFxuICAgIHk6IChSbiArIEhlaWdodCkgKiBDb3NfTGF0ICogTWF0aC5zaW4oTG9uZ2l0dWRlKSxcbiAgICB6OiAoKFJuICogKDEgLSBlcykpICsgSGVpZ2h0KSAqIFNpbl9MYXRcbiAgfTtcbn0gLy8gY3NfZ2VvZGV0aWNfdG9fZ2VvY2VudHJpYygpXG5cbmV4cG9ydCBmdW5jdGlvbiBnZW9jZW50cmljVG9HZW9kZXRpYyhwLCBlcywgYSwgYikge1xuICAvKiBsb2NhbCBkZWZpbnRpb25zIGFuZCB2YXJpYWJsZXMgKi9cbiAgLyogZW5kLWNyaXRlcml1bSBvZiBsb29wLCBhY2N1cmFjeSBvZiBzaW4oTGF0aXR1ZGUpICovXG4gIHZhciBnZW5hdSA9IDFlLTEyO1xuICB2YXIgZ2VuYXUyID0gKGdlbmF1ICogZ2VuYXUpO1xuICB2YXIgbWF4aXRlciA9IDMwO1xuXG4gIHZhciBQOyAvKiBkaXN0YW5jZSBiZXR3ZWVuIHNlbWktbWlub3IgYXhpcyBhbmQgbG9jYXRpb24gKi9cbiAgdmFyIFJSOyAvKiBkaXN0YW5jZSBiZXR3ZWVuIGNlbnRlciBhbmQgbG9jYXRpb24gKi9cbiAgdmFyIENUOyAvKiBzaW4gb2YgZ2VvY2VudHJpYyBsYXRpdHVkZSAqL1xuICB2YXIgU1Q7IC8qIGNvcyBvZiBnZW9jZW50cmljIGxhdGl0dWRlICovXG4gIHZhciBSWDtcbiAgdmFyIFJLO1xuICB2YXIgUk47IC8qIEVhcnRoIHJhZGl1cyBhdCBsb2NhdGlvbiAqL1xuICB2YXIgQ1BISTA7IC8qIGNvcyBvZiBzdGFydCBvciBvbGQgZ2VvZGV0aWMgbGF0aXR1ZGUgaW4gaXRlcmF0aW9ucyAqL1xuICB2YXIgU1BISTA7IC8qIHNpbiBvZiBzdGFydCBvciBvbGQgZ2VvZGV0aWMgbGF0aXR1ZGUgaW4gaXRlcmF0aW9ucyAqL1xuICB2YXIgQ1BISTsgLyogY29zIG9mIHNlYXJjaGVkIGdlb2RldGljIGxhdGl0dWRlICovXG4gIHZhciBTUEhJOyAvKiBzaW4gb2Ygc2VhcmNoZWQgZ2VvZGV0aWMgbGF0aXR1ZGUgKi9cbiAgdmFyIFNEUEhJOyAvKiBlbmQtY3JpdGVyaXVtOiBhZGRpdGlvbi10aGVvcmVtIG9mIHNpbihMYXRpdHVkZShpdGVyKS1MYXRpdHVkZShpdGVyLTEpKSAqL1xuICB2YXIgaXRlcjsgLyogIyBvZiBjb250aW5vdXMgaXRlcmF0aW9uLCBtYXguIDMwIGlzIGFsd2F5cyBlbm91Z2ggKHMuYS4pICovXG5cbiAgdmFyIFggPSBwLng7XG4gIHZhciBZID0gcC55O1xuICB2YXIgWiA9IHAueiA/IHAueiA6IDAuMDsgLy9aIHZhbHVlIG5vdCBhbHdheXMgc3VwcGxpZWRcbiAgdmFyIExvbmdpdHVkZTtcbiAgdmFyIExhdGl0dWRlO1xuICB2YXIgSGVpZ2h0O1xuXG4gIFAgPSBNYXRoLnNxcnQoWCAqIFggKyBZICogWSk7XG4gIFJSID0gTWF0aC5zcXJ0KFggKiBYICsgWSAqIFkgKyBaICogWik7XG5cbiAgLyogICAgICBzcGVjaWFsIGNhc2VzIGZvciBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlICovXG4gIGlmIChQIC8gYSA8IGdlbmF1KSB7XG5cbiAgICAvKiAgc3BlY2lhbCBjYXNlLCBpZiBQPTAuIChYPTAuLCBZPTAuKSAqL1xuICAgIExvbmdpdHVkZSA9IDAuMDtcblxuICAgIC8qICBpZiAoWCxZLFopPSgwLiwwLiwwLikgdGhlbiBIZWlnaHQgYmVjb21lcyBzZW1pLW1pbm9yIGF4aXNcbiAgICAgKiAgb2YgZWxsaXBzb2lkICg9Y2VudGVyIG9mIG1hc3MpLCBMYXRpdHVkZSBiZWNvbWVzIFBJLzIgKi9cbiAgICBpZiAoUlIgLyBhIDwgZ2VuYXUpIHtcbiAgICAgIExhdGl0dWRlID0gSEFMRl9QSTtcbiAgICAgIEhlaWdodCA9IC1iO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcC54LFxuICAgICAgICB5OiBwLnksXG4gICAgICAgIHo6IHAuelxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLyogIGVsbGlwc29pZGFsIChnZW9kZXRpYykgbG9uZ2l0dWRlXG4gICAgICogIGludGVydmFsOiAtUEkgPCBMb25naXR1ZGUgPD0gK1BJICovXG4gICAgTG9uZ2l0dWRlID0gTWF0aC5hdGFuMihZLCBYKTtcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEZvbGxvd2luZyBpdGVyYXRpdmUgYWxnb3JpdGhtIHdhcyBkZXZlbG9wcGVkIGJ5XG4gICAqIFwiSW5zdGl0dXQgZm9yIEVyZG1lc3N1bmdcIiwgVW5pdmVyc2l0eSBvZiBIYW5ub3ZlciwgSnVseSAxOTg4LlxuICAgKiBJbnRlcm5ldDogd3d3LmlmZS51bmktaGFubm92ZXIuZGVcbiAgICogSXRlcmF0aXZlIGNvbXB1dGF0aW9uIG9mIENQSEksU1BISSBhbmQgSGVpZ2h0LlxuICAgKiBJdGVyYXRpb24gb2YgQ1BISSBhbmQgU1BISSB0byAxMCoqLTEyIHJhZGlhbiByZXNwLlxuICAgKiAyKjEwKiotNyBhcmNzZWMuXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICBDVCA9IFogLyBSUjtcbiAgU1QgPSBQIC8gUlI7XG4gIFJYID0gMS4wIC8gTWF0aC5zcXJ0KDEuMCAtIGVzICogKDIuMCAtIGVzKSAqIFNUICogU1QpO1xuICBDUEhJMCA9IFNUICogKDEuMCAtIGVzKSAqIFJYO1xuICBTUEhJMCA9IENUICogUlg7XG4gIGl0ZXIgPSAwO1xuXG4gIC8qIGxvb3AgdG8gZmluZCBzaW4oTGF0aXR1ZGUpIHJlc3AuIExhdGl0dWRlXG4gICAqIHVudGlsIHxzaW4oTGF0aXR1ZGUoaXRlciktTGF0aXR1ZGUoaXRlci0xKSl8IDwgZ2VuYXUgKi9cbiAgZG8ge1xuICAgIGl0ZXIrKztcbiAgICBSTiA9IGEgLyBNYXRoLnNxcnQoMS4wIC0gZXMgKiBTUEhJMCAqIFNQSEkwKTtcblxuICAgIC8qICBlbGxpcHNvaWRhbCAoZ2VvZGV0aWMpIGhlaWdodCAqL1xuICAgIEhlaWdodCA9IFAgKiBDUEhJMCArIFogKiBTUEhJMCAtIFJOICogKDEuMCAtIGVzICogU1BISTAgKiBTUEhJMCk7XG5cbiAgICBSSyA9IGVzICogUk4gLyAoUk4gKyBIZWlnaHQpO1xuICAgIFJYID0gMS4wIC8gTWF0aC5zcXJ0KDEuMCAtIFJLICogKDIuMCAtIFJLKSAqIFNUICogU1QpO1xuICAgIENQSEkgPSBTVCAqICgxLjAgLSBSSykgKiBSWDtcbiAgICBTUEhJID0gQ1QgKiBSWDtcbiAgICBTRFBISSA9IFNQSEkgKiBDUEhJMCAtIENQSEkgKiBTUEhJMDtcbiAgICBDUEhJMCA9IENQSEk7XG4gICAgU1BISTAgPSBTUEhJO1xuICB9XG4gIHdoaWxlIChTRFBISSAqIFNEUEhJID4gZ2VuYXUyICYmIGl0ZXIgPCBtYXhpdGVyKTtcblxuICAvKiAgICAgIGVsbGlwc29pZGFsIChnZW9kZXRpYykgbGF0aXR1ZGUgKi9cbiAgTGF0aXR1ZGUgPSBNYXRoLmF0YW4oU1BISSAvIE1hdGguYWJzKENQSEkpKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBMb25naXR1ZGUsXG4gICAgeTogTGF0aXR1ZGUsXG4gICAgejogSGVpZ2h0XG4gIH07XG59IC8vIGNzX2dlb2NlbnRyaWNfdG9fZ2VvZGV0aWMoKVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8vIHBqX2dlb2NlbnRpY190b193Z3M4NCggcCApXG4vLyAgcCA9IHBvaW50IHRvIHRyYW5zZm9ybSBpbiBnZW9jZW50cmljIGNvb3JkaW5hdGVzICh4LHkseilcblxuXG4vKiogcG9pbnQgb2JqZWN0LCBub3RoaW5nIGZhbmN5LCBqdXN0IGFsbG93cyB2YWx1ZXMgdG8gYmVcbiAgICBwYXNzZWQgYmFjayBhbmQgZm9ydGggYnkgcmVmZXJlbmNlIHJhdGhlciB0aGFuIGJ5IHZhbHVlLlxuICAgIE90aGVyIHBvaW50IGNsYXNzZXMgbWF5IGJlIHVzZWQgYXMgbG9uZyBhcyB0aGV5IGhhdmVcbiAgICB4IGFuZCB5IHByb3BlcnRpZXMsIHdoaWNoIHdpbGwgZ2V0IG1vZGlmaWVkIGluIHRoZSB0cmFuc2Zvcm0gbWV0aG9kLlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW9jZW50cmljVG9XZ3M4NChwLCBkYXR1bV90eXBlLCBkYXR1bV9wYXJhbXMpIHtcblxuICBpZiAoZGF0dW1fdHlwZSA9PT0gUEpEXzNQQVJBTSkge1xuICAgIC8vIGlmKCB4W2lvXSA9PT0gSFVHRV9WQUwgKVxuICAgIC8vICAgIGNvbnRpbnVlO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBwLnggKyBkYXR1bV9wYXJhbXNbMF0sXG4gICAgICB5OiBwLnkgKyBkYXR1bV9wYXJhbXNbMV0sXG4gICAgICB6OiBwLnogKyBkYXR1bV9wYXJhbXNbMl0sXG4gICAgfTtcbiAgfSBlbHNlIGlmIChkYXR1bV90eXBlID09PSBQSkRfN1BBUkFNKSB7XG4gICAgdmFyIER4X0JGID0gZGF0dW1fcGFyYW1zWzBdO1xuICAgIHZhciBEeV9CRiA9IGRhdHVtX3BhcmFtc1sxXTtcbiAgICB2YXIgRHpfQkYgPSBkYXR1bV9wYXJhbXNbMl07XG4gICAgdmFyIFJ4X0JGID0gZGF0dW1fcGFyYW1zWzNdO1xuICAgIHZhciBSeV9CRiA9IGRhdHVtX3BhcmFtc1s0XTtcbiAgICB2YXIgUnpfQkYgPSBkYXR1bV9wYXJhbXNbNV07XG4gICAgdmFyIE1fQkYgPSBkYXR1bV9wYXJhbXNbNl07XG4gICAgLy8gaWYoIHhbaW9dID09PSBIVUdFX1ZBTCApXG4gICAgLy8gICAgY29udGludWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1fQkYgKiAocC54IC0gUnpfQkYgKiBwLnkgKyBSeV9CRiAqIHAueikgKyBEeF9CRixcbiAgICAgIHk6IE1fQkYgKiAoUnpfQkYgKiBwLnggKyBwLnkgLSBSeF9CRiAqIHAueikgKyBEeV9CRixcbiAgICAgIHo6IE1fQkYgKiAoLVJ5X0JGICogcC54ICsgUnhfQkYgKiBwLnkgKyBwLnopICsgRHpfQkZcbiAgICB9O1xuICB9XG59IC8vIGNzX2dlb2NlbnRyaWNfdG9fd2dzODRcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vLyBwal9nZW9jZW50aWNfZnJvbV93Z3M4NCgpXG4vLyAgY29vcmRpbmF0ZSBzeXN0ZW0gZGVmaW5pdGlvbixcbi8vICBwb2ludCB0byB0cmFuc2Zvcm0gaW4gZ2VvY2VudHJpYyBjb29yZGluYXRlcyAoeCx5LHopXG5leHBvcnQgZnVuY3Rpb24gZ2VvY2VudHJpY0Zyb21XZ3M4NChwLCBkYXR1bV90eXBlLCBkYXR1bV9wYXJhbXMpIHtcblxuICBpZiAoZGF0dW1fdHlwZSA9PT0gUEpEXzNQQVJBTSkge1xuICAgIC8vaWYoIHhbaW9dID09PSBIVUdFX1ZBTCApXG4gICAgLy8gICAgY29udGludWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHAueCAtIGRhdHVtX3BhcmFtc1swXSxcbiAgICAgIHk6IHAueSAtIGRhdHVtX3BhcmFtc1sxXSxcbiAgICAgIHo6IHAueiAtIGRhdHVtX3BhcmFtc1syXSxcbiAgICB9O1xuXG4gIH0gZWxzZSBpZiAoZGF0dW1fdHlwZSA9PT0gUEpEXzdQQVJBTSkge1xuICAgIHZhciBEeF9CRiA9IGRhdHVtX3BhcmFtc1swXTtcbiAgICB2YXIgRHlfQkYgPSBkYXR1bV9wYXJhbXNbMV07XG4gICAgdmFyIER6X0JGID0gZGF0dW1fcGFyYW1zWzJdO1xuICAgIHZhciBSeF9CRiA9IGRhdHVtX3BhcmFtc1szXTtcbiAgICB2YXIgUnlfQkYgPSBkYXR1bV9wYXJhbXNbNF07XG4gICAgdmFyIFJ6X0JGID0gZGF0dW1fcGFyYW1zWzVdO1xuICAgIHZhciBNX0JGID0gZGF0dW1fcGFyYW1zWzZdO1xuICAgIHZhciB4X3RtcCA9IChwLnggLSBEeF9CRikgLyBNX0JGO1xuICAgIHZhciB5X3RtcCA9IChwLnkgLSBEeV9CRikgLyBNX0JGO1xuICAgIHZhciB6X3RtcCA9IChwLnogLSBEel9CRikgLyBNX0JGO1xuICAgIC8vaWYoIHhbaW9dID09PSBIVUdFX1ZBTCApXG4gICAgLy8gICAgY29udGludWU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeDogeF90bXAgKyBSel9CRiAqIHlfdG1wIC0gUnlfQkYgKiB6X3RtcCxcbiAgICAgIHk6IC1Sel9CRiAqIHhfdG1wICsgeV90bXAgKyBSeF9CRiAqIHpfdG1wLFxuICAgICAgejogUnlfQkYgKiB4X3RtcCAtIFJ4X0JGICogeV90bXAgKyB6X3RtcFxuICAgIH07XG4gIH0gLy9jc19nZW9jZW50cmljX2Zyb21fd2dzODQoKVxufVxuIiwiaW1wb3J0IHtQSkRfM1BBUkFNLCBQSkRfN1BBUkFNLCBQSkRfTk9EQVRVTX0gZnJvbSAnLi9jb25zdGFudHMvdmFsdWVzJztcblxuaW1wb3J0IHtnZW9kZXRpY1RvR2VvY2VudHJpYywgZ2VvY2VudHJpY1RvR2VvZGV0aWMsIGdlb2NlbnRyaWNUb1dnczg0LCBnZW9jZW50cmljRnJvbVdnczg0LCBjb21wYXJlRGF0dW1zfSBmcm9tICcuL2RhdHVtVXRpbHMnO1xuZnVuY3Rpb24gY2hlY2tQYXJhbXModHlwZSkge1xuICByZXR1cm4gKHR5cGUgPT09IFBKRF8zUEFSQU0gfHwgdHlwZSA9PT0gUEpEXzdQQVJBTSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNvdXJjZSwgZGVzdCwgcG9pbnQpIHtcbiAgLy8gU2hvcnQgY3V0IGlmIHRoZSBkYXR1bXMgYXJlIGlkZW50aWNhbC5cbiAgaWYgKGNvbXBhcmVEYXR1bXMoc291cmNlLCBkZXN0KSkge1xuICAgIHJldHVybiBwb2ludDsgLy8gaW4gdGhpcyBjYXNlLCB6ZXJvIGlzIHN1Y2VzcyxcbiAgICAvLyB3aGVyZWFzIGNzX2NvbXBhcmVfZGF0dW1zIHJldHVybnMgMSB0byBpbmRpY2F0ZSBUUlVFXG4gICAgLy8gY29uZnVzaW5nLCBzaG91bGQgZml4IHRoaXNcbiAgfVxuXG4gIC8vIEV4cGxpY2l0bHkgc2tpcCBkYXR1bSB0cmFuc2Zvcm0gYnkgc2V0dGluZyAnZGF0dW09bm9uZScgYXMgcGFyYW1ldGVyIGZvciBlaXRoZXIgc291cmNlIG9yIGRlc3RcbiAgaWYgKHNvdXJjZS5kYXR1bV90eXBlID09PSBQSkRfTk9EQVRVTSB8fCBkZXN0LmRhdHVtX3R5cGUgPT09IFBKRF9OT0RBVFVNKSB7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgLy8gSWYgdGhpcyBkYXR1bSByZXF1aXJlcyBncmlkIHNoaWZ0cywgdGhlbiBhcHBseSBpdCB0byBnZW9kZXRpYyBjb29yZGluYXRlcy5cblxuICAvLyBEbyB3ZSBuZWVkIHRvIGdvIHRocm91Z2ggZ2VvY2VudHJpYyBjb29yZGluYXRlcz9cbiAgaWYgKHNvdXJjZS5lcyA9PT0gZGVzdC5lcyAmJiBzb3VyY2UuYSA9PT0gZGVzdC5hICYmICFjaGVja1BhcmFtcyhzb3VyY2UuZGF0dW1fdHlwZSkgJiYgICFjaGVja1BhcmFtcyhkZXN0LmRhdHVtX3R5cGUpKSB7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgLy8gQ29udmVydCB0byBnZW9jZW50cmljIGNvb3JkaW5hdGVzLlxuICBwb2ludCA9IGdlb2RldGljVG9HZW9jZW50cmljKHBvaW50LCBzb3VyY2UuZXMsIHNvdXJjZS5hKTtcbiAgLy8gQ29udmVydCBiZXR3ZWVuIGRhdHVtc1xuICBpZiAoY2hlY2tQYXJhbXMoc291cmNlLmRhdHVtX3R5cGUpKSB7XG4gICAgcG9pbnQgPSBnZW9jZW50cmljVG9XZ3M4NChwb2ludCwgc291cmNlLmRhdHVtX3R5cGUsIHNvdXJjZS5kYXR1bV9wYXJhbXMpO1xuICB9XG4gIGlmIChjaGVja1BhcmFtcyhkZXN0LmRhdHVtX3R5cGUpKSB7XG4gICAgcG9pbnQgPSBnZW9jZW50cmljRnJvbVdnczg0KHBvaW50LCBkZXN0LmRhdHVtX3R5cGUsIGRlc3QuZGF0dW1fcGFyYW1zKTtcbiAgfVxuICByZXR1cm4gZ2VvY2VudHJpY1RvR2VvZGV0aWMocG9pbnQsIGRlc3QuZXMsIGRlc3QuYSwgZGVzdC5iKTtcblxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY3JzLCBkZW5vcm0sIHBvaW50KSB7XG4gIHZhciB4aW4gPSBwb2ludC54LFxuICAgIHlpbiA9IHBvaW50LnksXG4gICAgemluID0gcG9pbnQueiB8fCAwLjA7XG4gIHZhciB2LCB0LCBpO1xuICB2YXIgb3V0ID0ge307XG4gIGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICBpZiAoZGVub3JtICYmIGkgPT09IDIgJiYgcG9pbnQueiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHYgPSB4aW47XG4gICAgICBpZiAoXCJld1wiLmluZGV4T2YoY3JzLmF4aXNbaV0pICE9PSAtMSkge1xuICAgICAgICB0ID0gJ3gnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdCA9ICd5JztcbiAgICAgIH1cblxuICAgIH1cbiAgICBlbHNlIGlmIChpID09PSAxKSB7XG4gICAgICB2ID0geWluO1xuICAgICAgaWYgKFwibnNcIi5pbmRleE9mKGNycy5heGlzW2ldKSAhPT0gLTEpIHtcbiAgICAgICAgdCA9ICd5JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQgPSAneCc7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdiA9IHppbjtcbiAgICAgIHQgPSAneic7XG4gICAgfVxuICAgIHN3aXRjaCAoY3JzLmF4aXNbaV0pIHtcbiAgICBjYXNlICdlJzpcbiAgICAgIG91dFt0XSA9IHY7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd3JzpcbiAgICAgIG91dFt0XSA9IC12O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbic6XG4gICAgICBvdXRbdF0gPSB2O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncyc6XG4gICAgICBvdXRbdF0gPSAtdjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3UnOlxuICAgICAgaWYgKHBvaW50W3RdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0LnogPSB2O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZCc6XG4gICAgICBpZiAocG9pbnRbdF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdXQueiA9IC12O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vY29uc29sZS5sb2coXCJFUlJPUjogdW5rbm93IGF4aXMgKFwiK2Nycy5heGlzW2ldK1wiKSAtIGNoZWNrIGRlZmluaXRpb24gb2YgXCIrY3JzLnByb2pOYW1lKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGFycmF5KXtcbiAgdmFyIG91dCA9IHtcbiAgICB4OiBhcnJheVswXSxcbiAgICB5OiBhcnJheVsxXVxuICB9O1xuICBpZiAoYXJyYXkubGVuZ3RoPjIpIHtcbiAgICBvdXQueiA9IGFycmF5WzJdO1xuICB9XG4gIGlmIChhcnJheS5sZW5ndGg+Mykge1xuICAgIG91dC5tID0gYXJyYXlbM107XG4gIH1cbiAgcmV0dXJuIG91dDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocG9pbnQpIHtcbiAgY2hlY2tDb29yZChwb2ludC54KTtcbiAgY2hlY2tDb29yZChwb2ludC55KTtcbn1cbmZ1bmN0aW9uIGNoZWNrQ29vcmQobnVtKSB7XG4gIGlmICh0eXBlb2YgTnVtYmVyLmlzRmluaXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKE51bWJlci5pc0Zpbml0ZShudW0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nvb3JkaW5hdGVzIG11c3QgYmUgZmluaXRlIG51bWJlcnMnKTtcbiAgfVxuICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicgfHwgbnVtICE9PSBudW0gfHwgIWlzRmluaXRlKG51bSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb29yZGluYXRlcyBtdXN0IGJlIGZpbml0ZSBudW1iZXJzJyk7XG4gIH1cbn1cbiIsImltcG9ydCB7RDJSLCBSMkQsIFBKRF8zUEFSQU0sIFBKRF83UEFSQU19IGZyb20gJy4vY29uc3RhbnRzL3ZhbHVlcyc7XG5pbXBvcnQgZGF0dW1fdHJhbnNmb3JtIGZyb20gJy4vZGF0dW1fdHJhbnNmb3JtJztcbmltcG9ydCBhZGp1c3RfYXhpcyBmcm9tICcuL2FkanVzdF9heGlzJztcbmltcG9ydCBwcm9qIGZyb20gJy4vUHJvaic7XG5pbXBvcnQgdG9Qb2ludCBmcm9tICcuL2NvbW1vbi90b1BvaW50JztcbmltcG9ydCBjaGVja1Nhbml0eSBmcm9tICcuL2NoZWNrU2FuaXR5JztcblxuZnVuY3Rpb24gY2hlY2tOb3RXR1Moc291cmNlLCBkZXN0KSB7XG4gIHJldHVybiAoKHNvdXJjZS5kYXR1bS5kYXR1bV90eXBlID09PSBQSkRfM1BBUkFNIHx8IHNvdXJjZS5kYXR1bS5kYXR1bV90eXBlID09PSBQSkRfN1BBUkFNKSAmJiBkZXN0LmRhdHVtQ29kZSAhPT0gJ1dHUzg0JykgfHwgKChkZXN0LmRhdHVtLmRhdHVtX3R5cGUgPT09IFBKRF8zUEFSQU0gfHwgZGVzdC5kYXR1bS5kYXR1bV90eXBlID09PSBQSkRfN1BBUkFNKSAmJiBzb3VyY2UuZGF0dW1Db2RlICE9PSAnV0dTODQnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKHNvdXJjZSwgZGVzdCwgcG9pbnQpIHtcbiAgdmFyIHdnczg0O1xuICBpZiAoQXJyYXkuaXNBcnJheShwb2ludCkpIHtcbiAgICBwb2ludCA9IHRvUG9pbnQocG9pbnQpO1xuICB9XG4gIGNoZWNrU2FuaXR5KHBvaW50KTtcbiAgLy8gV29ya2Fyb3VuZCBmb3IgZGF0dW0gc2hpZnRzIHRvd2dzODQsIGlmIGVpdGhlciBzb3VyY2Ugb3IgZGVzdGluYXRpb24gcHJvamVjdGlvbiBpcyBub3Qgd2dzODRcbiAgaWYgKHNvdXJjZS5kYXR1bSAmJiBkZXN0LmRhdHVtICYmIGNoZWNrTm90V0dTKHNvdXJjZSwgZGVzdCkpIHtcbiAgICB3Z3M4NCA9IG5ldyBwcm9qKCdXR1M4NCcpO1xuICAgIHBvaW50ID0gdHJhbnNmb3JtKHNvdXJjZSwgd2dzODQsIHBvaW50KTtcbiAgICBzb3VyY2UgPSB3Z3M4NDtcbiAgfVxuICAvLyBER1IsIDIwMTAvMTEvMTJcbiAgaWYgKHNvdXJjZS5heGlzICE9PSAnZW51Jykge1xuICAgIHBvaW50ID0gYWRqdXN0X2F4aXMoc291cmNlLCBmYWxzZSwgcG9pbnQpO1xuICB9XG4gIC8vIFRyYW5zZm9ybSBzb3VyY2UgcG9pbnRzIHRvIGxvbmcvbGF0LCBpZiB0aGV5IGFyZW4ndCBhbHJlYWR5LlxuICBpZiAoc291cmNlLnByb2pOYW1lID09PSAnbG9uZ2xhdCcpIHtcbiAgICBwb2ludCA9IHtcbiAgICAgIHg6IHBvaW50LnggKiBEMlIsXG4gICAgICB5OiBwb2ludC55ICogRDJSLFxuICAgICAgejogcG9pbnQueiB8fCAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc291cmNlLnRvX21ldGVyKSB7XG4gICAgICBwb2ludCA9IHtcbiAgICAgICAgeDogcG9pbnQueCAqIHNvdXJjZS50b19tZXRlcixcbiAgICAgICAgeTogcG9pbnQueSAqIHNvdXJjZS50b19tZXRlcixcbiAgICAgICAgejogcG9pbnQueiB8fCAwXG4gICAgICB9O1xuICAgIH1cbiAgICBwb2ludCA9IHNvdXJjZS5pbnZlcnNlKHBvaW50KTsgLy8gQ29udmVydCBDYXJ0ZXNpYW4gdG8gbG9uZ2xhdFxuICAgIGlmICghcG9pbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgLy8gQWRqdXN0IGZvciB0aGUgcHJpbWUgbWVyaWRpYW4gaWYgbmVjZXNzYXJ5XG4gIGlmIChzb3VyY2UuZnJvbV9ncmVlbndpY2gpIHtcbiAgICBwb2ludC54ICs9IHNvdXJjZS5mcm9tX2dyZWVud2ljaDtcbiAgfVxuXG4gIC8vIENvbnZlcnQgZGF0dW1zIGlmIG5lZWRlZCwgYW5kIGlmIHBvc3NpYmxlLlxuICBwb2ludCA9IGRhdHVtX3RyYW5zZm9ybShzb3VyY2UuZGF0dW0sIGRlc3QuZGF0dW0sIHBvaW50KTtcblxuICAvLyBBZGp1c3QgZm9yIHRoZSBwcmltZSBtZXJpZGlhbiBpZiBuZWNlc3NhcnlcbiAgaWYgKGRlc3QuZnJvbV9ncmVlbndpY2gpIHtcbiAgICBwb2ludCA9IHtcbiAgICAgIHg6IHBvaW50LnggLSBkZXN0LmZyb21fZ3JlZW53aWNoLFxuICAgICAgeTogcG9pbnQueSxcbiAgICAgIHo6IHBvaW50LnogfHwgMFxuICAgIH07XG4gIH1cblxuICBpZiAoZGVzdC5wcm9qTmFtZSA9PT0gJ2xvbmdsYXQnKSB7XG4gICAgLy8gY29udmVydCByYWRpYW5zIHRvIGRlY2ltYWwgZGVncmVlc1xuICAgIHBvaW50ID0ge1xuICAgICAgeDogcG9pbnQueCAqIFIyRCxcbiAgICAgIHk6IHBvaW50LnkgKiBSMkQsXG4gICAgICB6OiBwb2ludC56IHx8IDBcbiAgICB9O1xuICB9IGVsc2UgeyAvLyBlbHNlIHByb2plY3RcbiAgICBwb2ludCA9IGRlc3QuZm9yd2FyZChwb2ludCk7XG4gICAgaWYgKGRlc3QudG9fbWV0ZXIpIHtcbiAgICAgIHBvaW50ID0ge1xuICAgICAgICB4OiBwb2ludC54IC8gZGVzdC50b19tZXRlcixcbiAgICAgICAgeTogcG9pbnQueSAvIGRlc3QudG9fbWV0ZXIsXG4gICAgICAgIHo6IHBvaW50LnogfHwgMFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBER1IsIDIwMTAvMTEvMTJcbiAgaWYgKGRlc3QuYXhpcyAhPT0gJ2VudScpIHtcbiAgICByZXR1cm4gYWRqdXN0X2F4aXMoZGVzdCwgdHJ1ZSwgcG9pbnQpO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50O1xufVxuIiwiaW1wb3J0IHByb2ogZnJvbSAnLi9Qcm9qJztcbmltcG9ydCB0cmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm0nO1xudmFyIHdnczg0ID0gcHJvaignV0dTODQnKTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoZnJvbSwgdG8sIGNvb3Jkcykge1xuICB2YXIgdHJhbnNmb3JtZWRBcnJheSwgb3V0LCBrZXlzO1xuICBpZiAoQXJyYXkuaXNBcnJheShjb29yZHMpKSB7XG4gICAgdHJhbnNmb3JtZWRBcnJheSA9IHRyYW5zZm9ybShmcm9tLCB0bywgY29vcmRzKSB8fCB7eDogTmFOLCB5OiBOYU59O1xuICAgIGlmIChjb29yZHMubGVuZ3RoID4gMikge1xuICAgICAgaWYgKCh0eXBlb2YgZnJvbS5uYW1lICE9PSAndW5kZWZpbmVkJyAmJiBmcm9tLm5hbWUgPT09ICdnZW9jZW50JykgfHwgKHR5cGVvZiB0by5uYW1lICE9PSAndW5kZWZpbmVkJyAmJiB0by5uYW1lID09PSAnZ2VvY2VudCcpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdHJhbnNmb3JtZWRBcnJheS56ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHJldHVybiBbdHJhbnNmb3JtZWRBcnJheS54LCB0cmFuc2Zvcm1lZEFycmF5LnksIHRyYW5zZm9ybWVkQXJyYXkuel0uY29uY2F0KGNvb3Jkcy5zcGxpY2UoMykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbdHJhbnNmb3JtZWRBcnJheS54LCB0cmFuc2Zvcm1lZEFycmF5LnksIGNvb3Jkc1syXV0uY29uY2F0KGNvb3Jkcy5zcGxpY2UoMykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW3RyYW5zZm9ybWVkQXJyYXkueCwgdHJhbnNmb3JtZWRBcnJheS55XS5jb25jYXQoY29vcmRzLnNwbGljZSgyKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbdHJhbnNmb3JtZWRBcnJheS54LCB0cmFuc2Zvcm1lZEFycmF5LnldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgPSB0cmFuc2Zvcm0oZnJvbSwgdG8sIGNvb3Jkcyk7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGNvb3Jkcyk7XG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAyKSB7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCh0eXBlb2YgZnJvbS5uYW1lICE9PSAndW5kZWZpbmVkJyAmJiBmcm9tLm5hbWUgPT09ICdnZW9jZW50JykgfHwgKHR5cGVvZiB0by5uYW1lICE9PSAndW5kZWZpbmVkJyAmJiB0by5uYW1lID09PSAnZ2VvY2VudCcpKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICd4JyB8fCBrZXkgPT09ICd5JyB8fCBrZXkgPT09ICd6Jykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ3gnIHx8IGtleSA9PT0gJ3knKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXRba2V5XSA9IGNvb3Jkc1trZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9qKGl0ZW0pIHtcbiAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBwcm9qKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cbiAgaWYgKGl0ZW0ub1Byb2opIHtcbiAgICByZXR1cm4gaXRlbS5vUHJvajtcbiAgfVxuICByZXR1cm4gcHJvaihpdGVtKTtcbn1cblxuZnVuY3Rpb24gcHJvajQoZnJvbVByb2osIHRvUHJvaiwgY29vcmQpIHtcbiAgZnJvbVByb2ogPSBjaGVja1Byb2ooZnJvbVByb2opO1xuICB2YXIgc2luZ2xlID0gZmFsc2U7XG4gIHZhciBvYmo7XG4gIGlmICh0eXBlb2YgdG9Qcm9qID09PSAndW5kZWZpbmVkJykge1xuICAgIHRvUHJvaiA9IGZyb21Qcm9qO1xuICAgIGZyb21Qcm9qID0gd2dzODQ7XG4gICAgc2luZ2xlID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdG9Qcm9qLnggIT09ICd1bmRlZmluZWQnIHx8IEFycmF5LmlzQXJyYXkodG9Qcm9qKSkge1xuICAgIGNvb3JkID0gdG9Qcm9qO1xuICAgIHRvUHJvaiA9IGZyb21Qcm9qO1xuICAgIGZyb21Qcm9qID0gd2dzODQ7XG4gICAgc2luZ2xlID0gdHJ1ZTtcbiAgfVxuICB0b1Byb2ogPSBjaGVja1Byb2oodG9Qcm9qKTtcbiAgaWYgKGNvb3JkKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyKGZyb21Qcm9qLCB0b1Byb2osIGNvb3JkKTtcbiAgfSBlbHNlIHtcbiAgICBvYmogPSB7XG4gICAgICBmb3J3YXJkOiBmdW5jdGlvbiAoY29vcmRzKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lcihmcm9tUHJvaiwgdG9Qcm9qLCBjb29yZHMpO1xuICAgICAgfSxcbiAgICAgIGludmVyc2U6IGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyKHRvUHJvaiwgZnJvbVByb2osIGNvb3Jkcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoc2luZ2xlKSB7XG4gICAgICBvYmoub1Byb2ogPSB0b1Byb2o7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHByb2o0OyIsIlxuXG5cbi8qKlxuICogVVRNIHpvbmVzIGFyZSBncm91cGVkLCBhbmQgYXNzaWduZWQgdG8gb25lIG9mIGEgZ3JvdXAgb2YgNlxuICogc2V0cy5cbiAqXG4gKiB7aW50fSBAcHJpdmF0ZVxuICovXG52YXIgTlVNXzEwMEtfU0VUUyA9IDY7XG5cbi8qKlxuICogVGhlIGNvbHVtbiBsZXR0ZXJzIChmb3IgZWFzdGluZykgb2YgdGhlIGxvd2VyIGxlZnQgdmFsdWUsIHBlclxuICogc2V0LlxuICpcbiAqIHtzdHJpbmd9IEBwcml2YXRlXG4gKi9cbnZhciBTRVRfT1JJR0lOX0NPTFVNTl9MRVRURVJTID0gJ0FKU0FKUyc7XG5cbi8qKlxuICogVGhlIHJvdyBsZXR0ZXJzIChmb3Igbm9ydGhpbmcpIG9mIHRoZSBsb3dlciBsZWZ0IHZhbHVlLCBwZXJcbiAqIHNldC5cbiAqXG4gKiB7c3RyaW5nfSBAcHJpdmF0ZVxuICovXG52YXIgU0VUX09SSUdJTl9ST1dfTEVUVEVSUyA9ICdBRkFGQUYnO1xuXG52YXIgQSA9IDY1OyAvLyBBXG52YXIgSSA9IDczOyAvLyBJXG52YXIgTyA9IDc5OyAvLyBPXG52YXIgViA9IDg2OyAvLyBWXG52YXIgWiA9IDkwOyAvLyBaXG5leHBvcnQgZGVmYXVsdCB7XG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIHRvUG9pbnQ6IHRvUG9pbnRcbn07XG4vKipcbiAqIENvbnZlcnNpb24gb2YgbGF0L2xvbiB0byBNR1JTLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBsbCBPYmplY3QgbGl0ZXJhbCB3aXRoIGxhdCBhbmQgbG9uIHByb3BlcnRpZXMgb24gYVxuICogICAgIFdHUzg0IGVsbGlwc29pZC5cbiAqIEBwYXJhbSB7aW50fSBhY2N1cmFjeSBBY2N1cmFjeSBpbiBkaWdpdHMgKDUgZm9yIDEgbSwgNCBmb3IgMTAgbSwgMyBmb3JcbiAqICAgICAgMTAwIG0sIDIgZm9yIDEwMDAgbSBvciAxIGZvciAxMDAwMCBtKS4gT3B0aW9uYWwsIGRlZmF1bHQgaXMgNS5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIE1HUlMgc3RyaW5nIGZvciB0aGUgZ2l2ZW4gbG9jYXRpb24gYW5kIGFjY3VyYWN5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChsbCwgYWNjdXJhY3kpIHtcbiAgYWNjdXJhY3kgPSBhY2N1cmFjeSB8fCA1OyAvLyBkZWZhdWx0IGFjY3VyYWN5IDFtXG4gIHJldHVybiBlbmNvZGUoTEx0b1VUTSh7XG4gICAgbGF0OiBsbFsxXSxcbiAgICBsb246IGxsWzBdXG4gIH0pLCBhY2N1cmFjeSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnNpb24gb2YgTUdSUyB0byBsYXQvbG9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZ3JzIE1HUlMgc3RyaW5nLlxuICogQHJldHVybiB7YXJyYXl9IEFuIGFycmF5IHdpdGggbGVmdCAobG9uZ2l0dWRlKSwgYm90dG9tIChsYXRpdHVkZSksIHJpZ2h0XG4gKiAgICAgKGxvbmdpdHVkZSkgYW5kIHRvcCAobGF0aXR1ZGUpIHZhbHVlcyBpbiBXR1M4NCwgcmVwcmVzZW50aW5nIHRoZVxuICogICAgIGJvdW5kaW5nIGJveCBmb3IgdGhlIHByb3ZpZGVkIE1HUlMgcmVmZXJlbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShtZ3JzKSB7XG4gIHZhciBiYm94ID0gVVRNdG9MTChkZWNvZGUobWdycy50b1VwcGVyQ2FzZSgpKSk7XG4gIGlmIChiYm94LmxhdCAmJiBiYm94Lmxvbikge1xuICAgIHJldHVybiBbYmJveC5sb24sIGJib3gubGF0LCBiYm94LmxvbiwgYmJveC5sYXRdO1xuICB9XG4gIHJldHVybiBbYmJveC5sZWZ0LCBiYm94LmJvdHRvbSwgYmJveC5yaWdodCwgYmJveC50b3BdO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvUG9pbnQobWdycykge1xuICB2YXIgYmJveCA9IFVUTXRvTEwoZGVjb2RlKG1ncnMudG9VcHBlckNhc2UoKSkpO1xuICBpZiAoYmJveC5sYXQgJiYgYmJveC5sb24pIHtcbiAgICByZXR1cm4gW2Jib3gubG9uLCBiYm94LmxhdF07XG4gIH1cbiAgcmV0dXJuIFsoYmJveC5sZWZ0ICsgYmJveC5yaWdodCkgLyAyLCAoYmJveC50b3AgKyBiYm94LmJvdHRvbSkgLyAyXTtcbn07XG4vKipcbiAqIENvbnZlcnNpb24gZnJvbSBkZWdyZWVzIHRvIHJhZGlhbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWcgdGhlIGFuZ2xlIGluIGRlZ3JlZXMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBhbmdsZSBpbiByYWRpYW5zLlxuICovXG5mdW5jdGlvbiBkZWdUb1JhZChkZWcpIHtcbiAgcmV0dXJuIChkZWcgKiAoTWF0aC5QSSAvIDE4MC4wKSk7XG59XG5cbi8qKlxuICogQ29udmVyc2lvbiBmcm9tIHJhZGlhbnMgdG8gZGVncmVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCB0aGUgYW5nbGUgaW4gcmFkaWFucy5cbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGFuZ2xlIGluIGRlZ3JlZXMuXG4gKi9cbmZ1bmN0aW9uIHJhZFRvRGVnKHJhZCkge1xuICByZXR1cm4gKDE4MC4wICogKHJhZCAvIE1hdGguUEkpKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHNldCBvZiBMb25naXR1ZGUgYW5kIExhdGl0dWRlIGNvLW9yZGluYXRlcyB0byBVVE1cbiAqIHVzaW5nIHRoZSBXR1M4NCBlbGxpcHNvaWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBsbCBPYmplY3QgbGl0ZXJhbCB3aXRoIGxhdCBhbmQgbG9uIHByb3BlcnRpZXNcbiAqICAgICByZXByZXNlbnRpbmcgdGhlIFdHUzg0IGNvb3JkaW5hdGUgdG8gYmUgY29udmVydGVkLlxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3QgbGl0ZXJhbCBjb250YWluaW5nIHRoZSBVVE0gdmFsdWUgd2l0aCBlYXN0aW5nLFxuICogICAgIG5vcnRoaW5nLCB6b25lTnVtYmVyIGFuZCB6b25lTGV0dGVyIHByb3BlcnRpZXMsIGFuZCBhbiBvcHRpb25hbFxuICogICAgIGFjY3VyYWN5IHByb3BlcnR5IGluIGRpZ2l0cy4gUmV0dXJucyBudWxsIGlmIHRoZSBjb252ZXJzaW9uIGZhaWxlZC5cbiAqL1xuZnVuY3Rpb24gTEx0b1VUTShsbCkge1xuICB2YXIgTGF0ID0gbGwubGF0O1xuICB2YXIgTG9uZyA9IGxsLmxvbjtcbiAgdmFyIGEgPSA2Mzc4MTM3LjA7IC8vZWxsaXAucmFkaXVzO1xuICB2YXIgZWNjU3F1YXJlZCA9IDAuMDA2Njk0Mzg7IC8vZWxsaXAuZWNjc3E7XG4gIHZhciBrMCA9IDAuOTk5NjtcbiAgdmFyIExvbmdPcmlnaW47XG4gIHZhciBlY2NQcmltZVNxdWFyZWQ7XG4gIHZhciBOLCBULCBDLCBBLCBNO1xuICB2YXIgTGF0UmFkID0gZGVnVG9SYWQoTGF0KTtcbiAgdmFyIExvbmdSYWQgPSBkZWdUb1JhZChMb25nKTtcbiAgdmFyIExvbmdPcmlnaW5SYWQ7XG4gIHZhciBab25lTnVtYmVyO1xuICAvLyAoaW50KVxuICBab25lTnVtYmVyID0gTWF0aC5mbG9vcigoTG9uZyArIDE4MCkgLyA2KSArIDE7XG5cbiAgLy9NYWtlIHN1cmUgdGhlIGxvbmdpdHVkZSAxODAuMDAgaXMgaW4gWm9uZSA2MFxuICBpZiAoTG9uZyA9PT0gMTgwKSB7XG4gICAgWm9uZU51bWJlciA9IDYwO1xuICB9XG5cbiAgLy8gU3BlY2lhbCB6b25lIGZvciBOb3J3YXlcbiAgaWYgKExhdCA+PSA1Ni4wICYmIExhdCA8IDY0LjAgJiYgTG9uZyA+PSAzLjAgJiYgTG9uZyA8IDEyLjApIHtcbiAgICBab25lTnVtYmVyID0gMzI7XG4gIH1cblxuICAvLyBTcGVjaWFsIHpvbmVzIGZvciBTdmFsYmFyZFxuICBpZiAoTGF0ID49IDcyLjAgJiYgTGF0IDwgODQuMCkge1xuICAgIGlmIChMb25nID49IDAuMCAmJiBMb25nIDwgOS4wKSB7XG4gICAgICBab25lTnVtYmVyID0gMzE7XG4gICAgfVxuICAgIGVsc2UgaWYgKExvbmcgPj0gOS4wICYmIExvbmcgPCAyMS4wKSB7XG4gICAgICBab25lTnVtYmVyID0gMzM7XG4gICAgfVxuICAgIGVsc2UgaWYgKExvbmcgPj0gMjEuMCAmJiBMb25nIDwgMzMuMCkge1xuICAgICAgWm9uZU51bWJlciA9IDM1O1xuICAgIH1cbiAgICBlbHNlIGlmIChMb25nID49IDMzLjAgJiYgTG9uZyA8IDQyLjApIHtcbiAgICAgIFpvbmVOdW1iZXIgPSAzNztcbiAgICB9XG4gIH1cblxuICBMb25nT3JpZ2luID0gKFpvbmVOdW1iZXIgLSAxKSAqIDYgLSAxODAgKyAzOyAvLyszIHB1dHMgb3JpZ2luXG4gIC8vIGluIG1pZGRsZSBvZlxuICAvLyB6b25lXG4gIExvbmdPcmlnaW5SYWQgPSBkZWdUb1JhZChMb25nT3JpZ2luKTtcblxuICBlY2NQcmltZVNxdWFyZWQgPSAoZWNjU3F1YXJlZCkgLyAoMSAtIGVjY1NxdWFyZWQpO1xuXG4gIE4gPSBhIC8gTWF0aC5zcXJ0KDEgLSBlY2NTcXVhcmVkICogTWF0aC5zaW4oTGF0UmFkKSAqIE1hdGguc2luKExhdFJhZCkpO1xuICBUID0gTWF0aC50YW4oTGF0UmFkKSAqIE1hdGgudGFuKExhdFJhZCk7XG4gIEMgPSBlY2NQcmltZVNxdWFyZWQgKiBNYXRoLmNvcyhMYXRSYWQpICogTWF0aC5jb3MoTGF0UmFkKTtcbiAgQSA9IE1hdGguY29zKExhdFJhZCkgKiAoTG9uZ1JhZCAtIExvbmdPcmlnaW5SYWQpO1xuXG4gIE0gPSBhICogKCgxIC0gZWNjU3F1YXJlZCAvIDQgLSAzICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyA2NCAtIDUgKiBlY2NTcXVhcmVkICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyAyNTYpICogTGF0UmFkIC0gKDMgKiBlY2NTcXVhcmVkIC8gOCArIDMgKiBlY2NTcXVhcmVkICogZWNjU3F1YXJlZCAvIDMyICsgNDUgKiBlY2NTcXVhcmVkICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyAxMDI0KSAqIE1hdGguc2luKDIgKiBMYXRSYWQpICsgKDE1ICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyAyNTYgKyA0NSAqIGVjY1NxdWFyZWQgKiBlY2NTcXVhcmVkICogZWNjU3F1YXJlZCAvIDEwMjQpICogTWF0aC5zaW4oNCAqIExhdFJhZCkgLSAoMzUgKiBlY2NTcXVhcmVkICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyAzMDcyKSAqIE1hdGguc2luKDYgKiBMYXRSYWQpKTtcblxuICB2YXIgVVRNRWFzdGluZyA9IChrMCAqIE4gKiAoQSArICgxIC0gVCArIEMpICogQSAqIEEgKiBBIC8gNi4wICsgKDUgLSAxOCAqIFQgKyBUICogVCArIDcyICogQyAtIDU4ICogZWNjUHJpbWVTcXVhcmVkKSAqIEEgKiBBICogQSAqIEEgKiBBIC8gMTIwLjApICsgNTAwMDAwLjApO1xuXG4gIHZhciBVVE1Ob3J0aGluZyA9IChrMCAqIChNICsgTiAqIE1hdGgudGFuKExhdFJhZCkgKiAoQSAqIEEgLyAyICsgKDUgLSBUICsgOSAqIEMgKyA0ICogQyAqIEMpICogQSAqIEEgKiBBICogQSAvIDI0LjAgKyAoNjEgLSA1OCAqIFQgKyBUICogVCArIDYwMCAqIEMgLSAzMzAgKiBlY2NQcmltZVNxdWFyZWQpICogQSAqIEEgKiBBICogQSAqIEEgKiBBIC8gNzIwLjApKSk7XG4gIGlmIChMYXQgPCAwLjApIHtcbiAgICBVVE1Ob3J0aGluZyArPSAxMDAwMDAwMC4wOyAvLzEwMDAwMDAwIG1ldGVyIG9mZnNldCBmb3JcbiAgICAvLyBzb3V0aGVybiBoZW1pc3BoZXJlXG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5vcnRoaW5nOiBNYXRoLnJvdW5kKFVUTU5vcnRoaW5nKSxcbiAgICBlYXN0aW5nOiBNYXRoLnJvdW5kKFVUTUVhc3RpbmcpLFxuICAgIHpvbmVOdW1iZXI6IFpvbmVOdW1iZXIsXG4gICAgem9uZUxldHRlcjogZ2V0TGV0dGVyRGVzaWduYXRvcihMYXQpXG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgVVRNIGNvb3JkcyB0byBsYXQvbG9uZywgdXNpbmcgdGhlIFdHUzg0IGVsbGlwc29pZC4gVGhpcyBpcyBhIGNvbnZlbmllbmNlXG4gKiBjbGFzcyB3aGVyZSB0aGUgWm9uZSBjYW4gYmUgc3BlY2lmaWVkIGFzIGEgc2luZ2xlIHN0cmluZyBlZy5cIjYwTlwiIHdoaWNoXG4gKiBpcyB0aGVuIGJyb2tlbiBkb3duIGludG8gdGhlIFpvbmVOdW1iZXIgYW5kIFpvbmVMZXR0ZXIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB1dG0gQW4gb2JqZWN0IGxpdGVyYWwgd2l0aCBub3J0aGluZywgZWFzdGluZywgem9uZU51bWJlclxuICogICAgIGFuZCB6b25lTGV0dGVyIHByb3BlcnRpZXMuIElmIGFuIG9wdGlvbmFsIGFjY3VyYWN5IHByb3BlcnR5IGlzXG4gKiAgICAgcHJvdmlkZWQgKGluIG1ldGVycyksIGEgYm91bmRpbmcgYm94IHdpbGwgYmUgcmV0dXJuZWQgaW5zdGVhZCBvZlxuICogICAgIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCBsaXRlcmFsIGNvbnRhaW5pbmcgZWl0aGVyIGxhdCBhbmQgbG9uIHZhbHVlc1xuICogICAgIChpZiBubyBhY2N1cmFjeSB3YXMgcHJvdmlkZWQpLCBvciB0b3AsIHJpZ2h0LCBib3R0b20gYW5kIGxlZnQgdmFsdWVzXG4gKiAgICAgZm9yIHRoZSBib3VuZGluZyBib3ggY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIHByb3ZpZGVkIGFjY3VyYWN5LlxuICogICAgIFJldHVybnMgbnVsbCBpZiB0aGUgY29udmVyc2lvbiBmYWlsZWQuXG4gKi9cbmZ1bmN0aW9uIFVUTXRvTEwodXRtKSB7XG5cbiAgdmFyIFVUTU5vcnRoaW5nID0gdXRtLm5vcnRoaW5nO1xuICB2YXIgVVRNRWFzdGluZyA9IHV0bS5lYXN0aW5nO1xuICB2YXIgem9uZUxldHRlciA9IHV0bS56b25lTGV0dGVyO1xuICB2YXIgem9uZU51bWJlciA9IHV0bS56b25lTnVtYmVyO1xuICAvLyBjaGVjayB0aGUgWm9uZU51bW1iZXIgaXMgdmFsaWRcbiAgaWYgKHpvbmVOdW1iZXIgPCAwIHx8IHpvbmVOdW1iZXIgPiA2MCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGswID0gMC45OTk2O1xuICB2YXIgYSA9IDYzNzgxMzcuMDsgLy9lbGxpcC5yYWRpdXM7XG4gIHZhciBlY2NTcXVhcmVkID0gMC4wMDY2OTQzODsgLy9lbGxpcC5lY2NzcTtcbiAgdmFyIGVjY1ByaW1lU3F1YXJlZDtcbiAgdmFyIGUxID0gKDEgLSBNYXRoLnNxcnQoMSAtIGVjY1NxdWFyZWQpKSAvICgxICsgTWF0aC5zcXJ0KDEgLSBlY2NTcXVhcmVkKSk7XG4gIHZhciBOMSwgVDEsIEMxLCBSMSwgRCwgTTtcbiAgdmFyIExvbmdPcmlnaW47XG4gIHZhciBtdSwgcGhpMVJhZDtcblxuICAvLyByZW1vdmUgNTAwLDAwMCBtZXRlciBvZmZzZXQgZm9yIGxvbmdpdHVkZVxuICB2YXIgeCA9IFVUTUVhc3RpbmcgLSA1MDAwMDAuMDtcbiAgdmFyIHkgPSBVVE1Ob3J0aGluZztcblxuICAvLyBXZSBtdXN0IGtub3cgc29tZWhvdyBpZiB3ZSBhcmUgaW4gdGhlIE5vcnRoZXJuIG9yIFNvdXRoZXJuXG4gIC8vIGhlbWlzcGhlcmUsIHRoaXMgaXMgdGhlIG9ubHkgdGltZSB3ZSB1c2UgdGhlIGxldHRlciBTbyBldmVuXG4gIC8vIGlmIHRoZSBab25lIGxldHRlciBpc24ndCBleGFjdGx5IGNvcnJlY3QgaXQgc2hvdWxkIGluZGljYXRlXG4gIC8vIHRoZSBoZW1pc3BoZXJlIGNvcnJlY3RseVxuICBpZiAoem9uZUxldHRlciA8ICdOJykge1xuICAgIHkgLT0gMTAwMDAwMDAuMDsgLy8gcmVtb3ZlIDEwLDAwMCwwMDAgbWV0ZXIgb2Zmc2V0IHVzZWRcbiAgICAvLyBmb3Igc291dGhlcm4gaGVtaXNwaGVyZVxuICB9XG5cbiAgLy8gVGhlcmUgYXJlIDYwIHpvbmVzIHdpdGggem9uZSAxIGJlaW5nIGF0IFdlc3QgLTE4MCB0byAtMTc0XG4gIExvbmdPcmlnaW4gPSAoem9uZU51bWJlciAtIDEpICogNiAtIDE4MCArIDM7IC8vICszIHB1dHMgb3JpZ2luXG4gIC8vIGluIG1pZGRsZSBvZlxuICAvLyB6b25lXG5cbiAgZWNjUHJpbWVTcXVhcmVkID0gKGVjY1NxdWFyZWQpIC8gKDEgLSBlY2NTcXVhcmVkKTtcblxuICBNID0geSAvIGswO1xuICBtdSA9IE0gLyAoYSAqICgxIC0gZWNjU3F1YXJlZCAvIDQgLSAzICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyA2NCAtIDUgKiBlY2NTcXVhcmVkICogZWNjU3F1YXJlZCAqIGVjY1NxdWFyZWQgLyAyNTYpKTtcblxuICBwaGkxUmFkID0gbXUgKyAoMyAqIGUxIC8gMiAtIDI3ICogZTEgKiBlMSAqIGUxIC8gMzIpICogTWF0aC5zaW4oMiAqIG11KSArICgyMSAqIGUxICogZTEgLyAxNiAtIDU1ICogZTEgKiBlMSAqIGUxICogZTEgLyAzMikgKiBNYXRoLnNpbig0ICogbXUpICsgKDE1MSAqIGUxICogZTEgKiBlMSAvIDk2KSAqIE1hdGguc2luKDYgKiBtdSk7XG4gIC8vIGRvdWJsZSBwaGkxID0gUHJvak1hdGgucmFkVG9EZWcocGhpMVJhZCk7XG5cbiAgTjEgPSBhIC8gTWF0aC5zcXJ0KDEgLSBlY2NTcXVhcmVkICogTWF0aC5zaW4ocGhpMVJhZCkgKiBNYXRoLnNpbihwaGkxUmFkKSk7XG4gIFQxID0gTWF0aC50YW4ocGhpMVJhZCkgKiBNYXRoLnRhbihwaGkxUmFkKTtcbiAgQzEgPSBlY2NQcmltZVNxdWFyZWQgKiBNYXRoLmNvcyhwaGkxUmFkKSAqIE1hdGguY29zKHBoaTFSYWQpO1xuICBSMSA9IGEgKiAoMSAtIGVjY1NxdWFyZWQpIC8gTWF0aC5wb3coMSAtIGVjY1NxdWFyZWQgKiBNYXRoLnNpbihwaGkxUmFkKSAqIE1hdGguc2luKHBoaTFSYWQpLCAxLjUpO1xuICBEID0geCAvIChOMSAqIGswKTtcblxuICB2YXIgbGF0ID0gcGhpMVJhZCAtIChOMSAqIE1hdGgudGFuKHBoaTFSYWQpIC8gUjEpICogKEQgKiBEIC8gMiAtICg1ICsgMyAqIFQxICsgMTAgKiBDMSAtIDQgKiBDMSAqIEMxIC0gOSAqIGVjY1ByaW1lU3F1YXJlZCkgKiBEICogRCAqIEQgKiBEIC8gMjQgKyAoNjEgKyA5MCAqIFQxICsgMjk4ICogQzEgKyA0NSAqIFQxICogVDEgLSAyNTIgKiBlY2NQcmltZVNxdWFyZWQgLSAzICogQzEgKiBDMSkgKiBEICogRCAqIEQgKiBEICogRCAqIEQgLyA3MjApO1xuICBsYXQgPSByYWRUb0RlZyhsYXQpO1xuXG4gIHZhciBsb24gPSAoRCAtICgxICsgMiAqIFQxICsgQzEpICogRCAqIEQgKiBEIC8gNiArICg1IC0gMiAqIEMxICsgMjggKiBUMSAtIDMgKiBDMSAqIEMxICsgOCAqIGVjY1ByaW1lU3F1YXJlZCArIDI0ICogVDEgKiBUMSkgKiBEICogRCAqIEQgKiBEICogRCAvIDEyMCkgLyBNYXRoLmNvcyhwaGkxUmFkKTtcbiAgbG9uID0gTG9uZ09yaWdpbiArIHJhZFRvRGVnKGxvbik7XG5cbiAgdmFyIHJlc3VsdDtcbiAgaWYgKHV0bS5hY2N1cmFjeSkge1xuICAgIHZhciB0b3BSaWdodCA9IFVUTXRvTEwoe1xuICAgICAgbm9ydGhpbmc6IHV0bS5ub3J0aGluZyArIHV0bS5hY2N1cmFjeSxcbiAgICAgIGVhc3Rpbmc6IHV0bS5lYXN0aW5nICsgdXRtLmFjY3VyYWN5LFxuICAgICAgem9uZUxldHRlcjogdXRtLnpvbmVMZXR0ZXIsXG4gICAgICB6b25lTnVtYmVyOiB1dG0uem9uZU51bWJlclxuICAgIH0pO1xuICAgIHJlc3VsdCA9IHtcbiAgICAgIHRvcDogdG9wUmlnaHQubGF0LFxuICAgICAgcmlnaHQ6IHRvcFJpZ2h0LmxvbixcbiAgICAgIGJvdHRvbTogbGF0LFxuICAgICAgbGVmdDogbG9uXG4gICAgfTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXN1bHQgPSB7XG4gICAgICBsYXQ6IGxhdCxcbiAgICAgIGxvbjogbG9uXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIE1HUlMgbGV0dGVyIGRlc2lnbmF0b3IgZm9yIHRoZSBnaXZlbiBsYXRpdHVkZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxhdCBUaGUgbGF0aXR1ZGUgaW4gV0dTODQgdG8gZ2V0IHRoZSBsZXR0ZXIgZGVzaWduYXRvclxuICogICAgIGZvci5cbiAqIEByZXR1cm4ge2NoYXJ9IFRoZSBsZXR0ZXIgZGVzaWduYXRvci5cbiAqL1xuZnVuY3Rpb24gZ2V0TGV0dGVyRGVzaWduYXRvcihsYXQpIHtcbiAgLy9UaGlzIGlzIGhlcmUgYXMgYW4gZXJyb3IgZmxhZyB0byBzaG93IHRoYXQgdGhlIExhdGl0dWRlIGlzXG4gIC8vb3V0c2lkZSBNR1JTIGxpbWl0c1xuICB2YXIgTGV0dGVyRGVzaWduYXRvciA9ICdaJztcblxuICBpZiAoKDg0ID49IGxhdCkgJiYgKGxhdCA+PSA3MikpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1gnO1xuICB9XG4gIGVsc2UgaWYgKCg3MiA+IGxhdCkgJiYgKGxhdCA+PSA2NCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1cnO1xuICB9XG4gIGVsc2UgaWYgKCg2NCA+IGxhdCkgJiYgKGxhdCA+PSA1NikpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1YnO1xuICB9XG4gIGVsc2UgaWYgKCg1NiA+IGxhdCkgJiYgKGxhdCA+PSA0OCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1UnO1xuICB9XG4gIGVsc2UgaWYgKCg0OCA+IGxhdCkgJiYgKGxhdCA+PSA0MCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1QnO1xuICB9XG4gIGVsc2UgaWYgKCg0MCA+IGxhdCkgJiYgKGxhdCA+PSAzMikpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1MnO1xuICB9XG4gIGVsc2UgaWYgKCgzMiA+IGxhdCkgJiYgKGxhdCA+PSAyNCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1InO1xuICB9XG4gIGVsc2UgaWYgKCgyNCA+IGxhdCkgJiYgKGxhdCA+PSAxNikpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ1EnO1xuICB9XG4gIGVsc2UgaWYgKCgxNiA+IGxhdCkgJiYgKGxhdCA+PSA4KSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnUCc7XG4gIH1cbiAgZWxzZSBpZiAoKDggPiBsYXQpICYmIChsYXQgPj0gMCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ04nO1xuICB9XG4gIGVsc2UgaWYgKCgwID4gbGF0KSAmJiAobGF0ID49IC04KSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnTSc7XG4gIH1cbiAgZWxzZSBpZiAoKC04ID4gbGF0KSAmJiAobGF0ID49IC0xNikpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ0wnO1xuICB9XG4gIGVsc2UgaWYgKCgtMTYgPiBsYXQpICYmIChsYXQgPj0gLTI0KSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnSyc7XG4gIH1cbiAgZWxzZSBpZiAoKC0yNCA+IGxhdCkgJiYgKGxhdCA+PSAtMzIpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdKJztcbiAgfVxuICBlbHNlIGlmICgoLTMyID4gbGF0KSAmJiAobGF0ID49IC00MCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ0gnO1xuICB9XG4gIGVsc2UgaWYgKCgtNDAgPiBsYXQpICYmIChsYXQgPj0gLTQ4KSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnRyc7XG4gIH1cbiAgZWxzZSBpZiAoKC00OCA+IGxhdCkgJiYgKGxhdCA+PSAtNTYpKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdGJztcbiAgfVxuICBlbHNlIGlmICgoLTU2ID4gbGF0KSAmJiAobGF0ID49IC02NCkpIHtcbiAgICBMZXR0ZXJEZXNpZ25hdG9yID0gJ0UnO1xuICB9XG4gIGVsc2UgaWYgKCgtNjQgPiBsYXQpICYmIChsYXQgPj0gLTcyKSkge1xuICAgIExldHRlckRlc2lnbmF0b3IgPSAnRCc7XG4gIH1cbiAgZWxzZSBpZiAoKC03MiA+IGxhdCkgJiYgKGxhdCA+PSAtODApKSB7XG4gICAgTGV0dGVyRGVzaWduYXRvciA9ICdDJztcbiAgfVxuICByZXR1cm4gTGV0dGVyRGVzaWduYXRvcjtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgVVRNIGxvY2F0aW9uIGFzIE1HUlMgc3RyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gdXRtIEFuIG9iamVjdCBsaXRlcmFsIHdpdGggZWFzdGluZywgbm9ydGhpbmcsXG4gKiAgICAgem9uZUxldHRlciwgem9uZU51bWJlclxuICogQHBhcmFtIHtudW1iZXJ9IGFjY3VyYWN5IEFjY3VyYWN5IGluIGRpZ2l0cyAoMS01KS5cbiAqIEByZXR1cm4ge3N0cmluZ30gTUdSUyBzdHJpbmcgZm9yIHRoZSBnaXZlbiBVVE0gbG9jYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSh1dG0sIGFjY3VyYWN5KSB7XG4gIC8vIHByZXBlbmQgd2l0aCBsZWFkaW5nIHplcm9lc1xuICB2YXIgc2Vhc3RpbmcgPSBcIjAwMDAwXCIgKyB1dG0uZWFzdGluZyxcbiAgICBzbm9ydGhpbmcgPSBcIjAwMDAwXCIgKyB1dG0ubm9ydGhpbmc7XG5cbiAgcmV0dXJuIHV0bS56b25lTnVtYmVyICsgdXRtLnpvbmVMZXR0ZXIgKyBnZXQxMDBrSUQodXRtLmVhc3RpbmcsIHV0bS5ub3J0aGluZywgdXRtLnpvbmVOdW1iZXIpICsgc2Vhc3Rpbmcuc3Vic3RyKHNlYXN0aW5nLmxlbmd0aCAtIDUsIGFjY3VyYWN5KSArIHNub3J0aGluZy5zdWJzdHIoc25vcnRoaW5nLmxlbmd0aCAtIDUsIGFjY3VyYWN5KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHR3byBsZXR0ZXIgMTAwayBkZXNpZ25hdG9yIGZvciBhIGdpdmVuIFVUTSBlYXN0aW5nLFxuICogbm9ydGhpbmcgYW5kIHpvbmUgbnVtYmVyIHZhbHVlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gZWFzdGluZ1xuICogQHBhcmFtIHtudW1iZXJ9IG5vcnRoaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gem9uZU51bWJlclxuICogQHJldHVybiB0aGUgdHdvIGxldHRlciAxMDBrIGRlc2lnbmF0b3IgZm9yIHRoZSBnaXZlbiBVVE0gbG9jYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldDEwMGtJRChlYXN0aW5nLCBub3J0aGluZywgem9uZU51bWJlcikge1xuICB2YXIgc2V0UGFybSA9IGdldDEwMGtTZXRGb3Jab25lKHpvbmVOdW1iZXIpO1xuICB2YXIgc2V0Q29sdW1uID0gTWF0aC5mbG9vcihlYXN0aW5nIC8gMTAwMDAwKTtcbiAgdmFyIHNldFJvdyA9IE1hdGguZmxvb3Iobm9ydGhpbmcgLyAxMDAwMDApICUgMjA7XG4gIHJldHVybiBnZXRMZXR0ZXIxMDBrSUQoc2V0Q29sdW1uLCBzZXRSb3csIHNldFBhcm0pO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgVVRNIHpvbmUgbnVtYmVyLCBmaWd1cmUgb3V0IHRoZSBNR1JTIDEwMEsgc2V0IGl0IGlzIGluLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gaSBBbiBVVE0gem9uZSBudW1iZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSAxMDBrIHNldCB0aGUgVVRNIHpvbmUgaXMgaW4uXG4gKi9cbmZ1bmN0aW9uIGdldDEwMGtTZXRGb3Jab25lKGkpIHtcbiAgdmFyIHNldFBhcm0gPSBpICUgTlVNXzEwMEtfU0VUUztcbiAgaWYgKHNldFBhcm0gPT09IDApIHtcbiAgICBzZXRQYXJtID0gTlVNXzEwMEtfU0VUUztcbiAgfVxuXG4gIHJldHVybiBzZXRQYXJtO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdHdvLWxldHRlciBNR1JTIDEwMGsgZGVzaWduYXRvciBnaXZlbiBpbmZvcm1hdGlvblxuICogdHJhbnNsYXRlZCBmcm9tIHRoZSBVVE0gbm9ydGhpbmcsIGVhc3RpbmcgYW5kIHpvbmUgbnVtYmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gY29sdW1uIHRoZSBjb2x1bW4gaW5kZXggYXMgaXQgcmVsYXRlcyB0byB0aGUgTUdSU1xuICogICAgICAgIDEwMGsgc2V0IHNwcmVhZHNoZWV0LCBjcmVhdGVkIGZyb20gdGhlIFVUTSBlYXN0aW5nLlxuICogICAgICAgIFZhbHVlcyBhcmUgMS04LlxuICogQHBhcmFtIHtudW1iZXJ9IHJvdyB0aGUgcm93IGluZGV4IGFzIGl0IHJlbGF0ZXMgdG8gdGhlIE1HUlMgMTAwayBzZXRcbiAqICAgICAgICBzcHJlYWRzaGVldCwgY3JlYXRlZCBmcm9tIHRoZSBVVE0gbm9ydGhpbmcgdmFsdWUuIFZhbHVlc1xuICogICAgICAgIGFyZSBmcm9tIDAtMTkuXG4gKiBAcGFyYW0ge251bWJlcn0gcGFybSB0aGUgc2V0IGJsb2NrLCBhcyBpdCByZWxhdGVzIHRvIHRoZSBNR1JTIDEwMGsgc2V0XG4gKiAgICAgICAgc3ByZWFkc2hlZXQsIGNyZWF0ZWQgZnJvbSB0aGUgVVRNIHpvbmUuIFZhbHVlcyBhcmUgZnJvbVxuICogICAgICAgIDEtNjAuXG4gKiBAcmV0dXJuIHR3byBsZXR0ZXIgTUdSUyAxMDBrIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdldExldHRlcjEwMGtJRChjb2x1bW4sIHJvdywgcGFybSkge1xuICAvLyBjb2xPcmlnaW4gYW5kIHJvd09yaWdpbiBhcmUgdGhlIGxldHRlcnMgYXQgdGhlIG9yaWdpbiBvZiB0aGUgc2V0XG4gIHZhciBpbmRleCA9IHBhcm0gLSAxO1xuICB2YXIgY29sT3JpZ2luID0gU0VUX09SSUdJTl9DT0xVTU5fTEVUVEVSUy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgdmFyIHJvd09yaWdpbiA9IFNFVF9PUklHSU5fUk9XX0xFVFRFUlMuY2hhckNvZGVBdChpbmRleCk7XG5cbiAgLy8gY29sSW50IGFuZCByb3dJbnQgYXJlIHRoZSBsZXR0ZXJzIHRvIGJ1aWxkIHRvIHJldHVyblxuICB2YXIgY29sSW50ID0gY29sT3JpZ2luICsgY29sdW1uIC0gMTtcbiAgdmFyIHJvd0ludCA9IHJvd09yaWdpbiArIHJvdztcbiAgdmFyIHJvbGxvdmVyID0gZmFsc2U7XG5cbiAgaWYgKGNvbEludCA+IFopIHtcbiAgICBjb2xJbnQgPSBjb2xJbnQgLSBaICsgQSAtIDE7XG4gICAgcm9sbG92ZXIgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGNvbEludCA9PT0gSSB8fCAoY29sT3JpZ2luIDwgSSAmJiBjb2xJbnQgPiBJKSB8fCAoKGNvbEludCA+IEkgfHwgY29sT3JpZ2luIDwgSSkgJiYgcm9sbG92ZXIpKSB7XG4gICAgY29sSW50Kys7XG4gIH1cblxuICBpZiAoY29sSW50ID09PSBPIHx8IChjb2xPcmlnaW4gPCBPICYmIGNvbEludCA+IE8pIHx8ICgoY29sSW50ID4gTyB8fCBjb2xPcmlnaW4gPCBPKSAmJiByb2xsb3ZlcikpIHtcbiAgICBjb2xJbnQrKztcblxuICAgIGlmIChjb2xJbnQgPT09IEkpIHtcbiAgICAgIGNvbEludCsrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb2xJbnQgPiBaKSB7XG4gICAgY29sSW50ID0gY29sSW50IC0gWiArIEEgLSAxO1xuICB9XG5cbiAgaWYgKHJvd0ludCA+IFYpIHtcbiAgICByb3dJbnQgPSByb3dJbnQgLSBWICsgQSAtIDE7XG4gICAgcm9sbG92ZXIgPSB0cnVlO1xuICB9XG4gIGVsc2Uge1xuICAgIHJvbGxvdmVyID0gZmFsc2U7XG4gIH1cblxuICBpZiAoKChyb3dJbnQgPT09IEkpIHx8ICgocm93T3JpZ2luIDwgSSkgJiYgKHJvd0ludCA+IEkpKSkgfHwgKCgocm93SW50ID4gSSkgfHwgKHJvd09yaWdpbiA8IEkpKSAmJiByb2xsb3ZlcikpIHtcbiAgICByb3dJbnQrKztcbiAgfVxuXG4gIGlmICgoKHJvd0ludCA9PT0gTykgfHwgKChyb3dPcmlnaW4gPCBPKSAmJiAocm93SW50ID4gTykpKSB8fCAoKChyb3dJbnQgPiBPKSB8fCAocm93T3JpZ2luIDwgTykpICYmIHJvbGxvdmVyKSkge1xuICAgIHJvd0ludCsrO1xuXG4gICAgaWYgKHJvd0ludCA9PT0gSSkge1xuICAgICAgcm93SW50Kys7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJvd0ludCA+IFYpIHtcbiAgICByb3dJbnQgPSByb3dJbnQgLSBWICsgQSAtIDE7XG4gIH1cblxuICB2YXIgdHdvTGV0dGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2xJbnQpICsgU3RyaW5nLmZyb21DaGFyQ29kZShyb3dJbnQpO1xuICByZXR1cm4gdHdvTGV0dGVyO1xufVxuXG4vKipcbiAqIERlY29kZSB0aGUgVVRNIHBhcmFtZXRlcnMgZnJvbSBhIE1HUlMgc3RyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWdyc1N0cmluZyBhbiBVUFBFUkNBU0UgY29vcmRpbmF0ZSBzdHJpbmcgaXMgZXhwZWN0ZWQuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCBsaXRlcmFsIHdpdGggZWFzdGluZywgbm9ydGhpbmcsIHpvbmVMZXR0ZXIsXG4gKiAgICAgem9uZU51bWJlciBhbmQgYWNjdXJhY3kgKGluIG1ldGVycykgcHJvcGVydGllcy5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlKG1ncnNTdHJpbmcpIHtcblxuICBpZiAobWdyc1N0cmluZyAmJiBtZ3JzU3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IChcIk1HUlNQb2ludCBjb3ZlcnRpbmcgZnJvbSBub3RoaW5nXCIpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IG1ncnNTdHJpbmcubGVuZ3RoO1xuXG4gIHZhciBodW5LID0gbnVsbDtcbiAgdmFyIHNiID0gXCJcIjtcbiAgdmFyIHRlc3RDaGFyO1xuICB2YXIgaSA9IDA7XG5cbiAgLy8gZ2V0IFpvbmUgbnVtYmVyXG4gIHdoaWxlICghKC9bQS1aXS8pLnRlc3QodGVzdENoYXIgPSBtZ3JzU3RyaW5nLmNoYXJBdChpKSkpIHtcbiAgICBpZiAoaSA+PSAyKSB7XG4gICAgICB0aHJvdyAoXCJNR1JTUG9pbnQgYmFkIGNvbnZlcnNpb24gZnJvbTogXCIgKyBtZ3JzU3RyaW5nKTtcbiAgICB9XG4gICAgc2IgKz0gdGVzdENoYXI7XG4gICAgaSsrO1xuICB9XG5cbiAgdmFyIHpvbmVOdW1iZXIgPSBwYXJzZUludChzYiwgMTApO1xuXG4gIGlmIChpID09PSAwIHx8IGkgKyAzID4gbGVuZ3RoKSB7XG4gICAgLy8gQSBnb29kIE1HUlMgc3RyaW5nIGhhcyB0byBiZSA0LTUgZGlnaXRzIGxvbmcsXG4gICAgLy8gIyNBQUEvI0FBQSBhdCBsZWFzdC5cbiAgICB0aHJvdyAoXCJNR1JTUG9pbnQgYmFkIGNvbnZlcnNpb24gZnJvbTogXCIgKyBtZ3JzU3RyaW5nKTtcbiAgfVxuXG4gIHZhciB6b25lTGV0dGVyID0gbWdyc1N0cmluZy5jaGFyQXQoaSsrKTtcblxuICAvLyBTaG91bGQgd2UgY2hlY2sgdGhlIHpvbmUgbGV0dGVyIGhlcmU/IFdoeSBub3QuXG4gIGlmICh6b25lTGV0dGVyIDw9ICdBJyB8fCB6b25lTGV0dGVyID09PSAnQicgfHwgem9uZUxldHRlciA9PT0gJ1knIHx8IHpvbmVMZXR0ZXIgPj0gJ1onIHx8IHpvbmVMZXR0ZXIgPT09ICdJJyB8fCB6b25lTGV0dGVyID09PSAnTycpIHtcbiAgICB0aHJvdyAoXCJNR1JTUG9pbnQgem9uZSBsZXR0ZXIgXCIgKyB6b25lTGV0dGVyICsgXCIgbm90IGhhbmRsZWQ6IFwiICsgbWdyc1N0cmluZyk7XG4gIH1cblxuICBodW5LID0gbWdyc1N0cmluZy5zdWJzdHJpbmcoaSwgaSArPSAyKTtcblxuICB2YXIgc2V0ID0gZ2V0MTAwa1NldEZvclpvbmUoem9uZU51bWJlcik7XG5cbiAgdmFyIGVhc3QxMDBrID0gZ2V0RWFzdGluZ0Zyb21DaGFyKGh1bksuY2hhckF0KDApLCBzZXQpO1xuICB2YXIgbm9ydGgxMDBrID0gZ2V0Tm9ydGhpbmdGcm9tQ2hhcihodW5LLmNoYXJBdCgxKSwgc2V0KTtcblxuICAvLyBXZSBoYXZlIGEgYnVnIHdoZXJlIHRoZSBub3J0aGluZyBtYXkgYmUgMjAwMDAwMCB0b28gbG93LlxuICAvLyBIb3dcbiAgLy8gZG8gd2Uga25vdyB3aGVuIHRvIHJvbGwgb3Zlcj9cblxuICB3aGlsZSAobm9ydGgxMDBrIDwgZ2V0TWluTm9ydGhpbmcoem9uZUxldHRlcikpIHtcbiAgICBub3J0aDEwMGsgKz0gMjAwMDAwMDtcbiAgfVxuXG4gIC8vIGNhbGN1bGF0ZSB0aGUgY2hhciBpbmRleCBmb3IgZWFzdGluZy9ub3J0aGluZyBzZXBhcmF0b3JcbiAgdmFyIHJlbWFpbmRlciA9IGxlbmd0aCAtIGk7XG5cbiAgaWYgKHJlbWFpbmRlciAlIDIgIT09IDApIHtcbiAgICB0aHJvdyAoXCJNR1JTUG9pbnQgaGFzIHRvIGhhdmUgYW4gZXZlbiBudW1iZXIgXFxub2YgZGlnaXRzIGFmdGVyIHRoZSB6b25lIGxldHRlciBhbmQgdHdvIDEwMGttIGxldHRlcnMgLSBmcm9udCBcXG5oYWxmIGZvciBlYXN0aW5nIG1ldGVycywgc2Vjb25kIGhhbGYgZm9yIFxcbm5vcnRoaW5nIG1ldGVyc1wiICsgbWdyc1N0cmluZyk7XG4gIH1cblxuICB2YXIgc2VwID0gcmVtYWluZGVyIC8gMjtcblxuICB2YXIgc2VwRWFzdGluZyA9IDAuMDtcbiAgdmFyIHNlcE5vcnRoaW5nID0gMC4wO1xuICB2YXIgYWNjdXJhY3lCb251cywgc2VwRWFzdGluZ1N0cmluZywgc2VwTm9ydGhpbmdTdHJpbmcsIGVhc3RpbmcsIG5vcnRoaW5nO1xuICBpZiAoc2VwID4gMCkge1xuICAgIGFjY3VyYWN5Qm9udXMgPSAxMDAwMDAuMCAvIE1hdGgucG93KDEwLCBzZXApO1xuICAgIHNlcEVhc3RpbmdTdHJpbmcgPSBtZ3JzU3RyaW5nLnN1YnN0cmluZyhpLCBpICsgc2VwKTtcbiAgICBzZXBFYXN0aW5nID0gcGFyc2VGbG9hdChzZXBFYXN0aW5nU3RyaW5nKSAqIGFjY3VyYWN5Qm9udXM7XG4gICAgc2VwTm9ydGhpbmdTdHJpbmcgPSBtZ3JzU3RyaW5nLnN1YnN0cmluZyhpICsgc2VwKTtcbiAgICBzZXBOb3J0aGluZyA9IHBhcnNlRmxvYXQoc2VwTm9ydGhpbmdTdHJpbmcpICogYWNjdXJhY3lCb251cztcbiAgfVxuXG4gIGVhc3RpbmcgPSBzZXBFYXN0aW5nICsgZWFzdDEwMGs7XG4gIG5vcnRoaW5nID0gc2VwTm9ydGhpbmcgKyBub3J0aDEwMGs7XG5cbiAgcmV0dXJuIHtcbiAgICBlYXN0aW5nOiBlYXN0aW5nLFxuICAgIG5vcnRoaW5nOiBub3J0aGluZyxcbiAgICB6b25lTGV0dGVyOiB6b25lTGV0dGVyLFxuICAgIHpvbmVOdW1iZXI6IHpvbmVOdW1iZXIsXG4gICAgYWNjdXJhY3k6IGFjY3VyYWN5Qm9udXNcbiAgfTtcbn1cblxuLyoqXG4gKiBHaXZlbiB0aGUgZmlyc3QgbGV0dGVyIGZyb20gYSB0d28tbGV0dGVyIE1HUlMgMTAwayB6b25lLCBhbmQgZ2l2ZW4gdGhlXG4gKiBNR1JTIHRhYmxlIHNldCBmb3IgdGhlIHpvbmUgbnVtYmVyLCBmaWd1cmUgb3V0IHRoZSBlYXN0aW5nIHZhbHVlIHRoYXRcbiAqIHNob3VsZCBiZSBhZGRlZCB0byB0aGUgb3RoZXIsIHNlY29uZGFyeSBlYXN0aW5nIHZhbHVlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2NoYXJ9IGUgVGhlIGZpcnN0IGxldHRlciBmcm9tIGEgdHdvLWxldHRlciBNR1JTIDEwMMK0ayB6b25lLlxuICogQHBhcmFtIHtudW1iZXJ9IHNldCBUaGUgTUdSUyB0YWJsZSBzZXQgZm9yIHRoZSB6b25lIG51bWJlci5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGVhc3RpbmcgdmFsdWUgZm9yIHRoZSBnaXZlbiBsZXR0ZXIgYW5kIHNldC5cbiAqL1xuZnVuY3Rpb24gZ2V0RWFzdGluZ0Zyb21DaGFyKGUsIHNldCkge1xuICAvLyBjb2xPcmlnaW4gaXMgdGhlIGxldHRlciBhdCB0aGUgb3JpZ2luIG9mIHRoZSBzZXQgZm9yIHRoZVxuICAvLyBjb2x1bW5cbiAgdmFyIGN1ckNvbCA9IFNFVF9PUklHSU5fQ09MVU1OX0xFVFRFUlMuY2hhckNvZGVBdChzZXQgLSAxKTtcbiAgdmFyIGVhc3RpbmdWYWx1ZSA9IDEwMDAwMC4wO1xuICB2YXIgcmV3aW5kTWFya2VyID0gZmFsc2U7XG5cbiAgd2hpbGUgKGN1ckNvbCAhPT0gZS5jaGFyQ29kZUF0KDApKSB7XG4gICAgY3VyQ29sKys7XG4gICAgaWYgKGN1ckNvbCA9PT0gSSkge1xuICAgICAgY3VyQ29sKys7XG4gICAgfVxuICAgIGlmIChjdXJDb2wgPT09IE8pIHtcbiAgICAgIGN1ckNvbCsrO1xuICAgIH1cbiAgICBpZiAoY3VyQ29sID4gWikge1xuICAgICAgaWYgKHJld2luZE1hcmtlcikge1xuICAgICAgICB0aHJvdyAoXCJCYWQgY2hhcmFjdGVyOiBcIiArIGUpO1xuICAgICAgfVxuICAgICAgY3VyQ29sID0gQTtcbiAgICAgIHJld2luZE1hcmtlciA9IHRydWU7XG4gICAgfVxuICAgIGVhc3RpbmdWYWx1ZSArPSAxMDAwMDAuMDtcbiAgfVxuXG4gIHJldHVybiBlYXN0aW5nVmFsdWU7XG59XG5cbi8qKlxuICogR2l2ZW4gdGhlIHNlY29uZCBsZXR0ZXIgZnJvbSBhIHR3by1sZXR0ZXIgTUdSUyAxMDBrIHpvbmUsIGFuZCBnaXZlbiB0aGVcbiAqIE1HUlMgdGFibGUgc2V0IGZvciB0aGUgem9uZSBudW1iZXIsIGZpZ3VyZSBvdXQgdGhlIG5vcnRoaW5nIHZhbHVlIHRoYXRcbiAqIHNob3VsZCBiZSBhZGRlZCB0byB0aGUgb3RoZXIsIHNlY29uZGFyeSBub3J0aGluZyB2YWx1ZS4gWW91IGhhdmUgdG9cbiAqIHJlbWVtYmVyIHRoYXQgTm9ydGhpbmdzIGFyZSBkZXRlcm1pbmVkIGZyb20gdGhlIGVxdWF0b3IsIGFuZCB0aGUgdmVydGljYWxcbiAqIGN5Y2xlIG9mIGxldHRlcnMgbWVhbiBhIDIwMDAwMDAgYWRkaXRpb25hbCBub3J0aGluZyBtZXRlcnMuIFRoaXMgaGFwcGVuc1xuICogYXBwcm94LiBldmVyeSAxOCBkZWdyZWVzIG9mIGxhdGl0dWRlLiBUaGlzIG1ldGhvZCBkb2VzICpOT1QqIGNvdW50IGFueVxuICogYWRkaXRpb25hbCBub3J0aGluZ3MuIFlvdSBoYXZlIHRvIGZpZ3VyZSBvdXQgaG93IG1hbnkgMjAwMDAwMCBtZXRlcnMgbmVlZFxuICogdG8gYmUgYWRkZWQgZm9yIHRoZSB6b25lIGxldHRlciBvZiB0aGUgTUdSUyBjb29yZGluYXRlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2NoYXJ9IG4gU2Vjb25kIGxldHRlciBvZiB0aGUgTUdSUyAxMDBrIHpvbmVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZXQgVGhlIE1HUlMgdGFibGUgc2V0IG51bWJlciwgd2hpY2ggaXMgZGVwZW5kZW50IG9uIHRoZVxuICogICAgIFVUTSB6b25lIG51bWJlci5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG5vcnRoaW5nIHZhbHVlIGZvciB0aGUgZ2l2ZW4gbGV0dGVyIGFuZCBzZXQuXG4gKi9cbmZ1bmN0aW9uIGdldE5vcnRoaW5nRnJvbUNoYXIobiwgc2V0KSB7XG5cbiAgaWYgKG4gPiAnVicpIHtcbiAgICB0aHJvdyAoXCJNR1JTUG9pbnQgZ2l2ZW4gaW52YWxpZCBOb3J0aGluZyBcIiArIG4pO1xuICB9XG5cbiAgLy8gcm93T3JpZ2luIGlzIHRoZSBsZXR0ZXIgYXQgdGhlIG9yaWdpbiBvZiB0aGUgc2V0IGZvciB0aGVcbiAgLy8gY29sdW1uXG4gIHZhciBjdXJSb3cgPSBTRVRfT1JJR0lOX1JPV19MRVRURVJTLmNoYXJDb2RlQXQoc2V0IC0gMSk7XG4gIHZhciBub3J0aGluZ1ZhbHVlID0gMC4wO1xuICB2YXIgcmV3aW5kTWFya2VyID0gZmFsc2U7XG5cbiAgd2hpbGUgKGN1clJvdyAhPT0gbi5jaGFyQ29kZUF0KDApKSB7XG4gICAgY3VyUm93Kys7XG4gICAgaWYgKGN1clJvdyA9PT0gSSkge1xuICAgICAgY3VyUm93Kys7XG4gICAgfVxuICAgIGlmIChjdXJSb3cgPT09IE8pIHtcbiAgICAgIGN1clJvdysrO1xuICAgIH1cbiAgICAvLyBmaXhpbmcgYSBidWcgbWFraW5nIHdob2xlIGFwcGxpY2F0aW9uIGhhbmcgaW4gdGhpcyBsb29wXG4gICAgLy8gd2hlbiAnbicgaXMgYSB3cm9uZyBjaGFyYWN0ZXJcbiAgICBpZiAoY3VyUm93ID4gVikge1xuICAgICAgaWYgKHJld2luZE1hcmtlcikgeyAvLyBtYWtpbmcgc3VyZSB0aGF0IHRoaXMgbG9vcCBlbmRzXG4gICAgICAgIHRocm93IChcIkJhZCBjaGFyYWN0ZXI6IFwiICsgbik7XG4gICAgICB9XG4gICAgICBjdXJSb3cgPSBBO1xuICAgICAgcmV3aW5kTWFya2VyID0gdHJ1ZTtcbiAgICB9XG4gICAgbm9ydGhpbmdWYWx1ZSArPSAxMDAwMDAuMDtcbiAgfVxuXG4gIHJldHVybiBub3J0aGluZ1ZhbHVlO1xufVxuXG4vKipcbiAqIFRoZSBmdW5jdGlvbiBnZXRNaW5Ob3J0aGluZyByZXR1cm5zIHRoZSBtaW5pbXVtIG5vcnRoaW5nIHZhbHVlIG9mIGEgTUdSU1xuICogem9uZS5cbiAqXG4gKiBQb3J0ZWQgZnJvbSBHZW90cmFucycgYyBMYXR0aXR1ZGVfQmFuZF9WYWx1ZSBzdHJ1Y3R1cmUgdGFibGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Y2hhcn0gem9uZUxldHRlciBUaGUgTUdSUyB6b25lIHRvIGdldCB0aGUgbWluIG5vcnRoaW5nIGZvci5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0TWluTm9ydGhpbmcoem9uZUxldHRlcikge1xuICB2YXIgbm9ydGhpbmc7XG4gIHN3aXRjaCAoem9uZUxldHRlcikge1xuICBjYXNlICdDJzpcbiAgICBub3J0aGluZyA9IDExMDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnRCc6XG4gICAgbm9ydGhpbmcgPSAyMDAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ0UnOlxuICAgIG5vcnRoaW5nID0gMjgwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdGJzpcbiAgICBub3J0aGluZyA9IDM3MDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnRyc6XG4gICAgbm9ydGhpbmcgPSA0NjAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ0gnOlxuICAgIG5vcnRoaW5nID0gNTUwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdKJzpcbiAgICBub3J0aGluZyA9IDY0MDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnSyc6XG4gICAgbm9ydGhpbmcgPSA3MzAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ0wnOlxuICAgIG5vcnRoaW5nID0gODIwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdNJzpcbiAgICBub3J0aGluZyA9IDkxMDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnTic6XG4gICAgbm9ydGhpbmcgPSAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ1AnOlxuICAgIG5vcnRoaW5nID0gODAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ1EnOlxuICAgIG5vcnRoaW5nID0gMTcwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdSJzpcbiAgICBub3J0aGluZyA9IDI2MDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnUyc6XG4gICAgbm9ydGhpbmcgPSAzNTAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ1QnOlxuICAgIG5vcnRoaW5nID0gNDQwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdVJzpcbiAgICBub3J0aGluZyA9IDUzMDAwMDAuMDtcbiAgICBicmVhaztcbiAgY2FzZSAnVic6XG4gICAgbm9ydGhpbmcgPSA2MjAwMDAwLjA7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ1cnOlxuICAgIG5vcnRoaW5nID0gNzAwMDAwMC4wO1xuICAgIGJyZWFrO1xuICBjYXNlICdYJzpcbiAgICBub3J0aGluZyA9IDc5MDAwMDAuMDtcbiAgICBicmVhaztcbiAgZGVmYXVsdDpcbiAgICBub3J0aGluZyA9IC0xLjA7XG4gIH1cbiAgaWYgKG5vcnRoaW5nID49IDAuMCkge1xuICAgIHJldHVybiBub3J0aGluZztcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyAoXCJJbnZhbGlkIHpvbmUgbGV0dGVyOiBcIiArIHpvbmVMZXR0ZXIpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7dG9Qb2ludCwgZm9yd2FyZH0gZnJvbSAnbWdycyc7XG5cbmZ1bmN0aW9uIFBvaW50KHgsIHksIHopIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBvaW50KSkge1xuICAgIHJldHVybiBuZXcgUG9pbnQoeCwgeSwgeik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICB0aGlzLnggPSB4WzBdO1xuICAgIHRoaXMueSA9IHhbMV07XG4gICAgdGhpcy56ID0geFsyXSB8fCAwLjA7XG4gIH0gZWxzZSBpZih0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcbiAgICB0aGlzLnggPSB4Lng7XG4gICAgdGhpcy55ID0geC55O1xuICAgIHRoaXMueiA9IHgueiB8fCAwLjA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnICYmIHR5cGVvZiB5ID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBjb29yZHMgPSB4LnNwbGl0KCcsJyk7XG4gICAgdGhpcy54ID0gcGFyc2VGbG9hdChjb29yZHNbMF0sIDEwKTtcbiAgICB0aGlzLnkgPSBwYXJzZUZsb2F0KGNvb3Jkc1sxXSwgMTApO1xuICAgIHRoaXMueiA9IHBhcnNlRmxvYXQoY29vcmRzWzJdLCAxMCkgfHwgMC4wO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnogPSB6IHx8IDAuMDtcbiAgfVxuICBjb25zb2xlLndhcm4oJ3Byb2o0LlBvaW50IHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDMsIHVzZSBwcm9qNC50b1BvaW50Jyk7XG59XG5cblBvaW50LmZyb21NR1JTID0gZnVuY3Rpb24obWdyc1N0cikge1xuICByZXR1cm4gbmV3IFBvaW50KHRvUG9pbnQobWdyc1N0cikpO1xufTtcblBvaW50LnByb3RvdHlwZS50b01HUlMgPSBmdW5jdGlvbihhY2N1cmFjeSkge1xuICByZXR1cm4gZm9yd2FyZChbdGhpcy54LCB0aGlzLnldLCBhY2N1cmFjeSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgUG9pbnQ7XG4iLCJ2YXIgQzAwID0gMTtcbnZhciBDMDIgPSAwLjI1O1xudmFyIEMwNCA9IDAuMDQ2ODc1O1xudmFyIEMwNiA9IDAuMDE5NTMxMjU7XG52YXIgQzA4ID0gMC4wMTA2ODExNTIzNDM3NTtcbnZhciBDMjIgPSAwLjc1O1xudmFyIEM0NCA9IDAuNDY4NzU7XG52YXIgQzQ2ID0gMC4wMTMwMjA4MzMzMzMzMzMzMzMzMztcbnZhciBDNDggPSAwLjAwNzEyMDc2ODIyOTE2NjY2NjY2O1xudmFyIEM2NiA9IDAuMzY0NTgzMzMzMzMzMzMzMzMzMzM7XG52YXIgQzY4ID0gMC4wMDU2OTY2MTQ1ODMzMzMzMzMzMztcbnZhciBDODggPSAwLjMwNzYxNzE4NzU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVzKSB7XG4gIHZhciBlbiA9IFtdO1xuICBlblswXSA9IEMwMCAtIGVzICogKEMwMiArIGVzICogKEMwNCArIGVzICogKEMwNiArIGVzICogQzA4KSkpO1xuICBlblsxXSA9IGVzICogKEMyMiAtIGVzICogKEMwNCArIGVzICogKEMwNiArIGVzICogQzA4KSkpO1xuICB2YXIgdCA9IGVzICogZXM7XG4gIGVuWzJdID0gdCAqIChDNDQgLSBlcyAqIChDNDYgKyBlcyAqIEM0OCkpO1xuICB0ICo9IGVzO1xuICBlblszXSA9IHQgKiAoQzY2IC0gZXMgKiBDNjgpO1xuICBlbls0XSA9IHQgKiBlcyAqIEM4ODtcbiAgcmV0dXJuIGVuO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBoaSwgc3BoaSwgY3BoaSwgZW4pIHtcbiAgY3BoaSAqPSBzcGhpO1xuICBzcGhpICo9IHNwaGk7XG4gIHJldHVybiAoZW5bMF0gKiBwaGkgLSBjcGhpICogKGVuWzFdICsgc3BoaSAqIChlblsyXSArIHNwaGkgKiAoZW5bM10gKyBzcGhpICogZW5bNF0pKSkpO1xufSIsImltcG9ydCBwal9tbGZuIGZyb20gXCIuL3BqX21sZm5cIjtcbmltcG9ydCB7RVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG52YXIgTUFYX0lURVIgPSAyMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJnLCBlcywgZW4pIHtcbiAgdmFyIGsgPSAxIC8gKDEgLSBlcyk7XG4gIHZhciBwaGkgPSBhcmc7XG4gIGZvciAodmFyIGkgPSBNQVhfSVRFUjsgaTsgLS1pKSB7IC8qIHJhcmVseSBnb2VzIG92ZXIgMiBpdGVyYXRpb25zICovXG4gICAgdmFyIHMgPSBNYXRoLnNpbihwaGkpO1xuICAgIHZhciB0ID0gMSAtIGVzICogcyAqIHM7XG4gICAgLy90ID0gdGhpcy5wal9tbGZuKHBoaSwgcywgTWF0aC5jb3MocGhpKSwgZW4pIC0gYXJnO1xuICAgIC8vcGhpIC09IHQgKiAodCAqIE1hdGguc3FydCh0KSkgKiBrO1xuICAgIHQgPSAocGpfbWxmbihwaGksIHMsIE1hdGguY29zKHBoaSksIGVuKSAtIGFyZykgKiAodCAqIE1hdGguc3FydCh0KSkgKiBrO1xuICAgIHBoaSAtPSB0O1xuICAgIGlmIChNYXRoLmFicyh0KSA8IEVQU0xOKSB7XG4gICAgICByZXR1cm4gcGhpO1xuICAgIH1cbiAgfVxuICAvLy4ucmVwb3J0RXJyb3IoXCJjYXNzOnBqX2ludl9tbGZuOiBDb252ZXJnZW5jZSBlcnJvclwiKTtcbiAgcmV0dXJuIHBoaTtcbn1cbiIsIi8vIEhlYXZpbHkgYmFzZWQgb24gdGhpcyB0bWVyYyBwcm9qZWN0aW9uIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWJsb2NoL21hcHNoYXBlci1wcm9qL2Jsb2IvbWFzdGVyL3NyYy9wcm9qZWN0aW9ucy90bWVyYy5qc1xuXG5pbXBvcnQgcGpfZW5mbiBmcm9tICcuLi9jb21tb24vcGpfZW5mbic7XG5pbXBvcnQgcGpfbWxmbiBmcm9tICcuLi9jb21tb24vcGpfbWxmbic7XG5pbXBvcnQgcGpfaW52X21sZm4gZnJvbSAnLi4vY29tbW9uL3BqX2ludl9tbGZuJztcbmltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcblxuaW1wb3J0IHtFUFNMTiwgSEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5pbXBvcnQgc2lnbiBmcm9tICcuLi9jb21tb24vc2lnbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLngwID0gdGhpcy54MCAhPT0gdW5kZWZpbmVkID8gdGhpcy54MCA6IDA7XG4gIHRoaXMueTAgPSB0aGlzLnkwICE9PSB1bmRlZmluZWQgPyB0aGlzLnkwIDogMDtcbiAgdGhpcy5sb25nMCA9IHRoaXMubG9uZzAgIT09IHVuZGVmaW5lZCA/IHRoaXMubG9uZzAgOiAwO1xuICB0aGlzLmxhdDAgPSB0aGlzLmxhdDAgIT09IHVuZGVmaW5lZCA/IHRoaXMubGF0MCA6IDA7XG5cbiAgaWYgKHRoaXMuZXMpIHtcbiAgICB0aGlzLmVuID0gcGpfZW5mbih0aGlzLmVzKTtcbiAgICB0aGlzLm1sMCA9IHBqX21sZm4odGhpcy5sYXQwLCBNYXRoLnNpbih0aGlzLmxhdDApLCBNYXRoLmNvcyh0aGlzLmxhdDApLCB0aGlzLmVuKTtcbiAgfVxufVxuXG4vKipcbiAgICBUcmFuc3ZlcnNlIE1lcmNhdG9yIEZvcndhcmQgIC0gbG9uZy9sYXQgdG8geC95XG4gICAgbG9uZy9sYXQgaW4gcmFkaWFuc1xuICAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuXG4gIHZhciBkZWx0YV9sb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICB2YXIgY29uO1xuICB2YXIgeCwgeTtcbiAgdmFyIHNpbl9waGkgPSBNYXRoLnNpbihsYXQpO1xuICB2YXIgY29zX3BoaSA9IE1hdGguY29zKGxhdCk7XG5cbiAgaWYgKCF0aGlzLmVzKSB7XG4gICAgdmFyIGIgPSBjb3NfcGhpICogTWF0aC5zaW4oZGVsdGFfbG9uKTtcblxuICAgIGlmICgoTWF0aC5hYnMoTWF0aC5hYnMoYikgLSAxKSkgPCBFUFNMTikge1xuICAgICAgcmV0dXJuICg5Myk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgeCA9IDAuNSAqIHRoaXMuYSAqIHRoaXMuazAgKiBNYXRoLmxvZygoMSArIGIpIC8gKDEgLSBiKSkgKyB0aGlzLngwO1xuICAgICAgeSA9IGNvc19waGkgKiBNYXRoLmNvcyhkZWx0YV9sb24pIC8gTWF0aC5zcXJ0KDEgLSBNYXRoLnBvdyhiLCAyKSk7XG4gICAgICBiID0gTWF0aC5hYnMoeSk7XG5cbiAgICAgIGlmIChiID49IDEpIHtcbiAgICAgICAgaWYgKChiIC0gMSkgPiBFUFNMTikge1xuICAgICAgICAgIHJldHVybiAoOTMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHkgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgeSA9IE1hdGguYWNvcyh5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhdCA8IDApIHtcbiAgICAgICAgeSA9IC15O1xuICAgICAgfVxuXG4gICAgICB5ID0gdGhpcy5hICogdGhpcy5rMCAqICh5IC0gdGhpcy5sYXQwKSArIHRoaXMueTA7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHZhciBhbCA9IGNvc19waGkgKiBkZWx0YV9sb247XG4gICAgdmFyIGFscyA9IE1hdGgucG93KGFsLCAyKTtcbiAgICB2YXIgYyA9IHRoaXMuZXAyICogTWF0aC5wb3coY29zX3BoaSwgMik7XG4gICAgdmFyIGNzID0gTWF0aC5wb3coYywgMik7XG4gICAgdmFyIHRxID0gTWF0aC5hYnMoY29zX3BoaSkgPiBFUFNMTiA/IE1hdGgudGFuKGxhdCkgOiAwO1xuICAgIHZhciB0ID0gTWF0aC5wb3codHEsIDIpO1xuICAgIHZhciB0cyA9IE1hdGgucG93KHQsIDIpO1xuICAgIGNvbiA9IDEgLSB0aGlzLmVzICogTWF0aC5wb3coc2luX3BoaSwgMik7XG4gICAgYWwgPSBhbCAvIE1hdGguc3FydChjb24pO1xuICAgIHZhciBtbCA9IHBqX21sZm4obGF0LCBzaW5fcGhpLCBjb3NfcGhpLCB0aGlzLmVuKTtcblxuICAgIHggPSB0aGlzLmEgKiAodGhpcy5rMCAqIGFsICogKDEgK1xuICAgICAgYWxzIC8gNiAqICgxIC0gdCArIGMgK1xuICAgICAgYWxzIC8gMjAgKiAoNSAtIDE4ICogdCArIHRzICsgMTQgKiBjIC0gNTggKiB0ICogYyArXG4gICAgICBhbHMgLyA0MiAqICg2MSArIDE3OSAqIHRzIC0gdHMgKiB0IC0gNDc5ICogdCkpKSkpICtcbiAgICAgIHRoaXMueDA7XG5cbiAgICB5ID0gdGhpcy5hICogKHRoaXMuazAgKiAobWwgLSB0aGlzLm1sMCArXG4gICAgICBzaW5fcGhpICogZGVsdGFfbG9uICogYWwgLyAyICogKDEgK1xuICAgICAgYWxzIC8gMTIgKiAoNSAtIHQgKyA5ICogYyArIDQgKiBjcyArXG4gICAgICBhbHMgLyAzMCAqICg2MSArIHRzIC0gNTggKiB0ICsgMjcwICogYyAtIDMzMCAqIHQgKiBjICtcbiAgICAgIGFscyAvIDU2ICogKDEzODUgKyA1NDMgKiB0cyAtIHRzICogdCAtIDMxMTEgKiB0KSkpKSkpICtcbiAgICAgIHRoaXMueTA7XG4gIH1cblxuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuXG4gIHJldHVybiBwO1xufVxuXG4vKipcbiAgICBUcmFuc3ZlcnNlIE1lcmNhdG9yIEludmVyc2UgIC0gIHgveSB0byBsb25nL2xhdFxuICAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgY29uLCBwaGk7XG4gIHZhciBsYXQsIGxvbjtcbiAgdmFyIHggPSAocC54IC0gdGhpcy54MCkgKiAoMSAvIHRoaXMuYSk7XG4gIHZhciB5ID0gKHAueSAtIHRoaXMueTApICogKDEgLyB0aGlzLmEpO1xuXG4gIGlmICghdGhpcy5lcykge1xuICAgIHZhciBmID0gTWF0aC5leHAoeCAvIHRoaXMuazApO1xuICAgIHZhciBnID0gMC41ICogKGYgLSAxIC8gZik7XG4gICAgdmFyIHRlbXAgPSB0aGlzLmxhdDAgKyB5IC8gdGhpcy5rMDtcbiAgICB2YXIgaCA9IE1hdGguY29zKHRlbXApO1xuICAgIGNvbiA9IE1hdGguc3FydCgoMSAtIE1hdGgucG93KGgsIDIpKSAvICgxICsgTWF0aC5wb3coZywgMikpKTtcbiAgICBsYXQgPSBNYXRoLmFzaW4oY29uKTtcblxuICAgIGlmICh5IDwgMCkge1xuICAgICAgbGF0ID0gLWxhdDtcbiAgICB9XG5cbiAgICBpZiAoKGcgPT09IDApICYmIChoID09PSAwKSkge1xuICAgICAgbG9uID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKE1hdGguYXRhbjIoZywgaCkgKyB0aGlzLmxvbmcwKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7IC8vIGVsbGlwc29pZGFsIGZvcm1cbiAgICBjb24gPSB0aGlzLm1sMCArIHkgLyB0aGlzLmswO1xuICAgIHBoaSA9IHBqX2ludl9tbGZuKGNvbiwgdGhpcy5lcywgdGhpcy5lbik7XG5cbiAgICBpZiAoTWF0aC5hYnMocGhpKSA8IEhBTEZfUEkpIHtcbiAgICAgIHZhciBzaW5fcGhpID0gTWF0aC5zaW4ocGhpKTtcbiAgICAgIHZhciBjb3NfcGhpID0gTWF0aC5jb3MocGhpKTtcbiAgICAgIHZhciB0YW5fcGhpID0gTWF0aC5hYnMoY29zX3BoaSkgPiBFUFNMTiA/IE1hdGgudGFuKHBoaSkgOiAwO1xuICAgICAgdmFyIGMgPSB0aGlzLmVwMiAqIE1hdGgucG93KGNvc19waGksIDIpO1xuICAgICAgdmFyIGNzID0gTWF0aC5wb3coYywgMik7XG4gICAgICB2YXIgdCA9IE1hdGgucG93KHRhbl9waGksIDIpO1xuICAgICAgdmFyIHRzID0gTWF0aC5wb3codCwgMik7XG4gICAgICBjb24gPSAxIC0gdGhpcy5lcyAqIE1hdGgucG93KHNpbl9waGksIDIpO1xuICAgICAgdmFyIGQgPSB4ICogTWF0aC5zcXJ0KGNvbikgLyB0aGlzLmswO1xuICAgICAgdmFyIGRzID0gTWF0aC5wb3coZCwgMik7XG4gICAgICBjb24gPSBjb24gKiB0YW5fcGhpO1xuXG4gICAgICBsYXQgPSBwaGkgLSAoY29uICogZHMgLyAoMSAtIHRoaXMuZXMpKSAqIDAuNSAqICgxIC1cbiAgICAgICAgZHMgLyAxMiAqICg1ICsgMyAqIHQgLSA5ICogYyAqIHQgKyBjIC0gNCAqIGNzIC1cbiAgICAgICAgZHMgLyAzMCAqICg2MSArIDkwICogdCAtIDI1MiAqIGMgKiB0ICsgNDUgKiB0cyArIDQ2ICogYyAtXG4gICAgICAgIGRzIC8gNTYgKiAoMTM4NSArIDM2MzMgKiB0ICsgNDA5NSAqIHRzICsgMTU3NCAqIHRzICogdCkpKSk7XG5cbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIChkICogKDEgLVxuICAgICAgICBkcyAvIDYgKiAoMSArIDIgKiB0ICsgYyAtXG4gICAgICAgIGRzIC8gMjAgKiAoNSArIDI4ICogdCArIDI0ICogdHMgKyA4ICogYyAqIHQgKyA2ICogYyAtXG4gICAgICAgIGRzIC8gNDIgKiAoNjEgKyA2NjIgKiB0ICsgMTMyMCAqIHRzICsgNzIwICogdHMgKiB0KSkpKSAvIGNvc19waGkpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsYXQgPSBIQUxGX1BJICogc2lnbih5KTtcbiAgICAgIGxvbiA9IDA7XG4gICAgfVxuICB9XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG5cbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJUcmFuc3ZlcnNlX01lcmNhdG9yXCIsIFwiVHJhbnN2ZXJzZSBNZXJjYXRvclwiLCBcInRtZXJjXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHZhciByID0gTWF0aC5leHAoeCk7XG4gIHIgPSAociAtIDEgLyByKSAvIDI7XG4gIHJldHVybiByO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgeCA9IE1hdGguYWJzKHgpO1xuICB5ID0gTWF0aC5hYnMoeSk7XG4gIHZhciBhID0gTWF0aC5tYXgoeCwgeSk7XG4gIHZhciBiID0gTWF0aC5taW4oeCwgeSkgLyAoYSA/IGEgOiAxKTtcblxuICByZXR1cm4gYSAqIE1hdGguc3FydCgxICsgTWF0aC5wb3coYiwgMikpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHAsIEIpIHtcbiAgdmFyIGNvc18yQiA9IDIgKiBNYXRoLmNvcygyICogQik7XG4gIHZhciBpID0gcHAubGVuZ3RoIC0gMTtcbiAgdmFyIGgxID0gcHBbaV07XG4gIHZhciBoMiA9IDA7XG4gIHZhciBoO1xuXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGggPSAtaDIgKyBjb3NfMkIgKiBoMSArIHBwW2ldO1xuICAgIGgyID0gaDE7XG4gICAgaDEgPSBoO1xuICB9XG5cbiAgcmV0dXJuIChCICsgaCAqIE1hdGguc2luKDIgKiBCKSk7XG59XG4iLCJpbXBvcnQgc2luaCBmcm9tICcuL3NpbmgnO1xuaW1wb3J0IGNvc2ggZnJvbSAnLi9jb3NoJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHAsIGFyZ19yLCBhcmdfaSkge1xuICB2YXIgc2luX2FyZ19yID0gTWF0aC5zaW4oYXJnX3IpO1xuICB2YXIgY29zX2FyZ19yID0gTWF0aC5jb3MoYXJnX3IpO1xuICB2YXIgc2luaF9hcmdfaSA9IHNpbmgoYXJnX2kpO1xuICB2YXIgY29zaF9hcmdfaSA9IGNvc2goYXJnX2kpO1xuICB2YXIgciA9IDIgKiBjb3NfYXJnX3IgKiBjb3NoX2FyZ19pO1xuICB2YXIgaSA9IC0yICogc2luX2FyZ19yICogc2luaF9hcmdfaTtcbiAgdmFyIGogPSBwcC5sZW5ndGggLSAxO1xuICB2YXIgaHIgPSBwcFtqXTtcbiAgdmFyIGhpMSA9IDA7XG4gIHZhciBocjEgPSAwO1xuICB2YXIgaGkgPSAwO1xuICB2YXIgaHIyO1xuICB2YXIgaGkyO1xuXG4gIHdoaWxlICgtLWogPj0gMCkge1xuICAgIGhyMiA9IGhyMTtcbiAgICBoaTIgPSBoaTE7XG4gICAgaHIxID0gaHI7XG4gICAgaGkxID0gaGk7XG4gICAgaHIgPSAtaHIyICsgciAqIGhyMSAtIGkgKiBoaTEgKyBwcFtqXTtcbiAgICBoaSA9IC1oaTIgKyBpICogaHIxICsgciAqIGhpMTtcbiAgfVxuXG4gIHIgPSBzaW5fYXJnX3IgKiBjb3NoX2FyZ19pO1xuICBpID0gY29zX2FyZ19yICogc2luaF9hcmdfaTtcblxuICByZXR1cm4gW3IgKiBociAtIGkgKiBoaSwgciAqIGhpICsgaSAqIGhyXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHIgPSBNYXRoLmV4cCh4KTtcbiAgciA9IChyICsgMSAvIHIpIC8gMjtcbiAgcmV0dXJuIHI7XG59IiwiLy8gSGVhdmlseSBiYXNlZCBvbiB0aGlzIGV0bWVyYyBwcm9qZWN0aW9uIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWJsb2NoL21hcHNoYXBlci1wcm9qL2Jsb2IvbWFzdGVyL3NyYy9wcm9qZWN0aW9ucy9ldG1lcmMuanNcblxuaW1wb3J0IHNpbmggZnJvbSAnLi4vY29tbW9uL3NpbmgnO1xuaW1wb3J0IGh5cG90IGZyb20gJy4uL2NvbW1vbi9oeXBvdCc7XG5pbXBvcnQgYXNpbmh5IGZyb20gJy4uL2NvbW1vbi9hc2luaHknO1xuaW1wb3J0IGdhdGcgZnJvbSAnLi4vY29tbW9uL2dhdGcnO1xuaW1wb3J0IGNsZW5zIGZyb20gJy4uL2NvbW1vbi9jbGVucyc7XG5pbXBvcnQgY2xlbnNfY21wbHggZnJvbSAnLi4vY29tbW9uL2NsZW5zX2NtcGx4JztcbmltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIGlmICh0aGlzLmVzID09PSB1bmRlZmluZWQgfHwgdGhpcy5lcyA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbmNvcnJlY3QgZWxsaXB0aWNhbCB1c2FnZScpO1xuICB9XG5cbiAgdGhpcy54MCA9IHRoaXMueDAgIT09IHVuZGVmaW5lZCA/IHRoaXMueDAgOiAwO1xuICB0aGlzLnkwID0gdGhpcy55MCAhPT0gdW5kZWZpbmVkID8gdGhpcy55MCA6IDA7XG4gIHRoaXMubG9uZzAgPSB0aGlzLmxvbmcwICE9PSB1bmRlZmluZWQgPyB0aGlzLmxvbmcwIDogMDtcbiAgdGhpcy5sYXQwID0gdGhpcy5sYXQwICE9PSB1bmRlZmluZWQgPyB0aGlzLmxhdDAgOiAwO1xuXG4gIHRoaXMuY2diID0gW107XG4gIHRoaXMuY2JnID0gW107XG4gIHRoaXMudXRnID0gW107XG4gIHRoaXMuZ3R1ID0gW107XG5cbiAgdmFyIGYgPSB0aGlzLmVzIC8gKDEgKyBNYXRoLnNxcnQoMSAtIHRoaXMuZXMpKTtcbiAgdmFyIG4gPSBmIC8gKDIgLSBmKTtcbiAgdmFyIG5wID0gbjtcblxuICB0aGlzLmNnYlswXSA9IG4gKiAoMiArIG4gKiAoLTIgLyAzICsgbiAqICgtMiArIG4gKiAoMTE2IC8gNDUgKyBuICogKDI2IC8gNDUgKyBuICogKC0yODU0IC8gNjc1ICkpKSkpKTtcbiAgdGhpcy5jYmdbMF0gPSBuICogKC0yICsgbiAqICggMiAvIDMgKyBuICogKCA0IC8gMyArIG4gKiAoLTgyIC8gNDUgKyBuICogKDMyIC8gNDUgKyBuICogKDQ2NDIgLyA0NzI1KSkpKSkpO1xuXG4gIG5wID0gbnAgKiBuO1xuICB0aGlzLmNnYlsxXSA9IG5wICogKDcgLyAzICsgbiAqICgtOCAvIDUgKyBuICogKC0yMjcgLyA0NSArIG4gKiAoMjcwNCAvIDMxNSArIG4gKiAoMjMyMyAvIDk0NSkpKSkpO1xuICB0aGlzLmNiZ1sxXSA9IG5wICogKDUgLyAzICsgbiAqICgtMTYgLyAxNSArIG4gKiAoIC0xMyAvIDkgKyBuICogKDkwNCAvIDMxNSArIG4gKiAoLTE1MjIgLyA5NDUpKSkpKTtcblxuICBucCA9IG5wICogbjtcbiAgdGhpcy5jZ2JbMl0gPSBucCAqICg1NiAvIDE1ICsgbiAqICgtMTM2IC8gMzUgKyBuICogKC0xMjYyIC8gMTA1ICsgbiAqICg3MzgxNCAvIDI4MzUpKSkpO1xuICB0aGlzLmNiZ1syXSA9IG5wICogKC0yNiAvIDE1ICsgbiAqICgzNCAvIDIxICsgbiAqICg4IC8gNSArIG4gKiAoLTEyNjg2IC8gMjgzNSkpKSk7XG5cbiAgbnAgPSBucCAqIG47XG4gIHRoaXMuY2diWzNdID0gbnAgKiAoNDI3OSAvIDYzMCArIG4gKiAoLTMzMiAvIDM1ICsgbiAqICgtMzk5NTcyIC8gMTQxNzUpKSk7XG4gIHRoaXMuY2JnWzNdID0gbnAgKiAoMTIzNyAvIDYzMCArIG4gKiAoLTEyIC8gNSArIG4gKiAoIC0yNDgzMiAvIDE0MTc1KSkpO1xuXG4gIG5wID0gbnAgKiBuO1xuICB0aGlzLmNnYls0XSA9IG5wICogKDQxNzQgLyAzMTUgKyBuICogKC0xNDQ4MzggLyA2MjM3KSk7XG4gIHRoaXMuY2JnWzRdID0gbnAgKiAoLTczNCAvIDMxNSArIG4gKiAoMTA5NTk4IC8gMzExODUpKTtcblxuICBucCA9IG5wICogbjtcbiAgdGhpcy5jZ2JbNV0gPSBucCAqICg2MDE2NzYgLyAyMjI3NSk7XG4gIHRoaXMuY2JnWzVdID0gbnAgKiAoNDQ0MzM3IC8gMTU1OTI1KTtcblxuICBucCA9IE1hdGgucG93KG4sIDIpO1xuICB0aGlzLlFuID0gdGhpcy5rMCAvICgxICsgbikgKiAoMSArIG5wICogKDEgLyA0ICsgbnAgKiAoMSAvIDY0ICsgbnAgLyAyNTYpKSk7XG5cbiAgdGhpcy51dGdbMF0gPSBuICogKC0wLjUgKyBuICogKCAyIC8gMyArIG4gKiAoLTM3IC8gOTYgKyBuICogKCAxIC8gMzYwICsgbiAqICg4MSAvIDUxMiArIG4gKiAoLTk2MTk5IC8gNjA0ODAwKSkpKSkpO1xuICB0aGlzLmd0dVswXSA9IG4gKiAoMC41ICsgbiAqICgtMiAvIDMgKyBuICogKDUgLyAxNiArIG4gKiAoNDEgLyAxODAgKyBuICogKC0xMjcgLyAyODggKyBuICogKDc4OTEgLyAzNzgwMCkpKSkpKTtcblxuICB0aGlzLnV0Z1sxXSA9IG5wICogKC0xIC8gNDggKyBuICogKC0xIC8gMTUgKyBuICogKDQzNyAvIDE0NDAgKyBuICogKC00NiAvIDEwNSArIG4gKiAoMTExODcxMSAvIDM4NzA3MjApKSkpKTtcbiAgdGhpcy5ndHVbMV0gPSBucCAqICgxMyAvIDQ4ICsgbiAqICgtMyAvIDUgKyBuICogKDU1NyAvIDE0NDAgKyBuICogKDI4MSAvIDYzMCArIG4gKiAoLTE5ODM0MzMgLyAxOTM1MzYwKSkpKSk7XG5cbiAgbnAgPSBucCAqIG47XG4gIHRoaXMudXRnWzJdID0gbnAgKiAoLTE3IC8gNDgwICsgbiAqICgzNyAvIDg0MCArIG4gKiAoMjA5IC8gNDQ4MCArIG4gKiAoLTU1NjkgLyA5MDcyMCApKSkpO1xuICB0aGlzLmd0dVsyXSA9IG5wICogKDYxIC8gMjQwICsgbiAqICgtMTAzIC8gMTQwICsgbiAqICgxNTA2MSAvIDI2ODgwICsgbiAqICgxNjc2MDMgLyAxODE0NDApKSkpO1xuXG4gIG5wID0gbnAgKiBuO1xuICB0aGlzLnV0Z1szXSA9IG5wICogKC00Mzk3IC8gMTYxMjgwICsgbiAqICgxMSAvIDUwNCArIG4gKiAoODMwMjUxIC8gNzI1NzYwMCkpKTtcbiAgdGhpcy5ndHVbM10gPSBucCAqICg0OTU2MSAvIDE2MTI4MCArIG4gKiAoLTE3OSAvIDE2OCArIG4gKiAoNjYwMTY2MSAvIDcyNTc2MDApKSk7XG5cbiAgbnAgPSBucCAqIG47XG4gIHRoaXMudXRnWzRdID0gbnAgKiAoLTQ1ODMgLyAxNjEyODAgKyBuICogKDEwODg0NyAvIDM5OTE2ODApKTtcbiAgdGhpcy5ndHVbNF0gPSBucCAqICgzNDcyOSAvIDgwNjQwICsgbiAqICgtMzQxODg4OSAvIDE5OTU4NDApKTtcblxuICBucCA9IG5wICogbjtcbiAgdGhpcy51dGdbNV0gPSBucCAqICgtMjA2NDg2OTMgLyA2Mzg2Njg4MDApO1xuICB0aGlzLmd0dVs1XSA9IG5wICogKDIxMjM3ODk0MSAvIDMxOTMzNDQwMCk7XG5cbiAgdmFyIFogPSBnYXRnKHRoaXMuY2JnLCB0aGlzLmxhdDApO1xuICB0aGlzLlpiID0gLXRoaXMuUW4gKiAoWiArIGNsZW5zKHRoaXMuZ3R1LCAyICogWikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBDZSA9IGFkanVzdF9sb24ocC54IC0gdGhpcy5sb25nMCk7XG4gIHZhciBDbiA9IHAueTtcblxuICBDbiA9IGdhdGcodGhpcy5jYmcsIENuKTtcbiAgdmFyIHNpbl9DbiA9IE1hdGguc2luKENuKTtcbiAgdmFyIGNvc19DbiA9IE1hdGguY29zKENuKTtcbiAgdmFyIHNpbl9DZSA9IE1hdGguc2luKENlKTtcbiAgdmFyIGNvc19DZSA9IE1hdGguY29zKENlKTtcblxuICBDbiA9IE1hdGguYXRhbjIoc2luX0NuLCBjb3NfQ2UgKiBjb3NfQ24pO1xuICBDZSA9IE1hdGguYXRhbjIoc2luX0NlICogY29zX0NuLCBoeXBvdChzaW5fQ24sIGNvc19DbiAqIGNvc19DZSkpO1xuICBDZSA9IGFzaW5oeShNYXRoLnRhbihDZSkpO1xuXG4gIHZhciB0bXAgPSBjbGVuc19jbXBseCh0aGlzLmd0dSwgMiAqIENuLCAyICogQ2UpO1xuXG4gIENuID0gQ24gKyB0bXBbMF07XG4gIENlID0gQ2UgKyB0bXBbMV07XG5cbiAgdmFyIHg7XG4gIHZhciB5O1xuXG4gIGlmIChNYXRoLmFicyhDZSkgPD0gMi42MjMzOTUxNjI3NzgpIHtcbiAgICB4ID0gdGhpcy5hICogKHRoaXMuUW4gKiBDZSkgKyB0aGlzLngwO1xuICAgIHkgPSB0aGlzLmEgKiAodGhpcy5RbiAqIENuICsgdGhpcy5aYikgKyB0aGlzLnkwO1xuICB9XG4gIGVsc2Uge1xuICAgIHggPSBJbmZpbml0eTtcbiAgICB5ID0gSW5maW5pdHk7XG4gIH1cblxuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuXG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciBDZSA9IChwLnggLSB0aGlzLngwKSAqICgxIC8gdGhpcy5hKTtcbiAgdmFyIENuID0gKHAueSAtIHRoaXMueTApICogKDEgLyB0aGlzLmEpO1xuXG4gIENuID0gKENuIC0gdGhpcy5aYikgLyB0aGlzLlFuO1xuICBDZSA9IENlIC8gdGhpcy5RbjtcblxuICB2YXIgbG9uO1xuICB2YXIgbGF0O1xuXG4gIGlmIChNYXRoLmFicyhDZSkgPD0gMi42MjMzOTUxNjI3NzgpIHtcbiAgICB2YXIgdG1wID0gY2xlbnNfY21wbHgodGhpcy51dGcsIDIgKiBDbiwgMiAqIENlKTtcblxuICAgIENuID0gQ24gKyB0bXBbMF07XG4gICAgQ2UgPSBDZSArIHRtcFsxXTtcbiAgICBDZSA9IE1hdGguYXRhbihzaW5oKENlKSk7XG5cbiAgICB2YXIgc2luX0NuID0gTWF0aC5zaW4oQ24pO1xuICAgIHZhciBjb3NfQ24gPSBNYXRoLmNvcyhDbik7XG4gICAgdmFyIHNpbl9DZSA9IE1hdGguc2luKENlKTtcbiAgICB2YXIgY29zX0NlID0gTWF0aC5jb3MoQ2UpO1xuXG4gICAgQ24gPSBNYXRoLmF0YW4yKHNpbl9DbiAqIGNvc19DZSwgaHlwb3Qoc2luX0NlLCBjb3NfQ2UgKiBjb3NfQ24pKTtcbiAgICBDZSA9IE1hdGguYXRhbjIoc2luX0NlLCBjb3NfQ2UgKiBjb3NfQ24pO1xuXG4gICAgbG9uID0gYWRqdXN0X2xvbihDZSArIHRoaXMubG9uZzApO1xuICAgIGxhdCA9IGdhdGcodGhpcy5jZ2IsIENuKTtcbiAgfVxuICBlbHNlIHtcbiAgICBsb24gPSBJbmZpbml0eTtcbiAgICBsYXQgPSBJbmZpbml0eTtcbiAgfVxuXG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuXG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiRXh0ZW5kZWRfVHJhbnN2ZXJzZV9NZXJjYXRvclwiLCBcIkV4dGVuZGVkIFRyYW5zdmVyc2UgTWVyY2F0b3JcIiwgXCJldG1lcmNcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBwLCBhcmdfcikge1xuICB2YXIgciA9IDIgKiBNYXRoLmNvcyhhcmdfcik7XG4gIHZhciBpID0gcHAubGVuZ3RoIC0gMTtcbiAgdmFyIGhyMSA9IHBwW2ldO1xuICB2YXIgaHIyID0gMDtcbiAgdmFyIGhyO1xuXG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGhyID0gLWhyMiArIHIgKiBocjEgKyBwcFtpXTtcbiAgICBocjIgPSBocjE7XG4gICAgaHIxID0gaHI7XG4gIH1cblxuICByZXR1cm4gTWF0aC5zaW4oYXJnX3IpICogaHI7XG59XG4iLCJpbXBvcnQgaHlwb3QgZnJvbSAnLi9oeXBvdCc7XG5pbXBvcnQgbG9nMXB5IGZyb20gJy4vbG9nMXB5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICB2YXIgeSA9IE1hdGguYWJzKHgpO1xuICB5ID0gbG9nMXB5KHkgKiAoMSArIHkgLyAoaHlwb3QoMSwgeSkgKyAxKSkpO1xuXG4gIHJldHVybiB4IDwgMCA/IC15IDogeTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHkgPSAxICsgeDtcbiAgdmFyIHogPSB5IC0gMTtcblxuICByZXR1cm4geiA9PT0gMCA/IHggOiB4ICogTWF0aC5sb2coeSkgLyB6O1xufVxuIiwiaW1wb3J0IGFkanVzdF96b25lIGZyb20gJy4uL2NvbW1vbi9hZGp1c3Rfem9uZSc7XG5pbXBvcnQgZXRtZXJjIGZyb20gJy4vZXRtZXJjJztcbmV4cG9ydCB2YXIgZGVwZW5kc09uID0gJ2V0bWVyYyc7XG5pbXBvcnQge0QyUn0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIHZhciB6b25lID0gYWRqdXN0X3pvbmUodGhpcy56b25lLCB0aGlzLmxvbmcwKTtcbiAgaWYgKHpvbmUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biB1dG0gem9uZScpO1xuICB9XG4gIHRoaXMubGF0MCA9IDA7XG4gIHRoaXMubG9uZzAgPSAgKCg2ICogTWF0aC5hYnMoem9uZSkpIC0gMTgzKSAqIEQyUjtcbiAgdGhpcy54MCA9IDUwMDAwMDtcbiAgdGhpcy55MCA9IHRoaXMudXRtU291dGggPyAxMDAwMDAwMCA6IDA7XG4gIHRoaXMuazAgPSAwLjk5OTY7XG5cbiAgZXRtZXJjLmluaXQuYXBwbHkodGhpcyk7XG4gIHRoaXMuZm9yd2FyZCA9IGV0bWVyYy5mb3J3YXJkO1xuICB0aGlzLmludmVyc2UgPSBldG1lcmMuaW52ZXJzZTtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIlVuaXZlcnNhbCBUcmFuc3ZlcnNlIE1lcmNhdG9yIFN5c3RlbVwiLCBcInV0bVwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgbmFtZXM6IG5hbWVzLFxuICBkZXBlbmRzT246IGRlcGVuZHNPblxufTtcbiIsImltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4vYWRqdXN0X2xvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHpvbmUsIGxvbikge1xuICBpZiAoem9uZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgem9uZSA9IE1hdGguZmxvb3IoKGFkanVzdF9sb24obG9uKSArIE1hdGguUEkpICogMzAgLyBNYXRoLlBJKSArIDE7XG5cbiAgICBpZiAoem9uZSA8IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAoem9uZSA+IDYwKSB7XG4gICAgICByZXR1cm4gNjA7XG4gICAgfVxuICB9XG4gIHJldHVybiB6b25lO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXNpbnAsIGV4cCkge1xuICByZXR1cm4gKE1hdGgucG93KCgxIC0gZXNpbnApIC8gKDEgKyBlc2lucCksIGV4cCkpO1xufSIsImltcG9ydCBzcmF0IGZyb20gJy4uL2NvbW1vbi9zcmF0JztcbnZhciBNQVhfSVRFUiA9IDIwO1xuaW1wb3J0IHtIQUxGX1BJLCBGT1JUUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgdmFyIHNwaGkgPSBNYXRoLnNpbih0aGlzLmxhdDApO1xuICB2YXIgY3BoaSA9IE1hdGguY29zKHRoaXMubGF0MCk7XG4gIGNwaGkgKj0gY3BoaTtcbiAgdGhpcy5yYyA9IE1hdGguc3FydCgxIC0gdGhpcy5lcykgLyAoMSAtIHRoaXMuZXMgKiBzcGhpICogc3BoaSk7XG4gIHRoaXMuQyA9IE1hdGguc3FydCgxICsgdGhpcy5lcyAqIGNwaGkgKiBjcGhpIC8gKDEgLSB0aGlzLmVzKSk7XG4gIHRoaXMucGhpYzAgPSBNYXRoLmFzaW4oc3BoaSAvIHRoaXMuQyk7XG4gIHRoaXMucmF0ZXhwID0gMC41ICogdGhpcy5DICogdGhpcy5lO1xuICB0aGlzLksgPSBNYXRoLnRhbigwLjUgKiB0aGlzLnBoaWMwICsgRk9SVFBJKSAvIChNYXRoLnBvdyhNYXRoLnRhbigwLjUgKiB0aGlzLmxhdDAgKyBGT1JUUEkpLCB0aGlzLkMpICogc3JhdCh0aGlzLmUgKiBzcGhpLCB0aGlzLnJhdGV4cCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG5cbiAgcC55ID0gMiAqIE1hdGguYXRhbih0aGlzLksgKiBNYXRoLnBvdyhNYXRoLnRhbigwLjUgKiBsYXQgKyBGT1JUUEkpLCB0aGlzLkMpICogc3JhdCh0aGlzLmUgKiBNYXRoLnNpbihsYXQpLCB0aGlzLnJhdGV4cCkpIC0gSEFMRl9QSTtcbiAgcC54ID0gdGhpcy5DICogbG9uO1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgREVMX1RPTCA9IDFlLTE0O1xuICB2YXIgbG9uID0gcC54IC8gdGhpcy5DO1xuICB2YXIgbGF0ID0gcC55O1xuICB2YXIgbnVtID0gTWF0aC5wb3coTWF0aC50YW4oMC41ICogbGF0ICsgRk9SVFBJKSAvIHRoaXMuSywgMSAvIHRoaXMuQyk7XG4gIGZvciAodmFyIGkgPSBNQVhfSVRFUjsgaSA+IDA7IC0taSkge1xuICAgIGxhdCA9IDIgKiBNYXRoLmF0YW4obnVtICogc3JhdCh0aGlzLmUgKiBNYXRoLnNpbihwLnkpLCAtIDAuNSAqIHRoaXMuZSkpIC0gSEFMRl9QSTtcbiAgICBpZiAoTWF0aC5hYnMobGF0IC0gcC55KSA8IERFTF9UT0wpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwLnkgPSBsYXQ7XG4gIH1cbiAgLyogY29udmVyZ2VuY2UgZmFpbGVkICovXG4gIGlmICghaSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcImdhdXNzXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgZ2F1c3MgZnJvbSAnLi9nYXVzcyc7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICBnYXVzcy5pbml0LmFwcGx5KHRoaXMpO1xuICBpZiAoIXRoaXMucmMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5zaW5jMCA9IE1hdGguc2luKHRoaXMucGhpYzApO1xuICB0aGlzLmNvc2MwID0gTWF0aC5jb3ModGhpcy5waGljMCk7XG4gIHRoaXMuUjIgPSAyICogdGhpcy5yYztcbiAgaWYgKCF0aGlzLnRpdGxlKSB7XG4gICAgdGhpcy50aXRsZSA9IFwiT2JsaXF1ZSBTdGVyZW9ncmFwaGljIEFsdGVybmF0aXZlXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgc2luYywgY29zYywgY29zbCwgaztcbiAgcC54ID0gYWRqdXN0X2xvbihwLnggLSB0aGlzLmxvbmcwKTtcbiAgZ2F1c3MuZm9yd2FyZC5hcHBseSh0aGlzLCBbcF0pO1xuICBzaW5jID0gTWF0aC5zaW4ocC55KTtcbiAgY29zYyA9IE1hdGguY29zKHAueSk7XG4gIGNvc2wgPSBNYXRoLmNvcyhwLngpO1xuICBrID0gdGhpcy5rMCAqIHRoaXMuUjIgLyAoMSArIHRoaXMuc2luYzAgKiBzaW5jICsgdGhpcy5jb3NjMCAqIGNvc2MgKiBjb3NsKTtcbiAgcC54ID0gayAqIGNvc2MgKiBNYXRoLnNpbihwLngpO1xuICBwLnkgPSBrICogKHRoaXMuY29zYzAgKiBzaW5jIC0gdGhpcy5zaW5jMCAqIGNvc2MgKiBjb3NsKTtcbiAgcC54ID0gdGhpcy5hICogcC54ICsgdGhpcy54MDtcbiAgcC55ID0gdGhpcy5hICogcC55ICsgdGhpcy55MDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIHNpbmMsIGNvc2MsIGxvbiwgbGF0LCByaG87XG4gIHAueCA9IChwLnggLSB0aGlzLngwKSAvIHRoaXMuYTtcbiAgcC55ID0gKHAueSAtIHRoaXMueTApIC8gdGhpcy5hO1xuXG4gIHAueCAvPSB0aGlzLmswO1xuICBwLnkgLz0gdGhpcy5rMDtcbiAgaWYgKChyaG8gPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KSkpIHtcbiAgICB2YXIgYyA9IDIgKiBNYXRoLmF0YW4yKHJobywgdGhpcy5SMik7XG4gICAgc2luYyA9IE1hdGguc2luKGMpO1xuICAgIGNvc2MgPSBNYXRoLmNvcyhjKTtcbiAgICBsYXQgPSBNYXRoLmFzaW4oY29zYyAqIHRoaXMuc2luYzAgKyBwLnkgKiBzaW5jICogdGhpcy5jb3NjMCAvIHJobyk7XG4gICAgbG9uID0gTWF0aC5hdGFuMihwLnggKiBzaW5jLCByaG8gKiB0aGlzLmNvc2MwICogY29zYyAtIHAueSAqIHRoaXMuc2luYzAgKiBzaW5jKTtcbiAgfVxuICBlbHNlIHtcbiAgICBsYXQgPSB0aGlzLnBoaWMwO1xuICAgIGxvbiA9IDA7XG4gIH1cblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgZ2F1c3MuaW52ZXJzZS5hcHBseSh0aGlzLCBbcF0pO1xuICBwLnggPSBhZGp1c3RfbG9uKHAueCArIHRoaXMubG9uZzApO1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIlN0ZXJlb2dyYXBoaWNfTm9ydGhfUG9sZVwiLCBcIk9ibGlxdWVfU3RlcmVvZ3JhcGhpY1wiLCBcIlBvbGFyX1N0ZXJlb2dyYXBoaWNcIiwgXCJzdGVyZWFcIixcIk9ibGlxdWUgU3RlcmVvZ3JhcGhpYyBBbHRlcm5hdGl2ZVwiLFwiRG91YmxlX1N0ZXJlb2dyYXBoaWNcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCB7RVBTTE4sIEhBTEZfUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5pbXBvcnQgc2lnbiBmcm9tICcuLi9jb21tb24vc2lnbic7XG5pbXBvcnQgbXNmbnogZnJvbSAnLi4vY29tbW9uL21zZm56JztcbmltcG9ydCB0c2ZueiBmcm9tICcuLi9jb21tb24vdHNmbnonO1xuaW1wb3J0IHBoaTJ6IGZyb20gJy4uL2NvbW1vbi9waGkyeic7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBzc2ZuXyhwaGl0LCBzaW5waGksIGVjY2VuKSB7XG4gIHNpbnBoaSAqPSBlY2NlbjtcbiAgcmV0dXJuIChNYXRoLnRhbigwLjUgKiAoSEFMRl9QSSArIHBoaXQpKSAqIE1hdGgucG93KCgxIC0gc2lucGhpKSAvICgxICsgc2lucGhpKSwgMC41ICogZWNjZW4pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIHRoaXMuY29zbGF0MCA9IE1hdGguY29zKHRoaXMubGF0MCk7XG4gIHRoaXMuc2lubGF0MCA9IE1hdGguc2luKHRoaXMubGF0MCk7XG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGlmICh0aGlzLmswID09PSAxICYmICFpc05hTih0aGlzLmxhdF90cykgJiYgTWF0aC5hYnModGhpcy5jb3NsYXQwKSA8PSBFUFNMTikge1xuICAgICAgdGhpcy5rMCA9IDAuNSAqICgxICsgc2lnbih0aGlzLmxhdDApICogTWF0aC5zaW4odGhpcy5sYXRfdHMpKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKE1hdGguYWJzKHRoaXMuY29zbGF0MCkgPD0gRVBTTE4pIHtcbiAgICAgIGlmICh0aGlzLmxhdDAgPiAwKSB7XG4gICAgICAgIC8vTm9ydGggcG9sZVxuICAgICAgICAvL3RyYWNlKCdzdGVyZTpub3J0aCBwb2xlJyk7XG4gICAgICAgIHRoaXMuY29uID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvL1NvdXRoIHBvbGVcbiAgICAgICAgLy90cmFjZSgnc3RlcmU6c291dGggcG9sZScpO1xuICAgICAgICB0aGlzLmNvbiA9IC0xO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvbnMgPSBNYXRoLnNxcnQoTWF0aC5wb3coMSArIHRoaXMuZSwgMSArIHRoaXMuZSkgKiBNYXRoLnBvdygxIC0gdGhpcy5lLCAxIC0gdGhpcy5lKSk7XG4gICAgaWYgKHRoaXMuazAgPT09IDEgJiYgIWlzTmFOKHRoaXMubGF0X3RzKSAmJiBNYXRoLmFicyh0aGlzLmNvc2xhdDApIDw9IEVQU0xOKSB7XG4gICAgICB0aGlzLmswID0gMC41ICogdGhpcy5jb25zICogbXNmbnoodGhpcy5lLCBNYXRoLnNpbih0aGlzLmxhdF90cyksIE1hdGguY29zKHRoaXMubGF0X3RzKSkgLyB0c2Zueih0aGlzLmUsIHRoaXMuY29uICogdGhpcy5sYXRfdHMsIHRoaXMuY29uICogTWF0aC5zaW4odGhpcy5sYXRfdHMpKTtcbiAgICB9XG4gICAgdGhpcy5tczEgPSBtc2Zueih0aGlzLmUsIHRoaXMuc2lubGF0MCwgdGhpcy5jb3NsYXQwKTtcbiAgICB0aGlzLlgwID0gMiAqIE1hdGguYXRhbih0aGlzLnNzZm5fKHRoaXMubGF0MCwgdGhpcy5zaW5sYXQwLCB0aGlzLmUpKSAtIEhBTEZfUEk7XG4gICAgdGhpcy5jb3NYMCA9IE1hdGguY29zKHRoaXMuWDApO1xuICAgIHRoaXMuc2luWDAgPSBNYXRoLnNpbih0aGlzLlgwKTtcbiAgfVxufVxuXG4vLyBTdGVyZW9ncmFwaGljIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuICB2YXIgc2lubGF0ID0gTWF0aC5zaW4obGF0KTtcbiAgdmFyIGNvc2xhdCA9IE1hdGguY29zKGxhdCk7XG4gIHZhciBBLCBYLCBzaW5YLCBjb3NYLCB0cywgcmg7XG4gIHZhciBkbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcblxuICBpZiAoTWF0aC5hYnMoTWF0aC5hYnMobG9uIC0gdGhpcy5sb25nMCkgLSBNYXRoLlBJKSA8PSBFUFNMTiAmJiBNYXRoLmFicyhsYXQgKyB0aGlzLmxhdDApIDw9IEVQU0xOKSB7XG4gICAgLy9jYXNlIG9mIHRoZSBvcmlnaW5lIHBvaW50XG4gICAgLy90cmFjZSgnc3RlcmU6dGhpcyBpcyB0aGUgb3JpZ2luIHBvaW50Jyk7XG4gICAgcC54ID0gTmFOO1xuICAgIHAueSA9IE5hTjtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICAvL3RyYWNlKCdzdGVyZTpzcGhlcmUgY2FzZScpO1xuICAgIEEgPSAyICogdGhpcy5rMCAvICgxICsgdGhpcy5zaW5sYXQwICogc2lubGF0ICsgdGhpcy5jb3NsYXQwICogY29zbGF0ICogTWF0aC5jb3MoZGxvbikpO1xuICAgIHAueCA9IHRoaXMuYSAqIEEgKiBjb3NsYXQgKiBNYXRoLnNpbihkbG9uKSArIHRoaXMueDA7XG4gICAgcC55ID0gdGhpcy5hICogQSAqICh0aGlzLmNvc2xhdDAgKiBzaW5sYXQgLSB0aGlzLnNpbmxhdDAgKiBjb3NsYXQgKiBNYXRoLmNvcyhkbG9uKSkgKyB0aGlzLnkwO1xuICAgIHJldHVybiBwO1xuICB9XG4gIGVsc2Uge1xuICAgIFggPSAyICogTWF0aC5hdGFuKHRoaXMuc3Nmbl8obGF0LCBzaW5sYXQsIHRoaXMuZSkpIC0gSEFMRl9QSTtcbiAgICBjb3NYID0gTWF0aC5jb3MoWCk7XG4gICAgc2luWCA9IE1hdGguc2luKFgpO1xuICAgIGlmIChNYXRoLmFicyh0aGlzLmNvc2xhdDApIDw9IEVQU0xOKSB7XG4gICAgICB0cyA9IHRzZm56KHRoaXMuZSwgbGF0ICogdGhpcy5jb24sIHRoaXMuY29uICogc2lubGF0KTtcbiAgICAgIHJoID0gMiAqIHRoaXMuYSAqIHRoaXMuazAgKiB0cyAvIHRoaXMuY29ucztcbiAgICAgIHAueCA9IHRoaXMueDAgKyByaCAqIE1hdGguc2luKGxvbiAtIHRoaXMubG9uZzApO1xuICAgICAgcC55ID0gdGhpcy55MCAtIHRoaXMuY29uICogcmggKiBNYXRoLmNvcyhsb24gLSB0aGlzLmxvbmcwKTtcbiAgICAgIC8vdHJhY2UocC50b1N0cmluZygpKTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLnNpbmxhdDApIDwgRVBTTE4pIHtcbiAgICAgIC8vRXFcbiAgICAgIC8vdHJhY2UoJ3N0ZXJlOmVxdWF0ZXVyJyk7XG4gICAgICBBID0gMiAqIHRoaXMuYSAqIHRoaXMuazAgLyAoMSArIGNvc1ggKiBNYXRoLmNvcyhkbG9uKSk7XG4gICAgICBwLnkgPSBBICogc2luWDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvL290aGVyIGNhc2VcbiAgICAgIC8vdHJhY2UoJ3N0ZXJlOm5vcm1hbCBjYXNlJyk7XG4gICAgICBBID0gMiAqIHRoaXMuYSAqIHRoaXMuazAgKiB0aGlzLm1zMSAvICh0aGlzLmNvc1gwICogKDEgKyB0aGlzLnNpblgwICogc2luWCArIHRoaXMuY29zWDAgKiBjb3NYICogTWF0aC5jb3MoZGxvbikpKTtcbiAgICAgIHAueSA9IEEgKiAodGhpcy5jb3NYMCAqIHNpblggLSB0aGlzLnNpblgwICogY29zWCAqIE1hdGguY29zKGRsb24pKSArIHRoaXMueTA7XG4gICAgfVxuICAgIHAueCA9IEEgKiBjb3NYICogTWF0aC5zaW4oZGxvbikgKyB0aGlzLngwO1xuICB9XG4gIC8vdHJhY2UocC50b1N0cmluZygpKTtcbiAgcmV0dXJuIHA7XG59XG5cbi8vKiBTdGVyZW9ncmFwaGljIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZ1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICBwLnggLT0gdGhpcy54MDtcbiAgcC55IC09IHRoaXMueTA7XG4gIHZhciBsb24sIGxhdCwgdHMsIGNlLCBDaGk7XG4gIHZhciByaCA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICB2YXIgYyA9IDIgKiBNYXRoLmF0YW4ocmggLyAoMiAqIHRoaXMuYSAqIHRoaXMuazApKTtcbiAgICBsb24gPSB0aGlzLmxvbmcwO1xuICAgIGxhdCA9IHRoaXMubGF0MDtcbiAgICBpZiAocmggPD0gRVBTTE4pIHtcbiAgICAgIHAueCA9IGxvbjtcbiAgICAgIHAueSA9IGxhdDtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBsYXQgPSBNYXRoLmFzaW4oTWF0aC5jb3MoYykgKiB0aGlzLnNpbmxhdDAgKyBwLnkgKiBNYXRoLnNpbihjKSAqIHRoaXMuY29zbGF0MCAvIHJoKTtcbiAgICBpZiAoTWF0aC5hYnModGhpcy5jb3NsYXQwKSA8IEVQU0xOKSB7XG4gICAgICBpZiAodGhpcy5sYXQwID4gMCkge1xuICAgICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCwgLSAxICogcC55KSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hdGFuMihwLngsIHAueSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIE1hdGguYXRhbjIocC54ICogTWF0aC5zaW4oYyksIHJoICogdGhpcy5jb3NsYXQwICogTWF0aC5jb3MoYykgLSBwLnkgKiB0aGlzLnNpbmxhdDAgKiBNYXRoLnNpbihjKSkpO1xuICAgIH1cbiAgICBwLnggPSBsb247XG4gICAgcC55ID0gbGF0O1xuICAgIHJldHVybiBwO1xuICB9XG4gIGVsc2Uge1xuICAgIGlmIChNYXRoLmFicyh0aGlzLmNvc2xhdDApIDw9IEVQU0xOKSB7XG4gICAgICBpZiAocmggPD0gRVBTTE4pIHtcbiAgICAgICAgbGF0ID0gdGhpcy5sYXQwO1xuICAgICAgICBsb24gPSB0aGlzLmxvbmcwO1xuICAgICAgICBwLnggPSBsb247XG4gICAgICAgIHAueSA9IGxhdDtcbiAgICAgICAgLy90cmFjZShwLnRvU3RyaW5nKCkpO1xuICAgICAgICByZXR1cm4gcDtcbiAgICAgIH1cbiAgICAgIHAueCAqPSB0aGlzLmNvbjtcbiAgICAgIHAueSAqPSB0aGlzLmNvbjtcbiAgICAgIHRzID0gcmggKiB0aGlzLmNvbnMgLyAoMiAqIHRoaXMuYSAqIHRoaXMuazApO1xuICAgICAgbGF0ID0gdGhpcy5jb24gKiBwaGkyeih0aGlzLmUsIHRzKTtcbiAgICAgIGxvbiA9IHRoaXMuY29uICogYWRqdXN0X2xvbih0aGlzLmNvbiAqIHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCwgLSAxICogcC55KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY2UgPSAyICogTWF0aC5hdGFuKHJoICogdGhpcy5jb3NYMCAvICgyICogdGhpcy5hICogdGhpcy5rMCAqIHRoaXMubXMxKSk7XG4gICAgICBsb24gPSB0aGlzLmxvbmcwO1xuICAgICAgaWYgKHJoIDw9IEVQU0xOKSB7XG4gICAgICAgIENoaSA9IHRoaXMuWDA7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgQ2hpID0gTWF0aC5hc2luKE1hdGguY29zKGNlKSAqIHRoaXMuc2luWDAgKyBwLnkgKiBNYXRoLnNpbihjZSkgKiB0aGlzLmNvc1gwIC8gcmgpO1xuICAgICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCAqIE1hdGguc2luKGNlKSwgcmggKiB0aGlzLmNvc1gwICogTWF0aC5jb3MoY2UpIC0gcC55ICogdGhpcy5zaW5YMCAqIE1hdGguc2luKGNlKSkpO1xuICAgICAgfVxuICAgICAgbGF0ID0gLTEgKiBwaGkyeih0aGlzLmUsIE1hdGgudGFuKDAuNSAqIChIQUxGX1BJICsgQ2hpKSkpO1xuICAgIH1cbiAgfVxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcblxuICAvL3RyYWNlKHAudG9TdHJpbmcoKSk7XG4gIHJldHVybiBwO1xuXG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJzdGVyZVwiLCBcIlN0ZXJlb2dyYXBoaWNfU291dGhfUG9sZVwiLCBcIlBvbGFyIFN0ZXJlb2dyYXBoaWMgKHZhcmlhbnQgQilcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lcyxcbiAgc3Nmbl86IHNzZm5fXG59O1xuIiwiLypcbiAgcmVmZXJlbmNlczpcbiAgICBGb3JtdWxlcyBldCBjb25zdGFudGVzIHBvdXIgbGUgQ2FsY3VsIHBvdXIgbGFcbiAgICBwcm9qZWN0aW9uIGN5bGluZHJpcXVlIGNvbmZvcm1lIMOgIGF4ZSBvYmxpcXVlIGV0IHBvdXIgbGEgdHJhbnNmb3JtYXRpb24gZW50cmVcbiAgICBkZXMgc3lzdMOobWVzIGRlIHLDqWbDqXJlbmNlLlxuICAgIGh0dHA6Ly93d3cuc3dpc3N0b3BvLmFkbWluLmNoL2ludGVybmV0L3N3aXNzdG9wby9mci9ob21lL3RvcGljcy9zdXJ2ZXkvc3lzL3JlZnN5cy9zd2l0emVybGFuZC5wYXJzeXNyZWxhdGVkMS4zMTIxNi5kb3dubG9hZExpc3QuNzcwMDQuRG93bmxvYWRGaWxlLnRtcC9zd2lzc3Byb2plY3Rpb25mci5wZGZcbiAgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIHZhciBwaHkwID0gdGhpcy5sYXQwO1xuICB0aGlzLmxhbWJkYTAgPSB0aGlzLmxvbmcwO1xuICB2YXIgc2luUGh5MCA9IE1hdGguc2luKHBoeTApO1xuICB2YXIgc2VtaU1ham9yQXhpcyA9IHRoaXMuYTtcbiAgdmFyIGludkYgPSB0aGlzLnJmO1xuICB2YXIgZmxhdHRlbmluZyA9IDEgLyBpbnZGO1xuICB2YXIgZTIgPSAyICogZmxhdHRlbmluZyAtIE1hdGgucG93KGZsYXR0ZW5pbmcsIDIpO1xuICB2YXIgZSA9IHRoaXMuZSA9IE1hdGguc3FydChlMik7XG4gIHRoaXMuUiA9IHRoaXMuazAgKiBzZW1pTWFqb3JBeGlzICogTWF0aC5zcXJ0KDEgLSBlMikgLyAoMSAtIGUyICogTWF0aC5wb3coc2luUGh5MCwgMikpO1xuICB0aGlzLmFscGhhID0gTWF0aC5zcXJ0KDEgKyBlMiAvICgxIC0gZTIpICogTWF0aC5wb3coTWF0aC5jb3MocGh5MCksIDQpKTtcbiAgdGhpcy5iMCA9IE1hdGguYXNpbihzaW5QaHkwIC8gdGhpcy5hbHBoYSk7XG4gIHZhciBrMSA9IE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0ICsgdGhpcy5iMCAvIDIpKTtcbiAgdmFyIGsyID0gTWF0aC5sb2coTWF0aC50YW4oTWF0aC5QSSAvIDQgKyBwaHkwIC8gMikpO1xuICB2YXIgazMgPSBNYXRoLmxvZygoMSArIGUgKiBzaW5QaHkwKSAvICgxIC0gZSAqIHNpblBoeTApKTtcbiAgdGhpcy5LID0gazEgLSB0aGlzLmFscGhhICogazIgKyB0aGlzLmFscGhhICogZSAvIDIgKiBrMztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgU2ExID0gTWF0aC5sb2coTWF0aC50YW4oTWF0aC5QSSAvIDQgLSBwLnkgLyAyKSk7XG4gIHZhciBTYTIgPSB0aGlzLmUgLyAyICogTWF0aC5sb2coKDEgKyB0aGlzLmUgKiBNYXRoLnNpbihwLnkpKSAvICgxIC0gdGhpcy5lICogTWF0aC5zaW4ocC55KSkpO1xuICB2YXIgUyA9IC10aGlzLmFscGhhICogKFNhMSArIFNhMikgKyB0aGlzLks7XG5cbiAgLy8gc3BoZXJpYyBsYXRpdHVkZVxuICB2YXIgYiA9IDIgKiAoTWF0aC5hdGFuKE1hdGguZXhwKFMpKSAtIE1hdGguUEkgLyA0KTtcblxuICAvLyBzcGhlcmljIGxvbmdpdHVkZVxuICB2YXIgSSA9IHRoaXMuYWxwaGEgKiAocC54IC0gdGhpcy5sYW1iZGEwKTtcblxuICAvLyBwc29ldWRvIGVxdWF0b3JpYWwgcm90YXRpb25cbiAgdmFyIHJvdEkgPSBNYXRoLmF0YW4oTWF0aC5zaW4oSSkgLyAoTWF0aC5zaW4odGhpcy5iMCkgKiBNYXRoLnRhbihiKSArIE1hdGguY29zKHRoaXMuYjApICogTWF0aC5jb3MoSSkpKTtcblxuICB2YXIgcm90QiA9IE1hdGguYXNpbihNYXRoLmNvcyh0aGlzLmIwKSAqIE1hdGguc2luKGIpIC0gTWF0aC5zaW4odGhpcy5iMCkgKiBNYXRoLmNvcyhiKSAqIE1hdGguY29zKEkpKTtcblxuICBwLnkgPSB0aGlzLlIgLyAyICogTWF0aC5sb2coKDEgKyBNYXRoLnNpbihyb3RCKSkgLyAoMSAtIE1hdGguc2luKHJvdEIpKSkgKyB0aGlzLnkwO1xuICBwLnggPSB0aGlzLlIgKiByb3RJICsgdGhpcy54MDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIFkgPSBwLnggLSB0aGlzLngwO1xuICB2YXIgWCA9IHAueSAtIHRoaXMueTA7XG5cbiAgdmFyIHJvdEkgPSBZIC8gdGhpcy5SO1xuICB2YXIgcm90QiA9IDIgKiAoTWF0aC5hdGFuKE1hdGguZXhwKFggLyB0aGlzLlIpKSAtIE1hdGguUEkgLyA0KTtcblxuICB2YXIgYiA9IE1hdGguYXNpbihNYXRoLmNvcyh0aGlzLmIwKSAqIE1hdGguc2luKHJvdEIpICsgTWF0aC5zaW4odGhpcy5iMCkgKiBNYXRoLmNvcyhyb3RCKSAqIE1hdGguY29zKHJvdEkpKTtcbiAgdmFyIEkgPSBNYXRoLmF0YW4oTWF0aC5zaW4ocm90SSkgLyAoTWF0aC5jb3ModGhpcy5iMCkgKiBNYXRoLmNvcyhyb3RJKSAtIE1hdGguc2luKHRoaXMuYjApICogTWF0aC50YW4ocm90QikpKTtcblxuICB2YXIgbGFtYmRhID0gdGhpcy5sYW1iZGEwICsgSSAvIHRoaXMuYWxwaGE7XG5cbiAgdmFyIFMgPSAwO1xuICB2YXIgcGh5ID0gYjtcbiAgdmFyIHByZXZQaHkgPSAtMTAwMDtcbiAgdmFyIGl0ZXJhdGlvbiA9IDA7XG4gIHdoaWxlIChNYXRoLmFicyhwaHkgLSBwcmV2UGh5KSA+IDAuMDAwMDAwMSkge1xuICAgIGlmICgrK2l0ZXJhdGlvbiA+IDIwKSB7XG4gICAgICAvLy4uLnJlcG9ydEVycm9yKFwib21lcmNGd2RJbmZpbml0eVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy9TID0gTWF0aC5sb2coTWF0aC50YW4oTWF0aC5QSSAvIDQgKyBwaHkgLyAyKSk7XG4gICAgUyA9IDEgLyB0aGlzLmFscGhhICogKE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0ICsgYiAvIDIpKSAtIHRoaXMuSykgKyB0aGlzLmUgKiBNYXRoLmxvZyhNYXRoLnRhbihNYXRoLlBJIC8gNCArIE1hdGguYXNpbih0aGlzLmUgKiBNYXRoLnNpbihwaHkpKSAvIDIpKTtcbiAgICBwcmV2UGh5ID0gcGh5O1xuICAgIHBoeSA9IDIgKiBNYXRoLmF0YW4oTWF0aC5leHAoUykpIC0gTWF0aC5QSSAvIDI7XG4gIH1cblxuICBwLnggPSBsYW1iZGE7XG4gIHAueSA9IHBoeTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJzb21lcmNcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCB0c2ZueiBmcm9tICcuLi9jb21tb24vdHNmbnonO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IHBoaTJ6IGZyb20gJy4uL2NvbW1vbi9waGkyeic7XG5pbXBvcnQge0VQU0xOLCBIQUxGX1BJLCBGT1JUUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG4vKiBJbml0aWFsaXplIHRoZSBPYmxpcXVlIE1lcmNhdG9yICBwcm9qZWN0aW9uXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLm5vX29mZiA9IHRoaXMubm9fb2ZmIHx8IGZhbHNlO1xuICB0aGlzLm5vX3JvdCA9IHRoaXMubm9fcm90IHx8IGZhbHNlO1xuXG4gIGlmIChpc05hTih0aGlzLmswKSkge1xuICAgIHRoaXMuazAgPSAxO1xuICB9XG4gIHZhciBzaW5sYXQgPSBNYXRoLnNpbih0aGlzLmxhdDApO1xuICB2YXIgY29zbGF0ID0gTWF0aC5jb3ModGhpcy5sYXQwKTtcbiAgdmFyIGNvbiA9IHRoaXMuZSAqIHNpbmxhdDtcblxuICB0aGlzLmJsID0gTWF0aC5zcXJ0KDEgKyB0aGlzLmVzIC8gKDEgLSB0aGlzLmVzKSAqIE1hdGgucG93KGNvc2xhdCwgNCkpO1xuICB0aGlzLmFsID0gdGhpcy5hICogdGhpcy5ibCAqIHRoaXMuazAgKiBNYXRoLnNxcnQoMSAtIHRoaXMuZXMpIC8gKDEgLSBjb24gKiBjb24pO1xuICB2YXIgdDAgPSB0c2Zueih0aGlzLmUsIHRoaXMubGF0MCwgc2lubGF0KTtcbiAgdmFyIGRsID0gdGhpcy5ibCAvIGNvc2xhdCAqIE1hdGguc3FydCgoMSAtIHRoaXMuZXMpIC8gKDEgLSBjb24gKiBjb24pKTtcbiAgaWYgKGRsICogZGwgPCAxKSB7XG4gICAgZGwgPSAxO1xuICB9XG4gIHZhciBmbDtcbiAgdmFyIGdsO1xuICBpZiAoIWlzTmFOKHRoaXMubG9uZ2MpKSB7XG4gICAgLy9DZW50cmFsIHBvaW50IGFuZCBhemltdXRoIG1ldGhvZFxuXG4gICAgaWYgKHRoaXMubGF0MCA+PSAwKSB7XG4gICAgICBmbCA9IGRsICsgTWF0aC5zcXJ0KGRsICogZGwgLSAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmbCA9IGRsIC0gTWF0aC5zcXJ0KGRsICogZGwgLSAxKTtcbiAgICB9XG4gICAgdGhpcy5lbCA9IGZsICogTWF0aC5wb3codDAsIHRoaXMuYmwpO1xuICAgIGdsID0gMC41ICogKGZsIC0gMSAvIGZsKTtcbiAgICB0aGlzLmdhbW1hMCA9IE1hdGguYXNpbihNYXRoLnNpbih0aGlzLmFscGhhKSAvIGRsKTtcbiAgICB0aGlzLmxvbmcwID0gdGhpcy5sb25nYyAtIE1hdGguYXNpbihnbCAqIE1hdGgudGFuKHRoaXMuZ2FtbWEwKSkgLyB0aGlzLmJsO1xuXG4gIH1cbiAgZWxzZSB7XG4gICAgLy8yIHBvaW50cyBtZXRob2RcbiAgICB2YXIgdDEgPSB0c2Zueih0aGlzLmUsIHRoaXMubGF0MSwgTWF0aC5zaW4odGhpcy5sYXQxKSk7XG4gICAgdmFyIHQyID0gdHNmbnoodGhpcy5lLCB0aGlzLmxhdDIsIE1hdGguc2luKHRoaXMubGF0MikpO1xuICAgIGlmICh0aGlzLmxhdDAgPj0gMCkge1xuICAgICAgdGhpcy5lbCA9IChkbCArIE1hdGguc3FydChkbCAqIGRsIC0gMSkpICogTWF0aC5wb3codDAsIHRoaXMuYmwpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZWwgPSAoZGwgLSBNYXRoLnNxcnQoZGwgKiBkbCAtIDEpKSAqIE1hdGgucG93KHQwLCB0aGlzLmJsKTtcbiAgICB9XG4gICAgdmFyIGhsID0gTWF0aC5wb3codDEsIHRoaXMuYmwpO1xuICAgIHZhciBsbCA9IE1hdGgucG93KHQyLCB0aGlzLmJsKTtcbiAgICBmbCA9IHRoaXMuZWwgLyBobDtcbiAgICBnbCA9IDAuNSAqIChmbCAtIDEgLyBmbCk7XG4gICAgdmFyIGpsID0gKHRoaXMuZWwgKiB0aGlzLmVsIC0gbGwgKiBobCkgLyAodGhpcy5lbCAqIHRoaXMuZWwgKyBsbCAqIGhsKTtcbiAgICB2YXIgcGwgPSAobGwgLSBobCkgLyAobGwgKyBobCk7XG4gICAgdmFyIGRsb24xMiA9IGFkanVzdF9sb24odGhpcy5sb25nMSAtIHRoaXMubG9uZzIpO1xuICAgIHRoaXMubG9uZzAgPSAwLjUgKiAodGhpcy5sb25nMSArIHRoaXMubG9uZzIpIC0gTWF0aC5hdGFuKGpsICogTWF0aC50YW4oMC41ICogdGhpcy5ibCAqIChkbG9uMTIpKSAvIHBsKSAvIHRoaXMuYmw7XG4gICAgdGhpcy5sb25nMCA9IGFkanVzdF9sb24odGhpcy5sb25nMCk7XG4gICAgdmFyIGRsb24xMCA9IGFkanVzdF9sb24odGhpcy5sb25nMSAtIHRoaXMubG9uZzApO1xuICAgIHRoaXMuZ2FtbWEwID0gTWF0aC5hdGFuKE1hdGguc2luKHRoaXMuYmwgKiAoZGxvbjEwKSkgLyBnbCk7XG4gICAgdGhpcy5hbHBoYSA9IE1hdGguYXNpbihkbCAqIE1hdGguc2luKHRoaXMuZ2FtbWEwKSk7XG4gIH1cblxuICBpZiAodGhpcy5ub19vZmYpIHtcbiAgICB0aGlzLnVjID0gMDtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiAodGhpcy5sYXQwID49IDApIHtcbiAgICAgIHRoaXMudWMgPSB0aGlzLmFsIC8gdGhpcy5ibCAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGRsICogZGwgLSAxKSwgTWF0aC5jb3ModGhpcy5hbHBoYSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudWMgPSAtMSAqIHRoaXMuYWwgLyB0aGlzLmJsICogTWF0aC5hdGFuMihNYXRoLnNxcnQoZGwgKiBkbCAtIDEpLCBNYXRoLmNvcyh0aGlzLmFscGhhKSk7XG4gICAgfVxuICB9XG5cbn1cblxuLyogT2JsaXF1ZSBNZXJjYXRvciBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgdmFyIGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICB2YXIgdXMsIHZzO1xuICB2YXIgY29uO1xuICBpZiAoTWF0aC5hYnMoTWF0aC5hYnMobGF0KSAtIEhBTEZfUEkpIDw9IEVQU0xOKSB7XG4gICAgaWYgKGxhdCA+IDApIHtcbiAgICAgIGNvbiA9IC0xO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbiA9IDE7XG4gICAgfVxuICAgIHZzID0gdGhpcy5hbCAvIHRoaXMuYmwgKiBNYXRoLmxvZyhNYXRoLnRhbihGT1JUUEkgKyBjb24gKiB0aGlzLmdhbW1hMCAqIDAuNSkpO1xuICAgIHVzID0gLTEgKiBjb24gKiBIQUxGX1BJICogdGhpcy5hbCAvIHRoaXMuYmw7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIHQgPSB0c2Zueih0aGlzLmUsIGxhdCwgTWF0aC5zaW4obGF0KSk7XG4gICAgdmFyIHFsID0gdGhpcy5lbCAvIE1hdGgucG93KHQsIHRoaXMuYmwpO1xuICAgIHZhciBzbCA9IDAuNSAqIChxbCAtIDEgLyBxbCk7XG4gICAgdmFyIHRsID0gMC41ICogKHFsICsgMSAvIHFsKTtcbiAgICB2YXIgdmwgPSBNYXRoLnNpbih0aGlzLmJsICogKGRsb24pKTtcbiAgICB2YXIgdWwgPSAoc2wgKiBNYXRoLnNpbih0aGlzLmdhbW1hMCkgLSB2bCAqIE1hdGguY29zKHRoaXMuZ2FtbWEwKSkgLyB0bDtcbiAgICBpZiAoTWF0aC5hYnMoTWF0aC5hYnModWwpIC0gMSkgPD0gRVBTTE4pIHtcbiAgICAgIHZzID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZzID0gMC41ICogdGhpcy5hbCAqIE1hdGgubG9nKCgxIC0gdWwpIC8gKDEgKyB1bCkpIC8gdGhpcy5ibDtcbiAgICB9XG4gICAgaWYgKE1hdGguYWJzKE1hdGguY29zKHRoaXMuYmwgKiAoZGxvbikpKSA8PSBFUFNMTikge1xuICAgICAgdXMgPSB0aGlzLmFsICogdGhpcy5ibCAqIChkbG9uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB1cyA9IHRoaXMuYWwgKiBNYXRoLmF0YW4yKHNsICogTWF0aC5jb3ModGhpcy5nYW1tYTApICsgdmwgKiBNYXRoLnNpbih0aGlzLmdhbW1hMCksIE1hdGguY29zKHRoaXMuYmwgKiBkbG9uKSkgLyB0aGlzLmJsO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLm5vX3JvdCkge1xuICAgIHAueCA9IHRoaXMueDAgKyB1cztcbiAgICBwLnkgPSB0aGlzLnkwICsgdnM7XG4gIH1cbiAgZWxzZSB7XG5cbiAgICB1cyAtPSB0aGlzLnVjO1xuICAgIHAueCA9IHRoaXMueDAgKyB2cyAqIE1hdGguY29zKHRoaXMuYWxwaGEpICsgdXMgKiBNYXRoLnNpbih0aGlzLmFscGhhKTtcbiAgICBwLnkgPSB0aGlzLnkwICsgdXMgKiBNYXRoLmNvcyh0aGlzLmFscGhhKSAtIHZzICogTWF0aC5zaW4odGhpcy5hbHBoYSk7XG4gIH1cbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIHVzLCB2cztcbiAgaWYgKHRoaXMubm9fcm90KSB7XG4gICAgdnMgPSBwLnkgLSB0aGlzLnkwO1xuICAgIHVzID0gcC54IC0gdGhpcy54MDtcbiAgfVxuICBlbHNlIHtcbiAgICB2cyA9IChwLnggLSB0aGlzLngwKSAqIE1hdGguY29zKHRoaXMuYWxwaGEpIC0gKHAueSAtIHRoaXMueTApICogTWF0aC5zaW4odGhpcy5hbHBoYSk7XG4gICAgdXMgPSAocC55IC0gdGhpcy55MCkgKiBNYXRoLmNvcyh0aGlzLmFscGhhKSArIChwLnggLSB0aGlzLngwKSAqIE1hdGguc2luKHRoaXMuYWxwaGEpO1xuICAgIHVzICs9IHRoaXMudWM7XG4gIH1cbiAgdmFyIHFwID0gTWF0aC5leHAoLTEgKiB0aGlzLmJsICogdnMgLyB0aGlzLmFsKTtcbiAgdmFyIHNwID0gMC41ICogKHFwIC0gMSAvIHFwKTtcbiAgdmFyIHRwID0gMC41ICogKHFwICsgMSAvIHFwKTtcbiAgdmFyIHZwID0gTWF0aC5zaW4odGhpcy5ibCAqIHVzIC8gdGhpcy5hbCk7XG4gIHZhciB1cCA9ICh2cCAqIE1hdGguY29zKHRoaXMuZ2FtbWEwKSArIHNwICogTWF0aC5zaW4odGhpcy5nYW1tYTApKSAvIHRwO1xuICB2YXIgdHMgPSBNYXRoLnBvdyh0aGlzLmVsIC8gTWF0aC5zcXJ0KCgxICsgdXApIC8gKDEgLSB1cCkpLCAxIC8gdGhpcy5ibCk7XG4gIGlmIChNYXRoLmFicyh1cCAtIDEpIDwgRVBTTE4pIHtcbiAgICBwLnggPSB0aGlzLmxvbmcwO1xuICAgIHAueSA9IEhBTEZfUEk7XG4gIH1cbiAgZWxzZSBpZiAoTWF0aC5hYnModXAgKyAxKSA8IEVQU0xOKSB7XG4gICAgcC54ID0gdGhpcy5sb25nMDtcbiAgICBwLnkgPSAtMSAqIEhBTEZfUEk7XG4gIH1cbiAgZWxzZSB7XG4gICAgcC55ID0gcGhpMnoodGhpcy5lLCB0cyk7XG4gICAgcC54ID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwIC0gTWF0aC5hdGFuMihzcCAqIE1hdGguY29zKHRoaXMuZ2FtbWEwKSAtIHZwICogTWF0aC5zaW4odGhpcy5nYW1tYTApLCBNYXRoLmNvcyh0aGlzLmJsICogdXMgLyB0aGlzLmFsKSkgLyB0aGlzLmJsKTtcbiAgfVxuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIkhvdGluZV9PYmxpcXVlX01lcmNhdG9yXCIsIFwiSG90aW5lIE9ibGlxdWUgTWVyY2F0b3JcIiwgXCJIb3RpbmVfT2JsaXF1ZV9NZXJjYXRvcl9BemltdXRoX05hdHVyYWxfT3JpZ2luXCIsIFwiSG90aW5lX09ibGlxdWVfTWVyY2F0b3JfQXppbXV0aF9DZW50ZXJcIiwgXCJvbWVyY1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IG1zZm56IGZyb20gJy4uL2NvbW1vbi9tc2Zueic7XG5pbXBvcnQgdHNmbnogZnJvbSAnLi4vY29tbW9uL3RzZm56JztcbmltcG9ydCBzaWduIGZyb20gJy4uL2NvbW1vbi9zaWduJztcbmltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCBwaGkyeiBmcm9tICcuLi9jb21tb24vcGhpMnonO1xuaW1wb3J0IHtIQUxGX1BJLCBFUFNMTn0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcblxuICAvLyBhcnJheSBvZjogIHJfbWFqLHJfbWluLGxhdDEsbGF0MixjX2xvbixjX2xhdCxmYWxzZV9lYXN0LGZhbHNlX25vcnRoXG4gIC8vZG91YmxlIGNfbGF0OyAgICAgICAgICAgICAgICAgICAvKiBjZW50ZXIgbGF0aXR1ZGUgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgLy9kb3VibGUgY19sb247ICAgICAgICAgICAgICAgICAgIC8qIGNlbnRlciBsb25naXR1ZGUgICAgICAgICAgICAgICAgICAgICAqL1xuICAvL2RvdWJsZSBsYXQxOyAgICAgICAgICAgICAgICAgICAgLyogZmlyc3Qgc3RhbmRhcmQgcGFyYWxsZWwgICAgICAgICAgICAgICovXG4gIC8vZG91YmxlIGxhdDI7ICAgICAgICAgICAgICAgICAgICAvKiBzZWNvbmQgc3RhbmRhcmQgcGFyYWxsZWwgICAgICAgICAgICAgKi9cbiAgLy9kb3VibGUgcl9tYWo7ICAgICAgICAgICAgICAgICAgIC8qIG1ham9yIGF4aXMgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAvL2RvdWJsZSByX21pbjsgICAgICAgICAgICAgICAgICAgLyogbWlub3IgYXhpcyAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIC8vZG91YmxlIGZhbHNlX2Vhc3Q7ICAgICAgICAgICAgICAvKiB4IG9mZnNldCBpbiBtZXRlcnMgICAgICAgICAgICAgICAgICAgKi9cbiAgLy9kb3VibGUgZmFsc2Vfbm9ydGg7ICAgICAgICAgICAgIC8qIHkgb2Zmc2V0IGluIG1ldGVycyAgICAgICAgICAgICAgICAgICAqL1xuXG4gIGlmICghdGhpcy5sYXQyKSB7XG4gICAgdGhpcy5sYXQyID0gdGhpcy5sYXQxO1xuICB9IC8vaWYgbGF0MiBpcyBub3QgZGVmaW5lZFxuICBpZiAoIXRoaXMuazApIHtcbiAgICB0aGlzLmswID0gMTtcbiAgfVxuICB0aGlzLngwID0gdGhpcy54MCB8fCAwO1xuICB0aGlzLnkwID0gdGhpcy55MCB8fCAwO1xuICAvLyBTdGFuZGFyZCBQYXJhbGxlbHMgY2Fubm90IGJlIGVxdWFsIGFuZCBvbiBvcHBvc2l0ZSBzaWRlcyBvZiB0aGUgZXF1YXRvclxuICBpZiAoTWF0aC5hYnModGhpcy5sYXQxICsgdGhpcy5sYXQyKSA8IEVQU0xOKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRlbXAgPSB0aGlzLmIgLyB0aGlzLmE7XG4gIHRoaXMuZSA9IE1hdGguc3FydCgxIC0gdGVtcCAqIHRlbXApO1xuXG4gIHZhciBzaW4xID0gTWF0aC5zaW4odGhpcy5sYXQxKTtcbiAgdmFyIGNvczEgPSBNYXRoLmNvcyh0aGlzLmxhdDEpO1xuICB2YXIgbXMxID0gbXNmbnoodGhpcy5lLCBzaW4xLCBjb3MxKTtcbiAgdmFyIHRzMSA9IHRzZm56KHRoaXMuZSwgdGhpcy5sYXQxLCBzaW4xKTtcblxuICB2YXIgc2luMiA9IE1hdGguc2luKHRoaXMubGF0Mik7XG4gIHZhciBjb3MyID0gTWF0aC5jb3ModGhpcy5sYXQyKTtcbiAgdmFyIG1zMiA9IG1zZm56KHRoaXMuZSwgc2luMiwgY29zMik7XG4gIHZhciB0czIgPSB0c2Zueih0aGlzLmUsIHRoaXMubGF0Miwgc2luMik7XG5cbiAgdmFyIHRzMCA9IHRzZm56KHRoaXMuZSwgdGhpcy5sYXQwLCBNYXRoLnNpbih0aGlzLmxhdDApKTtcblxuICBpZiAoTWF0aC5hYnModGhpcy5sYXQxIC0gdGhpcy5sYXQyKSA+IEVQU0xOKSB7XG4gICAgdGhpcy5ucyA9IE1hdGgubG9nKG1zMSAvIG1zMikgLyBNYXRoLmxvZyh0czEgLyB0czIpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMubnMgPSBzaW4xO1xuICB9XG4gIGlmIChpc05hTih0aGlzLm5zKSkge1xuICAgIHRoaXMubnMgPSBzaW4xO1xuICB9XG4gIHRoaXMuZjAgPSBtczEgLyAodGhpcy5ucyAqIE1hdGgucG93KHRzMSwgdGhpcy5ucykpO1xuICB0aGlzLnJoID0gdGhpcy5hICogdGhpcy5mMCAqIE1hdGgucG93KHRzMCwgdGhpcy5ucyk7XG4gIGlmICghdGhpcy50aXRsZSkge1xuICAgIHRoaXMudGl0bGUgPSBcIkxhbWJlcnQgQ29uZm9ybWFsIENvbmljXCI7XG4gIH1cbn1cblxuLy8gTGFtYmVydCBDb25mb3JtYWwgY29uaWMgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuXG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG5cbiAgLy8gc2luZ3VsYXIgY2FzZXMgOlxuICBpZiAoTWF0aC5hYnMoMiAqIE1hdGguYWJzKGxhdCkgLSBNYXRoLlBJKSA8PSBFUFNMTikge1xuICAgIGxhdCA9IHNpZ24obGF0KSAqIChIQUxGX1BJIC0gMiAqIEVQU0xOKTtcbiAgfVxuXG4gIHZhciBjb24gPSBNYXRoLmFicyhNYXRoLmFicyhsYXQpIC0gSEFMRl9QSSk7XG4gIHZhciB0cywgcmgxO1xuICBpZiAoY29uID4gRVBTTE4pIHtcbiAgICB0cyA9IHRzZm56KHRoaXMuZSwgbGF0LCBNYXRoLnNpbihsYXQpKTtcbiAgICByaDEgPSB0aGlzLmEgKiB0aGlzLmYwICogTWF0aC5wb3codHMsIHRoaXMubnMpO1xuICB9XG4gIGVsc2Uge1xuICAgIGNvbiA9IGxhdCAqIHRoaXMubnM7XG4gICAgaWYgKGNvbiA8PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmgxID0gMDtcbiAgfVxuICB2YXIgdGhldGEgPSB0aGlzLm5zICogYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgcC54ID0gdGhpcy5rMCAqIChyaDEgKiBNYXRoLnNpbih0aGV0YSkpICsgdGhpcy54MDtcbiAgcC55ID0gdGhpcy5rMCAqICh0aGlzLnJoIC0gcmgxICogTWF0aC5jb3ModGhldGEpKSArIHRoaXMueTA7XG5cbiAgcmV0dXJuIHA7XG59XG5cbi8vIExhbWJlcnQgQ29uZm9ybWFsIENvbmljIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZ1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcblxuICB2YXIgcmgxLCBjb24sIHRzO1xuICB2YXIgbGF0LCBsb247XG4gIHZhciB4ID0gKHAueCAtIHRoaXMueDApIC8gdGhpcy5rMDtcbiAgdmFyIHkgPSAodGhpcy5yaCAtIChwLnkgLSB0aGlzLnkwKSAvIHRoaXMuazApO1xuICBpZiAodGhpcy5ucyA+IDApIHtcbiAgICByaDEgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgY29uID0gMTtcbiAgfVxuICBlbHNlIHtcbiAgICByaDEgPSAtTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgIGNvbiA9IC0xO1xuICB9XG4gIHZhciB0aGV0YSA9IDA7XG4gIGlmIChyaDEgIT09IDApIHtcbiAgICB0aGV0YSA9IE1hdGguYXRhbjIoKGNvbiAqIHgpLCAoY29uICogeSkpO1xuICB9XG4gIGlmICgocmgxICE9PSAwKSB8fCAodGhpcy5ucyA+IDApKSB7XG4gICAgY29uID0gMSAvIHRoaXMubnM7XG4gICAgdHMgPSBNYXRoLnBvdygocmgxIC8gKHRoaXMuYSAqIHRoaXMuZjApKSwgY29uKTtcbiAgICBsYXQgPSBwaGkyeih0aGlzLmUsIHRzKTtcbiAgICBpZiAobGF0ID09PSAtOTk5OSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGxhdCA9IC1IQUxGX1BJO1xuICB9XG4gIGxvbiA9IGFkanVzdF9sb24odGhldGEgLyB0aGlzLm5zICsgdGhpcy5sb25nMCk7XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiTGFtYmVydCBUYW5nZW50aWFsIENvbmZvcm1hbCBDb25pYyBQcm9qZWN0aW9uXCIsIFwiTGFtYmVydF9Db25mb3JtYWxfQ29uaWNcIiwgXCJMYW1iZXJ0X0NvbmZvcm1hbF9Db25pY18yU1BcIiwgXCJsY2NcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIHRoaXMuYSA9IDYzNzczOTcuMTU1O1xuICB0aGlzLmVzID0gMC4wMDY2NzQzNzIyMzA2MTQ7XG4gIHRoaXMuZSA9IE1hdGguc3FydCh0aGlzLmVzKTtcbiAgaWYgKCF0aGlzLmxhdDApIHtcbiAgICB0aGlzLmxhdDAgPSAwLjg2MzkzNzk3OTczNzE5MztcbiAgfVxuICBpZiAoIXRoaXMubG9uZzApIHtcbiAgICB0aGlzLmxvbmcwID0gMC43NDE3NjQ5MzIwOTc1OTAxIC0gMC4zMDgzNDE1MDExODU2NjU7XG4gIH1cbiAgLyogaWYgc2NhbGUgbm90IHNldCBkZWZhdWx0IHRvIDAuOTk5OSAqL1xuICBpZiAoIXRoaXMuazApIHtcbiAgICB0aGlzLmswID0gMC45OTk5O1xuICB9XG4gIHRoaXMuczQ1ID0gMC43ODUzOTgxNjMzOTc0NDg7IC8qIDQ1ICovXG4gIHRoaXMuczkwID0gMiAqIHRoaXMuczQ1O1xuICB0aGlzLmZpMCA9IHRoaXMubGF0MDtcbiAgdGhpcy5lMiA9IHRoaXMuZXM7XG4gIHRoaXMuZSA9IE1hdGguc3FydCh0aGlzLmUyKTtcbiAgdGhpcy5hbGZhID0gTWF0aC5zcXJ0KDEgKyAodGhpcy5lMiAqIE1hdGgucG93KE1hdGguY29zKHRoaXMuZmkwKSwgNCkpIC8gKDEgLSB0aGlzLmUyKSk7XG4gIHRoaXMudXEgPSAxLjA0MjE2ODU2MzgwNDc0O1xuICB0aGlzLnUwID0gTWF0aC5hc2luKE1hdGguc2luKHRoaXMuZmkwKSAvIHRoaXMuYWxmYSk7XG4gIHRoaXMuZyA9IE1hdGgucG93KCgxICsgdGhpcy5lICogTWF0aC5zaW4odGhpcy5maTApKSAvICgxIC0gdGhpcy5lICogTWF0aC5zaW4odGhpcy5maTApKSwgdGhpcy5hbGZhICogdGhpcy5lIC8gMik7XG4gIHRoaXMuayA9IE1hdGgudGFuKHRoaXMudTAgLyAyICsgdGhpcy5zNDUpIC8gTWF0aC5wb3coTWF0aC50YW4odGhpcy5maTAgLyAyICsgdGhpcy5zNDUpLCB0aGlzLmFsZmEpICogdGhpcy5nO1xuICB0aGlzLmsxID0gdGhpcy5rMDtcbiAgdGhpcy5uMCA9IHRoaXMuYSAqIE1hdGguc3FydCgxIC0gdGhpcy5lMikgLyAoMSAtIHRoaXMuZTIgKiBNYXRoLnBvdyhNYXRoLnNpbih0aGlzLmZpMCksIDIpKTtcbiAgdGhpcy5zMCA9IDEuMzcwMDgzNDYyODE1NTU7XG4gIHRoaXMubiA9IE1hdGguc2luKHRoaXMuczApO1xuICB0aGlzLnJvMCA9IHRoaXMuazEgKiB0aGlzLm4wIC8gTWF0aC50YW4odGhpcy5zMCk7XG4gIHRoaXMuYWQgPSB0aGlzLnM5MCAtIHRoaXMudXE7XG59XG5cbi8qIGVsbGlwc29pZCAqL1xuLyogY2FsY3VsYXRlIHh5IGZyb20gbGF0L2xvbiAqL1xuLyogQ29uc3RhbnRzLCBpZGVudGljYWwgdG8gaW52ZXJzZSB0cmFuc2Zvcm0gZnVuY3Rpb24gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGdmaSwgdSwgZGVsdGF2LCBzLCBkLCBlcHMsIHJvO1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuICB2YXIgZGVsdGFfbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgLyogVHJhbnNmb3JtYXRpb24gKi9cbiAgZ2ZpID0gTWF0aC5wb3coKCgxICsgdGhpcy5lICogTWF0aC5zaW4obGF0KSkgLyAoMSAtIHRoaXMuZSAqIE1hdGguc2luKGxhdCkpKSwgKHRoaXMuYWxmYSAqIHRoaXMuZSAvIDIpKTtcbiAgdSA9IDIgKiAoTWF0aC5hdGFuKHRoaXMuayAqIE1hdGgucG93KE1hdGgudGFuKGxhdCAvIDIgKyB0aGlzLnM0NSksIHRoaXMuYWxmYSkgLyBnZmkpIC0gdGhpcy5zNDUpO1xuICBkZWx0YXYgPSAtZGVsdGFfbG9uICogdGhpcy5hbGZhO1xuICBzID0gTWF0aC5hc2luKE1hdGguY29zKHRoaXMuYWQpICogTWF0aC5zaW4odSkgKyBNYXRoLnNpbih0aGlzLmFkKSAqIE1hdGguY29zKHUpICogTWF0aC5jb3MoZGVsdGF2KSk7XG4gIGQgPSBNYXRoLmFzaW4oTWF0aC5jb3ModSkgKiBNYXRoLnNpbihkZWx0YXYpIC8gTWF0aC5jb3MocykpO1xuICBlcHMgPSB0aGlzLm4gKiBkO1xuICBybyA9IHRoaXMucm8wICogTWF0aC5wb3coTWF0aC50YW4odGhpcy5zMCAvIDIgKyB0aGlzLnM0NSksIHRoaXMubikgLyBNYXRoLnBvdyhNYXRoLnRhbihzIC8gMiArIHRoaXMuczQ1KSwgdGhpcy5uKTtcbiAgcC55ID0gcm8gKiBNYXRoLmNvcyhlcHMpIC8gMTtcbiAgcC54ID0gcm8gKiBNYXRoLnNpbihlcHMpIC8gMTtcblxuICBpZiAoIXRoaXMuY3plY2gpIHtcbiAgICBwLnkgKj0gLTE7XG4gICAgcC54ICo9IC0xO1xuICB9XG4gIHJldHVybiAocCk7XG59XG5cbi8qIGNhbGN1bGF0ZSBsYXQvbG9uIGZyb20geHkgKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIHUsIGRlbHRhdiwgcywgZCwgZXBzLCBybywgZmkxO1xuICB2YXIgb2s7XG5cbiAgLyogVHJhbnNmb3JtYXRpb24gKi9cbiAgLyogcmV2ZXJ0IHksIHgqL1xuICB2YXIgdG1wID0gcC54O1xuICBwLnggPSBwLnk7XG4gIHAueSA9IHRtcDtcbiAgaWYgKCF0aGlzLmN6ZWNoKSB7XG4gICAgcC55ICo9IC0xO1xuICAgIHAueCAqPSAtMTtcbiAgfVxuICBybyA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICBlcHMgPSBNYXRoLmF0YW4yKHAueSwgcC54KTtcbiAgZCA9IGVwcyAvIE1hdGguc2luKHRoaXMuczApO1xuICBzID0gMiAqIChNYXRoLmF0YW4oTWF0aC5wb3codGhpcy5ybzAgLyBybywgMSAvIHRoaXMubikgKiBNYXRoLnRhbih0aGlzLnMwIC8gMiArIHRoaXMuczQ1KSkgLSB0aGlzLnM0NSk7XG4gIHUgPSBNYXRoLmFzaW4oTWF0aC5jb3ModGhpcy5hZCkgKiBNYXRoLnNpbihzKSAtIE1hdGguc2luKHRoaXMuYWQpICogTWF0aC5jb3MocykgKiBNYXRoLmNvcyhkKSk7XG4gIGRlbHRhdiA9IE1hdGguYXNpbihNYXRoLmNvcyhzKSAqIE1hdGguc2luKGQpIC8gTWF0aC5jb3ModSkpO1xuICBwLnggPSB0aGlzLmxvbmcwIC0gZGVsdGF2IC8gdGhpcy5hbGZhO1xuICBmaTEgPSB1O1xuICBvayA9IDA7XG4gIHZhciBpdGVyID0gMDtcbiAgZG8ge1xuICAgIHAueSA9IDIgKiAoTWF0aC5hdGFuKE1hdGgucG93KHRoaXMuaywgLSAxIC8gdGhpcy5hbGZhKSAqIE1hdGgucG93KE1hdGgudGFuKHUgLyAyICsgdGhpcy5zNDUpLCAxIC8gdGhpcy5hbGZhKSAqIE1hdGgucG93KCgxICsgdGhpcy5lICogTWF0aC5zaW4oZmkxKSkgLyAoMSAtIHRoaXMuZSAqIE1hdGguc2luKGZpMSkpLCB0aGlzLmUgLyAyKSkgLSB0aGlzLnM0NSk7XG4gICAgaWYgKE1hdGguYWJzKGZpMSAtIHAueSkgPCAwLjAwMDAwMDAwMDEpIHtcbiAgICAgIG9rID0gMTtcbiAgICB9XG4gICAgZmkxID0gcC55O1xuICAgIGl0ZXIgKz0gMTtcbiAgfSB3aGlsZSAob2sgPT09IDAgJiYgaXRlciA8IDE1KTtcbiAgaWYgKGl0ZXIgPj0gMTUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAocCk7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJLcm92YWtcIiwgXCJrcm92YWtcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGUwLCBlMSwgZTIsIGUzLCBwaGkpIHtcbiAgcmV0dXJuIChlMCAqIHBoaSAtIGUxICogTWF0aC5zaW4oMiAqIHBoaSkgKyBlMiAqIE1hdGguc2luKDQgKiBwaGkpIC0gZTMgKiBNYXRoLnNpbig2ICogcGhpKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gKDEgLSAwLjI1ICogeCAqICgxICsgeCAvIDE2ICogKDMgKyAxLjI1ICogeCkpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAoMC4zNzUgKiB4ICogKDEgKyAwLjI1ICogeCAqICgxICsgMC40Njg3NSAqIHgpKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gKDAuMDU4NTkzNzUgKiB4ICogeCAqICgxICsgMC43NSAqIHgpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAoeCAqIHggKiB4ICogKDM1IC8gMzA3MikpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGUsIHNpbnBoaSkge1xuICB2YXIgdGVtcCA9IGUgKiBzaW5waGk7XG4gIHJldHVybiBhIC8gTWF0aC5zcXJ0KDEgLSB0ZW1wICogdGVtcCk7XG59IiwiaW1wb3J0IHtIQUxGX1BJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcbmltcG9ydCBzaWduIGZyb20gJy4vc2lnbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIChNYXRoLmFicyh4KSA8IEhBTEZfUEkpID8geCA6ICh4IC0gKHNpZ24oeCkgKiBNYXRoLlBJKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtbCwgZTAsIGUxLCBlMiwgZTMpIHtcbiAgdmFyIHBoaTtcbiAgdmFyIGRwaGk7XG5cbiAgcGhpID0gbWwgLyBlMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNTsgaSsrKSB7XG4gICAgZHBoaSA9IChtbCAtIChlMCAqIHBoaSAtIGUxICogTWF0aC5zaW4oMiAqIHBoaSkgKyBlMiAqIE1hdGguc2luKDQgKiBwaGkpIC0gZTMgKiBNYXRoLnNpbig2ICogcGhpKSkpIC8gKGUwIC0gMiAqIGUxICogTWF0aC5jb3MoMiAqIHBoaSkgKyA0ICogZTIgKiBNYXRoLmNvcyg0ICogcGhpKSAtIDYgKiBlMyAqIE1hdGguY29zKDYgKiBwaGkpKTtcbiAgICBwaGkgKz0gZHBoaTtcbiAgICBpZiAoTWF0aC5hYnMoZHBoaSkgPD0gMC4wMDAwMDAwMDAxKSB7XG4gICAgICByZXR1cm4gcGhpO1xuICAgIH1cbiAgfVxuXG4gIC8vLi5yZXBvcnRFcnJvcihcIklNTEZOLUNPTlY6TGF0aXR1ZGUgZmFpbGVkIHRvIGNvbnZlcmdlIGFmdGVyIDE1IGl0ZXJhdGlvbnNcIik7XG4gIHJldHVybiBOYU47XG59IiwiaW1wb3J0IG1sZm4gZnJvbSAnLi4vY29tbW9uL21sZm4nO1xuaW1wb3J0IGUwZm4gZnJvbSAnLi4vY29tbW9uL2UwZm4nO1xuaW1wb3J0IGUxZm4gZnJvbSAnLi4vY29tbW9uL2UxZm4nO1xuaW1wb3J0IGUyZm4gZnJvbSAnLi4vY29tbW9uL2UyZm4nO1xuaW1wb3J0IGUzZm4gZnJvbSAnLi4vY29tbW9uL2UzZm4nO1xuaW1wb3J0IGdOIGZyb20gJy4uL2NvbW1vbi9nTic7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgYWRqdXN0X2xhdCBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xhdCc7XG5pbXBvcnQgaW1sZm4gZnJvbSAnLi4vY29tbW9uL2ltbGZuJztcbmltcG9ydCB7SEFMRl9QSSwgRVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgaWYgKCF0aGlzLnNwaGVyZSkge1xuICAgIHRoaXMuZTAgPSBlMGZuKHRoaXMuZXMpO1xuICAgIHRoaXMuZTEgPSBlMWZuKHRoaXMuZXMpO1xuICAgIHRoaXMuZTIgPSBlMmZuKHRoaXMuZXMpO1xuICAgIHRoaXMuZTMgPSBlM2ZuKHRoaXMuZXMpO1xuICAgIHRoaXMubWwwID0gdGhpcy5hICogbWxmbih0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzLCB0aGlzLmxhdDApO1xuICB9XG59XG5cbi8qIENhc3NpbmkgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcblxuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICB2YXIgeCwgeTtcbiAgdmFyIGxhbSA9IHAueDtcbiAgdmFyIHBoaSA9IHAueTtcbiAgbGFtID0gYWRqdXN0X2xvbihsYW0gLSB0aGlzLmxvbmcwKTtcblxuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICB4ID0gdGhpcy5hICogTWF0aC5hc2luKE1hdGguY29zKHBoaSkgKiBNYXRoLnNpbihsYW0pKTtcbiAgICB5ID0gdGhpcy5hICogKE1hdGguYXRhbjIoTWF0aC50YW4ocGhpKSwgTWF0aC5jb3MobGFtKSkgLSB0aGlzLmxhdDApO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vZWxsaXBzb2lkXG4gICAgdmFyIHNpbnBoaSA9IE1hdGguc2luKHBoaSk7XG4gICAgdmFyIGNvc3BoaSA9IE1hdGguY29zKHBoaSk7XG4gICAgdmFyIG5sID0gZ04odGhpcy5hLCB0aGlzLmUsIHNpbnBoaSk7XG4gICAgdmFyIHRsID0gTWF0aC50YW4ocGhpKSAqIE1hdGgudGFuKHBoaSk7XG4gICAgdmFyIGFsID0gbGFtICogTWF0aC5jb3MocGhpKTtcbiAgICB2YXIgYXNxID0gYWwgKiBhbDtcbiAgICB2YXIgY2wgPSB0aGlzLmVzICogY29zcGhpICogY29zcGhpIC8gKDEgLSB0aGlzLmVzKTtcbiAgICB2YXIgbWwgPSB0aGlzLmEgKiBtbGZuKHRoaXMuZTAsIHRoaXMuZTEsIHRoaXMuZTIsIHRoaXMuZTMsIHBoaSk7XG5cbiAgICB4ID0gbmwgKiBhbCAqICgxIC0gYXNxICogdGwgKiAoMSAvIDYgLSAoOCAtIHRsICsgOCAqIGNsKSAqIGFzcSAvIDEyMCkpO1xuICAgIHkgPSBtbCAtIHRoaXMubWwwICsgbmwgKiBzaW5waGkgLyBjb3NwaGkgKiBhc3EgKiAoMC41ICsgKDUgLSB0bCArIDYgKiBjbCkgKiBhc3EgLyAyNCk7XG5cblxuICB9XG5cbiAgcC54ID0geCArIHRoaXMueDA7XG4gIHAueSA9IHkgKyB0aGlzLnkwO1xuICByZXR1cm4gcDtcbn1cblxuLyogSW52ZXJzZSBlcXVhdGlvbnNcbiAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICBwLnggLT0gdGhpcy54MDtcbiAgcC55IC09IHRoaXMueTA7XG4gIHZhciB4ID0gcC54IC8gdGhpcy5hO1xuICB2YXIgeSA9IHAueSAvIHRoaXMuYTtcbiAgdmFyIHBoaSwgbGFtO1xuXG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIHZhciBkZCA9IHkgKyB0aGlzLmxhdDA7XG4gICAgcGhpID0gTWF0aC5hc2luKE1hdGguc2luKGRkKSAqIE1hdGguY29zKHgpKTtcbiAgICBsYW0gPSBNYXRoLmF0YW4yKE1hdGgudGFuKHgpLCBNYXRoLmNvcyhkZCkpO1xuICB9XG4gIGVsc2Uge1xuICAgIC8qIGVsbGlwc29pZCAqL1xuICAgIHZhciBtbDEgPSB0aGlzLm1sMCAvIHRoaXMuYSArIHk7XG4gICAgdmFyIHBoaTEgPSBpbWxmbihtbDEsIHRoaXMuZTAsIHRoaXMuZTEsIHRoaXMuZTIsIHRoaXMuZTMpO1xuICAgIGlmIChNYXRoLmFicyhNYXRoLmFicyhwaGkxKSAtIEhBTEZfUEkpIDw9IEVQU0xOKSB7XG4gICAgICBwLnggPSB0aGlzLmxvbmcwO1xuICAgICAgcC55ID0gSEFMRl9QSTtcbiAgICAgIGlmICh5IDwgMCkge1xuICAgICAgICBwLnkgKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgdmFyIG5sMSA9IGdOKHRoaXMuYSwgdGhpcy5lLCBNYXRoLnNpbihwaGkxKSk7XG5cbiAgICB2YXIgcmwxID0gbmwxICogbmwxICogbmwxIC8gdGhpcy5hIC8gdGhpcy5hICogKDEgLSB0aGlzLmVzKTtcbiAgICB2YXIgdGwxID0gTWF0aC5wb3coTWF0aC50YW4ocGhpMSksIDIpO1xuICAgIHZhciBkbCA9IHggKiB0aGlzLmEgLyBubDE7XG4gICAgdmFyIGRzcSA9IGRsICogZGw7XG4gICAgcGhpID0gcGhpMSAtIG5sMSAqIE1hdGgudGFuKHBoaTEpIC8gcmwxICogZGwgKiBkbCAqICgwLjUgLSAoMSArIDMgKiB0bDEpICogZGwgKiBkbCAvIDI0KTtcbiAgICBsYW0gPSBkbCAqICgxIC0gZHNxICogKHRsMSAvIDMgKyAoMSArIDMgKiB0bDEpICogdGwxICogZHNxIC8gMTUpKSAvIE1hdGguY29zKHBoaTEpO1xuXG4gIH1cblxuICBwLnggPSBhZGp1c3RfbG9uKGxhbSArIHRoaXMubG9uZzApO1xuICBwLnkgPSBhZGp1c3RfbGF0KHBoaSk7XG4gIHJldHVybiBwO1xuXG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJDYXNzaW5pXCIsIFwiQ2Fzc2luaV9Tb2xkbmVyXCIsIFwiY2Fzc1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWNjZW50LCBzaW5waGkpIHtcbiAgdmFyIGNvbjtcbiAgaWYgKGVjY2VudCA+IDEuMGUtNykge1xuICAgIGNvbiA9IGVjY2VudCAqIHNpbnBoaTtcbiAgICByZXR1cm4gKCgxIC0gZWNjZW50ICogZWNjZW50KSAqIChzaW5waGkgLyAoMSAtIGNvbiAqIGNvbikgLSAoMC41IC8gZWNjZW50KSAqIE1hdGgubG9nKCgxIC0gY29uKSAvICgxICsgY29uKSkpKTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gKDIgKiBzaW5waGkpO1xuICB9XG59IiwiXG5pbXBvcnQge0hBTEZfUEksIEVQU0xOLCBGT1JUUEl9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5pbXBvcnQgcXNmbnogZnJvbSAnLi4vY29tbW9uL3FzZm56JztcbmltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcblxuLypcbiAgcmVmZXJlbmNlXG4gICAgXCJOZXcgRXF1YWwtQXJlYSBNYXAgUHJvamVjdGlvbnMgZm9yIE5vbmNpcmN1bGFyIFJlZ2lvbnNcIiwgSm9obiBQLiBTbnlkZXIsXG4gICAgVGhlIEFtZXJpY2FuIENhcnRvZ3JhcGhlciwgVm9sIDE1LCBOby4gNCwgT2N0b2JlciAxOTg4LCBwcC4gMzQxLTM1NS5cbiAgKi9cblxuZXhwb3J0IHZhciBTX1BPTEUgPSAxO1xuXG5leHBvcnQgdmFyIE5fUE9MRSA9IDI7XG5leHBvcnQgdmFyIEVRVUlUID0gMztcbmV4cG9ydCB2YXIgT0JMSVEgPSA0O1xuXG4vKiBJbml0aWFsaXplIHRoZSBMYW1iZXJ0IEF6aW11dGhhbCBFcXVhbCBBcmVhIHByb2plY3Rpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB2YXIgdCA9IE1hdGguYWJzKHRoaXMubGF0MCk7XG4gIGlmIChNYXRoLmFicyh0IC0gSEFMRl9QSSkgPCBFUFNMTikge1xuICAgIHRoaXMubW9kZSA9IHRoaXMubGF0MCA8IDAgPyB0aGlzLlNfUE9MRSA6IHRoaXMuTl9QT0xFO1xuICB9XG4gIGVsc2UgaWYgKE1hdGguYWJzKHQpIDwgRVBTTE4pIHtcbiAgICB0aGlzLm1vZGUgPSB0aGlzLkVRVUlUO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMubW9kZSA9IHRoaXMuT0JMSVE7XG4gIH1cbiAgaWYgKHRoaXMuZXMgPiAwKSB7XG4gICAgdmFyIHNpbnBoaTtcblxuICAgIHRoaXMucXAgPSBxc2Zueih0aGlzLmUsIDEpO1xuICAgIHRoaXMubW1mID0gMC41IC8gKDEgLSB0aGlzLmVzKTtcbiAgICB0aGlzLmFwYSA9IGF1dGhzZXQodGhpcy5lcyk7XG4gICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIHRoaXMuTl9QT0xFOlxuICAgICAgdGhpcy5kZCA9IDE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuU19QT0xFOlxuICAgICAgdGhpcy5kZCA9IDE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuRVFVSVQ6XG4gICAgICB0aGlzLnJxID0gTWF0aC5zcXJ0KDAuNSAqIHRoaXMucXApO1xuICAgICAgdGhpcy5kZCA9IDEgLyB0aGlzLnJxO1xuICAgICAgdGhpcy54bWYgPSAxO1xuICAgICAgdGhpcy55bWYgPSAwLjUgKiB0aGlzLnFwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLk9CTElROlxuICAgICAgdGhpcy5ycSA9IE1hdGguc3FydCgwLjUgKiB0aGlzLnFwKTtcbiAgICAgIHNpbnBoaSA9IE1hdGguc2luKHRoaXMubGF0MCk7XG4gICAgICB0aGlzLnNpbmIxID0gcXNmbnoodGhpcy5lLCBzaW5waGkpIC8gdGhpcy5xcDtcbiAgICAgIHRoaXMuY29zYjEgPSBNYXRoLnNxcnQoMSAtIHRoaXMuc2luYjEgKiB0aGlzLnNpbmIxKTtcbiAgICAgIHRoaXMuZGQgPSBNYXRoLmNvcyh0aGlzLmxhdDApIC8gKE1hdGguc3FydCgxIC0gdGhpcy5lcyAqIHNpbnBoaSAqIHNpbnBoaSkgKiB0aGlzLnJxICogdGhpcy5jb3NiMSk7XG4gICAgICB0aGlzLnltZiA9ICh0aGlzLnhtZiA9IHRoaXMucnEpIC8gdGhpcy5kZDtcbiAgICAgIHRoaXMueG1mICo9IHRoaXMuZGQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5PQkxJUSkge1xuICAgICAgdGhpcy5zaW5waDAgPSBNYXRoLnNpbih0aGlzLmxhdDApO1xuICAgICAgdGhpcy5jb3NwaDAgPSBNYXRoLmNvcyh0aGlzLmxhdDApO1xuICAgIH1cbiAgfVxufVxuXG4vKiBMYW1iZXJ0IEF6aW11dGhhbCBFcXVhbCBBcmVhIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG5cbiAgLyogRm9yd2FyZCBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdmFyIHgsIHksIGNvc2xhbSwgc2lubGFtLCBzaW5waGksIHEsIHNpbmIsIGNvc2IsIGIsIGNvc3BoaTtcbiAgdmFyIGxhbSA9IHAueDtcbiAgdmFyIHBoaSA9IHAueTtcblxuICBsYW0gPSBhZGp1c3RfbG9uKGxhbSAtIHRoaXMubG9uZzApO1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBzaW5waGkgPSBNYXRoLnNpbihwaGkpO1xuICAgIGNvc3BoaSA9IE1hdGguY29zKHBoaSk7XG4gICAgY29zbGFtID0gTWF0aC5jb3MobGFtKTtcbiAgICBpZiAodGhpcy5tb2RlID09PSB0aGlzLk9CTElRIHx8IHRoaXMubW9kZSA9PT0gdGhpcy5FUVVJVCkge1xuICAgICAgeSA9ICh0aGlzLm1vZGUgPT09IHRoaXMuRVFVSVQpID8gMSArIGNvc3BoaSAqIGNvc2xhbSA6IDEgKyB0aGlzLnNpbnBoMCAqIHNpbnBoaSArIHRoaXMuY29zcGgwICogY29zcGhpICogY29zbGFtO1xuICAgICAgaWYgKHkgPD0gRVBTTE4pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB5ID0gTWF0aC5zcXJ0KDIgLyB5KTtcbiAgICAgIHggPSB5ICogY29zcGhpICogTWF0aC5zaW4obGFtKTtcbiAgICAgIHkgKj0gKHRoaXMubW9kZSA9PT0gdGhpcy5FUVVJVCkgPyBzaW5waGkgOiB0aGlzLmNvc3BoMCAqIHNpbnBoaSAtIHRoaXMuc2lucGgwICogY29zcGhpICogY29zbGFtO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuTl9QT0xFIHx8IHRoaXMubW9kZSA9PT0gdGhpcy5TX1BPTEUpIHtcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuTl9QT0xFKSB7XG4gICAgICAgIGNvc2xhbSA9IC1jb3NsYW07XG4gICAgICB9XG4gICAgICBpZiAoTWF0aC5hYnMocGhpICsgdGhpcy5sYXQwKSA8IEVQU0xOKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgeSA9IEZPUlRQSSAtIHBoaSAqIDAuNTtcbiAgICAgIHkgPSAyICogKCh0aGlzLm1vZGUgPT09IHRoaXMuU19QT0xFKSA/IE1hdGguY29zKHkpIDogTWF0aC5zaW4oeSkpO1xuICAgICAgeCA9IHkgKiBNYXRoLnNpbihsYW0pO1xuICAgICAgeSAqPSBjb3NsYW07XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHNpbmIgPSAwO1xuICAgIGNvc2IgPSAwO1xuICAgIGIgPSAwO1xuICAgIGNvc2xhbSA9IE1hdGguY29zKGxhbSk7XG4gICAgc2lubGFtID0gTWF0aC5zaW4obGFtKTtcbiAgICBzaW5waGkgPSBNYXRoLnNpbihwaGkpO1xuICAgIHEgPSBxc2Zueih0aGlzLmUsIHNpbnBoaSk7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5PQkxJUSB8fCB0aGlzLm1vZGUgPT09IHRoaXMuRVFVSVQpIHtcbiAgICAgIHNpbmIgPSBxIC8gdGhpcy5xcDtcbiAgICAgIGNvc2IgPSBNYXRoLnNxcnQoMSAtIHNpbmIgKiBzaW5iKTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIHRoaXMuT0JMSVE6XG4gICAgICBiID0gMSArIHRoaXMuc2luYjEgKiBzaW5iICsgdGhpcy5jb3NiMSAqIGNvc2IgKiBjb3NsYW07XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuRVFVSVQ6XG4gICAgICBiID0gMSArIGNvc2IgKiBjb3NsYW07XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuTl9QT0xFOlxuICAgICAgYiA9IEhBTEZfUEkgKyBwaGk7XG4gICAgICBxID0gdGhpcy5xcCAtIHE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuU19QT0xFOlxuICAgICAgYiA9IHBoaSAtIEhBTEZfUEk7XG4gICAgICBxID0gdGhpcy5xcCArIHE7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKE1hdGguYWJzKGIpIDwgRVBTTE4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgIGNhc2UgdGhpcy5PQkxJUTpcbiAgICBjYXNlIHRoaXMuRVFVSVQ6XG4gICAgICBiID0gTWF0aC5zcXJ0KDIgLyBiKTtcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuT0JMSVEpIHtcbiAgICAgICAgeSA9IHRoaXMueW1mICogYiAqICh0aGlzLmNvc2IxICogc2luYiAtIHRoaXMuc2luYjEgKiBjb3NiICogY29zbGFtKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB5ID0gKGIgPSBNYXRoLnNxcnQoMiAvICgxICsgY29zYiAqIGNvc2xhbSkpKSAqIHNpbmIgKiB0aGlzLnltZjtcbiAgICAgIH1cbiAgICAgIHggPSB0aGlzLnhtZiAqIGIgKiBjb3NiICogc2lubGFtO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLk5fUE9MRTpcbiAgICBjYXNlIHRoaXMuU19QT0xFOlxuICAgICAgaWYgKHEgPj0gMCkge1xuICAgICAgICB4ID0gKGIgPSBNYXRoLnNxcnQocSkpICogc2lubGFtO1xuICAgICAgICB5ID0gY29zbGFtICogKCh0aGlzLm1vZGUgPT09IHRoaXMuU19QT0xFKSA/IGIgOiAtYik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgeCA9IHkgPSAwO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcC54ID0gdGhpcy5hICogeCArIHRoaXMueDA7XG4gIHAueSA9IHRoaXMuYSAqIHkgKyB0aGlzLnkwO1xuICByZXR1cm4gcDtcbn1cblxuLyogSW52ZXJzZSBlcXVhdGlvbnNcbiAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICBwLnggLT0gdGhpcy54MDtcbiAgcC55IC09IHRoaXMueTA7XG4gIHZhciB4ID0gcC54IC8gdGhpcy5hO1xuICB2YXIgeSA9IHAueSAvIHRoaXMuYTtcbiAgdmFyIGxhbSwgcGhpLCBjQ2UsIHNDZSwgcSwgcmhvLCBhYjtcbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgdmFyIGNvc3ogPSAwLFxuICAgICAgcmgsIHNpbnogPSAwO1xuXG4gICAgcmggPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgcGhpID0gcmggKiAwLjU7XG4gICAgaWYgKHBoaSA+IDEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwaGkgPSAyICogTWF0aC5hc2luKHBoaSk7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5PQkxJUSB8fCB0aGlzLm1vZGUgPT09IHRoaXMuRVFVSVQpIHtcbiAgICAgIHNpbnogPSBNYXRoLnNpbihwaGkpO1xuICAgICAgY29zeiA9IE1hdGguY29zKHBoaSk7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSB0aGlzLkVRVUlUOlxuICAgICAgcGhpID0gKE1hdGguYWJzKHJoKSA8PSBFUFNMTikgPyAwIDogTWF0aC5hc2luKHkgKiBzaW56IC8gcmgpO1xuICAgICAgeCAqPSBzaW56O1xuICAgICAgeSA9IGNvc3ogKiByaDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgdGhpcy5PQkxJUTpcbiAgICAgIHBoaSA9IChNYXRoLmFicyhyaCkgPD0gRVBTTE4pID8gdGhpcy5sYXQwIDogTWF0aC5hc2luKGNvc3ogKiB0aGlzLnNpbnBoMCArIHkgKiBzaW56ICogdGhpcy5jb3NwaDAgLyByaCk7XG4gICAgICB4ICo9IHNpbnogKiB0aGlzLmNvc3BoMDtcbiAgICAgIHkgPSAoY29zeiAtIE1hdGguc2luKHBoaSkgKiB0aGlzLnNpbnBoMCkgKiByaDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgdGhpcy5OX1BPTEU6XG4gICAgICB5ID0gLXk7XG4gICAgICBwaGkgPSBIQUxGX1BJIC0gcGhpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLlNfUE9MRTpcbiAgICAgIHBoaSAtPSBIQUxGX1BJO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxhbSA9ICh5ID09PSAwICYmICh0aGlzLm1vZGUgPT09IHRoaXMuRVFVSVQgfHwgdGhpcy5tb2RlID09PSB0aGlzLk9CTElRKSkgPyAwIDogTWF0aC5hdGFuMih4LCB5KTtcbiAgfVxuICBlbHNlIHtcbiAgICBhYiA9IDA7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5PQkxJUSB8fCB0aGlzLm1vZGUgPT09IHRoaXMuRVFVSVQpIHtcbiAgICAgIHggLz0gdGhpcy5kZDtcbiAgICAgIHkgKj0gdGhpcy5kZDtcbiAgICAgIHJobyA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgIGlmIChyaG8gPCBFUFNMTikge1xuICAgICAgICBwLnggPSB0aGlzLmxvbmcwO1xuICAgICAgICBwLnkgPSB0aGlzLmxhdDA7XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgICAgc0NlID0gMiAqIE1hdGguYXNpbigwLjUgKiByaG8gLyB0aGlzLnJxKTtcbiAgICAgIGNDZSA9IE1hdGguY29zKHNDZSk7XG4gICAgICB4ICo9IChzQ2UgPSBNYXRoLnNpbihzQ2UpKTtcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuT0JMSVEpIHtcbiAgICAgICAgYWIgPSBjQ2UgKiB0aGlzLnNpbmIxICsgeSAqIHNDZSAqIHRoaXMuY29zYjEgLyByaG87XG4gICAgICAgIHEgPSB0aGlzLnFwICogYWI7XG4gICAgICAgIHkgPSByaG8gKiB0aGlzLmNvc2IxICogY0NlIC0geSAqIHRoaXMuc2luYjEgKiBzQ2U7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYWIgPSB5ICogc0NlIC8gcmhvO1xuICAgICAgICBxID0gdGhpcy5xcCAqIGFiO1xuICAgICAgICB5ID0gcmhvICogY0NlO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuTl9QT0xFIHx8IHRoaXMubW9kZSA9PT0gdGhpcy5TX1BPTEUpIHtcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IHRoaXMuTl9QT0xFKSB7XG4gICAgICAgIHkgPSAteTtcbiAgICAgIH1cbiAgICAgIHEgPSAoeCAqIHggKyB5ICogeSk7XG4gICAgICBpZiAoIXEpIHtcbiAgICAgICAgcC54ID0gdGhpcy5sb25nMDtcbiAgICAgICAgcC55ID0gdGhpcy5sYXQwO1xuICAgICAgICByZXR1cm4gcDtcbiAgICAgIH1cbiAgICAgIGFiID0gMSAtIHEgLyB0aGlzLnFwO1xuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5TX1BPTEUpIHtcbiAgICAgICAgYWIgPSAtYWI7XG4gICAgICB9XG4gICAgfVxuICAgIGxhbSA9IE1hdGguYXRhbjIoeCwgeSk7XG4gICAgcGhpID0gYXV0aGxhdChNYXRoLmFzaW4oYWIpLCB0aGlzLmFwYSk7XG4gIH1cblxuICBwLnggPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBsYW0pO1xuICBwLnkgPSBwaGk7XG4gIHJldHVybiBwO1xufVxuXG4vKiBkZXRlcm1pbmUgbGF0aXR1ZGUgZnJvbSBhdXRoYWxpYyBsYXRpdHVkZSAqL1xudmFyIFAwMCA9IDAuMzMzMzMzMzMzMzMzMzMzMzMzMzM7XG5cbnZhciBQMDEgPSAwLjE3MjIyMjIyMjIyMjIyMjIyMjIyO1xudmFyIFAwMiA9IDAuMTAyNTc5MzY1MDc5MzY1MDc5MzY7XG52YXIgUDEwID0gMC4wNjM4ODg4ODg4ODg4ODg4ODg4ODtcbnZhciBQMTEgPSAwLjA2NjQwMjExNjQwMjExNjQwMjExO1xudmFyIFAyMCA9IDAuMDE2NDE1MDEyOTQyMTkxNTQ0NDM7XG5cbmZ1bmN0aW9uIGF1dGhzZXQoZXMpIHtcbiAgdmFyIHQ7XG4gIHZhciBBUEEgPSBbXTtcbiAgQVBBWzBdID0gZXMgKiBQMDA7XG4gIHQgPSBlcyAqIGVzO1xuICBBUEFbMF0gKz0gdCAqIFAwMTtcbiAgQVBBWzFdID0gdCAqIFAxMDtcbiAgdCAqPSBlcztcbiAgQVBBWzBdICs9IHQgKiBQMDI7XG4gIEFQQVsxXSArPSB0ICogUDExO1xuICBBUEFbMl0gPSB0ICogUDIwO1xuICByZXR1cm4gQVBBO1xufVxuXG5mdW5jdGlvbiBhdXRobGF0KGJldGEsIEFQQSkge1xuICB2YXIgdCA9IGJldGEgKyBiZXRhO1xuICByZXR1cm4gKGJldGEgKyBBUEFbMF0gKiBNYXRoLnNpbih0KSArIEFQQVsxXSAqIE1hdGguc2luKHQgKyB0KSArIEFQQVsyXSAqIE1hdGguc2luKHQgKyB0ICsgdCkpO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiTGFtYmVydCBBemltdXRoYWwgRXF1YWwgQXJlYVwiLCBcIkxhbWJlcnRfQXppbXV0aGFsX0VxdWFsX0FyZWFcIiwgXCJsYWVhXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXMsXG4gIFNfUE9MRTogU19QT0xFLFxuICBOX1BPTEU6IE5fUE9MRSxcbiAgRVFVSVQ6IEVRVUlULFxuICBPQkxJUTogT0JMSVFcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIGlmIChNYXRoLmFicyh4KSA+IDEpIHtcbiAgICB4ID0gKHggPiAxKSA/IDEgOiAtMTtcbiAgfVxuICByZXR1cm4gTWF0aC5hc2luKHgpO1xufSIsImltcG9ydCBtc2ZueiBmcm9tICcuLi9jb21tb24vbXNmbnonO1xuaW1wb3J0IHFzZm56IGZyb20gJy4uL2NvbW1vbi9xc2Zueic7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgYXNpbnogZnJvbSAnLi4vY29tbW9uL2FzaW56JztcbmltcG9ydCB7RVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcblxuICBpZiAoTWF0aC5hYnModGhpcy5sYXQxICsgdGhpcy5sYXQyKSA8IEVQU0xOKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMudGVtcCA9IHRoaXMuYiAvIHRoaXMuYTtcbiAgdGhpcy5lcyA9IDEgLSBNYXRoLnBvdyh0aGlzLnRlbXAsIDIpO1xuICB0aGlzLmUzID0gTWF0aC5zcXJ0KHRoaXMuZXMpO1xuXG4gIHRoaXMuc2luX3BvID0gTWF0aC5zaW4odGhpcy5sYXQxKTtcbiAgdGhpcy5jb3NfcG8gPSBNYXRoLmNvcyh0aGlzLmxhdDEpO1xuICB0aGlzLnQxID0gdGhpcy5zaW5fcG87XG4gIHRoaXMuY29uID0gdGhpcy5zaW5fcG87XG4gIHRoaXMubXMxID0gbXNmbnoodGhpcy5lMywgdGhpcy5zaW5fcG8sIHRoaXMuY29zX3BvKTtcbiAgdGhpcy5xczEgPSBxc2Zueih0aGlzLmUzLCB0aGlzLnNpbl9wbywgdGhpcy5jb3NfcG8pO1xuXG4gIHRoaXMuc2luX3BvID0gTWF0aC5zaW4odGhpcy5sYXQyKTtcbiAgdGhpcy5jb3NfcG8gPSBNYXRoLmNvcyh0aGlzLmxhdDIpO1xuICB0aGlzLnQyID0gdGhpcy5zaW5fcG87XG4gIHRoaXMubXMyID0gbXNmbnoodGhpcy5lMywgdGhpcy5zaW5fcG8sIHRoaXMuY29zX3BvKTtcbiAgdGhpcy5xczIgPSBxc2Zueih0aGlzLmUzLCB0aGlzLnNpbl9wbywgdGhpcy5jb3NfcG8pO1xuXG4gIHRoaXMuc2luX3BvID0gTWF0aC5zaW4odGhpcy5sYXQwKTtcbiAgdGhpcy5jb3NfcG8gPSBNYXRoLmNvcyh0aGlzLmxhdDApO1xuICB0aGlzLnQzID0gdGhpcy5zaW5fcG87XG4gIHRoaXMucXMwID0gcXNmbnoodGhpcy5lMywgdGhpcy5zaW5fcG8sIHRoaXMuY29zX3BvKTtcblxuICBpZiAoTWF0aC5hYnModGhpcy5sYXQxIC0gdGhpcy5sYXQyKSA+IEVQU0xOKSB7XG4gICAgdGhpcy5uczAgPSAodGhpcy5tczEgKiB0aGlzLm1zMSAtIHRoaXMubXMyICogdGhpcy5tczIpIC8gKHRoaXMucXMyIC0gdGhpcy5xczEpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMubnMwID0gdGhpcy5jb247XG4gIH1cbiAgdGhpcy5jID0gdGhpcy5tczEgKiB0aGlzLm1zMSArIHRoaXMubnMwICogdGhpcy5xczE7XG4gIHRoaXMucmggPSB0aGlzLmEgKiBNYXRoLnNxcnQodGhpcy5jIC0gdGhpcy5uczAgKiB0aGlzLnFzMCkgLyB0aGlzLm5zMDtcbn1cblxuLyogQWxiZXJzIENvbmljYWwgRXF1YWwgQXJlYSBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG5cbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcblxuICB0aGlzLnNpbl9waGkgPSBNYXRoLnNpbihsYXQpO1xuICB0aGlzLmNvc19waGkgPSBNYXRoLmNvcyhsYXQpO1xuXG4gIHZhciBxcyA9IHFzZm56KHRoaXMuZTMsIHRoaXMuc2luX3BoaSwgdGhpcy5jb3NfcGhpKTtcbiAgdmFyIHJoMSA9IHRoaXMuYSAqIE1hdGguc3FydCh0aGlzLmMgLSB0aGlzLm5zMCAqIHFzKSAvIHRoaXMubnMwO1xuICB2YXIgdGhldGEgPSB0aGlzLm5zMCAqIGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIHZhciB4ID0gcmgxICogTWF0aC5zaW4odGhldGEpICsgdGhpcy54MDtcbiAgdmFyIHkgPSB0aGlzLnJoIC0gcmgxICogTWF0aC5jb3ModGhldGEpICsgdGhpcy55MDtcblxuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgcmgxLCBxcywgY29uLCB0aGV0YSwgbG9uLCBsYXQ7XG5cbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSA9IHRoaXMucmggLSBwLnkgKyB0aGlzLnkwO1xuICBpZiAodGhpcy5uczAgPj0gMCkge1xuICAgIHJoMSA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICAgIGNvbiA9IDE7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmgxID0gLU1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICAgIGNvbiA9IC0xO1xuICB9XG4gIHRoZXRhID0gMDtcbiAgaWYgKHJoMSAhPT0gMCkge1xuICAgIHRoZXRhID0gTWF0aC5hdGFuMihjb24gKiBwLngsIGNvbiAqIHAueSk7XG4gIH1cbiAgY29uID0gcmgxICogdGhpcy5uczAgLyB0aGlzLmE7XG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGxhdCA9IE1hdGguYXNpbigodGhpcy5jIC0gY29uICogY29uKSAvICgyICogdGhpcy5uczApKTtcbiAgfVxuICBlbHNlIHtcbiAgICBxcyA9ICh0aGlzLmMgLSBjb24gKiBjb24pIC8gdGhpcy5uczA7XG4gICAgbGF0ID0gdGhpcy5waGkxeih0aGlzLmUzLCBxcyk7XG4gIH1cblxuICBsb24gPSBhZGp1c3RfbG9uKHRoZXRhIC8gdGhpcy5uczAgKyB0aGlzLmxvbmcwKTtcbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG4vKiBGdW5jdGlvbiB0byBjb21wdXRlIHBoaTEsIHRoZSBsYXRpdHVkZSBmb3IgdGhlIGludmVyc2Ugb2YgdGhlXG4gICBBbGJlcnMgQ29uaWNhbCBFcXVhbC1BcmVhIHByb2plY3Rpb24uXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBwaGkxeihlY2NlbnQsIHFzKSB7XG4gIHZhciBzaW5waGksIGNvc3BoaSwgY29uLCBjb20sIGRwaGk7XG4gIHZhciBwaGkgPSBhc2lueigwLjUgKiBxcyk7XG4gIGlmIChlY2NlbnQgPCBFUFNMTikge1xuICAgIHJldHVybiBwaGk7XG4gIH1cblxuICB2YXIgZWNjbnRzID0gZWNjZW50ICogZWNjZW50O1xuICBmb3IgKHZhciBpID0gMTsgaSA8PSAyNTsgaSsrKSB7XG4gICAgc2lucGhpID0gTWF0aC5zaW4ocGhpKTtcbiAgICBjb3NwaGkgPSBNYXRoLmNvcyhwaGkpO1xuICAgIGNvbiA9IGVjY2VudCAqIHNpbnBoaTtcbiAgICBjb20gPSAxIC0gY29uICogY29uO1xuICAgIGRwaGkgPSAwLjUgKiBjb20gKiBjb20gLyBjb3NwaGkgKiAocXMgLyAoMSAtIGVjY250cykgLSBzaW5waGkgLyBjb20gKyAwLjUgLyBlY2NlbnQgKiBNYXRoLmxvZygoMSAtIGNvbikgLyAoMSArIGNvbikpKTtcbiAgICBwaGkgPSBwaGkgKyBkcGhpO1xuICAgIGlmIChNYXRoLmFicyhkcGhpKSA8PSAxZS03KSB7XG4gICAgICByZXR1cm4gcGhpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIkFsYmVyc19Db25pY19FcXVhbF9BcmVhXCIsIFwiQWxiZXJzXCIsIFwiYWVhXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXMsXG4gIHBoaTF6OiBwaGkxelxufTtcbiIsImltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCBhc2lueiBmcm9tICcuLi9jb21tb24vYXNpbnonO1xuaW1wb3J0IHtFUFNMTn0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbi8qXG4gIHJlZmVyZW5jZTpcbiAgICBXb2xmcmFtIE1hdGh3b3JsZCBcIkdub21vbmljIFByb2plY3Rpb25cIlxuICAgIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vR25vbW9uaWNQcm9qZWN0aW9uLmh0bWxcbiAgICBBY2Nlc3NlZDogMTJ0aCBOb3ZlbWJlciAyMDA5XG4gICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcblxuICAvKiBQbGFjZSBwYXJhbWV0ZXJzIGluIHN0YXRpYyBzdG9yYWdlIGZvciBjb21tb24gdXNlXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdGhpcy5zaW5fcDE0ID0gTWF0aC5zaW4odGhpcy5sYXQwKTtcbiAgdGhpcy5jb3NfcDE0ID0gTWF0aC5jb3ModGhpcy5sYXQwKTtcbiAgLy8gQXBwcm94aW1hdGlvbiBmb3IgcHJvamVjdGluZyBwb2ludHMgdG8gdGhlIGhvcml6b24gKGluZmluaXR5KVxuICB0aGlzLmluZmluaXR5X2Rpc3QgPSAxMDAwICogdGhpcy5hO1xuICB0aGlzLnJjID0gMTtcbn1cblxuLyogR25vbW9uaWMgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIHNpbnBoaSwgY29zcGhpOyAvKiBzaW4gYW5kIGNvcyB2YWx1ZSAgICAgICAgKi9cbiAgdmFyIGRsb247IC8qIGRlbHRhIGxvbmdpdHVkZSB2YWx1ZSAgICAgICovXG4gIHZhciBjb3Nsb247IC8qIGNvcyBvZiBsb25naXR1ZGUgICAgICAgICovXG4gIHZhciBrc3A7IC8qIHNjYWxlIGZhY3RvciAgICAgICAgICAqL1xuICB2YXIgZztcbiAgdmFyIHgsIHk7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIC8qIEZvcndhcmQgZXF1YXRpb25zXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLSovXG4gIGRsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuXG4gIHNpbnBoaSA9IE1hdGguc2luKGxhdCk7XG4gIGNvc3BoaSA9IE1hdGguY29zKGxhdCk7XG5cbiAgY29zbG9uID0gTWF0aC5jb3MoZGxvbik7XG4gIGcgPSB0aGlzLnNpbl9wMTQgKiBzaW5waGkgKyB0aGlzLmNvc19wMTQgKiBjb3NwaGkgKiBjb3Nsb247XG4gIGtzcCA9IDE7XG4gIGlmICgoZyA+IDApIHx8IChNYXRoLmFicyhnKSA8PSBFUFNMTikpIHtcbiAgICB4ID0gdGhpcy54MCArIHRoaXMuYSAqIGtzcCAqIGNvc3BoaSAqIE1hdGguc2luKGRsb24pIC8gZztcbiAgICB5ID0gdGhpcy55MCArIHRoaXMuYSAqIGtzcCAqICh0aGlzLmNvc19wMTQgKiBzaW5waGkgLSB0aGlzLnNpbl9wMTQgKiBjb3NwaGkgKiBjb3Nsb24pIC8gZztcbiAgfVxuICBlbHNlIHtcblxuICAgIC8vIFBvaW50IGlzIGluIHRoZSBvcHBvc2luZyBoZW1pc3BoZXJlIGFuZCBpcyB1bnByb2plY3RhYmxlXG4gICAgLy8gV2Ugc3RpbGwgbmVlZCB0byByZXR1cm4gYSByZWFzb25hYmxlIHBvaW50LCBzbyB3ZSBwcm9qZWN0XG4gICAgLy8gdG8gaW5maW5pdHksIG9uIGEgYmVhcmluZ1xuICAgIC8vIGVxdWl2YWxlbnQgdG8gdGhlIG5vcnRoZXJuIGhlbWlzcGhlcmUgZXF1aXZhbGVudFxuICAgIC8vIFRoaXMgaXMgYSByZWFzb25hYmxlIGFwcHJveGltYXRpb24gZm9yIHNob3J0IHNoYXBlcyBhbmQgbGluZXMgdGhhdFxuICAgIC8vIHN0cmFkZGxlIHRoZSBob3Jpem9uLlxuXG4gICAgeCA9IHRoaXMueDAgKyB0aGlzLmluZmluaXR5X2Rpc3QgKiBjb3NwaGkgKiBNYXRoLnNpbihkbG9uKTtcbiAgICB5ID0gdGhpcy55MCArIHRoaXMuaW5maW5pdHlfZGlzdCAqICh0aGlzLmNvc19wMTQgKiBzaW5waGkgLSB0aGlzLnNpbl9wMTQgKiBjb3NwaGkgKiBjb3Nsb24pO1xuXG4gIH1cbiAgcC54ID0geDtcbiAgcC55ID0geTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIHJoOyAvKiBSaG8gKi9cbiAgdmFyIHNpbmMsIGNvc2M7XG4gIHZhciBjO1xuICB2YXIgbG9uLCBsYXQ7XG5cbiAgLyogSW52ZXJzZSBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgcC54ID0gKHAueCAtIHRoaXMueDApIC8gdGhpcy5hO1xuICBwLnkgPSAocC55IC0gdGhpcy55MCkgLyB0aGlzLmE7XG5cbiAgcC54IC89IHRoaXMuazA7XG4gIHAueSAvPSB0aGlzLmswO1xuXG4gIGlmICgocmggPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KSkpIHtcbiAgICBjID0gTWF0aC5hdGFuMihyaCwgdGhpcy5yYyk7XG4gICAgc2luYyA9IE1hdGguc2luKGMpO1xuICAgIGNvc2MgPSBNYXRoLmNvcyhjKTtcblxuICAgIGxhdCA9IGFzaW56KGNvc2MgKiB0aGlzLnNpbl9wMTQgKyAocC55ICogc2luYyAqIHRoaXMuY29zX3AxNCkgLyByaCk7XG4gICAgbG9uID0gTWF0aC5hdGFuMihwLnggKiBzaW5jLCByaCAqIHRoaXMuY29zX3AxNCAqIGNvc2MgLSBwLnkgKiB0aGlzLnNpbl9wMTQgKiBzaW5jKTtcbiAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBsb24pO1xuICB9XG4gIGVsc2Uge1xuICAgIGxhdCA9IHRoaXMucGhpYzA7XG4gICAgbG9uID0gMDtcbiAgfVxuXG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcImdub21cIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCBxc2ZueiBmcm9tICcuLi9jb21tb24vcXNmbnonO1xuaW1wb3J0IG1zZm56IGZyb20gJy4uL2NvbW1vbi9tc2Zueic7XG5pbXBvcnQgaXFzZm56IGZyb20gJy4uL2NvbW1vbi9pcXNmbnonO1xuXG4vKlxuICByZWZlcmVuY2U6XG4gICAgXCJDYXJ0b2dyYXBoaWMgUHJvamVjdGlvbiBQcm9jZWR1cmVzIGZvciB0aGUgVU5JWCBFbnZpcm9ubWVudC1cbiAgICBBIFVzZXIncyBNYW51YWxcIiBieSBHZXJhbGQgSS4gRXZlbmRlbixcbiAgICBVU0dTIE9wZW4gRmlsZSBSZXBvcnQgOTAtMjg0YW5kIFJlbGVhc2UgNCBJbnRlcmltIFJlcG9ydHMgKDIwMDMpXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIC8vbm8tb3BcbiAgaWYgKCF0aGlzLnNwaGVyZSkge1xuICAgIHRoaXMuazAgPSBtc2Zueih0aGlzLmUsIE1hdGguc2luKHRoaXMubGF0X3RzKSwgTWF0aC5jb3ModGhpcy5sYXRfdHMpKTtcbiAgfVxufVxuXG4vKiBDeWxpbmRyaWNhbCBFcXVhbCBBcmVhIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIHZhciB4LCB5O1xuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICB2YXIgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIHggPSB0aGlzLngwICsgdGhpcy5hICogZGxvbiAqIE1hdGguY29zKHRoaXMubGF0X3RzKTtcbiAgICB5ID0gdGhpcy55MCArIHRoaXMuYSAqIE1hdGguc2luKGxhdCkgLyBNYXRoLmNvcyh0aGlzLmxhdF90cyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIHFzID0gcXNmbnoodGhpcy5lLCBNYXRoLnNpbihsYXQpKTtcbiAgICB4ID0gdGhpcy54MCArIHRoaXMuYSAqIHRoaXMuazAgKiBkbG9uO1xuICAgIHkgPSB0aGlzLnkwICsgdGhpcy5hICogcXMgKiAwLjUgLyB0aGlzLmswO1xuICB9XG5cbiAgcC54ID0geDtcbiAgcC55ID0geTtcbiAgcmV0dXJuIHA7XG59XG5cbi8qIEN5bGluZHJpY2FsIEVxdWFsIEFyZWEgaW52ZXJzZSBlcXVhdGlvbnMtLW1hcHBpbmcgeCx5IHRvIGxhdC9sb25nXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuICB2YXIgbG9uLCBsYXQ7XG5cbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgKHAueCAvIHRoaXMuYSkgLyBNYXRoLmNvcyh0aGlzLmxhdF90cykpO1xuICAgIGxhdCA9IE1hdGguYXNpbigocC55IC8gdGhpcy5hKSAqIE1hdGguY29zKHRoaXMubGF0X3RzKSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgbGF0ID0gaXFzZm56KHRoaXMuZSwgMiAqIHAueSAqIHRoaXMuazAgLyB0aGlzLmEpO1xuICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIHAueCAvICh0aGlzLmEgKiB0aGlzLmswKSk7XG4gIH1cblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJjZWFcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCB7SEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVjY2VudCwgcSkge1xuICB2YXIgdGVtcCA9IDEgLSAoMSAtIGVjY2VudCAqIGVjY2VudCkgLyAoMiAqIGVjY2VudCkgKiBNYXRoLmxvZygoMSAtIGVjY2VudCkgLyAoMSArIGVjY2VudCkpO1xuICBpZiAoTWF0aC5hYnMoTWF0aC5hYnMocSkgLSB0ZW1wKSA8IDEuMEUtNikge1xuICAgIGlmIChxIDwgMCkge1xuICAgICAgcmV0dXJuICgtMSAqIEhBTEZfUEkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBIQUxGX1BJO1xuICAgIH1cbiAgfVxuICAvL3ZhciBwaGkgPSAwLjUqIHEvKDEtZWNjZW50KmVjY2VudCk7XG4gIHZhciBwaGkgPSBNYXRoLmFzaW4oMC41ICogcSk7XG4gIHZhciBkcGhpO1xuICB2YXIgc2luX3BoaTtcbiAgdmFyIGNvc19waGk7XG4gIHZhciBjb247XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzA7IGkrKykge1xuICAgIHNpbl9waGkgPSBNYXRoLnNpbihwaGkpO1xuICAgIGNvc19waGkgPSBNYXRoLmNvcyhwaGkpO1xuICAgIGNvbiA9IGVjY2VudCAqIHNpbl9waGk7XG4gICAgZHBoaSA9IE1hdGgucG93KDEgLSBjb24gKiBjb24sIDIpIC8gKDIgKiBjb3NfcGhpKSAqIChxIC8gKDEgLSBlY2NlbnQgKiBlY2NlbnQpIC0gc2luX3BoaSAvICgxIC0gY29uICogY29uKSArIDAuNSAvIGVjY2VudCAqIE1hdGgubG9nKCgxIC0gY29uKSAvICgxICsgY29uKSkpO1xuICAgIHBoaSArPSBkcGhpO1xuICAgIGlmIChNYXRoLmFicyhkcGhpKSA8PSAwLjAwMDAwMDAwMDEpIHtcbiAgICAgIHJldHVybiBwaGk7XG4gICAgfVxuICB9XG5cbiAgLy9jb25zb2xlLmxvZyhcIklRU0ZOLUNPTlY6TGF0aXR1ZGUgZmFpbGVkIHRvIGNvbnZlcmdlIGFmdGVyIDMwIGl0ZXJhdGlvbnNcIik7XG4gIHJldHVybiBOYU47XG59XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgYWRqdXN0X2xhdCBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xhdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuXG4gIHRoaXMueDAgPSB0aGlzLngwIHx8IDA7XG4gIHRoaXMueTAgPSB0aGlzLnkwIHx8IDA7XG4gIHRoaXMubGF0MCA9IHRoaXMubGF0MCB8fCAwO1xuICB0aGlzLmxvbmcwID0gdGhpcy5sb25nMCB8fCAwO1xuICB0aGlzLmxhdF90cyA9IHRoaXMubGF0X3RzIHx8IDA7XG4gIHRoaXMudGl0bGUgPSB0aGlzLnRpdGxlIHx8IFwiRXF1aWRpc3RhbnQgQ3lsaW5kcmljYWwgKFBsYXRlIENhcnJlKVwiO1xuXG4gIHRoaXMucmMgPSBNYXRoLmNvcyh0aGlzLmxhdF90cyk7XG59XG5cbi8vIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcblxuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuXG4gIHZhciBkbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgdmFyIGRsYXQgPSBhZGp1c3RfbGF0KGxhdCAtIHRoaXMubGF0MCk7XG4gIHAueCA9IHRoaXMueDAgKyAodGhpcy5hICogZGxvbiAqIHRoaXMucmMpO1xuICBwLnkgPSB0aGlzLnkwICsgKHRoaXMuYSAqIGRsYXQpO1xuICByZXR1cm4gcDtcbn1cblxuLy8gaW52ZXJzZSBlcXVhdGlvbnMtLW1hcHBpbmcgeCx5IHRvIGxhdC9sb25nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuXG4gIHZhciB4ID0gcC54O1xuICB2YXIgeSA9IHAueTtcblxuICBwLnggPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyAoKHggLSB0aGlzLngwKSAvICh0aGlzLmEgKiB0aGlzLnJjKSkpO1xuICBwLnkgPSBhZGp1c3RfbGF0KHRoaXMubGF0MCArICgoeSAtIHRoaXMueTApIC8gKHRoaXMuYSkpKTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJFcXVpcmVjdGFuZ3VsYXJcIiwgXCJFcXVpZGlzdGFudF9DeWxpbmRyaWNhbFwiLCBcImVxY1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IGUwZm4gZnJvbSAnLi4vY29tbW9uL2UwZm4nO1xuaW1wb3J0IGUxZm4gZnJvbSAnLi4vY29tbW9uL2UxZm4nO1xuaW1wb3J0IGUyZm4gZnJvbSAnLi4vY29tbW9uL2UyZm4nO1xuaW1wb3J0IGUzZm4gZnJvbSAnLi4vY29tbW9uL2UzZm4nO1xuaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuaW1wb3J0IGFkanVzdF9sYXQgZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sYXQnO1xuaW1wb3J0IG1sZm4gZnJvbSAnLi4vY29tbW9uL21sZm4nO1xuaW1wb3J0IHtFUFNMTn0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbmltcG9ydCBnTiBmcm9tICcuLi9jb21tb24vZ04nO1xudmFyIE1BWF9JVEVSID0gMjA7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICAvKiBQbGFjZSBwYXJhbWV0ZXJzIGluIHN0YXRpYyBzdG9yYWdlIGZvciBjb21tb24gdXNlXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgdGhpcy50ZW1wID0gdGhpcy5iIC8gdGhpcy5hO1xuICB0aGlzLmVzID0gMSAtIE1hdGgucG93KHRoaXMudGVtcCwgMik7IC8vIGRldmFpdCBldHJlIGRhbnMgdG1lcmMuanMgbWFpcyBuIHkgZXN0IHBhcyBkb25jIGplIGNvbW1lbnRlIHNpbm9uIHJldG91ciBkZSB2YWxldXJzIG51bGxlc1xuICB0aGlzLmUgPSBNYXRoLnNxcnQodGhpcy5lcyk7XG4gIHRoaXMuZTAgPSBlMGZuKHRoaXMuZXMpO1xuICB0aGlzLmUxID0gZTFmbih0aGlzLmVzKTtcbiAgdGhpcy5lMiA9IGUyZm4odGhpcy5lcyk7XG4gIHRoaXMuZTMgPSBlM2ZuKHRoaXMuZXMpO1xuICB0aGlzLm1sMCA9IHRoaXMuYSAqIG1sZm4odGhpcy5lMCwgdGhpcy5lMSwgdGhpcy5lMiwgdGhpcy5lMywgdGhpcy5sYXQwKTsgLy9zaSBxdWUgZGVzIHplcm9zIGxlIGNhbGN1bCBuZSBzZSBmYWl0IHBhc1xufVxuXG4vKiBQb2x5Y29uaWMgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgdmFyIHgsIHksIGVsO1xuICB2YXIgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIGVsID0gZGxvbiAqIE1hdGguc2luKGxhdCk7XG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGlmIChNYXRoLmFicyhsYXQpIDw9IEVQU0xOKSB7XG4gICAgICB4ID0gdGhpcy5hICogZGxvbjtcbiAgICAgIHkgPSAtMSAqIHRoaXMuYSAqIHRoaXMubGF0MDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB4ID0gdGhpcy5hICogTWF0aC5zaW4oZWwpIC8gTWF0aC50YW4obGF0KTtcbiAgICAgIHkgPSB0aGlzLmEgKiAoYWRqdXN0X2xhdChsYXQgLSB0aGlzLmxhdDApICsgKDEgLSBNYXRoLmNvcyhlbCkpIC8gTWF0aC50YW4obGF0KSk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmIChNYXRoLmFicyhsYXQpIDw9IEVQU0xOKSB7XG4gICAgICB4ID0gdGhpcy5hICogZGxvbjtcbiAgICAgIHkgPSAtMSAqIHRoaXMubWwwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBubCA9IGdOKHRoaXMuYSwgdGhpcy5lLCBNYXRoLnNpbihsYXQpKSAvIE1hdGgudGFuKGxhdCk7XG4gICAgICB4ID0gbmwgKiBNYXRoLnNpbihlbCk7XG4gICAgICB5ID0gdGhpcy5hICogbWxmbih0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzLCBsYXQpIC0gdGhpcy5tbDAgKyBubCAqICgxIC0gTWF0aC5jb3MoZWwpKTtcbiAgICB9XG5cbiAgfVxuICBwLnggPSB4ICsgdGhpcy54MDtcbiAgcC55ID0geSArIHRoaXMueTA7XG4gIHJldHVybiBwO1xufVxuXG4vKiBJbnZlcnNlIGVxdWF0aW9uc1xuICAtLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciBsb24sIGxhdCwgeCwgeSwgaTtcbiAgdmFyIGFsLCBibDtcbiAgdmFyIHBoaSwgZHBoaTtcbiAgeCA9IHAueCAtIHRoaXMueDA7XG4gIHkgPSBwLnkgLSB0aGlzLnkwO1xuXG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGlmIChNYXRoLmFicyh5ICsgdGhpcy5hICogdGhpcy5sYXQwKSA8PSBFUFNMTikge1xuICAgICAgbG9uID0gYWRqdXN0X2xvbih4IC8gdGhpcy5hICsgdGhpcy5sb25nMCk7XG4gICAgICBsYXQgPSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGFsID0gdGhpcy5sYXQwICsgeSAvIHRoaXMuYTtcbiAgICAgIGJsID0geCAqIHggLyB0aGlzLmEgLyB0aGlzLmEgKyBhbCAqIGFsO1xuICAgICAgcGhpID0gYWw7XG4gICAgICB2YXIgdGFucGhpO1xuICAgICAgZm9yIChpID0gTUFYX0lURVI7IGk7IC0taSkge1xuICAgICAgICB0YW5waGkgPSBNYXRoLnRhbihwaGkpO1xuICAgICAgICBkcGhpID0gLTEgKiAoYWwgKiAocGhpICogdGFucGhpICsgMSkgLSBwaGkgLSAwLjUgKiAocGhpICogcGhpICsgYmwpICogdGFucGhpKSAvICgocGhpIC0gYWwpIC8gdGFucGhpIC0gMSk7XG4gICAgICAgIHBoaSArPSBkcGhpO1xuICAgICAgICBpZiAoTWF0aC5hYnMoZHBoaSkgPD0gRVBTTE4pIHtcbiAgICAgICAgICBsYXQgPSBwaGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIChNYXRoLmFzaW4oeCAqIE1hdGgudGFuKHBoaSkgLyB0aGlzLmEpKSAvIE1hdGguc2luKGxhdCkpO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBpZiAoTWF0aC5hYnMoeSArIHRoaXMubWwwKSA8PSBFUFNMTikge1xuICAgICAgbGF0ID0gMDtcbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIHggLyB0aGlzLmEpO1xuICAgIH1cbiAgICBlbHNlIHtcblxuICAgICAgYWwgPSAodGhpcy5tbDAgKyB5KSAvIHRoaXMuYTtcbiAgICAgIGJsID0geCAqIHggLyB0aGlzLmEgLyB0aGlzLmEgKyBhbCAqIGFsO1xuICAgICAgcGhpID0gYWw7XG4gICAgICB2YXIgY2wsIG1sbiwgbWxucCwgbWE7XG4gICAgICB2YXIgY29uO1xuICAgICAgZm9yIChpID0gTUFYX0lURVI7IGk7IC0taSkge1xuICAgICAgICBjb24gPSB0aGlzLmUgKiBNYXRoLnNpbihwaGkpO1xuICAgICAgICBjbCA9IE1hdGguc3FydCgxIC0gY29uICogY29uKSAqIE1hdGgudGFuKHBoaSk7XG4gICAgICAgIG1sbiA9IHRoaXMuYSAqIG1sZm4odGhpcy5lMCwgdGhpcy5lMSwgdGhpcy5lMiwgdGhpcy5lMywgcGhpKTtcbiAgICAgICAgbWxucCA9IHRoaXMuZTAgLSAyICogdGhpcy5lMSAqIE1hdGguY29zKDIgKiBwaGkpICsgNCAqIHRoaXMuZTIgKiBNYXRoLmNvcyg0ICogcGhpKSAtIDYgKiB0aGlzLmUzICogTWF0aC5jb3MoNiAqIHBoaSk7XG4gICAgICAgIG1hID0gbWxuIC8gdGhpcy5hO1xuICAgICAgICBkcGhpID0gKGFsICogKGNsICogbWEgKyAxKSAtIG1hIC0gMC41ICogY2wgKiAobWEgKiBtYSArIGJsKSkgLyAodGhpcy5lcyAqIE1hdGguc2luKDIgKiBwaGkpICogKG1hICogbWEgKyBibCAtIDIgKiBhbCAqIG1hKSAvICg0ICogY2wpICsgKGFsIC0gbWEpICogKGNsICogbWxucCAtIDIgLyBNYXRoLnNpbigyICogcGhpKSkgLSBtbG5wKTtcbiAgICAgICAgcGhpIC09IGRwaGk7XG4gICAgICAgIGlmIChNYXRoLmFicyhkcGhpKSA8PSBFUFNMTikge1xuICAgICAgICAgIGxhdCA9IHBoaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL2xhdD1waGk0eih0aGlzLmUsdGhpcy5lMCx0aGlzLmUxLHRoaXMuZTIsdGhpcy5lMyxhbCxibCwwLDApO1xuICAgICAgY2wgPSBNYXRoLnNxcnQoMSAtIHRoaXMuZXMgKiBNYXRoLnBvdyhNYXRoLnNpbihsYXQpLCAyKSkgKiBNYXRoLnRhbihsYXQpO1xuICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hc2luKHggKiBjbCAvIHRoaXMuYSkgLyBNYXRoLnNpbihsYXQpKTtcbiAgICB9XG4gIH1cblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJQb2x5Y29uaWNcIiwgXCJwb2x5XCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQge1NFQ19UT19SQUR9IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG4vKlxuICByZWZlcmVuY2VcbiAgICBEZXBhcnRtZW50IG9mIExhbmQgYW5kIFN1cnZleSBUZWNobmljYWwgQ2lyY3VsYXIgMTk3My8zMlxuICAgICAgaHR0cDovL3d3dy5saW56LmdvdnQubnovZG9jcy9taXNjZWxsYW5lb3VzL256LW1hcC1kZWZpbml0aW9uLnBkZlxuICAgIE9TRyBUZWNobmljYWwgUmVwb3J0IDQuMVxuICAgICAgaHR0cDovL3d3dy5saW56LmdvdnQubnovZG9jcy9taXNjZWxsYW5lb3VzL256bWcucGRmXG4gICovXG5cbi8qKlxuICogaXRlcmF0aW9uczogTnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcmVmaW5lIGludmVyc2UgdHJhbnNmb3JtLlxuICogICAgIDAgLT4ga20gYWNjdXJhY3lcbiAqICAgICAxIC0+IG0gYWNjdXJhY3kgLS0gc3VpdGFibGUgZm9yIG1vc3QgbWFwcGluZyBhcHBsaWNhdGlvbnNcbiAqICAgICAyIC0+IG1tIGFjY3VyYWN5XG4gKi9cbmV4cG9ydCB2YXIgaXRlcmF0aW9ucyA9IDE7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICB0aGlzLkEgPSBbXTtcbiAgdGhpcy5BWzFdID0gMC42Mzk5MTc1MDczO1xuICB0aGlzLkFbMl0gPSAtMC4xMzU4Nzk3NjEzO1xuICB0aGlzLkFbM10gPSAwLjA2MzI5NDQwOTtcbiAgdGhpcy5BWzRdID0gLTAuMDI1MjY4NTM7XG4gIHRoaXMuQVs1XSA9IDAuMDExNzg3OTtcbiAgdGhpcy5BWzZdID0gLTAuMDA1NTE2MTtcbiAgdGhpcy5BWzddID0gMC4wMDI2OTA2O1xuICB0aGlzLkFbOF0gPSAtMC4wMDEzMzM7XG4gIHRoaXMuQVs5XSA9IDAuMDAwNjc7XG4gIHRoaXMuQVsxMF0gPSAtMC4wMDAzNDtcblxuICB0aGlzLkJfcmUgPSBbXTtcbiAgdGhpcy5CX2ltID0gW107XG4gIHRoaXMuQl9yZVsxXSA9IDAuNzU1Nzg1MzIyODtcbiAgdGhpcy5CX2ltWzFdID0gMDtcbiAgdGhpcy5CX3JlWzJdID0gMC4yNDkyMDQ2NDY7XG4gIHRoaXMuQl9pbVsyXSA9IDAuMDAzMzcxNTA3O1xuICB0aGlzLkJfcmVbM10gPSAtMC4wMDE1NDE3Mzk7XG4gIHRoaXMuQl9pbVszXSA9IDAuMDQxMDU4NTYwO1xuICB0aGlzLkJfcmVbNF0gPSAtMC4xMDE2MjkwNztcbiAgdGhpcy5CX2ltWzRdID0gMC4wMTcyNzYwOTtcbiAgdGhpcy5CX3JlWzVdID0gLTAuMjY2MjM0ODk7XG4gIHRoaXMuQl9pbVs1XSA9IC0wLjM2MjQ5MjE4O1xuICB0aGlzLkJfcmVbNl0gPSAtMC42ODcwOTgzO1xuICB0aGlzLkJfaW1bNl0gPSAtMS4xNjUxOTY3O1xuXG4gIHRoaXMuQ19yZSA9IFtdO1xuICB0aGlzLkNfaW0gPSBbXTtcbiAgdGhpcy5DX3JlWzFdID0gMS4zMjMxMjcwNDM5O1xuICB0aGlzLkNfaW1bMV0gPSAwO1xuICB0aGlzLkNfcmVbMl0gPSAtMC41NzcyNDU3ODk7XG4gIHRoaXMuQ19pbVsyXSA9IC0wLjAwNzgwOTU5ODtcbiAgdGhpcy5DX3JlWzNdID0gMC41MDgzMDc1MTM7XG4gIHRoaXMuQ19pbVszXSA9IC0wLjExMjIwODk1MjtcbiAgdGhpcy5DX3JlWzRdID0gLTAuMTUwOTQ3NjI7XG4gIHRoaXMuQ19pbVs0XSA9IDAuMTgyMDA2MDI7XG4gIHRoaXMuQ19yZVs1XSA9IDEuMDE0MTgxNzk7XG4gIHRoaXMuQ19pbVs1XSA9IDEuNjQ0OTc2OTY7XG4gIHRoaXMuQ19yZVs2XSA9IDEuOTY2MDU0OTtcbiAgdGhpcy5DX2ltWzZdID0gMi41MTI3NjQ1O1xuXG4gIHRoaXMuRCA9IFtdO1xuICB0aGlzLkRbMV0gPSAxLjU2MjcwMTQyNDM7XG4gIHRoaXMuRFsyXSA9IDAuNTE4NTQwNjM5ODtcbiAgdGhpcy5EWzNdID0gLTAuMDMzMzMwOTg7XG4gIHRoaXMuRFs0XSA9IC0wLjEwNTI5MDY7XG4gIHRoaXMuRFs1XSA9IC0wLjAzNjg1OTQ7XG4gIHRoaXMuRFs2XSA9IDAuMDA3MzE3O1xuICB0aGlzLkRbN10gPSAwLjAxMjIwO1xuICB0aGlzLkRbOF0gPSAwLjAwMzk0O1xuICB0aGlzLkRbOV0gPSAtMC4wMDEzO1xufVxuXG4vKipcbiAgICBOZXcgWmVhbGFuZCBNYXAgR3JpZCBGb3J3YXJkICAtIGxvbmcvbGF0IHRvIHgveVxuICAgIGxvbmcvbGF0IGluIHJhZGlhbnNcbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIG47XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG5cbiAgdmFyIGRlbHRhX2xhdCA9IGxhdCAtIHRoaXMubGF0MDtcbiAgdmFyIGRlbHRhX2xvbiA9IGxvbiAtIHRoaXMubG9uZzA7XG5cbiAgLy8gMS4gQ2FsY3VsYXRlIGRfcGhpIGFuZCBkX3BzaSAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBkX2xhbWJkYVxuICAvLyBGb3IgdGhpcyBhbGdvcml0aG0sIGRlbHRhX2xhdGl0dWRlIGlzIGluIHNlY29uZHMgb2YgYXJjIHggMTAtNSwgc28gd2UgbmVlZCB0byBzY2FsZSB0byB0aG9zZSB1bml0cy4gTG9uZ2l0dWRlIGlzIHJhZGlhbnMuXG4gIHZhciBkX3BoaSA9IGRlbHRhX2xhdCAvIFNFQ19UT19SQUQgKiAxRS01O1xuICB2YXIgZF9sYW1iZGEgPSBkZWx0YV9sb247XG4gIHZhciBkX3BoaV9uID0gMTsgLy8gZF9waGleMFxuXG4gIHZhciBkX3BzaSA9IDA7XG4gIGZvciAobiA9IDE7IG4gPD0gMTA7IG4rKykge1xuICAgIGRfcGhpX24gPSBkX3BoaV9uICogZF9waGk7XG4gICAgZF9wc2kgPSBkX3BzaSArIHRoaXMuQVtuXSAqIGRfcGhpX247XG4gIH1cblxuICAvLyAyLiBDYWxjdWxhdGUgdGhldGFcbiAgdmFyIHRoX3JlID0gZF9wc2k7XG4gIHZhciB0aF9pbSA9IGRfbGFtYmRhO1xuXG4gIC8vIDMuIENhbGN1bGF0ZSB6XG4gIHZhciB0aF9uX3JlID0gMTtcbiAgdmFyIHRoX25faW0gPSAwOyAvLyB0aGV0YV4wXG4gIHZhciB0aF9uX3JlMTtcbiAgdmFyIHRoX25faW0xO1xuXG4gIHZhciB6X3JlID0gMDtcbiAgdmFyIHpfaW0gPSAwO1xuICBmb3IgKG4gPSAxOyBuIDw9IDY7IG4rKykge1xuICAgIHRoX25fcmUxID0gdGhfbl9yZSAqIHRoX3JlIC0gdGhfbl9pbSAqIHRoX2ltO1xuICAgIHRoX25faW0xID0gdGhfbl9pbSAqIHRoX3JlICsgdGhfbl9yZSAqIHRoX2ltO1xuICAgIHRoX25fcmUgPSB0aF9uX3JlMTtcbiAgICB0aF9uX2ltID0gdGhfbl9pbTE7XG4gICAgel9yZSA9IHpfcmUgKyB0aGlzLkJfcmVbbl0gKiB0aF9uX3JlIC0gdGhpcy5CX2ltW25dICogdGhfbl9pbTtcbiAgICB6X2ltID0gel9pbSArIHRoaXMuQl9pbVtuXSAqIHRoX25fcmUgKyB0aGlzLkJfcmVbbl0gKiB0aF9uX2ltO1xuICB9XG5cbiAgLy8gNC4gQ2FsY3VsYXRlIGVhc3RpbmcgYW5kIG5vcnRoaW5nXG4gIHAueCA9ICh6X2ltICogdGhpcy5hKSArIHRoaXMueDA7XG4gIHAueSA9ICh6X3JlICogdGhpcy5hKSArIHRoaXMueTA7XG5cbiAgcmV0dXJuIHA7XG59XG5cbi8qKlxuICAgIE5ldyBaZWFsYW5kIE1hcCBHcmlkIEludmVyc2UgIC0gIHgveSB0byBsb25nL2xhdFxuICAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgbjtcbiAgdmFyIHggPSBwLng7XG4gIHZhciB5ID0gcC55O1xuXG4gIHZhciBkZWx0YV94ID0geCAtIHRoaXMueDA7XG4gIHZhciBkZWx0YV95ID0geSAtIHRoaXMueTA7XG5cbiAgLy8gMS4gQ2FsY3VsYXRlIHpcbiAgdmFyIHpfcmUgPSBkZWx0YV95IC8gdGhpcy5hO1xuICB2YXIgel9pbSA9IGRlbHRhX3ggLyB0aGlzLmE7XG5cbiAgLy8gMmEuIENhbGN1bGF0ZSB0aGV0YSAtIGZpcnN0IGFwcHJveGltYXRpb24gZ2l2ZXMga20gYWNjdXJhY3lcbiAgdmFyIHpfbl9yZSA9IDE7XG4gIHZhciB6X25faW0gPSAwOyAvLyB6XjBcbiAgdmFyIHpfbl9yZTE7XG4gIHZhciB6X25faW0xO1xuXG4gIHZhciB0aF9yZSA9IDA7XG4gIHZhciB0aF9pbSA9IDA7XG4gIGZvciAobiA9IDE7IG4gPD0gNjsgbisrKSB7XG4gICAgel9uX3JlMSA9IHpfbl9yZSAqIHpfcmUgLSB6X25faW0gKiB6X2ltO1xuICAgIHpfbl9pbTEgPSB6X25faW0gKiB6X3JlICsgel9uX3JlICogel9pbTtcbiAgICB6X25fcmUgPSB6X25fcmUxO1xuICAgIHpfbl9pbSA9IHpfbl9pbTE7XG4gICAgdGhfcmUgPSB0aF9yZSArIHRoaXMuQ19yZVtuXSAqIHpfbl9yZSAtIHRoaXMuQ19pbVtuXSAqIHpfbl9pbTtcbiAgICB0aF9pbSA9IHRoX2ltICsgdGhpcy5DX2ltW25dICogel9uX3JlICsgdGhpcy5DX3JlW25dICogel9uX2ltO1xuICB9XG5cbiAgLy8gMmIuIEl0ZXJhdGUgdG8gcmVmaW5lIHRoZSBhY2N1cmFjeSBvZiB0aGUgY2FsY3VsYXRpb25cbiAgLy8gICAgICAgIDAgaXRlcmF0aW9ucyBnaXZlcyBrbSBhY2N1cmFjeVxuICAvLyAgICAgICAgMSBpdGVyYXRpb24gZ2l2ZXMgbSBhY2N1cmFjeSAtLSBnb29kIGVub3VnaCBmb3IgbW9zdCBtYXBwaW5nIGFwcGxpY2F0aW9uc1xuICAvLyAgICAgICAgMiBpdGVyYXRpb25zIGJpdmVzIG1tIGFjY3VyYWN5XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVyYXRpb25zOyBpKyspIHtcbiAgICB2YXIgdGhfbl9yZSA9IHRoX3JlO1xuICAgIHZhciB0aF9uX2ltID0gdGhfaW07XG4gICAgdmFyIHRoX25fcmUxO1xuICAgIHZhciB0aF9uX2ltMTtcblxuICAgIHZhciBudW1fcmUgPSB6X3JlO1xuICAgIHZhciBudW1faW0gPSB6X2ltO1xuICAgIGZvciAobiA9IDI7IG4gPD0gNjsgbisrKSB7XG4gICAgICB0aF9uX3JlMSA9IHRoX25fcmUgKiB0aF9yZSAtIHRoX25faW0gKiB0aF9pbTtcbiAgICAgIHRoX25faW0xID0gdGhfbl9pbSAqIHRoX3JlICsgdGhfbl9yZSAqIHRoX2ltO1xuICAgICAgdGhfbl9yZSA9IHRoX25fcmUxO1xuICAgICAgdGhfbl9pbSA9IHRoX25faW0xO1xuICAgICAgbnVtX3JlID0gbnVtX3JlICsgKG4gLSAxKSAqICh0aGlzLkJfcmVbbl0gKiB0aF9uX3JlIC0gdGhpcy5CX2ltW25dICogdGhfbl9pbSk7XG4gICAgICBudW1faW0gPSBudW1faW0gKyAobiAtIDEpICogKHRoaXMuQl9pbVtuXSAqIHRoX25fcmUgKyB0aGlzLkJfcmVbbl0gKiB0aF9uX2ltKTtcbiAgICB9XG5cbiAgICB0aF9uX3JlID0gMTtcbiAgICB0aF9uX2ltID0gMDtcbiAgICB2YXIgZGVuX3JlID0gdGhpcy5CX3JlWzFdO1xuICAgIHZhciBkZW5faW0gPSB0aGlzLkJfaW1bMV07XG4gICAgZm9yIChuID0gMjsgbiA8PSA2OyBuKyspIHtcbiAgICAgIHRoX25fcmUxID0gdGhfbl9yZSAqIHRoX3JlIC0gdGhfbl9pbSAqIHRoX2ltO1xuICAgICAgdGhfbl9pbTEgPSB0aF9uX2ltICogdGhfcmUgKyB0aF9uX3JlICogdGhfaW07XG4gICAgICB0aF9uX3JlID0gdGhfbl9yZTE7XG4gICAgICB0aF9uX2ltID0gdGhfbl9pbTE7XG4gICAgICBkZW5fcmUgPSBkZW5fcmUgKyBuICogKHRoaXMuQl9yZVtuXSAqIHRoX25fcmUgLSB0aGlzLkJfaW1bbl0gKiB0aF9uX2ltKTtcbiAgICAgIGRlbl9pbSA9IGRlbl9pbSArIG4gKiAodGhpcy5CX2ltW25dICogdGhfbl9yZSArIHRoaXMuQl9yZVtuXSAqIHRoX25faW0pO1xuICAgIH1cblxuICAgIC8vIENvbXBsZXggZGl2aXNpb25cbiAgICB2YXIgZGVuMiA9IGRlbl9yZSAqIGRlbl9yZSArIGRlbl9pbSAqIGRlbl9pbTtcbiAgICB0aF9yZSA9IChudW1fcmUgKiBkZW5fcmUgKyBudW1faW0gKiBkZW5faW0pIC8gZGVuMjtcbiAgICB0aF9pbSA9IChudW1faW0gKiBkZW5fcmUgLSBudW1fcmUgKiBkZW5faW0pIC8gZGVuMjtcbiAgfVxuXG4gIC8vIDMuIENhbGN1bGF0ZSBkX3BoaSAgICAgICAgICAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGRfbGFtYmRhXG4gIHZhciBkX3BzaSA9IHRoX3JlO1xuICB2YXIgZF9sYW1iZGEgPSB0aF9pbTtcbiAgdmFyIGRfcHNpX24gPSAxOyAvLyBkX3BzaV4wXG5cbiAgdmFyIGRfcGhpID0gMDtcbiAgZm9yIChuID0gMTsgbiA8PSA5OyBuKyspIHtcbiAgICBkX3BzaV9uID0gZF9wc2lfbiAqIGRfcHNpO1xuICAgIGRfcGhpID0gZF9waGkgKyB0aGlzLkRbbl0gKiBkX3BzaV9uO1xuICB9XG5cbiAgLy8gNC4gQ2FsY3VsYXRlIGxhdGl0dWRlIGFuZCBsb25naXR1ZGVcbiAgLy8gZF9waGkgaXMgY2FsY3VhdGVkIGluIHNlY29uZCBvZiBhcmMgKiAxMF4tNSwgc28gd2UgbmVlZCB0byBzY2FsZSBiYWNrIHRvIHJhZGlhbnMuIGRfbGFtYmRhIGlzIGluIHJhZGlhbnMuXG4gIHZhciBsYXQgPSB0aGlzLmxhdDAgKyAoZF9waGkgKiBTRUNfVE9fUkFEICogMUU1KTtcbiAgdmFyIGxvbiA9IHRoaXMubG9uZzAgKyBkX2xhbWJkYTtcblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcblxuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIk5ld19aZWFsYW5kX01hcF9HcmlkXCIsIFwibnptZ1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IGFkanVzdF9sb24gZnJvbSAnLi4vY29tbW9uL2FkanVzdF9sb24nO1xuXG4vKlxuICByZWZlcmVuY2VcbiAgICBcIk5ldyBFcXVhbC1BcmVhIE1hcCBQcm9qZWN0aW9ucyBmb3IgTm9uY2lyY3VsYXIgUmVnaW9uc1wiLCBKb2huIFAuIFNueWRlcixcbiAgICBUaGUgQW1lcmljYW4gQ2FydG9ncmFwaGVyLCBWb2wgMTUsIE5vLiA0LCBPY3RvYmVyIDE5ODgsIHBwLiAzNDEtMzU1LlxuICAqL1xuXG5cbi8qIEluaXRpYWxpemUgdGhlIE1pbGxlciBDeWxpbmRyaWNhbCBwcm9qZWN0aW9uXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIC8vbm8tb3Bcbn1cblxuLyogTWlsbGVyIEN5bGluZHJpY2FsIGZvcndhcmQgZXF1YXRpb25zLS1tYXBwaW5nIGxhdCxsb25nIHRvIHgseVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIC8qIEZvcndhcmQgZXF1YXRpb25zXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLSovXG4gIHZhciBkbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgdmFyIHggPSB0aGlzLngwICsgdGhpcy5hICogZGxvbjtcbiAgdmFyIHkgPSB0aGlzLnkwICsgdGhpcy5hICogTWF0aC5sb2coTWF0aC50YW4oKE1hdGguUEkgLyA0KSArIChsYXQgLyAyLjUpKSkgKiAxLjI1O1xuXG4gIHAueCA9IHg7XG4gIHAueSA9IHk7XG4gIHJldHVybiBwO1xufVxuXG4vKiBNaWxsZXIgQ3lsaW5kcmljYWwgaW52ZXJzZSBlcXVhdGlvbnMtLW1hcHBpbmcgeCx5IHRvIGxhdC9sb25nXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuXG4gIHZhciBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBwLnggLyB0aGlzLmEpO1xuICB2YXIgbGF0ID0gMi41ICogKE1hdGguYXRhbihNYXRoLmV4cCgwLjggKiBwLnkgLyB0aGlzLmEpKSAtIE1hdGguUEkgLyA0KTtcblxuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJNaWxsZXJfQ3lsaW5kcmljYWxcIiwgXCJtaWxsXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgYWRqdXN0X2xhdCBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xhdCc7XG5pbXBvcnQgcGpfZW5mbiBmcm9tICcuLi9jb21tb24vcGpfZW5mbic7XG52YXIgTUFYX0lURVIgPSAyMDtcbmltcG9ydCBwal9tbGZuIGZyb20gJy4uL2NvbW1vbi9wal9tbGZuJztcbmltcG9ydCBwal9pbnZfbWxmbiBmcm9tICcuLi9jb21tb24vcGpfaW52X21sZm4nO1xuaW1wb3J0IHtFUFNMTiwgSEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbmltcG9ydCBhc2lueiBmcm9tICcuLi9jb21tb24vYXNpbnonO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICAvKiBQbGFjZSBwYXJhbWV0ZXJzIGluIHN0YXRpYyBzdG9yYWdlIGZvciBjb21tb24gdXNlXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblxuICBpZiAoIXRoaXMuc3BoZXJlKSB7XG4gICAgdGhpcy5lbiA9IHBqX2VuZm4odGhpcy5lcyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5uID0gMTtcbiAgICB0aGlzLm0gPSAwO1xuICAgIHRoaXMuZXMgPSAwO1xuICAgIHRoaXMuQ195ID0gTWF0aC5zcXJ0KCh0aGlzLm0gKyAxKSAvIHRoaXMubik7XG4gICAgdGhpcy5DX3ggPSB0aGlzLkNfeSAvICh0aGlzLm0gKyAxKTtcbiAgfVxuXG59XG5cbi8qIFNpbnVzb2lkYWwgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIHgsIHk7XG4gIHZhciBsb24gPSBwLng7XG4gIHZhciBsYXQgPSBwLnk7XG4gIC8qIEZvcndhcmQgZXF1YXRpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBsb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuXG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGlmICghdGhpcy5tKSB7XG4gICAgICBsYXQgPSB0aGlzLm4gIT09IDEgPyBNYXRoLmFzaW4odGhpcy5uICogTWF0aC5zaW4obGF0KSkgOiBsYXQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGsgPSB0aGlzLm4gKiBNYXRoLnNpbihsYXQpO1xuICAgICAgZm9yICh2YXIgaSA9IE1BWF9JVEVSOyBpOyAtLWkpIHtcbiAgICAgICAgdmFyIFYgPSAodGhpcy5tICogbGF0ICsgTWF0aC5zaW4obGF0KSAtIGspIC8gKHRoaXMubSArIE1hdGguY29zKGxhdCkpO1xuICAgICAgICBsYXQgLT0gVjtcbiAgICAgICAgaWYgKE1hdGguYWJzKFYpIDwgRVBTTE4pIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB4ID0gdGhpcy5hICogdGhpcy5DX3ggKiBsb24gKiAodGhpcy5tICsgTWF0aC5jb3MobGF0KSk7XG4gICAgeSA9IHRoaXMuYSAqIHRoaXMuQ195ICogbGF0O1xuXG4gIH1cbiAgZWxzZSB7XG5cbiAgICB2YXIgcyA9IE1hdGguc2luKGxhdCk7XG4gICAgdmFyIGMgPSBNYXRoLmNvcyhsYXQpO1xuICAgIHkgPSB0aGlzLmEgKiBwal9tbGZuKGxhdCwgcywgYywgdGhpcy5lbik7XG4gICAgeCA9IHRoaXMuYSAqIGxvbiAqIGMgLyBNYXRoLnNxcnQoMSAtIHRoaXMuZXMgKiBzICogcyk7XG4gIH1cblxuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgbGF0LCB0ZW1wLCBsb24sIHM7XG5cbiAgcC54IC09IHRoaXMueDA7XG4gIGxvbiA9IHAueCAvIHRoaXMuYTtcbiAgcC55IC09IHRoaXMueTA7XG4gIGxhdCA9IHAueSAvIHRoaXMuYTtcblxuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICBsYXQgLz0gdGhpcy5DX3k7XG4gICAgbG9uID0gbG9uIC8gKHRoaXMuQ194ICogKHRoaXMubSArIE1hdGguY29zKGxhdCkpKTtcbiAgICBpZiAodGhpcy5tKSB7XG4gICAgICBsYXQgPSBhc2lueigodGhpcy5tICogbGF0ICsgTWF0aC5zaW4obGF0KSkgLyB0aGlzLm4pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLm4gIT09IDEpIHtcbiAgICAgIGxhdCA9IGFzaW56KE1hdGguc2luKGxhdCkgLyB0aGlzLm4pO1xuICAgIH1cbiAgICBsb24gPSBhZGp1c3RfbG9uKGxvbiArIHRoaXMubG9uZzApO1xuICAgIGxhdCA9IGFkanVzdF9sYXQobGF0KTtcbiAgfVxuICBlbHNlIHtcbiAgICBsYXQgPSBwal9pbnZfbWxmbihwLnkgLyB0aGlzLmEsIHRoaXMuZXMsIHRoaXMuZW4pO1xuICAgIHMgPSBNYXRoLmFicyhsYXQpO1xuICAgIGlmIChzIDwgSEFMRl9QSSkge1xuICAgICAgcyA9IE1hdGguc2luKGxhdCk7XG4gICAgICB0ZW1wID0gdGhpcy5sb25nMCArIHAueCAqIE1hdGguc3FydCgxIC0gdGhpcy5lcyAqIHMgKiBzKSAvICh0aGlzLmEgKiBNYXRoLmNvcyhsYXQpKTtcbiAgICAgIC8vdGVtcCA9IHRoaXMubG9uZzAgKyBwLnggLyAodGhpcy5hICogTWF0aC5jb3MobGF0KSk7XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRlbXApO1xuICAgIH1cbiAgICBlbHNlIGlmICgocyAtIEVQU0xOKSA8IEhBTEZfUEkpIHtcbiAgICAgIGxvbiA9IHRoaXMubG9uZzA7XG4gICAgfVxuICB9XG4gIHAueCA9IGxvbjtcbiAgcC55ID0gbGF0O1xuICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIlNpbnVzb2lkYWxcIiwgXCJzaW51XCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHt9XG5pbXBvcnQge0VQU0xOfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcbi8qIE1vbGx3ZWlkZSBmb3J3YXJkIGVxdWF0aW9ucy0tbWFwcGluZyBsYXQsbG9uZyB0byB4LHlcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcblxuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuXG4gIHZhciBkZWx0YV9sb24gPSBhZGp1c3RfbG9uKGxvbiAtIHRoaXMubG9uZzApO1xuICB2YXIgdGhldGEgPSBsYXQ7XG4gIHZhciBjb24gPSBNYXRoLlBJICogTWF0aC5zaW4obGF0KTtcblxuICAvKiBJdGVyYXRlIHVzaW5nIHRoZSBOZXd0b24tUmFwaHNvbiBtZXRob2QgdG8gZmluZCB0aGV0YVxuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBkZWx0YV90aGV0YSA9IC0odGhldGEgKyBNYXRoLnNpbih0aGV0YSkgLSBjb24pIC8gKDEgKyBNYXRoLmNvcyh0aGV0YSkpO1xuICAgIHRoZXRhICs9IGRlbHRhX3RoZXRhO1xuICAgIGlmIChNYXRoLmFicyhkZWx0YV90aGV0YSkgPCBFUFNMTikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHRoZXRhIC89IDI7XG5cbiAgLyogSWYgdGhlIGxhdGl0dWRlIGlzIDkwIGRlZywgZm9yY2UgdGhlIHggY29vcmRpbmF0ZSB0byBiZSBcIjAgKyBmYWxzZSBlYXN0aW5nXCJcbiAgICAgICB0aGlzIGlzIGRvbmUgaGVyZSBiZWNhdXNlIG9mIHByZWNpc2lvbiBwcm9ibGVtcyB3aXRoIFwiY29zKHRoZXRhKVwiXG4gICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBpZiAoTWF0aC5QSSAvIDIgLSBNYXRoLmFicyhsYXQpIDwgRVBTTE4pIHtcbiAgICBkZWx0YV9sb24gPSAwO1xuICB9XG4gIHZhciB4ID0gMC45MDAzMTYzMTYxNTggKiB0aGlzLmEgKiBkZWx0YV9sb24gKiBNYXRoLmNvcyh0aGV0YSkgKyB0aGlzLngwO1xuICB2YXIgeSA9IDEuNDE0MjEzNTYyMzczMSAqIHRoaXMuYSAqIE1hdGguc2luKHRoZXRhKSArIHRoaXMueTA7XG5cbiAgcC54ID0geDtcbiAgcC55ID0geTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgdmFyIHRoZXRhO1xuICB2YXIgYXJnO1xuXG4gIC8qIEludmVyc2UgZXF1YXRpb25zXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLSovXG4gIHAueCAtPSB0aGlzLngwO1xuICBwLnkgLT0gdGhpcy55MDtcbiAgYXJnID0gcC55IC8gKDEuNDE0MjEzNTYyMzczMSAqIHRoaXMuYSk7XG5cbiAgLyogQmVjYXVzZSBvZiBkaXZpc2lvbiBieSB6ZXJvIHByb2JsZW1zLCAnYXJnJyBjYW4gbm90IGJlIDEuICBUaGVyZWZvcmVcbiAgICAgICBhIG51bWJlciB2ZXJ5IGNsb3NlIHRvIG9uZSBpcyB1c2VkIGluc3RlYWQuXG4gICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gIGlmIChNYXRoLmFicyhhcmcpID4gMC45OTk5OTk5OTk5OTkpIHtcbiAgICBhcmcgPSAwLjk5OTk5OTk5OTk5OTtcbiAgfVxuICB0aGV0YSA9IE1hdGguYXNpbihhcmcpO1xuICB2YXIgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgKHAueCAvICgwLjkwMDMxNjMxNjE1OCAqIHRoaXMuYSAqIE1hdGguY29zKHRoZXRhKSkpKTtcbiAgaWYgKGxvbiA8ICgtTWF0aC5QSSkpIHtcbiAgICBsb24gPSAtTWF0aC5QSTtcbiAgfVxuICBpZiAobG9uID4gTWF0aC5QSSkge1xuICAgIGxvbiA9IE1hdGguUEk7XG4gIH1cbiAgYXJnID0gKDIgKiB0aGV0YSArIE1hdGguc2luKDIgKiB0aGV0YSkpIC8gTWF0aC5QSTtcbiAgaWYgKE1hdGguYWJzKGFyZykgPiAxKSB7XG4gICAgYXJnID0gMTtcbiAgfVxuICB2YXIgbGF0ID0gTWF0aC5hc2luKGFyZyk7XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiTW9sbHdlaWRlXCIsIFwibW9sbFwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IGUwZm4gZnJvbSAnLi4vY29tbW9uL2UwZm4nO1xuaW1wb3J0IGUxZm4gZnJvbSAnLi4vY29tbW9uL2UxZm4nO1xuaW1wb3J0IGUyZm4gZnJvbSAnLi4vY29tbW9uL2UyZm4nO1xuaW1wb3J0IGUzZm4gZnJvbSAnLi4vY29tbW9uL2UzZm4nO1xuaW1wb3J0IG1zZm56IGZyb20gJy4uL2NvbW1vbi9tc2Zueic7XG5pbXBvcnQgbWxmbiBmcm9tICcuLi9jb21tb24vbWxmbic7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5pbXBvcnQgYWRqdXN0X2xhdCBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xhdCc7XG5pbXBvcnQgaW1sZm4gZnJvbSAnLi4vY29tbW9uL2ltbGZuJztcbmltcG9ydCB7RVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcblxuICAvKiBQbGFjZSBwYXJhbWV0ZXJzIGluIHN0YXRpYyBzdG9yYWdlIGZvciBjb21tb24gdXNlXG4gICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgLy8gU3RhbmRhcmQgUGFyYWxsZWxzIGNhbm5vdCBiZSBlcXVhbCBhbmQgb24gb3Bwb3NpdGUgc2lkZXMgb2YgdGhlIGVxdWF0b3JcbiAgaWYgKE1hdGguYWJzKHRoaXMubGF0MSArIHRoaXMubGF0MikgPCBFUFNMTikge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhdDIgPSB0aGlzLmxhdDIgfHwgdGhpcy5sYXQxO1xuICB0aGlzLnRlbXAgPSB0aGlzLmIgLyB0aGlzLmE7XG4gIHRoaXMuZXMgPSAxIC0gTWF0aC5wb3codGhpcy50ZW1wLCAyKTtcbiAgdGhpcy5lID0gTWF0aC5zcXJ0KHRoaXMuZXMpO1xuICB0aGlzLmUwID0gZTBmbih0aGlzLmVzKTtcbiAgdGhpcy5lMSA9IGUxZm4odGhpcy5lcyk7XG4gIHRoaXMuZTIgPSBlMmZuKHRoaXMuZXMpO1xuICB0aGlzLmUzID0gZTNmbih0aGlzLmVzKTtcblxuICB0aGlzLnNpbnBoaSA9IE1hdGguc2luKHRoaXMubGF0MSk7XG4gIHRoaXMuY29zcGhpID0gTWF0aC5jb3ModGhpcy5sYXQxKTtcblxuICB0aGlzLm1zMSA9IG1zZm56KHRoaXMuZSwgdGhpcy5zaW5waGksIHRoaXMuY29zcGhpKTtcbiAgdGhpcy5tbDEgPSBtbGZuKHRoaXMuZTAsIHRoaXMuZTEsIHRoaXMuZTIsIHRoaXMuZTMsIHRoaXMubGF0MSk7XG5cbiAgaWYgKE1hdGguYWJzKHRoaXMubGF0MSAtIHRoaXMubGF0MikgPCBFUFNMTikge1xuICAgIHRoaXMubnMgPSB0aGlzLnNpbnBoaTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLnNpbnBoaSA9IE1hdGguc2luKHRoaXMubGF0Mik7XG4gICAgdGhpcy5jb3NwaGkgPSBNYXRoLmNvcyh0aGlzLmxhdDIpO1xuICAgIHRoaXMubXMyID0gbXNmbnoodGhpcy5lLCB0aGlzLnNpbnBoaSwgdGhpcy5jb3NwaGkpO1xuICAgIHRoaXMubWwyID0gbWxmbih0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzLCB0aGlzLmxhdDIpO1xuICAgIHRoaXMubnMgPSAodGhpcy5tczEgLSB0aGlzLm1zMikgLyAodGhpcy5tbDIgLSB0aGlzLm1sMSk7XG4gIH1cbiAgdGhpcy5nID0gdGhpcy5tbDEgKyB0aGlzLm1zMSAvIHRoaXMubnM7XG4gIHRoaXMubWwwID0gbWxmbih0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzLCB0aGlzLmxhdDApO1xuICB0aGlzLnJoID0gdGhpcy5hICogKHRoaXMuZyAtIHRoaXMubWwwKTtcbn1cblxuLyogRXF1aWRpc3RhbnQgQ29uaWMgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgdmFyIHJoMTtcblxuICAvKiBGb3J3YXJkIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICByaDEgPSB0aGlzLmEgKiAodGhpcy5nIC0gbGF0KTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgbWwgPSBtbGZuKHRoaXMuZTAsIHRoaXMuZTEsIHRoaXMuZTIsIHRoaXMuZTMsIGxhdCk7XG4gICAgcmgxID0gdGhpcy5hICogKHRoaXMuZyAtIG1sKTtcbiAgfVxuICB2YXIgdGhldGEgPSB0aGlzLm5zICogYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgdmFyIHggPSB0aGlzLngwICsgcmgxICogTWF0aC5zaW4odGhldGEpO1xuICB2YXIgeSA9IHRoaXMueTAgKyB0aGlzLnJoIC0gcmgxICogTWF0aC5jb3ModGhldGEpO1xuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuICByZXR1cm4gcDtcbn1cblxuLyogSW52ZXJzZSBlcXVhdGlvbnNcbiAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICBwLnggLT0gdGhpcy54MDtcbiAgcC55ID0gdGhpcy5yaCAtIHAueSArIHRoaXMueTA7XG4gIHZhciBjb24sIHJoMSwgbGF0LCBsb247XG4gIGlmICh0aGlzLm5zID49IDApIHtcbiAgICByaDEgPSBNYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgICBjb24gPSAxO1xuICB9XG4gIGVsc2Uge1xuICAgIHJoMSA9IC1NYXRoLnNxcnQocC54ICogcC54ICsgcC55ICogcC55KTtcbiAgICBjb24gPSAtMTtcbiAgfVxuICB2YXIgdGhldGEgPSAwO1xuICBpZiAocmgxICE9PSAwKSB7XG4gICAgdGhldGEgPSBNYXRoLmF0YW4yKGNvbiAqIHAueCwgY29uICogcC55KTtcbiAgfVxuXG4gIGlmICh0aGlzLnNwaGVyZSkge1xuICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIHRoZXRhIC8gdGhpcy5ucyk7XG4gICAgbGF0ID0gYWRqdXN0X2xhdCh0aGlzLmcgLSByaDEgLyB0aGlzLmEpO1xuICAgIHAueCA9IGxvbjtcbiAgICBwLnkgPSBsYXQ7XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIG1sID0gdGhpcy5nIC0gcmgxIC8gdGhpcy5hO1xuICAgIGxhdCA9IGltbGZuKG1sLCB0aGlzLmUwLCB0aGlzLmUxLCB0aGlzLmUyLCB0aGlzLmUzKTtcbiAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyB0aGV0YSAvIHRoaXMubnMpO1xuICAgIHAueCA9IGxvbjtcbiAgICBwLnkgPSBsYXQ7XG4gICAgcmV0dXJuIHA7XG4gIH1cblxufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiRXF1aWRpc3RhbnRfQ29uaWNcIiwgXCJlcWRjXCJdO1xuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiBpbml0LFxuICBmb3J3YXJkOiBmb3J3YXJkLFxuICBpbnZlcnNlOiBpbnZlcnNlLFxuICBuYW1lczogbmFtZXNcbn07XG4iLCJpbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbmltcG9ydCB7SEFMRl9QSSwgRVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5pbXBvcnQgYXNpbnogZnJvbSAnLi4vY29tbW9uL2FzaW56JztcblxuLyogSW5pdGlhbGl6ZSB0aGUgVmFuIERlciBHcmludGVuIHByb2plY3Rpb25cbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgLy90aGlzLlIgPSA2MzcwOTk3OyAvL1JhZGl1cyBvZiBlYXJ0aFxuICB0aGlzLlIgPSB0aGlzLmE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcblxuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuXG4gIC8qIEZvcndhcmQgZXF1YXRpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICB2YXIgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG4gIHZhciB4LCB5O1xuXG4gIGlmIChNYXRoLmFicyhsYXQpIDw9IEVQU0xOKSB7XG4gICAgeCA9IHRoaXMueDAgKyB0aGlzLlIgKiBkbG9uO1xuICAgIHkgPSB0aGlzLnkwO1xuICB9XG4gIHZhciB0aGV0YSA9IGFzaW56KDIgKiBNYXRoLmFicyhsYXQgLyBNYXRoLlBJKSk7XG4gIGlmICgoTWF0aC5hYnMoZGxvbikgPD0gRVBTTE4pIHx8IChNYXRoLmFicyhNYXRoLmFicyhsYXQpIC0gSEFMRl9QSSkgPD0gRVBTTE4pKSB7XG4gICAgeCA9IHRoaXMueDA7XG4gICAgaWYgKGxhdCA+PSAwKSB7XG4gICAgICB5ID0gdGhpcy55MCArIE1hdGguUEkgKiB0aGlzLlIgKiBNYXRoLnRhbigwLjUgKiB0aGV0YSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgeSA9IHRoaXMueTAgKyBNYXRoLlBJICogdGhpcy5SICogLU1hdGgudGFuKDAuNSAqIHRoZXRhKTtcbiAgICB9XG4gICAgLy8gIHJldHVybihPSyk7XG4gIH1cbiAgdmFyIGFsID0gMC41ICogTWF0aC5hYnMoKE1hdGguUEkgLyBkbG9uKSAtIChkbG9uIC8gTWF0aC5QSSkpO1xuICB2YXIgYXNxID0gYWwgKiBhbDtcbiAgdmFyIHNpbnRoID0gTWF0aC5zaW4odGhldGEpO1xuICB2YXIgY29zdGggPSBNYXRoLmNvcyh0aGV0YSk7XG5cbiAgdmFyIGcgPSBjb3N0aCAvIChzaW50aCArIGNvc3RoIC0gMSk7XG4gIHZhciBnc3EgPSBnICogZztcbiAgdmFyIG0gPSBnICogKDIgLyBzaW50aCAtIDEpO1xuICB2YXIgbXNxID0gbSAqIG07XG4gIHZhciBjb24gPSBNYXRoLlBJICogdGhpcy5SICogKGFsICogKGcgLSBtc3EpICsgTWF0aC5zcXJ0KGFzcSAqIChnIC0gbXNxKSAqIChnIC0gbXNxKSAtIChtc3EgKyBhc3EpICogKGdzcSAtIG1zcSkpKSAvIChtc3EgKyBhc3EpO1xuICBpZiAoZGxvbiA8IDApIHtcbiAgICBjb24gPSAtY29uO1xuICB9XG4gIHggPSB0aGlzLngwICsgY29uO1xuICAvL2NvbiA9IE1hdGguYWJzKGNvbiAvIChNYXRoLlBJICogdGhpcy5SKSk7XG4gIHZhciBxID0gYXNxICsgZztcbiAgY29uID0gTWF0aC5QSSAqIHRoaXMuUiAqIChtICogcSAtIGFsICogTWF0aC5zcXJ0KChtc3EgKyBhc3EpICogKGFzcSArIDEpIC0gcSAqIHEpKSAvIChtc3EgKyBhc3EpO1xuICBpZiAobGF0ID49IDApIHtcbiAgICAvL3kgPSB0aGlzLnkwICsgTWF0aC5QSSAqIHRoaXMuUiAqIE1hdGguc3FydCgxIC0gY29uICogY29uIC0gMiAqIGFsICogY29uKTtcbiAgICB5ID0gdGhpcy55MCArIGNvbjtcbiAgfVxuICBlbHNlIHtcbiAgICAvL3kgPSB0aGlzLnkwIC0gTWF0aC5QSSAqIHRoaXMuUiAqIE1hdGguc3FydCgxIC0gY29uICogY29uIC0gMiAqIGFsICogY29uKTtcbiAgICB5ID0gdGhpcy55MCAtIGNvbjtcbiAgfVxuICBwLnggPSB4O1xuICBwLnkgPSB5O1xuICByZXR1cm4gcDtcbn1cblxuLyogVmFuIERlciBHcmludGVuIGludmVyc2UgZXF1YXRpb25zLS1tYXBwaW5nIHgseSB0byBsYXQvbG9uZ1xuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgbG9uLCBsYXQ7XG4gIHZhciB4eCwgeXksIHh5cywgYzEsIGMyLCBjMztcbiAgdmFyIGExO1xuICB2YXIgbTE7XG4gIHZhciBjb247XG4gIHZhciB0aDE7XG4gIHZhciBkO1xuXG4gIC8qIGludmVyc2UgZXF1YXRpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBwLnggLT0gdGhpcy54MDtcbiAgcC55IC09IHRoaXMueTA7XG4gIGNvbiA9IE1hdGguUEkgKiB0aGlzLlI7XG4gIHh4ID0gcC54IC8gY29uO1xuICB5eSA9IHAueSAvIGNvbjtcbiAgeHlzID0geHggKiB4eCArIHl5ICogeXk7XG4gIGMxID0gLU1hdGguYWJzKHl5KSAqICgxICsgeHlzKTtcbiAgYzIgPSBjMSAtIDIgKiB5eSAqIHl5ICsgeHggKiB4eDtcbiAgYzMgPSAtMiAqIGMxICsgMSArIDIgKiB5eSAqIHl5ICsgeHlzICogeHlzO1xuICBkID0geXkgKiB5eSAvIGMzICsgKDIgKiBjMiAqIGMyICogYzIgLyBjMyAvIGMzIC8gYzMgLSA5ICogYzEgKiBjMiAvIGMzIC8gYzMpIC8gMjc7XG4gIGExID0gKGMxIC0gYzIgKiBjMiAvIDMgLyBjMykgLyBjMztcbiAgbTEgPSAyICogTWF0aC5zcXJ0KC1hMSAvIDMpO1xuICBjb24gPSAoKDMgKiBkKSAvIGExKSAvIG0xO1xuICBpZiAoTWF0aC5hYnMoY29uKSA+IDEpIHtcbiAgICBpZiAoY29uID49IDApIHtcbiAgICAgIGNvbiA9IDE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uID0gLTE7XG4gICAgfVxuICB9XG4gIHRoMSA9IE1hdGguYWNvcyhjb24pIC8gMztcbiAgaWYgKHAueSA+PSAwKSB7XG4gICAgbGF0ID0gKC1tMSAqIE1hdGguY29zKHRoMSArIE1hdGguUEkgLyAzKSAtIGMyIC8gMyAvIGMzKSAqIE1hdGguUEk7XG4gIH1cbiAgZWxzZSB7XG4gICAgbGF0ID0gLSgtbTEgKiBNYXRoLmNvcyh0aDEgKyBNYXRoLlBJIC8gMykgLSBjMiAvIDMgLyBjMykgKiBNYXRoLlBJO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKHh4KSA8IEVQU0xOKSB7XG4gICAgbG9uID0gdGhpcy5sb25nMDtcbiAgfVxuICBlbHNlIHtcbiAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLlBJICogKHh5cyAtIDEgKyBNYXRoLnNxcnQoMSArIDIgKiAoeHggKiB4eCAtIHl5ICogeXkpICsgeHlzICogeHlzKSkgLyAyIC8geHgpO1xuICB9XG5cbiAgcC54ID0gbG9uO1xuICBwLnkgPSBsYXQ7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiVmFuX2Rlcl9HcmludGVuX0lcIiwgXCJWYW5EZXJHcmludGVuXCIsIFwidmFuZGdcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCB7SEFMRl9QSSwgRVBTTE59IGZyb20gJy4uL2NvbnN0YW50cy92YWx1ZXMnO1xuXG5pbXBvcnQgbWxmbiBmcm9tICcuLi9jb21tb24vbWxmbic7XG5pbXBvcnQgZTBmbiBmcm9tICcuLi9jb21tb24vZTBmbic7XG5pbXBvcnQgZTFmbiBmcm9tICcuLi9jb21tb24vZTFmbic7XG5pbXBvcnQgZTJmbiBmcm9tICcuLi9jb21tb24vZTJmbic7XG5pbXBvcnQgZTNmbiBmcm9tICcuLi9jb21tb24vZTNmbic7XG5pbXBvcnQgZ04gZnJvbSAnLi4vY29tbW9uL2dOJztcbmltcG9ydCBhc2lueiBmcm9tICcuLi9jb21tb24vYXNpbnonO1xuaW1wb3J0IGltbGZuIGZyb20gJy4uL2NvbW1vbi9pbWxmbic7XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgdGhpcy5zaW5fcDEyID0gTWF0aC5zaW4odGhpcy5sYXQwKTtcbiAgdGhpcy5jb3NfcDEyID0gTWF0aC5jb3ModGhpcy5sYXQwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgbG9uID0gcC54O1xuICB2YXIgbGF0ID0gcC55O1xuICB2YXIgc2lucGhpID0gTWF0aC5zaW4ocC55KTtcbiAgdmFyIGNvc3BoaSA9IE1hdGguY29zKHAueSk7XG4gIHZhciBkbG9uID0gYWRqdXN0X2xvbihsb24gLSB0aGlzLmxvbmcwKTtcbiAgdmFyIGUwLCBlMSwgZTIsIGUzLCBNbHAsIE1sLCB0YW5waGksIE5sMSwgTmwsIHBzaSwgQXosIEcsIEgsIEdILCBIcywgYywga3AsIGNvc19jLCBzLCBzMiwgczMsIHM0LCBzNTtcbiAgaWYgKHRoaXMuc3BoZXJlKSB7XG4gICAgaWYgKE1hdGguYWJzKHRoaXMuc2luX3AxMiAtIDEpIDw9IEVQU0xOKSB7XG4gICAgICAvL05vcnRoIFBvbGUgY2FzZVxuICAgICAgcC54ID0gdGhpcy54MCArIHRoaXMuYSAqIChIQUxGX1BJIC0gbGF0KSAqIE1hdGguc2luKGRsb24pO1xuICAgICAgcC55ID0gdGhpcy55MCAtIHRoaXMuYSAqIChIQUxGX1BJIC0gbGF0KSAqIE1hdGguY29zKGRsb24pO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuc2luX3AxMiArIDEpIDw9IEVQU0xOKSB7XG4gICAgICAvL1NvdXRoIFBvbGUgY2FzZVxuICAgICAgcC54ID0gdGhpcy54MCArIHRoaXMuYSAqIChIQUxGX1BJICsgbGF0KSAqIE1hdGguc2luKGRsb24pO1xuICAgICAgcC55ID0gdGhpcy55MCArIHRoaXMuYSAqIChIQUxGX1BJICsgbGF0KSAqIE1hdGguY29zKGRsb24pO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy9kZWZhdWx0IGNhc2VcbiAgICAgIGNvc19jID0gdGhpcy5zaW5fcDEyICogc2lucGhpICsgdGhpcy5jb3NfcDEyICogY29zcGhpICogTWF0aC5jb3MoZGxvbik7XG4gICAgICBjID0gTWF0aC5hY29zKGNvc19jKTtcbiAgICAgIGtwID0gYyA/IGMgLyBNYXRoLnNpbihjKSA6IDE7XG4gICAgICBwLnggPSB0aGlzLngwICsgdGhpcy5hICoga3AgKiBjb3NwaGkgKiBNYXRoLnNpbihkbG9uKTtcbiAgICAgIHAueSA9IHRoaXMueTAgKyB0aGlzLmEgKiBrcCAqICh0aGlzLmNvc19wMTIgKiBzaW5waGkgLSB0aGlzLnNpbl9wMTIgKiBjb3NwaGkgKiBNYXRoLmNvcyhkbG9uKSk7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgZTAgPSBlMGZuKHRoaXMuZXMpO1xuICAgIGUxID0gZTFmbih0aGlzLmVzKTtcbiAgICBlMiA9IGUyZm4odGhpcy5lcyk7XG4gICAgZTMgPSBlM2ZuKHRoaXMuZXMpO1xuICAgIGlmIChNYXRoLmFicyh0aGlzLnNpbl9wMTIgLSAxKSA8PSBFUFNMTikge1xuICAgICAgLy9Ob3J0aCBQb2xlIGNhc2VcbiAgICAgIE1scCA9IHRoaXMuYSAqIG1sZm4oZTAsIGUxLCBlMiwgZTMsIEhBTEZfUEkpO1xuICAgICAgTWwgPSB0aGlzLmEgKiBtbGZuKGUwLCBlMSwgZTIsIGUzLCBsYXQpO1xuICAgICAgcC54ID0gdGhpcy54MCArIChNbHAgLSBNbCkgKiBNYXRoLnNpbihkbG9uKTtcbiAgICAgIHAueSA9IHRoaXMueTAgLSAoTWxwIC0gTWwpICogTWF0aC5jb3MoZGxvbik7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5zaW5fcDEyICsgMSkgPD0gRVBTTE4pIHtcbiAgICAgIC8vU291dGggUG9sZSBjYXNlXG4gICAgICBNbHAgPSB0aGlzLmEgKiBtbGZuKGUwLCBlMSwgZTIsIGUzLCBIQUxGX1BJKTtcbiAgICAgIE1sID0gdGhpcy5hICogbWxmbihlMCwgZTEsIGUyLCBlMywgbGF0KTtcbiAgICAgIHAueCA9IHRoaXMueDAgKyAoTWxwICsgTWwpICogTWF0aC5zaW4oZGxvbik7XG4gICAgICBwLnkgPSB0aGlzLnkwICsgKE1scCArIE1sKSAqIE1hdGguY29zKGRsb24pO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy9EZWZhdWx0IGNhc2VcbiAgICAgIHRhbnBoaSA9IHNpbnBoaSAvIGNvc3BoaTtcbiAgICAgIE5sMSA9IGdOKHRoaXMuYSwgdGhpcy5lLCB0aGlzLnNpbl9wMTIpO1xuICAgICAgTmwgPSBnTih0aGlzLmEsIHRoaXMuZSwgc2lucGhpKTtcbiAgICAgIHBzaSA9IE1hdGguYXRhbigoMSAtIHRoaXMuZXMpICogdGFucGhpICsgdGhpcy5lcyAqIE5sMSAqIHRoaXMuc2luX3AxMiAvIChObCAqIGNvc3BoaSkpO1xuICAgICAgQXogPSBNYXRoLmF0YW4yKE1hdGguc2luKGRsb24pLCB0aGlzLmNvc19wMTIgKiBNYXRoLnRhbihwc2kpIC0gdGhpcy5zaW5fcDEyICogTWF0aC5jb3MoZGxvbikpO1xuICAgICAgaWYgKEF6ID09PSAwKSB7XG4gICAgICAgIHMgPSBNYXRoLmFzaW4odGhpcy5jb3NfcDEyICogTWF0aC5zaW4ocHNpKSAtIHRoaXMuc2luX3AxMiAqIE1hdGguY29zKHBzaSkpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoTWF0aC5hYnMoTWF0aC5hYnMoQXopIC0gTWF0aC5QSSkgPD0gRVBTTE4pIHtcbiAgICAgICAgcyA9IC1NYXRoLmFzaW4odGhpcy5jb3NfcDEyICogTWF0aC5zaW4ocHNpKSAtIHRoaXMuc2luX3AxMiAqIE1hdGguY29zKHBzaSkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHMgPSBNYXRoLmFzaW4oTWF0aC5zaW4oZGxvbikgKiBNYXRoLmNvcyhwc2kpIC8gTWF0aC5zaW4oQXopKTtcbiAgICAgIH1cbiAgICAgIEcgPSB0aGlzLmUgKiB0aGlzLnNpbl9wMTIgLyBNYXRoLnNxcnQoMSAtIHRoaXMuZXMpO1xuICAgICAgSCA9IHRoaXMuZSAqIHRoaXMuY29zX3AxMiAqIE1hdGguY29zKEF6KSAvIE1hdGguc3FydCgxIC0gdGhpcy5lcyk7XG4gICAgICBHSCA9IEcgKiBIO1xuICAgICAgSHMgPSBIICogSDtcbiAgICAgIHMyID0gcyAqIHM7XG4gICAgICBzMyA9IHMyICogcztcbiAgICAgIHM0ID0gczMgKiBzO1xuICAgICAgczUgPSBzNCAqIHM7XG4gICAgICBjID0gTmwxICogcyAqICgxIC0gczIgKiBIcyAqICgxIC0gSHMpIC8gNiArIHMzIC8gOCAqIEdIICogKDEgLSAyICogSHMpICsgczQgLyAxMjAgKiAoSHMgKiAoNCAtIDcgKiBIcykgLSAzICogRyAqIEcgKiAoMSAtIDcgKiBIcykpIC0gczUgLyA0OCAqIEdIKTtcbiAgICAgIHAueCA9IHRoaXMueDAgKyBjICogTWF0aC5zaW4oQXopO1xuICAgICAgcC55ID0gdGhpcy55MCArIGMgKiBNYXRoLmNvcyhBeik7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH1cblxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC09IHRoaXMueDA7XG4gIHAueSAtPSB0aGlzLnkwO1xuICB2YXIgcmgsIHosIHNpbnosIGNvc3osIGxvbiwgbGF0LCBjb24sIGUwLCBlMSwgZTIsIGUzLCBNbHAsIE0sIE4xLCBwc2ksIEF6LCBjb3NBeiwgdG1wLCBBLCBCLCBELCBFZSwgRiwgc2lucHNpO1xuICBpZiAodGhpcy5zcGhlcmUpIHtcbiAgICByaCA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICAgIGlmIChyaCA+ICgyICogSEFMRl9QSSAqIHRoaXMuYSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgeiA9IHJoIC8gdGhpcy5hO1xuXG4gICAgc2lueiA9IE1hdGguc2luKHopO1xuICAgIGNvc3ogPSBNYXRoLmNvcyh6KTtcblxuICAgIGxvbiA9IHRoaXMubG9uZzA7XG4gICAgaWYgKE1hdGguYWJzKHJoKSA8PSBFUFNMTikge1xuICAgICAgbGF0ID0gdGhpcy5sYXQwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGxhdCA9IGFzaW56KGNvc3ogKiB0aGlzLnNpbl9wMTIgKyAocC55ICogc2lueiAqIHRoaXMuY29zX3AxMikgLyByaCk7XG4gICAgICBjb24gPSBNYXRoLmFicyh0aGlzLmxhdDApIC0gSEFMRl9QSTtcbiAgICAgIGlmIChNYXRoLmFicyhjb24pIDw9IEVQU0xOKSB7XG4gICAgICAgIGlmICh0aGlzLmxhdDAgPj0gMCkge1xuICAgICAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIE1hdGguYXRhbjIocC54LCAtIHAueSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCAtIE1hdGguYXRhbjIoLXAueCwgcC55KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvKmNvbiA9IGNvc3ogLSB0aGlzLnNpbl9wMTIgKiBNYXRoLnNpbihsYXQpO1xuICAgICAgICBpZiAoKE1hdGguYWJzKGNvbikgPCBFUFNMTikgJiYgKE1hdGguYWJzKHAueCkgPCBFUFNMTikpIHtcbiAgICAgICAgICAvL25vLW9wLCBqdXN0IGtlZXAgdGhlIGxvbiB2YWx1ZSBhcyBpc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0ZW1wID0gTWF0aC5hdGFuMigocC54ICogc2lueiAqIHRoaXMuY29zX3AxMiksIChjb24gKiByaCkpO1xuICAgICAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIE1hdGguYXRhbjIoKHAueCAqIHNpbnogKiB0aGlzLmNvc19wMTIpLCAoY29uICogcmgpKSk7XG4gICAgICAgIH0qL1xuICAgICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCAqIHNpbnosIHJoICogdGhpcy5jb3NfcDEyICogY29zeiAtIHAueSAqIHRoaXMuc2luX3AxMiAqIHNpbnopKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwLnggPSBsb247XG4gICAgcC55ID0gbGF0O1xuICAgIHJldHVybiBwO1xuICB9XG4gIGVsc2Uge1xuICAgIGUwID0gZTBmbih0aGlzLmVzKTtcbiAgICBlMSA9IGUxZm4odGhpcy5lcyk7XG4gICAgZTIgPSBlMmZuKHRoaXMuZXMpO1xuICAgIGUzID0gZTNmbih0aGlzLmVzKTtcbiAgICBpZiAoTWF0aC5hYnModGhpcy5zaW5fcDEyIC0gMSkgPD0gRVBTTE4pIHtcbiAgICAgIC8vTm9ydGggcG9sZSBjYXNlXG4gICAgICBNbHAgPSB0aGlzLmEgKiBtbGZuKGUwLCBlMSwgZTIsIGUzLCBIQUxGX1BJKTtcbiAgICAgIHJoID0gTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSk7XG4gICAgICBNID0gTWxwIC0gcmg7XG4gICAgICBsYXQgPSBpbWxmbihNIC8gdGhpcy5hLCBlMCwgZTEsIGUyLCBlMyk7XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKHAueCwgLSAxICogcC55KSk7XG4gICAgICBwLnggPSBsb247XG4gICAgICBwLnkgPSBsYXQ7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5zaW5fcDEyICsgMSkgPD0gRVBTTE4pIHtcbiAgICAgIC8vU291dGggcG9sZSBjYXNlXG4gICAgICBNbHAgPSB0aGlzLmEgKiBtbGZuKGUwLCBlMSwgZTIsIGUzLCBIQUxGX1BJKTtcbiAgICAgIHJoID0gTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSk7XG4gICAgICBNID0gcmggLSBNbHA7XG5cbiAgICAgIGxhdCA9IGltbGZuKE0gLyB0aGlzLmEsIGUwLCBlMSwgZTIsIGUzKTtcbiAgICAgIGxvbiA9IGFkanVzdF9sb24odGhpcy5sb25nMCArIE1hdGguYXRhbjIocC54LCBwLnkpKTtcbiAgICAgIHAueCA9IGxvbjtcbiAgICAgIHAueSA9IGxhdDtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vZGVmYXVsdCBjYXNlXG4gICAgICByaCA9IE1hdGguc3FydChwLnggKiBwLnggKyBwLnkgKiBwLnkpO1xuICAgICAgQXogPSBNYXRoLmF0YW4yKHAueCwgcC55KTtcbiAgICAgIE4xID0gZ04odGhpcy5hLCB0aGlzLmUsIHRoaXMuc2luX3AxMik7XG4gICAgICBjb3NBeiA9IE1hdGguY29zKEF6KTtcbiAgICAgIHRtcCA9IHRoaXMuZSAqIHRoaXMuY29zX3AxMiAqIGNvc0F6O1xuICAgICAgQSA9IC10bXAgKiB0bXAgLyAoMSAtIHRoaXMuZXMpO1xuICAgICAgQiA9IDMgKiB0aGlzLmVzICogKDEgLSBBKSAqIHRoaXMuc2luX3AxMiAqIHRoaXMuY29zX3AxMiAqIGNvc0F6IC8gKDEgLSB0aGlzLmVzKTtcbiAgICAgIEQgPSByaCAvIE4xO1xuICAgICAgRWUgPSBEIC0gQSAqICgxICsgQSkgKiBNYXRoLnBvdyhELCAzKSAvIDYgLSBCICogKDEgKyAzICogQSkgKiBNYXRoLnBvdyhELCA0KSAvIDI0O1xuICAgICAgRiA9IDEgLSBBICogRWUgKiBFZSAvIDIgLSBEICogRWUgKiBFZSAqIEVlIC8gNjtcbiAgICAgIHBzaSA9IE1hdGguYXNpbih0aGlzLnNpbl9wMTIgKiBNYXRoLmNvcyhFZSkgKyB0aGlzLmNvc19wMTIgKiBNYXRoLnNpbihFZSkgKiBjb3NBeik7XG4gICAgICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmFzaW4oTWF0aC5zaW4oQXopICogTWF0aC5zaW4oRWUpIC8gTWF0aC5jb3MocHNpKSkpO1xuICAgICAgc2lucHNpID0gTWF0aC5zaW4ocHNpKTtcbiAgICAgIGxhdCA9IE1hdGguYXRhbjIoKHNpbnBzaSAtIHRoaXMuZXMgKiBGICogdGhpcy5zaW5fcDEyKSAqIE1hdGgudGFuKHBzaSksIHNpbnBzaSAqICgxIC0gdGhpcy5lcykpO1xuICAgICAgcC54ID0gbG9uO1xuICAgICAgcC55ID0gbGF0O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIkF6aW11dGhhbF9FcXVpZGlzdGFudFwiLCBcImFlcWRcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcbiIsImltcG9ydCBhZGp1c3RfbG9uIGZyb20gJy4uL2NvbW1vbi9hZGp1c3RfbG9uJztcbmltcG9ydCBhc2lueiBmcm9tICcuLi9jb21tb24vYXNpbnonO1xuaW1wb3J0IHtFUFNMTiwgSEFMRl9QSX0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICAvL2RvdWJsZSB0ZW1wOyAgICAgIC8qIHRlbXBvcmFyeSB2YXJpYWJsZSAgICAqL1xuXG4gIC8qIFBsYWNlIHBhcmFtZXRlcnMgaW4gc3RhdGljIHN0b3JhZ2UgZm9yIGNvbW1vbiB1c2VcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICB0aGlzLnNpbl9wMTQgPSBNYXRoLnNpbih0aGlzLmxhdDApO1xuICB0aGlzLmNvc19wMTQgPSBNYXRoLmNvcyh0aGlzLmxhdDApO1xufVxuXG4vKiBPcnRob2dyYXBoaWMgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgdmFyIHNpbnBoaSwgY29zcGhpOyAvKiBzaW4gYW5kIGNvcyB2YWx1ZSAgICAgICAgKi9cbiAgdmFyIGRsb247IC8qIGRlbHRhIGxvbmdpdHVkZSB2YWx1ZSAgICAgICovXG4gIHZhciBjb3Nsb247IC8qIGNvcyBvZiBsb25naXR1ZGUgICAgICAgICovXG4gIHZhciBrc3A7IC8qIHNjYWxlIGZhY3RvciAgICAgICAgICAqL1xuICB2YXIgZywgeCwgeTtcbiAgdmFyIGxvbiA9IHAueDtcbiAgdmFyIGxhdCA9IHAueTtcbiAgLyogRm9yd2FyZCBlcXVhdGlvbnNcbiAgICAgIC0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgZGxvbiA9IGFkanVzdF9sb24obG9uIC0gdGhpcy5sb25nMCk7XG5cbiAgc2lucGhpID0gTWF0aC5zaW4obGF0KTtcbiAgY29zcGhpID0gTWF0aC5jb3MobGF0KTtcblxuICBjb3Nsb24gPSBNYXRoLmNvcyhkbG9uKTtcbiAgZyA9IHRoaXMuc2luX3AxNCAqIHNpbnBoaSArIHRoaXMuY29zX3AxNCAqIGNvc3BoaSAqIGNvc2xvbjtcbiAga3NwID0gMTtcbiAgaWYgKChnID4gMCkgfHwgKE1hdGguYWJzKGcpIDw9IEVQU0xOKSkge1xuICAgIHggPSB0aGlzLmEgKiBrc3AgKiBjb3NwaGkgKiBNYXRoLnNpbihkbG9uKTtcbiAgICB5ID0gdGhpcy55MCArIHRoaXMuYSAqIGtzcCAqICh0aGlzLmNvc19wMTQgKiBzaW5waGkgLSB0aGlzLnNpbl9wMTQgKiBjb3NwaGkgKiBjb3Nsb24pO1xuICB9XG4gIHAueCA9IHg7XG4gIHAueSA9IHk7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShwKSB7XG4gIHZhciByaDsgLyogaGVpZ2h0IGFib3ZlIGVsbGlwc29pZCAgICAgICovXG4gIHZhciB6OyAvKiBhbmdsZSAgICAgICAgICAqL1xuICB2YXIgc2lueiwgY29zejsgLyogc2luIG9mIHogYW5kIGNvcyBvZiB6ICAgICAgKi9cbiAgdmFyIGNvbjtcbiAgdmFyIGxvbiwgbGF0O1xuICAvKiBJbnZlcnNlIGVxdWF0aW9uc1xuICAgICAgLS0tLS0tLS0tLS0tLS0tLS0qL1xuICBwLnggLT0gdGhpcy54MDtcbiAgcC55IC09IHRoaXMueTA7XG4gIHJoID0gTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSk7XG4gIHogPSBhc2lueihyaCAvIHRoaXMuYSk7XG5cbiAgc2lueiA9IE1hdGguc2luKHopO1xuICBjb3N6ID0gTWF0aC5jb3Moeik7XG5cbiAgbG9uID0gdGhpcy5sb25nMDtcbiAgaWYgKE1hdGguYWJzKHJoKSA8PSBFUFNMTikge1xuICAgIGxhdCA9IHRoaXMubGF0MDtcbiAgICBwLnggPSBsb247XG4gICAgcC55ID0gbGF0O1xuICAgIHJldHVybiBwO1xuICB9XG4gIGxhdCA9IGFzaW56KGNvc3ogKiB0aGlzLnNpbl9wMTQgKyAocC55ICogc2lueiAqIHRoaXMuY29zX3AxNCkgLyByaCk7XG4gIGNvbiA9IE1hdGguYWJzKHRoaXMubGF0MCkgLSBIQUxGX1BJO1xuICBpZiAoTWF0aC5hYnMoY29uKSA8PSBFUFNMTikge1xuICAgIGlmICh0aGlzLmxhdDAgPj0gMCkge1xuICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwICsgTWF0aC5hdGFuMihwLngsIC0gcC55KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbG9uID0gYWRqdXN0X2xvbih0aGlzLmxvbmcwIC0gTWF0aC5hdGFuMigtcC54LCBwLnkpKTtcbiAgICB9XG4gICAgcC54ID0gbG9uO1xuICAgIHAueSA9IGxhdDtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBsb24gPSBhZGp1c3RfbG9uKHRoaXMubG9uZzAgKyBNYXRoLmF0YW4yKChwLnggKiBzaW56KSwgcmggKiB0aGlzLmNvc19wMTQgKiBjb3N6IC0gcC55ICogdGhpcy5zaW5fcDE0ICogc2lueikpO1xuICBwLnggPSBsb247XG4gIHAueSA9IGxhdDtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJvcnRob1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiLy8gUVNDIHByb2plY3Rpb24gcmV3cml0dGVuIGZyb20gdGhlIG9yaWdpbmFsIFBST0o0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vT1NHZW8vcHJvai40L2Jsb2IvbWFzdGVyL3NyYy9QSl9xc2MuY1xuXG5pbXBvcnQge0VQU0xOLCBUV09fUEksIFNQSSwgSEFMRl9QSSwgRk9SVFBJfSBmcm9tICcuLi9jb25zdGFudHMvdmFsdWVzJztcblxuLyogY29uc3RhbnRzICovXG52YXIgRkFDRV9FTlVNID0ge1xuICAgIEZST05UOiAxLFxuICAgIFJJR0hUOiAyLFxuICAgIEJBQ0s6IDMsXG4gICAgTEVGVDogNCxcbiAgICBUT1A6IDUsXG4gICAgQk9UVE9NOiA2XG59O1xuXG52YXIgQVJFQV9FTlVNID0ge1xuICAgIEFSRUFfMDogMSxcbiAgICBBUkVBXzE6IDIsXG4gICAgQVJFQV8yOiAzLFxuICAgIEFSRUFfMzogNFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgdGhpcy54MCA9IHRoaXMueDAgfHwgMDtcbiAgdGhpcy55MCA9IHRoaXMueTAgfHwgMDtcbiAgdGhpcy5sYXQwID0gdGhpcy5sYXQwIHx8IDA7XG4gIHRoaXMubG9uZzAgPSB0aGlzLmxvbmcwIHx8IDA7XG4gIHRoaXMubGF0X3RzID0gdGhpcy5sYXRfdHMgfHwgMDtcbiAgdGhpcy50aXRsZSA9IHRoaXMudGl0bGUgfHwgXCJRdWFkcmlsYXRlcmFsaXplZCBTcGhlcmljYWwgQ3ViZVwiO1xuXG4gIC8qIERldGVybWluZSB0aGUgY3ViZSBmYWNlIGZyb20gdGhlIGNlbnRlciBvZiBwcm9qZWN0aW9uLiAqL1xuICBpZiAodGhpcy5sYXQwID49IEhBTEZfUEkgLSBGT1JUUEkgLyAyLjApIHtcbiAgICB0aGlzLmZhY2UgPSBGQUNFX0VOVU0uVE9QO1xuICB9IGVsc2UgaWYgKHRoaXMubGF0MCA8PSAtKEhBTEZfUEkgLSBGT1JUUEkgLyAyLjApKSB7XG4gICAgdGhpcy5mYWNlID0gRkFDRV9FTlVNLkJPVFRPTTtcbiAgfSBlbHNlIGlmIChNYXRoLmFicyh0aGlzLmxvbmcwKSA8PSBGT1JUUEkpIHtcbiAgICB0aGlzLmZhY2UgPSBGQUNFX0VOVU0uRlJPTlQ7XG4gIH0gZWxzZSBpZiAoTWF0aC5hYnModGhpcy5sb25nMCkgPD0gSEFMRl9QSSArIEZPUlRQSSkge1xuICAgIHRoaXMuZmFjZSA9IHRoaXMubG9uZzAgPiAwLjAgPyBGQUNFX0VOVU0uUklHSFQgOiBGQUNFX0VOVU0uTEVGVDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZhY2UgPSBGQUNFX0VOVU0uQkFDSztcbiAgfVxuXG4gIC8qIEZpbGwgaW4gdXNlZnVsIHZhbHVlcyBmb3IgdGhlIGVsbGlwc29pZCA8LT4gc3BoZXJlIHNoaWZ0XG4gICAqIGRlc2NyaWJlZCBpbiBbTEsxMl0uICovXG4gIGlmICh0aGlzLmVzICE9PSAwKSB7XG4gICAgdGhpcy5vbmVfbWludXNfZiA9IDEgLSAodGhpcy5hIC0gdGhpcy5iKSAvIHRoaXMuYTtcbiAgICB0aGlzLm9uZV9taW51c19mX3NxdWFyZWQgPSB0aGlzLm9uZV9taW51c19mICogdGhpcy5vbmVfbWludXNfZjtcbiAgfVxufVxuXG4vLyBRU0MgZm9yd2FyZCBlcXVhdGlvbnMtLW1hcHBpbmcgbGF0LGxvbmcgdG8geCx5XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmQocCkge1xuICB2YXIgeHkgPSB7eDogMCwgeTogMH07XG4gIHZhciBsYXQsIGxvbjtcbiAgdmFyIHRoZXRhLCBwaGk7XG4gIHZhciB0LCBtdTtcbiAgLyogbnU7ICovXG4gIHZhciBhcmVhID0ge3ZhbHVlOiAwfTtcblxuICAvLyBtb3ZlIGxvbiBhY2NvcmRpbmcgdG8gcHJvamVjdGlvbidzIGxvblxuICBwLnggLT0gdGhpcy5sb25nMDtcblxuICAvKiBDb252ZXJ0IHRoZSBnZW9kZXRpYyBsYXRpdHVkZSB0byBhIGdlb2NlbnRyaWMgbGF0aXR1ZGUuXG4gICAqIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIHNoaWZ0IGZyb20gdGhlIGVsbGlwc29pZCB0byB0aGUgc3BoZXJlXG4gICAqIGRlc2NyaWJlZCBpbiBbTEsxMl0uICovXG4gIGlmICh0aGlzLmVzICE9PSAwKSB7Ly9pZiAoUC0+ZXMgIT0gMCkge1xuICAgIGxhdCA9IE1hdGguYXRhbih0aGlzLm9uZV9taW51c19mX3NxdWFyZWQgKiBNYXRoLnRhbihwLnkpKTtcbiAgfSBlbHNlIHtcbiAgICBsYXQgPSBwLnk7XG4gIH1cblxuICAvKiBDb252ZXJ0IHRoZSBpbnB1dCBsYXQsIGxvbiBpbnRvIHRoZXRhLCBwaGkgYXMgdXNlZCBieSBRU0MuXG4gICAqIFRoaXMgZGVwZW5kcyBvbiB0aGUgY3ViZSBmYWNlIGFuZCB0aGUgYXJlYSBvbiBpdC5cbiAgICogRm9yIHRoZSB0b3AgYW5kIGJvdHRvbSBmYWNlLCB3ZSBjYW4gY29tcHV0ZSB0aGV0YSBhbmQgcGhpXG4gICAqIGRpcmVjdGx5IGZyb20gcGhpLCBsYW0uIEZvciB0aGUgb3RoZXIgZmFjZXMsIHdlIG11c3QgdXNlXG4gICAqIHVuaXQgc3BoZXJlIGNhcnRlc2lhbiBjb29yZGluYXRlcyBhcyBhbiBpbnRlcm1lZGlhdGUgc3RlcC4gKi9cbiAgbG9uID0gcC54OyAvL2xvbiA9IGxwLmxhbTtcbiAgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLlRPUCkge1xuICAgIHBoaSA9IEhBTEZfUEkgLSBsYXQ7XG4gICAgaWYgKGxvbiA+PSBGT1JUUEkgJiYgbG9uIDw9IEhBTEZfUEkgKyBGT1JUUEkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8wO1xuICAgICAgdGhldGEgPSBsb24gLSBIQUxGX1BJO1xuICAgIH0gZWxzZSBpZiAobG9uID4gSEFMRl9QSSArIEZPUlRQSSB8fCBsb24gPD0gLShIQUxGX1BJICsgRk9SVFBJKSkge1xuICAgICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzE7XG4gICAgICB0aGV0YSA9IChsb24gPiAwLjAgPyBsb24gLSBTUEkgOiBsb24gKyBTUEkpO1xuICAgIH0gZWxzZSBpZiAobG9uID4gLShIQUxGX1BJICsgRk9SVFBJKSAmJiBsb24gPD0gLUZPUlRQSSkge1xuICAgICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzI7XG4gICAgICB0aGV0YSA9IGxvbiArIEhBTEZfUEk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8zO1xuICAgICAgdGhldGEgPSBsb247XG4gICAgfVxuICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLkJPVFRPTSkge1xuICAgIHBoaSA9IEhBTEZfUEkgKyBsYXQ7XG4gICAgaWYgKGxvbiA+PSBGT1JUUEkgJiYgbG9uIDw9IEhBTEZfUEkgKyBGT1JUUEkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8wO1xuICAgICAgdGhldGEgPSAtbG9uICsgSEFMRl9QSTtcbiAgICB9IGVsc2UgaWYgKGxvbiA8IEZPUlRQSSAmJiBsb24gPj0gLUZPUlRQSSkge1xuICAgICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzE7XG4gICAgICB0aGV0YSA9IC1sb247XG4gICAgfSBlbHNlIGlmIChsb24gPCAtRk9SVFBJICYmIGxvbiA+PSAtKEhBTEZfUEkgKyBGT1JUUEkpKSB7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMjtcbiAgICAgIHRoZXRhID0gLWxvbiAtIEhBTEZfUEk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8zO1xuICAgICAgdGhldGEgPSAobG9uID4gMC4wID8gLWxvbiArIFNQSSA6IC1sb24gLSBTUEkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgcSwgciwgcztcbiAgICB2YXIgc2lubGF0LCBjb3NsYXQ7XG4gICAgdmFyIHNpbmxvbiwgY29zbG9uO1xuXG4gICAgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLlJJR0hUKSB7XG4gICAgICBsb24gPSBxc2Nfc2hpZnRfbG9uX29yaWdpbihsb24sICtIQUxGX1BJKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLkJBQ0spIHtcbiAgICAgIGxvbiA9IHFzY19zaGlmdF9sb25fb3JpZ2luKGxvbiwgK1NQSSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5MRUZUKSB7XG4gICAgICBsb24gPSBxc2Nfc2hpZnRfbG9uX29yaWdpbihsb24sIC1IQUxGX1BJKTtcbiAgICB9XG4gICAgc2lubGF0ID0gTWF0aC5zaW4obGF0KTtcbiAgICBjb3NsYXQgPSBNYXRoLmNvcyhsYXQpO1xuICAgIHNpbmxvbiA9IE1hdGguc2luKGxvbik7XG4gICAgY29zbG9uID0gTWF0aC5jb3MobG9uKTtcbiAgICBxID0gY29zbGF0ICogY29zbG9uO1xuICAgIHIgPSBjb3NsYXQgKiBzaW5sb247XG4gICAgcyA9IHNpbmxhdDtcblxuICAgIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5GUk9OVCkge1xuICAgICAgcGhpID0gTWF0aC5hY29zKHEpO1xuICAgICAgdGhldGEgPSBxc2NfZndkX2VxdWF0X2ZhY2VfdGhldGEocGhpLCBzLCByLCBhcmVhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLlJJR0hUKSB7XG4gICAgICBwaGkgPSBNYXRoLmFjb3Mocik7XG4gICAgICB0aGV0YSA9IHFzY19md2RfZXF1YXRfZmFjZV90aGV0YShwaGksIHMsIC1xLCBhcmVhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLkJBQ0spIHtcbiAgICAgIHBoaSA9IE1hdGguYWNvcygtcSk7XG4gICAgICB0aGV0YSA9IHFzY19md2RfZXF1YXRfZmFjZV90aGV0YShwaGksIHMsIC1yLCBhcmVhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLkxFRlQpIHtcbiAgICAgIHBoaSA9IE1hdGguYWNvcygtcik7XG4gICAgICB0aGV0YSA9IHFzY19md2RfZXF1YXRfZmFjZV90aGV0YShwaGksIHMsIHEsIGFyZWEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBJbXBvc3NpYmxlICovXG4gICAgICBwaGkgPSB0aGV0YSA9IDA7XG4gICAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMDtcbiAgICB9XG4gIH1cblxuICAvKiBDb21wdXRlIG11IGFuZCBudSBmb3IgdGhlIGFyZWEgb2YgZGVmaW5pdGlvbi5cbiAgICogRm9yIG11LCBzZWUgRXEuICgzLTIxKSBpbiBbT0w3Nl0sIGJ1dCBub3RlIHRoZSB0eXBvczpcbiAgICogY29tcGFyZSB3aXRoIEVxLiAoMy0xNCkuIEZvciBudSwgc2VlIEVxLiAoMy0zOCkuICovXG4gIG11ID0gTWF0aC5hdGFuKCgxMiAvIFNQSSkgKiAodGhldGEgKyBNYXRoLmFjb3MoTWF0aC5zaW4odGhldGEpICogTWF0aC5jb3MoRk9SVFBJKSkgLSBIQUxGX1BJKSk7XG4gIHQgPSBNYXRoLnNxcnQoKDEgLSBNYXRoLmNvcyhwaGkpKSAvIChNYXRoLmNvcyhtdSkgKiBNYXRoLmNvcyhtdSkpIC8gKDEgLSBNYXRoLmNvcyhNYXRoLmF0YW4oMSAvIE1hdGguY29zKHRoZXRhKSkpKSk7XG5cbiAgLyogQXBwbHkgdGhlIHJlc3VsdCB0byB0aGUgcmVhbCBhcmVhLiAqL1xuICBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMSkge1xuICAgIG11ICs9IEhBTEZfUEk7XG4gIH0gZWxzZSBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMikge1xuICAgIG11ICs9IFNQSTtcbiAgfSBlbHNlIGlmIChhcmVhLnZhbHVlID09PSBBUkVBX0VOVU0uQVJFQV8zKSB7XG4gICAgbXUgKz0gMS41ICogU1BJO1xuICB9XG5cbiAgLyogTm93IGNvbXB1dGUgeCwgeSBmcm9tIG11IGFuZCBudSAqL1xuICB4eS54ID0gdCAqIE1hdGguY29zKG11KTtcbiAgeHkueSA9IHQgKiBNYXRoLnNpbihtdSk7XG4gIHh5LnggPSB4eS54ICogdGhpcy5hICsgdGhpcy54MDtcbiAgeHkueSA9IHh5LnkgKiB0aGlzLmEgKyB0aGlzLnkwO1xuXG4gIHAueCA9IHh5Lng7XG4gIHAueSA9IHh5Lnk7XG4gIHJldHVybiBwO1xufVxuXG4vLyBRU0MgaW52ZXJzZSBlcXVhdGlvbnMtLW1hcHBpbmcgeCx5IHRvIGxhdC9sb25nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICB2YXIgbHAgPSB7bGFtOiAwLCBwaGk6IDB9O1xuICB2YXIgbXUsIG51LCBjb3NtdSwgdGFubnU7XG4gIHZhciB0YW50aGV0YSwgdGhldGEsIGNvc3BoaSwgcGhpO1xuICB2YXIgdDtcbiAgdmFyIGFyZWEgPSB7dmFsdWU6IDB9O1xuXG4gIC8qIGRlLW9mZnNldCAqL1xuICBwLnggPSAocC54IC0gdGhpcy54MCkgLyB0aGlzLmE7XG4gIHAueSA9IChwLnkgLSB0aGlzLnkwKSAvIHRoaXMuYTtcblxuICAvKiBDb252ZXJ0IHRoZSBpbnB1dCB4LCB5IHRvIHRoZSBtdSBhbmQgbnUgYW5nbGVzIGFzIHVzZWQgYnkgUVNDLlxuICAgKiBUaGlzIGRlcGVuZHMgb24gdGhlIGFyZWEgb2YgdGhlIGN1YmUgZmFjZS4gKi9cbiAgbnUgPSBNYXRoLmF0YW4oTWF0aC5zcXJ0KHAueCAqIHAueCArIHAueSAqIHAueSkpO1xuICBtdSA9IE1hdGguYXRhbjIocC55LCBwLngpO1xuICBpZiAocC54ID49IDAuMCAmJiBwLnggPj0gTWF0aC5hYnMocC55KSkge1xuICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8wO1xuICB9IGVsc2UgaWYgKHAueSA+PSAwLjAgJiYgcC55ID49IE1hdGguYWJzKHAueCkpIHtcbiAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMTtcbiAgICBtdSAtPSBIQUxGX1BJO1xuICB9IGVsc2UgaWYgKHAueCA8IDAuMCAmJiAtcC54ID49IE1hdGguYWJzKHAueSkpIHtcbiAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMjtcbiAgICBtdSA9IChtdSA8IDAuMCA/IG11ICsgU1BJIDogbXUgLSBTUEkpO1xuICB9IGVsc2Uge1xuICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8zO1xuICAgIG11ICs9IEhBTEZfUEk7XG4gIH1cblxuICAvKiBDb21wdXRlIHBoaSBhbmQgdGhldGEgZm9yIHRoZSBhcmVhIG9mIGRlZmluaXRpb24uXG4gICAqIFRoZSBpbnZlcnNlIHByb2plY3Rpb24gaXMgbm90IGRlc2NyaWJlZCBpbiB0aGUgb3JpZ2luYWwgcGFwZXIsIGJ1dCBzb21lXG4gICAqIGdvb2QgaGludHMgY2FuIGJlIGZvdW5kIGhlcmUgKGFzIG9mIDIwMTEtMTItMTQpOlxuICAgKiBodHRwOi8vZml0cy5nc2ZjLm5hc2EuZ292L2ZpdHNiaXRzL3NhZi45My9zYWYuOTMwMlxuICAgKiAoc2VhcmNoIGZvciBcIk1lc3NhZ2UtSWQ6IDw5MzAyMTgxNzU5LkFBMjU0NzcgYXQgZml0cy5jdi5ucmFvLmVkdT5cIikgKi9cbiAgdCA9IChTUEkgLyAxMikgKiBNYXRoLnRhbihtdSk7XG4gIHRhbnRoZXRhID0gTWF0aC5zaW4odCkgLyAoTWF0aC5jb3ModCkgLSAoMSAvIE1hdGguc3FydCgyKSkpO1xuICB0aGV0YSA9IE1hdGguYXRhbih0YW50aGV0YSk7XG4gIGNvc211ID0gTWF0aC5jb3MobXUpO1xuICB0YW5udSA9IE1hdGgudGFuKG51KTtcbiAgY29zcGhpID0gMSAtIGNvc211ICogY29zbXUgKiB0YW5udSAqIHRhbm51ICogKDEgLSBNYXRoLmNvcyhNYXRoLmF0YW4oMSAvIE1hdGguY29zKHRoZXRhKSkpKTtcbiAgaWYgKGNvc3BoaSA8IC0xKSB7XG4gICAgY29zcGhpID0gLTE7XG4gIH0gZWxzZSBpZiAoY29zcGhpID4gKzEpIHtcbiAgICBjb3NwaGkgPSArMTtcbiAgfVxuXG4gIC8qIEFwcGx5IHRoZSByZXN1bHQgdG8gdGhlIHJlYWwgYXJlYSBvbiB0aGUgY3ViZSBmYWNlLlxuICAgKiBGb3IgdGhlIHRvcCBhbmQgYm90dG9tIGZhY2UsIHdlIGNhbiBjb21wdXRlIHBoaSBhbmQgbGFtIGRpcmVjdGx5LlxuICAgKiBGb3IgdGhlIG90aGVyIGZhY2VzLCB3ZSBtdXN0IHVzZSB1bml0IHNwaGVyZSBjYXJ0ZXNpYW4gY29vcmRpbmF0ZXNcbiAgICogYXMgYW4gaW50ZXJtZWRpYXRlIHN0ZXAuICovXG4gIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5UT1ApIHtcbiAgICBwaGkgPSBNYXRoLmFjb3MoY29zcGhpKTtcbiAgICBscC5waGkgPSBIQUxGX1BJIC0gcGhpO1xuICAgIGlmIChhcmVhLnZhbHVlID09PSBBUkVBX0VOVU0uQVJFQV8wKSB7XG4gICAgICBscC5sYW0gPSB0aGV0YSArIEhBTEZfUEk7XG4gICAgfSBlbHNlIGlmIChhcmVhLnZhbHVlID09PSBBUkVBX0VOVU0uQVJFQV8xKSB7XG4gICAgICBscC5sYW0gPSAodGhldGEgPCAwLjAgPyB0aGV0YSArIFNQSSA6IHRoZXRhIC0gU1BJKTtcbiAgICB9IGVsc2UgaWYgKGFyZWEudmFsdWUgPT09IEFSRUFfRU5VTS5BUkVBXzIpIHtcbiAgICAgIGxwLmxhbSA9IHRoZXRhIC0gSEFMRl9QSTtcbiAgICB9IGVsc2UgLyogYXJlYS52YWx1ZSA9PSBBUkVBX0VOVU0uQVJFQV8zICovIHtcbiAgICAgIGxwLmxhbSA9IHRoZXRhO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5CT1RUT00pIHtcbiAgICBwaGkgPSBNYXRoLmFjb3MoY29zcGhpKTtcbiAgICBscC5waGkgPSBwaGkgLSBIQUxGX1BJO1xuICAgIGlmIChhcmVhLnZhbHVlID09PSBBUkVBX0VOVU0uQVJFQV8wKSB7XG4gICAgICBscC5sYW0gPSAtdGhldGEgKyBIQUxGX1BJO1xuICAgIH0gZWxzZSBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMSkge1xuICAgICAgbHAubGFtID0gLXRoZXRhO1xuICAgIH0gZWxzZSBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMikge1xuICAgICAgbHAubGFtID0gLXRoZXRhIC0gSEFMRl9QSTtcbiAgICB9IGVsc2UgLyogYXJlYS52YWx1ZSA9PSBBUkVBX0VOVU0uQVJFQV8zICovIHtcbiAgICAgIGxwLmxhbSA9ICh0aGV0YSA8IDAuMCA/IC10aGV0YSAtIFNQSSA6IC10aGV0YSArIFNQSSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8qIENvbXB1dGUgcGhpIGFuZCBsYW0gdmlhIGNhcnRlc2lhbiB1bml0IHNwaGVyZSBjb29yZGluYXRlcy4gKi9cbiAgICB2YXIgcSwgciwgcztcbiAgICBxID0gY29zcGhpO1xuICAgIHQgPSBxICogcTtcbiAgICBpZiAodCA+PSAxKSB7XG4gICAgICBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IE1hdGguc3FydCgxIC0gdCkgKiBNYXRoLnNpbih0aGV0YSk7XG4gICAgfVxuICAgIHQgKz0gcyAqIHM7XG4gICAgaWYgKHQgPj0gMSkge1xuICAgICAgciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIgPSBNYXRoLnNxcnQoMSAtIHQpO1xuICAgIH1cbiAgICAvKiBSb3RhdGUgcSxyLHMgaW50byB0aGUgY29ycmVjdCBhcmVhLiAqL1xuICAgIGlmIChhcmVhLnZhbHVlID09PSBBUkVBX0VOVU0uQVJFQV8xKSB7XG4gICAgICB0ID0gcjtcbiAgICAgIHIgPSAtcztcbiAgICAgIHMgPSB0O1xuICAgIH0gZWxzZSBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMikge1xuICAgICAgciA9IC1yO1xuICAgICAgcyA9IC1zO1xuICAgIH0gZWxzZSBpZiAoYXJlYS52YWx1ZSA9PT0gQVJFQV9FTlVNLkFSRUFfMykge1xuICAgICAgdCA9IHI7XG4gICAgICByID0gcztcbiAgICAgIHMgPSAtdDtcbiAgICB9XG4gICAgLyogUm90YXRlIHEscixzIGludG8gdGhlIGNvcnJlY3QgY3ViZSBmYWNlLiAqL1xuICAgIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5SSUdIVCkge1xuICAgICAgdCA9IHE7XG4gICAgICBxID0gLXI7XG4gICAgICByID0gdDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLkJBQ0spIHtcbiAgICAgIHEgPSAtcTtcbiAgICAgIHIgPSAtcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLkxFRlQpIHtcbiAgICAgIHQgPSBxO1xuICAgICAgcSA9IHI7XG4gICAgICByID0gLXQ7XG4gICAgfVxuICAgIC8qIE5vdyBjb21wdXRlIHBoaSBhbmQgbGFtIGZyb20gdGhlIHVuaXQgc3BoZXJlIGNvb3JkaW5hdGVzLiAqL1xuICAgIGxwLnBoaSA9IE1hdGguYWNvcygtcykgLSBIQUxGX1BJO1xuICAgIGxwLmxhbSA9IE1hdGguYXRhbjIociwgcSk7XG4gICAgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLlJJR0hUKSB7XG4gICAgICBscC5sYW0gPSBxc2Nfc2hpZnRfbG9uX29yaWdpbihscC5sYW0sIC1IQUxGX1BJKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmFjZSA9PT0gRkFDRV9FTlVNLkJBQ0spIHtcbiAgICAgIGxwLmxhbSA9IHFzY19zaGlmdF9sb25fb3JpZ2luKGxwLmxhbSwgLVNQSSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmZhY2UgPT09IEZBQ0VfRU5VTS5MRUZUKSB7XG4gICAgICBscC5sYW0gPSBxc2Nfc2hpZnRfbG9uX29yaWdpbihscC5sYW0sICtIQUxGX1BJKTtcbiAgICB9XG4gIH1cblxuICAvKiBBcHBseSB0aGUgc2hpZnQgZnJvbSB0aGUgc3BoZXJlIHRvIHRoZSBlbGxpcHNvaWQgYXMgZGVzY3JpYmVkXG4gICAqIGluIFtMSzEyXS4gKi9cbiAgaWYgKHRoaXMuZXMgIT09IDApIHtcbiAgICB2YXIgaW52ZXJ0X3NpZ247XG4gICAgdmFyIHRhbnBoaSwgeGE7XG4gICAgaW52ZXJ0X3NpZ24gPSAobHAucGhpIDwgMCA/IDEgOiAwKTtcbiAgICB0YW5waGkgPSBNYXRoLnRhbihscC5waGkpO1xuICAgIHhhID0gdGhpcy5iIC8gTWF0aC5zcXJ0KHRhbnBoaSAqIHRhbnBoaSArIHRoaXMub25lX21pbnVzX2Zfc3F1YXJlZCk7XG4gICAgbHAucGhpID0gTWF0aC5hdGFuKE1hdGguc3FydCh0aGlzLmEgKiB0aGlzLmEgLSB4YSAqIHhhKSAvICh0aGlzLm9uZV9taW51c19mICogeGEpKTtcbiAgICBpZiAoaW52ZXJ0X3NpZ24pIHtcbiAgICAgIGxwLnBoaSA9IC1scC5waGk7XG4gICAgfVxuICB9XG5cbiAgbHAubGFtICs9IHRoaXMubG9uZzA7XG4gIHAueCA9IGxwLmxhbTtcbiAgcC55ID0gbHAucGhpO1xuICByZXR1cm4gcDtcbn1cblxuLyogSGVscGVyIGZ1bmN0aW9uIGZvciBmb3J3YXJkIHByb2plY3Rpb246IGNvbXB1dGUgdGhlIHRoZXRhIGFuZ2xlXG4gKiBhbmQgZGV0ZXJtaW5lIHRoZSBhcmVhIG51bWJlci4gKi9cbmZ1bmN0aW9uIHFzY19md2RfZXF1YXRfZmFjZV90aGV0YShwaGksIHksIHgsIGFyZWEpIHtcbiAgdmFyIHRoZXRhO1xuICBpZiAocGhpIDwgRVBTTE4pIHtcbiAgICBhcmVhLnZhbHVlID0gQVJFQV9FTlVNLkFSRUFfMDtcbiAgICB0aGV0YSA9IDAuMDtcbiAgfSBlbHNlIHtcbiAgICB0aGV0YSA9IE1hdGguYXRhbjIoeSwgeCk7XG4gICAgaWYgKE1hdGguYWJzKHRoZXRhKSA8PSBGT1JUUEkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8wO1xuICAgIH0gZWxzZSBpZiAodGhldGEgPiBGT1JUUEkgJiYgdGhldGEgPD0gSEFMRl9QSSArIEZPUlRQSSkge1xuICAgICAgYXJlYS52YWx1ZSA9IEFSRUFfRU5VTS5BUkVBXzE7XG4gICAgICB0aGV0YSAtPSBIQUxGX1BJO1xuICAgIH0gZWxzZSBpZiAodGhldGEgPiBIQUxGX1BJICsgRk9SVFBJIHx8IHRoZXRhIDw9IC0oSEFMRl9QSSArIEZPUlRQSSkpIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8yO1xuICAgICAgdGhldGEgPSAodGhldGEgPj0gMC4wID8gdGhldGEgLSBTUEkgOiB0aGV0YSArIFNQSSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZWEudmFsdWUgPSBBUkVBX0VOVU0uQVJFQV8zO1xuICAgICAgdGhldGEgKz0gSEFMRl9QSTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoZXRhO1xufVxuXG4vKiBIZWxwZXIgZnVuY3Rpb246IHNoaWZ0IHRoZSBsb25naXR1ZGUuICovXG5mdW5jdGlvbiBxc2Nfc2hpZnRfbG9uX29yaWdpbihsb24sIG9mZnNldCkge1xuICB2YXIgc2xvbiA9IGxvbiArIG9mZnNldDtcbiAgaWYgKHNsb24gPCAtU1BJKSB7XG4gICAgc2xvbiArPSBUV09fUEk7XG4gIH0gZWxzZSBpZiAoc2xvbiA+ICtTUEkpIHtcbiAgICBzbG9uIC09IFRXT19QSTtcbiAgfVxuICByZXR1cm4gc2xvbjtcbn1cblxuZXhwb3J0IHZhciBuYW1lcyA9IFtcIlF1YWRyaWxhdGVyYWxpemVkIFNwaGVyaWNhbCBDdWJlXCIsIFwiUXVhZHJpbGF0ZXJhbGl6ZWRfU3BoZXJpY2FsX0N1YmVcIiwgXCJxc2NcIl07XG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGluaXQsXG4gIGZvcndhcmQ6IGZvcndhcmQsXG4gIGludmVyc2U6IGludmVyc2UsXG4gIG5hbWVzOiBuYW1lc1xufTtcblxuIiwiLy8gUm9iaW5zb24gcHJvamVjdGlvblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL09TR2VvL3Byb2ouNC9ibG9iL21hc3Rlci9zcmMvUEpfcm9iaW4uY1xuLy8gUG9seW5vbWlhbCBjb2VmaWNpZW50cyBmcm9tIGh0dHA6Ly9hcnRpY2xlLmdtYW5lLm9yZy9nbWFuZS5jb21wLmdpcy5wcm9qLTQuZGV2ZWwvNjAzOVxuXG5pbXBvcnQge0hBTEZfUEksIEQyUiwgUjJELCBFUFNMTn0gZnJvbSAnLi4vY29uc3RhbnRzL3ZhbHVlcyc7XG5pbXBvcnQgYWRqdXN0X2xvbiBmcm9tICcuLi9jb21tb24vYWRqdXN0X2xvbic7XG5cbnZhciBDT0VGU19YID0gW1xuICAgIFsxLjAwMDAsIDIuMjE5OWUtMTcsIC03LjE1NTE1ZS0wNSwgMy4xMTAzZS0wNl0sXG4gICAgWzAuOTk4NiwgLTAuMDAwNDgyMjQzLCAtMi40ODk3ZS0wNSwgLTEuMzMwOWUtMDZdLFxuICAgIFswLjk5NTQsIC0wLjAwMDgzMTAzLCAtNC40ODYwNWUtMDUsIC05Ljg2NzAxZS0wN10sXG4gICAgWzAuOTkwMCwgLTAuMDAxMzUzNjQsIC01Ljk2NjFlLTA1LCAzLjY3NzdlLTA2XSxcbiAgICBbMC45ODIyLCAtMC4wMDE2NzQ0MiwgLTQuNDk1NDdlLTA2LCAtNS43MjQxMWUtMDZdLFxuICAgIFswLjk3MzAsIC0wLjAwMjE0ODY4LCAtOS4wMzU3MWUtMDUsIDEuODczNmUtMDhdLFxuICAgIFswLjk2MDAsIC0wLjAwMzA1MDg1LCAtOS4wMDc2MWUtMDUsIDEuNjQ5MTdlLTA2XSxcbiAgICBbMC45NDI3LCAtMC4wMDM4Mjc5MiwgLTYuNTMzODZlLTA1LCAtMi42MTU0ZS0wNl0sXG4gICAgWzAuOTIxNiwgLTAuMDA0Njc3NDYsIC0wLjAwMDEwNDU3LCA0LjgxMjQzZS0wNl0sXG4gICAgWzAuODk2MiwgLTAuMDA1MzYyMjMsIC0zLjIzODMxZS0wNSwgLTUuNDM0MzJlLTA2XSxcbiAgICBbMC44Njc5LCAtMC4wMDYwOTM2MywgLTAuMDAwMTEzODk4LCAzLjMyNDg0ZS0wNl0sXG4gICAgWzAuODM1MCwgLTAuMDA2OTgzMjUsIC02LjQwMjUzZS0wNSwgOS4zNDk1OWUtMDddLFxuICAgIFswLjc5ODYsIC0wLjAwNzU1MzM4LCAtNS4wMDAwOWUtMDUsIDkuMzUzMjRlLTA3XSxcbiAgICBbMC43NTk3LCAtMC4wMDc5ODMyNCwgLTMuNTk3MWUtMDUsIC0yLjI3NjI2ZS0wNl0sXG4gICAgWzAuNzE4NiwgLTAuMDA4NTEzNjcsIC03LjAxMTQ5ZS0wNSwgLTguNjMwM2UtMDZdLFxuICAgIFswLjY3MzIsIC0wLjAwOTg2MjA5LCAtMC4wMDAxOTk1NjksIDEuOTE5NzRlLTA1XSxcbiAgICBbMC42MjEzLCAtMC4wMTA0MTgsIDguODM5MjNlLTA1LCA2LjI0MDUxZS0wNl0sXG4gICAgWzAuNTcyMiwgLTAuMDA5MDY2MDEsIDAuMDAwMTgyLCA2LjI0MDUxZS0wNl0sXG4gICAgWzAuNTMyMiwgLTAuMDA2Nzc3OTcsIDAuMDAwMjc1NjA4LCA2LjI0MDUxZS0wNl1cbl07XG5cbnZhciBDT0VGU19ZID0gW1xuICAgIFstNS4yMDQxN2UtMTgsIDAuMDEyNCwgMS4yMTQzMWUtMTgsIC04LjQ1Mjg0ZS0xMV0sXG4gICAgWzAuMDYyMCwgMC4wMTI0LCAtMS4yNjc5M2UtMDksIDQuMjI2NDJlLTEwXSxcbiAgICBbMC4xMjQwLCAwLjAxMjQsIDUuMDcxNzFlLTA5LCAtMS42MDYwNGUtMDldLFxuICAgIFswLjE4NjAsIDAuMDEyMzk5OSwgLTEuOTAxODllLTA4LCA2LjAwMTUyZS0wOV0sXG4gICAgWzAuMjQ4MCwgMC4wMTI0MDAyLCA3LjEwMDM5ZS0wOCwgLTIuMjRlLTA4XSxcbiAgICBbMC4zMTAwLCAwLjAxMjM5OTIsIC0yLjY0OTk3ZS0wNywgOC4zNTk4NmUtMDhdLFxuICAgIFswLjM3MjAsIDAuMDEyNDAyOSwgOS44ODk4M2UtMDcsIC0zLjExOTk0ZS0wN10sXG4gICAgWzAuNDM0MCwgMC4wMTIzODkzLCAtMy42OTA5M2UtMDYsIC00LjM1NjIxZS0wN10sXG4gICAgWzAuNDk1OCwgMC4wMTIzMTk4LCAtMS4wMjI1MmUtMDUsIC0zLjQ1NTIzZS0wN10sXG4gICAgWzAuNTU3MSwgMC4wMTIxOTE2LCAtMS41NDA4MWUtMDUsIC01LjgyMjg4ZS0wN10sXG4gICAgWzAuNjE3NiwgMC4wMTE5OTM4LCAtMi40MTQyNGUtMDUsIC01LjI1MzI3ZS0wN10sXG4gICAgWzAuNjc2OSwgMC4wMTE3MTMsIC0zLjIwMjIzZS0wNSwgLTUuMTY0MDVlLTA3XSxcbiAgICBbMC43MzQ2LCAwLjAxMTM1NDEsIC0zLjk3Njg0ZS0wNSwgLTYuMDkwNTJlLTA3XSxcbiAgICBbMC43OTAzLCAwLjAxMDkxMDcsIC00Ljg5MDQyZS0wNSwgLTEuMDQ3MzllLTA2XSxcbiAgICBbMC44NDM1LCAwLjAxMDM0MzEsIC02LjQ2MTVlLTA1LCAtMS40MDM3NGUtMDldLFxuICAgIFswLjg5MzYsIDAuMDA5Njk2ODYsIC02LjQ2MzZlLTA1LCAtOC41NDdlLTA2XSxcbiAgICBbMC45Mzk0LCAwLjAwODQwOTQ3LCAtMC4wMDAxOTI4NDEsIC00LjIxMDZlLTA2XSxcbiAgICBbMC45NzYxLCAwLjAwNjE2NTI3LCAtMC4wMDAyNTYsIC00LjIxMDZlLTA2XSxcbiAgICBbMS4wMDAwLCAwLjAwMzI4OTQ3LCAtMC4wMDAzMTkxNTksIC00LjIxMDZlLTA2XVxuXTtcblxudmFyIEZYQyA9IDAuODQ4NztcbnZhciBGWUMgPSAxLjM1MjM7XG52YXIgQzEgPSBSMkQvNTsgLy8gcmFkIHRvIDUtZGVncmVlIGludGVydmFsXG52YXIgUkMxID0gMS9DMTtcbnZhciBOT0RFUyA9IDE4O1xuXG52YXIgcG9seTNfdmFsID0gZnVuY3Rpb24oY29lZnMsIHgpIHtcbiAgICByZXR1cm4gY29lZnNbMF0gKyB4ICogKGNvZWZzWzFdICsgeCAqIChjb2Vmc1syXSArIHggKiBjb2Vmc1szXSkpO1xufTtcblxudmFyIHBvbHkzX2RlciA9IGZ1bmN0aW9uKGNvZWZzLCB4KSB7XG4gICAgcmV0dXJuIGNvZWZzWzFdICsgeCAqICgyICogY29lZnNbMl0gKyB4ICogMyAqIGNvZWZzWzNdKTtcbn07XG5cbmZ1bmN0aW9uIG5ld3Rvbl9yYXBzaG9uKGZfZGYsIHN0YXJ0LCBtYXhfZXJyLCBpdGVycykge1xuICAgIHZhciB4ID0gc3RhcnQ7XG4gICAgZm9yICg7IGl0ZXJzOyAtLWl0ZXJzKSB7XG4gICAgICAgIHZhciB1cGQgPSBmX2RmKHgpO1xuICAgICAgICB4IC09IHVwZDtcbiAgICAgICAgaWYgKE1hdGguYWJzKHVwZCkgPCBtYXhfZXJyKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy54MCA9IHRoaXMueDAgfHwgMDtcbiAgICB0aGlzLnkwID0gdGhpcy55MCB8fCAwO1xuICAgIHRoaXMubG9uZzAgPSB0aGlzLmxvbmcwIHx8IDA7XG4gICAgdGhpcy5lcyA9IDA7XG4gICAgdGhpcy50aXRsZSA9IHRoaXMudGl0bGUgfHwgXCJSb2JpbnNvblwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChsbCkge1xuICAgIHZhciBsb24gPSBhZGp1c3RfbG9uKGxsLnggLSB0aGlzLmxvbmcwKTtcblxuICAgIHZhciBkcGhpID0gTWF0aC5hYnMobGwueSk7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKGRwaGkgKiBDMSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICAgIGkgPSAwO1xuICAgIH0gZWxzZSBpZiAoaSA+PSBOT0RFUykge1xuICAgICAgICBpID0gTk9ERVMgLSAxO1xuICAgIH1cbiAgICBkcGhpID0gUjJEICogKGRwaGkgLSBSQzEgKiBpKTtcbiAgICB2YXIgeHkgPSB7XG4gICAgICAgIHg6IHBvbHkzX3ZhbChDT0VGU19YW2ldLCBkcGhpKSAqIGxvbixcbiAgICAgICAgeTogcG9seTNfdmFsKENPRUZTX1lbaV0sIGRwaGkpXG4gICAgfTtcbiAgICBpZiAobGwueSA8IDApIHtcbiAgICAgICAgeHkueSA9IC14eS55O1xuICAgIH1cblxuICAgIHh5LnggPSB4eS54ICogdGhpcy5hICogRlhDICsgdGhpcy54MDtcbiAgICB4eS55ID0geHkueSAqIHRoaXMuYSAqIEZZQyArIHRoaXMueTA7XG4gICAgcmV0dXJuIHh5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZSh4eSkge1xuICAgIHZhciBsbCA9IHtcbiAgICAgICAgeDogKHh5LnggLSB0aGlzLngwKSAvICh0aGlzLmEgKiBGWEMpLFxuICAgICAgICB5OiBNYXRoLmFicyh4eS55IC0gdGhpcy55MCkgLyAodGhpcy5hICogRllDKVxuICAgIH07XG5cbiAgICBpZiAobGwueSA+PSAxKSB7IC8vIHBhdGhvbG9naWMgY2FzZVxuICAgICAgICBsbC54IC89IENPRUZTX1hbTk9ERVNdWzBdO1xuICAgICAgICBsbC55ID0geHkueSA8IDAgPyAtSEFMRl9QSSA6IEhBTEZfUEk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZmluZCB0YWJsZSBpbnRlcnZhbFxuICAgICAgICB2YXIgaSA9IE1hdGguZmxvb3IobGwueSAqIE5PREVTKTtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChpID49IE5PREVTKSB7XG4gICAgICAgICAgICBpID0gTk9ERVMgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGlmIChDT0VGU19ZW2ldWzBdID4gbGwueSkge1xuICAgICAgICAgICAgICAgIC0taTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQ09FRlNfWVtpKzFdWzBdIDw9IGxsLnkpIHtcbiAgICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGxpbmVhciBpbnRlcnBvbGF0aW9uIGluIDUgZGVncmVlIGludGVydmFsXG4gICAgICAgIHZhciBjb2VmcyA9IENPRUZTX1lbaV07XG4gICAgICAgIHZhciB0ID0gNSAqIChsbC55IC0gY29lZnNbMF0pIC8gKENPRUZTX1lbaSsxXVswXSAtIGNvZWZzWzBdKTtcbiAgICAgICAgLy8gZmluZCB0IHNvIHRoYXQgcG9seTNfdmFsKGNvZWZzLCB0KSA9IGxsLnlcbiAgICAgICAgdCA9IG5ld3Rvbl9yYXBzaG9uKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgIHJldHVybiAocG9seTNfdmFsKGNvZWZzLCB4KSAtIGxsLnkpIC8gcG9seTNfZGVyKGNvZWZzLCB4KTtcbiAgICAgICAgfSwgdCwgRVBTTE4sIDEwMCk7XG5cbiAgICAgICAgbGwueCAvPSBwb2x5M192YWwoQ09FRlNfWFtpXSwgdCk7XG4gICAgICAgIGxsLnkgPSAoNSAqIGkgKyB0KSAqIEQyUjtcbiAgICAgICAgaWYgKHh5LnkgPCAwKSB7XG4gICAgICAgICAgICBsbC55ID0gLWxsLnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsbC54ID0gYWRqdXN0X2xvbihsbC54ICsgdGhpcy5sb25nMCk7XG4gICAgcmV0dXJuIGxsO1xufVxuXG5leHBvcnQgdmFyIG5hbWVzID0gW1wiUm9iaW5zb25cIiwgXCJyb2JpblwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IHtcbiAgICBnZW9kZXRpY1RvR2VvY2VudHJpYyxcbiAgICBnZW9jZW50cmljVG9HZW9kZXRpY1xufSBmcm9tICcuLi9kYXR1bVV0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy5uYW1lID0gJ2dlb2NlbnQnO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkKHApIHtcbiAgICB2YXIgcG9pbnQgPSBnZW9kZXRpY1RvR2VvY2VudHJpYyhwLCB0aGlzLmVzLCB0aGlzLmEpO1xuICAgIHJldHVybiBwb2ludDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UocCkge1xuICAgIHZhciBwb2ludCA9IGdlb2NlbnRyaWNUb0dlb2RldGljKHAsIHRoaXMuZXMsIHRoaXMuYSwgdGhpcy5iKTtcbiAgICByZXR1cm4gcG9pbnQ7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJHZW9jZW50cmljXCIsICdnZW9jZW50cmljJywgXCJnZW9jZW50XCIsIFwiR2VvY2VudFwiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBpbml0OiBpbml0LFxuICAgIGZvcndhcmQ6IGZvcndhcmQsXG4gICAgaW52ZXJzZTogaW52ZXJzZSxcbiAgICBuYW1lczogbmFtZXNcbn07IiwiXG52YXIgbW9kZSA9IHtcbiAgTl9QT0xFOiAwLFxuICBTX1BPTEU6IDEsXG4gIEVRVUlUOiAyLFxuICBPQkxJUTogM1xufTtcblxuaW1wb3J0IHsgRDJSLCBIQUxGX1BJLCBFUFNMTiB9IGZyb20gXCIuLi9jb25zdGFudHMvdmFsdWVzXCI7XG5pbXBvcnQgaHlwb3QgZnJvbSBcIi4uL2NvbW1vbi9oeXBvdFwiO1xuXG52YXIgcGFyYW1zID0ge1xuICBoOiAgICAgeyBkZWY6IDEwMDAwMCwgbnVtOiB0cnVlIH0sICAgICAgICAgICAvLyBkZWZhdWx0IGlzIEthcm1hbiBsaW5lLCBubyBkZWZhdWx0IGluIFBST0ouN1xuICBhemk6ICAgeyBkZWY6IDAsIG51bTogdHJ1ZSwgZGVncmVlczogdHJ1ZSB9LCAvLyBkZWZhdWx0IGlzIE5vcnRoXG4gIHRpbHQ6ICB7IGRlZjogMCwgbnVtOiB0cnVlLCBkZWdyZWVzOiB0cnVlIH0sIC8vIGRlZmF1bHQgaXMgTmFkaXJcbiAgbG9uZzA6IHsgZGVmOiAwLCBudW06IHRydWUgfSwgICAgICAgICAgICAgICAgLy8gZGVmYXVsdCBpcyBHcmVlbndpY2gsIGNvbnZlcnNpb24gdG8gcmFkIGlzIGF1dG9tYXRpY1xuICBsYXQwOiAgeyBkZWY6IDAsIG51bTogdHJ1ZSB9ICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IGlzIEVxdWF0b3IsIGNvbnZlcnNpb24gdG8gcmFkIGlzIGF1dG9tYXRpY1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgIGlmICh0eXBlb2YgdGhpc1twXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpc1twXSA9IHBhcmFtc1twXS5kZWY7XG4gICAgfSBlbHNlIGlmIChwYXJhbXNbcF0ubnVtICYmIGlzTmFOKHRoaXNbcF0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhcmFtZXRlciB2YWx1ZSwgbXVzdCBiZSBudW1lcmljIFwiICsgcCArIFwiID0gXCIgKyB0aGlzW3BdKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtc1twXS5udW0pIHtcbiAgICAgIHRoaXNbcF0gPSBwYXJzZUZsb2F0KHRoaXNbcF0pO1xuICAgIH1cbiAgICBpZiAocGFyYW1zW3BdLmRlZ3JlZXMpIHtcbiAgICAgIHRoaXNbcF0gPSB0aGlzW3BdICogRDJSO1xuICAgIH1cbiAgfS5iaW5kKHRoaXMpKTtcblxuICBpZiAoTWF0aC5hYnMoKE1hdGguYWJzKHRoaXMubGF0MCkgLSBIQUxGX1BJKSkgPCBFUFNMTikge1xuICAgIHRoaXMubW9kZSA9IHRoaXMubGF0MCA8IDAgPyBtb2RlLlNfUE9MRSA6IG1vZGUuTl9QT0xFO1xuICB9IGVsc2UgaWYgKE1hdGguYWJzKHRoaXMubGF0MCkgPCBFUFNMTikge1xuICAgIHRoaXMubW9kZSA9IG1vZGUuRVFVSVQ7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5tb2RlID0gbW9kZS5PQkxJUTtcbiAgICB0aGlzLnNpbnBoMCA9IE1hdGguc2luKHRoaXMubGF0MCk7XG4gICAgdGhpcy5jb3NwaDAgPSBNYXRoLmNvcyh0aGlzLmxhdDApO1xuICB9XG5cbiAgdGhpcy5wbjEgPSB0aGlzLmggLyB0aGlzLmE7ICAvLyBOb3JtYWxpemUgcmVsYXRpdmUgdG8gdGhlIEVhcnRoJ3MgcmFkaXVzXG5cbiAgaWYgKHRoaXMucG4xIDw9IDAgfHwgdGhpcy5wbjEgPiAxZTEwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBoZWlnaHRcIik7XG4gIH1cbiAgXG4gIHRoaXMucCA9IDEgKyB0aGlzLnBuMTtcbiAgdGhpcy5ycCA9IDEgLyB0aGlzLnA7XG4gIHRoaXMuaDEgPSAxIC8gdGhpcy5wbjE7XG4gIHRoaXMucGZhY3QgPSAodGhpcy5wICsgMSkgKiB0aGlzLmgxO1xuICB0aGlzLmVzID0gMDtcblxuICB2YXIgb21lZ2EgPSB0aGlzLnRpbHQ7XG4gIHZhciBnYW1tYSA9IHRoaXMuYXppO1xuICB0aGlzLmNnID0gTWF0aC5jb3MoZ2FtbWEpO1xuICB0aGlzLnNnID0gTWF0aC5zaW4oZ2FtbWEpO1xuICB0aGlzLmN3ID0gTWF0aC5jb3Mob21lZ2EpO1xuICB0aGlzLnN3ID0gTWF0aC5zaW4ob21lZ2EpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZChwKSB7XG4gIHAueCAtPSB0aGlzLmxvbmcwO1xuICB2YXIgc2lucGhpID0gTWF0aC5zaW4ocC55KTtcbiAgdmFyIGNvc3BoaSA9IE1hdGguY29zKHAueSk7XG4gIHZhciBjb3NsYW0gPSBNYXRoLmNvcyhwLngpO1xuICB2YXIgeCwgeTtcbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIG1vZGUuT0JMSVE6XG4gICAgICB5ID0gdGhpcy5zaW5waDAgKiBzaW5waGkgKyB0aGlzLmNvc3BoMCAqIGNvc3BoaSAqIGNvc2xhbTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgbW9kZS5FUVVJVDpcbiAgICAgIHkgPSBjb3NwaGkgKiBjb3NsYW07XG4gICAgICBicmVhaztcbiAgICBjYXNlIG1vZGUuU19QT0xFOlxuICAgICAgeSA9IC1zaW5waGk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIG1vZGUuTl9QT0xFOlxuICAgICAgeSA9IHNpbnBoaTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHkgPSB0aGlzLnBuMSAvICh0aGlzLnAgLSB5KTtcbiAgeCA9IHkgKiBjb3NwaGkgKiBNYXRoLnNpbihwLngpO1xuXG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSBtb2RlLk9CTElROlxuICAgICAgeSAqPSB0aGlzLmNvc3BoMCAqIHNpbnBoaSAtIHRoaXMuc2lucGgwICogY29zcGhpICogY29zbGFtO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBtb2RlLkVRVUlUOlxuICAgICAgeSAqPSBzaW5waGk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIG1vZGUuTl9QT0xFOlxuICAgICAgeSAqPSAtKGNvc3BoaSAqIGNvc2xhbSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIG1vZGUuU19QT0xFOlxuICAgICAgeSAqPSBjb3NwaGkgKiBjb3NsYW07XG4gICAgICBicmVhaztcbiAgfVxuXG4gIC8vIFRpbHQgXG4gIHZhciB5dCwgYmE7XG4gIHl0ID0geSAqIHRoaXMuY2cgKyB4ICogdGhpcy5zZztcbiAgYmEgPSAxIC8gKHl0ICogdGhpcy5zdyAqIHRoaXMuaDEgKyB0aGlzLmN3KTtcbiAgeCA9ICh4ICogdGhpcy5jZyAtIHkgKiB0aGlzLnNnKSAqIHRoaXMuY3cgKiBiYTtcbiAgeSA9IHl0ICogYmE7XG5cbiAgcC54ID0geCAqIHRoaXMuYTtcbiAgcC55ID0geSAqIHRoaXMuYTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKHApIHtcbiAgcC54IC89IHRoaXMuYTtcbiAgcC55IC89IHRoaXMuYTtcbiAgdmFyIHIgPSB7IHg6IHAueCwgeTogcC55IH07XG5cbiAgLy8gVW4tVGlsdFxuICB2YXIgYm0sIGJxLCB5dDtcbiAgeXQgPSAxIC8gKHRoaXMucG4xIC0gcC55ICogdGhpcy5zdyk7XG4gIGJtID0gdGhpcy5wbjEgKiBwLnggKiB5dDtcbiAgYnEgPSB0aGlzLnBuMSAqIHAueSAqIHRoaXMuY3cgKiB5dDtcbiAgcC54ID0gYm0gKiB0aGlzLmNnICsgYnEgKiB0aGlzLnNnO1xuICBwLnkgPSBicSAqIHRoaXMuY2cgLSBibSAqIHRoaXMuc2c7XG5cbiAgdmFyIHJoID0gaHlwb3QocC54LCBwLnkpO1xuICBpZiAoTWF0aC5hYnMocmgpIDwgRVBTTE4pIHtcbiAgICByLnggPSAwO1xuICAgIHIueSA9IHAueTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29zeiwgc2luejtcbiAgICBzaW56ID0gMSAtIHJoICogcmggKiB0aGlzLnBmYWN0O1xuICAgIHNpbnogPSAodGhpcy5wIC0gTWF0aC5zcXJ0KHNpbnopKSAvICh0aGlzLnBuMSAvIHJoICsgcmggLyB0aGlzLnBuMSk7XG4gICAgY29zeiA9IE1hdGguc3FydCgxIC0gc2lueiAqIHNpbnopO1xuICAgIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgICBjYXNlIG1vZGUuT0JMSVE6XG4gICAgICAgIHIueSA9IE1hdGguYXNpbihjb3N6ICogdGhpcy5zaW5waDAgKyBwLnkgKiBzaW56ICogdGhpcy5jb3NwaDAgLyByaCk7XG4gICAgICAgIHAueSA9IChjb3N6IC0gdGhpcy5zaW5waDAgKiBNYXRoLnNpbihyLnkpKSAqIHJoO1xuICAgICAgICBwLnggKj0gc2lueiAqIHRoaXMuY29zcGgwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgbW9kZS5FUVVJVDpcbiAgICAgICAgci55ID0gTWF0aC5hc2luKHAueSAqIHNpbnogLyByaCk7XG4gICAgICAgIHAueSA9IGNvc3ogKiByaDtcbiAgICAgICAgcC54ICo9IHNpbno7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBtb2RlLk5fUE9MRTpcbiAgICAgICAgci55ID0gTWF0aC5hc2luKGNvc3opO1xuICAgICAgICBwLnkgPSAtcC55O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgbW9kZS5TX1BPTEU6XG4gICAgICAgIHIueSA9IC1NYXRoLmFzaW4oY29zeik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByLnggPSBNYXRoLmF0YW4yKHAueCwgcC55KTtcbiAgfVxuXG4gIHAueCA9IHIueCArIHRoaXMubG9uZzA7XG4gIHAueSA9IHIueTtcbiAgcmV0dXJuIHA7XG59XG5cbmV4cG9ydCB2YXIgbmFtZXMgPSBbXCJUaWx0ZWRfUGVyc3BlY3RpdmVcIiwgXCJ0cGVyc1wiXTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogaW5pdCxcbiAgZm9yd2FyZDogZm9yd2FyZCxcbiAgaW52ZXJzZTogaW52ZXJzZSxcbiAgbmFtZXM6IG5hbWVzXG59O1xuIiwiaW1wb3J0IHRtZXJjIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3RtZXJjJztcbmltcG9ydCBldG1lcmMgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvZXRtZXJjJztcbmltcG9ydCB1dG0gZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvdXRtJztcbmltcG9ydCBzdGVyZWEgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvc3RlcmVhJztcbmltcG9ydCBzdGVyZSBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9zdGVyZSc7XG5pbXBvcnQgc29tZXJjIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3NvbWVyYyc7XG5pbXBvcnQgb21lcmMgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvb21lcmMnO1xuaW1wb3J0IGxjYyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9sY2MnO1xuaW1wb3J0IGtyb3ZhayBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9rcm92YWsnO1xuaW1wb3J0IGNhc3MgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvY2Fzcyc7XG5pbXBvcnQgbGFlYSBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9sYWVhJztcbmltcG9ydCBhZWEgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvYWVhJztcbmltcG9ydCBnbm9tIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL2dub20nO1xuaW1wb3J0IGNlYSBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9jZWEnO1xuaW1wb3J0IGVxYyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9lcWMnO1xuaW1wb3J0IHBvbHkgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvcG9seSc7XG5pbXBvcnQgbnptZyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9uem1nJztcbmltcG9ydCBtaWxsIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL21pbGwnO1xuaW1wb3J0IHNpbnUgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvc2ludSc7XG5pbXBvcnQgbW9sbCBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9tb2xsJztcbmltcG9ydCBlcWRjIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL2VxZGMnO1xuaW1wb3J0IHZhbmRnIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL3ZhbmRnJztcbmltcG9ydCBhZXFkIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL2FlcWQnO1xuaW1wb3J0IG9ydGhvIGZyb20gJy4vbGliL3Byb2plY3Rpb25zL29ydGhvJztcbmltcG9ydCBxc2MgZnJvbSAnLi9saWIvcHJvamVjdGlvbnMvcXNjJztcbmltcG9ydCByb2JpbiBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9yb2Jpbic7XG5pbXBvcnQgZ2VvY2VudCBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy9nZW9jZW50JztcbmltcG9ydCB0cGVycyBmcm9tICcuL2xpYi9wcm9qZWN0aW9ucy90cGVycyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9qNCl7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHRtZXJjKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoZXRtZXJjKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQodXRtKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoc3RlcmVhKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoc3RlcmUpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChzb21lcmMpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChvbWVyYyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGxjYyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGtyb3Zhayk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGNhc3MpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChsYWVhKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoYWVhKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoZ25vbSk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGNlYSk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKGVxYyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHBvbHkpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChuem1nKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQobWlsbCk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHNpbnUpO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChtb2xsKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoZXFkYyk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKHZhbmRnKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQoYWVxZCk7XG4gIHByb2o0LlByb2oucHJvamVjdGlvbnMuYWRkKG9ydGhvKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQocXNjKTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQocm9iaW4pO1xuICBwcm9qNC5Qcm9qLnByb2plY3Rpb25zLmFkZChnZW9jZW50KTtcbiAgcHJvajQuUHJvai5wcm9qZWN0aW9ucy5hZGQodHBlcnMpO1xufSIsImltcG9ydCBwcm9qNCBmcm9tICcuL2NvcmUnO1xuaW1wb3J0IFByb2ogZnJvbSBcIi4vUHJvalwiO1xuaW1wb3J0IFBvaW50IGZyb20gXCIuL1BvaW50XCI7XG5pbXBvcnQgY29tbW9uIGZyb20gXCIuL2NvbW1vbi90b1BvaW50XCI7XG5pbXBvcnQgZGVmcyBmcm9tIFwiLi9kZWZzXCI7XG5pbXBvcnQgdHJhbnNmb3JtIGZyb20gXCIuL3RyYW5zZm9ybVwiO1xuaW1wb3J0IG1ncnMgZnJvbSBcIm1ncnNcIjtcbmltcG9ydCBpbmNsdWRlZFByb2plY3Rpb25zIGZyb20gXCIuLi9wcm9qc1wiO1xuXG5wcm9qNC5kZWZhdWx0RGF0dW0gPSAnV0dTODQnOyAvL2RlZmF1bHQgZGF0dW1cbnByb2o0LlByb2ogPSBQcm9qO1xucHJvajQuV0dTODQgPSBuZXcgcHJvajQuUHJvaignV0dTODQnKTtcbnByb2o0LlBvaW50ID0gUG9pbnQ7XG5wcm9qNC50b1BvaW50ID0gY29tbW9uO1xucHJvajQuZGVmcyA9IGRlZnM7XG5wcm9qNC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG5wcm9qNC5tZ3JzID0gbWdycztcbnByb2o0LnZlcnNpb24gPSAnX19WRVJTSU9OX18nO1xuaW5jbHVkZWRQcm9qZWN0aW9ucyhwcm9qNCk7XG5leHBvcnQgZGVmYXVsdCBwcm9qNDtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tdLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJ2YXIgQ2xpZW50UmVxdWVzdCA9IHJlcXVpcmUoJy4vbGliL3JlcXVlc3QnKVxudmFyIHJlc3BvbnNlID0gcmVxdWlyZSgnLi9saWIvcmVzcG9uc2UnKVxudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciBzdGF0dXNDb2RlcyA9IHJlcXVpcmUoJ2J1aWx0aW4tc3RhdHVzLWNvZGVzJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG52YXIgaHR0cCA9IGV4cG9ydHNcblxuaHR0cC5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMsIGNiKSB7XG5cdGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpXG5cdFx0b3B0cyA9IHVybC5wYXJzZShvcHRzKVxuXHRlbHNlXG5cdFx0b3B0cyA9IGV4dGVuZChvcHRzKVxuXG5cdC8vIE5vcm1hbGx5LCB0aGUgcGFnZSBpcyBsb2FkZWQgZnJvbSBodHRwIG9yIGh0dHBzLCBzbyBub3Qgc3BlY2lmeWluZyBhIHByb3RvY29sXG5cdC8vIHdpbGwgcmVzdWx0IGluIGEgKHZhbGlkKSBwcm90b2NvbC1yZWxhdGl2ZSB1cmwuIEhvd2V2ZXIsIHRoaXMgd29uJ3Qgd29yayBpZlxuXHQvLyB0aGUgcHJvdG9jb2wgaXMgc29tZXRoaW5nIGVsc2UsIGxpa2UgJ2ZpbGU6J1xuXHR2YXIgZGVmYXVsdFByb3RvY29sID0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sLnNlYXJjaCgvXmh0dHBzPzokLykgPT09IC0xID8gJ2h0dHA6JyA6ICcnXG5cblx0dmFyIHByb3RvY29sID0gb3B0cy5wcm90b2NvbCB8fCBkZWZhdWx0UHJvdG9jb2xcblx0dmFyIGhvc3QgPSBvcHRzLmhvc3RuYW1lIHx8IG9wdHMuaG9zdFxuXHR2YXIgcG9ydCA9IG9wdHMucG9ydFxuXHR2YXIgcGF0aCA9IG9wdHMucGF0aCB8fCAnLydcblxuXHQvLyBOZWNlc3NhcnkgZm9yIElQdjYgYWRkcmVzc2VzXG5cdGlmIChob3N0ICYmIGhvc3QuaW5kZXhPZignOicpICE9PSAtMSlcblx0XHRob3N0ID0gJ1snICsgaG9zdCArICddJ1xuXG5cdC8vIFRoaXMgbWF5IGJlIGEgcmVsYXRpdmUgdXJsLiBUaGUgYnJvd3NlciBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gaW50ZXJwcmV0IGl0IGNvcnJlY3RseS5cblx0b3B0cy51cmwgPSAoaG9zdCA/IChwcm90b2NvbCArICcvLycgKyBob3N0KSA6ICcnKSArIChwb3J0ID8gJzonICsgcG9ydCA6ICcnKSArIHBhdGhcblx0b3B0cy5tZXRob2QgPSAob3B0cy5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKClcblx0b3B0cy5oZWFkZXJzID0gb3B0cy5oZWFkZXJzIHx8IHt9XG5cblx0Ly8gQWxzbyB2YWxpZCBvcHRzLmF1dGgsIG9wdHMubW9kZVxuXG5cdHZhciByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdChvcHRzKVxuXHRpZiAoY2IpXG5cdFx0cmVxLm9uKCdyZXNwb25zZScsIGNiKVxuXHRyZXR1cm4gcmVxXG59XG5cbmh0dHAuZ2V0ID0gZnVuY3Rpb24gZ2V0IChvcHRzLCBjYikge1xuXHR2YXIgcmVxID0gaHR0cC5yZXF1ZXN0KG9wdHMsIGNiKVxuXHRyZXEuZW5kKClcblx0cmV0dXJuIHJlcVxufVxuXG5odHRwLkNsaWVudFJlcXVlc3QgPSBDbGllbnRSZXF1ZXN0XG5odHRwLkluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxuXG5odHRwLkFnZW50ID0gZnVuY3Rpb24gKCkge31cbmh0dHAuQWdlbnQuZGVmYXVsdE1heFNvY2tldHMgPSA0XG5cbmh0dHAuZ2xvYmFsQWdlbnQgPSBuZXcgaHR0cC5BZ2VudCgpXG5cbmh0dHAuU1RBVFVTX0NPREVTID0gc3RhdHVzQ29kZXNcblxuaHR0cC5NRVRIT0RTID0gW1xuXHQnQ0hFQ0tPVVQnLFxuXHQnQ09OTkVDVCcsXG5cdCdDT1BZJyxcblx0J0RFTEVURScsXG5cdCdHRVQnLFxuXHQnSEVBRCcsXG5cdCdMT0NLJyxcblx0J00tU0VBUkNIJyxcblx0J01FUkdFJyxcblx0J01LQUNUSVZJVFknLFxuXHQnTUtDT0wnLFxuXHQnTU9WRScsXG5cdCdOT1RJRlknLFxuXHQnT1BUSU9OUycsXG5cdCdQQVRDSCcsXG5cdCdQT1NUJyxcblx0J1BST1BGSU5EJyxcblx0J1BST1BQQVRDSCcsXG5cdCdQVVJHRScsXG5cdCdQVVQnLFxuXHQnUkVQT1JUJyxcblx0J1NFQVJDSCcsXG5cdCdTVUJTQ1JJQkUnLFxuXHQnVFJBQ0UnLFxuXHQnVU5MT0NLJyxcblx0J1VOU1VCU0NSSUJFJ1xuXSIsImV4cG9ydHMuZmV0Y2ggPSBpc0Z1bmN0aW9uKGdsb2JhbC5mZXRjaCkgJiYgaXNGdW5jdGlvbihnbG9iYWwuUmVhZGFibGVTdHJlYW0pXG5cbmV4cG9ydHMud3JpdGFibGVTdHJlYW0gPSBpc0Z1bmN0aW9uKGdsb2JhbC5Xcml0YWJsZVN0cmVhbSlcblxuZXhwb3J0cy5hYm9ydENvbnRyb2xsZXIgPSBpc0Z1bmN0aW9uKGdsb2JhbC5BYm9ydENvbnRyb2xsZXIpXG5cbi8vIFRoZSB4aHIgcmVxdWVzdCB0byBleGFtcGxlLmNvbSBtYXkgdmlvbGF0ZSBzb21lIHJlc3RyaWN0aXZlIENTUCBjb25maWd1cmF0aW9ucyxcbi8vIHNvIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgYGZldGNoYCwgYXZvaWQgY2FsbGluZyBnZXRYSFIoKVxuLy8gYW5kIGFzc3VtZSBzdXBwb3J0IGZvciBjZXJ0YWluIGZlYXR1cmVzIGJlbG93LlxudmFyIHhoclxuZnVuY3Rpb24gZ2V0WEhSICgpIHtcblx0Ly8gQ2FjaGUgdGhlIHhociB2YWx1ZVxuXHRpZiAoeGhyICE9PSB1bmRlZmluZWQpIHJldHVybiB4aHJcblxuXHRpZiAoZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KSB7XG5cdFx0eGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0Ly8gSWYgWERvbWFpblJlcXVlc3QgaXMgYXZhaWxhYmxlIChpZSBvbmx5LCB3aGVyZSB4aHIgbWlnaHQgbm90IHdvcmtcblx0XHQvLyBjcm9zcyBkb21haW4pLCB1c2UgdGhlIHBhZ2UgbG9jYXRpb24uIE90aGVyd2lzZSB1c2UgZXhhbXBsZS5jb21cblx0XHQvLyBOb3RlOiB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgbWFrZSBhbiBodHRwIHJlcXVlc3QuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKCdHRVQnLCBnbG9iYWwuWERvbWFpblJlcXVlc3QgPyAnLycgOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScpXG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR4aHIgPSBudWxsXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcnZpY2Ugd29ya2VycyBkb24ndCBoYXZlIFhIUlxuXHRcdHhociA9IG51bGxcblx0fVxuXHRyZXR1cm4geGhyXG59XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQgKHR5cGUpIHtcblx0dmFyIHhociA9IGdldFhIUigpXG5cdGlmICgheGhyKSByZXR1cm4gZmFsc2Vcblx0dHJ5IHtcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gdHlwZVxuXHRcdHJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSB0eXBlXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZVxufVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gYXJyYXlidWZmZXIgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGNoZWNrVHlwZVN1cHBvcnQoKSwgc2luY2UgdGhhdCBjYWxscyBnZXRYSFIoKS5cbmV4cG9ydHMuYXJyYXlidWZmZXIgPSBleHBvcnRzLmZldGNoIHx8IGNoZWNrVHlwZVN1cHBvcnQoJ2FycmF5YnVmZmVyJylcblxuLy8gVGhlc2UgbmV4dCB0d28gdGVzdHMgdW5hdm9pZGFibHkgc2hvdyB3YXJuaW5ncyBpbiBDaHJvbWUuIFNpbmNlIGZldGNoIHdpbGwgYWx3YXlzXG4vLyBiZSB1c2VkIGlmIGl0J3MgYXZhaWxhYmxlLCBqdXN0IHJldHVybiBmYWxzZSBmb3IgdGhlc2UgdG8gYXZvaWQgdGhlIHdhcm5pbmdzLlxuZXhwb3J0cy5tc3N0cmVhbSA9ICFleHBvcnRzLmZldGNoICYmIGNoZWNrVHlwZVN1cHBvcnQoJ21zLXN0cmVhbScpXG5leHBvcnRzLm1vemNodW5rZWRhcnJheWJ1ZmZlciA9ICFleHBvcnRzLmZldGNoICYmIGNoZWNrVHlwZVN1cHBvcnQoJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJylcblxuLy8gSWYgZmV0Y2ggaXMgc3VwcG9ydGVkLCB0aGVuIG92ZXJyaWRlTWltZVR5cGUgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGdldFhIUigpLlxuZXhwb3J0cy5vdmVycmlkZU1pbWVUeXBlID0gZXhwb3J0cy5mZXRjaCB8fCAoZ2V0WEhSKCkgPyBpc0Z1bmN0aW9uKGdldFhIUigpLm92ZXJyaWRlTWltZVR5cGUpIDogZmFsc2UpXG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbidcbn1cblxueGhyID0gbnVsbCAvLyBIZWxwIGdjXG4iLCJ2YXIgY2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vY2FwYWJpbGl0eScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgcmVzcG9uc2UgPSByZXF1aXJlKCcuL3Jlc3BvbnNlJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKVxuXG52YXIgSW5jb21pbmdNZXNzYWdlID0gcmVzcG9uc2UuSW5jb21pbmdNZXNzYWdlXG52YXIgclN0YXRlcyA9IHJlc3BvbnNlLnJlYWR5U3RhdGVzXG5cbmZ1bmN0aW9uIGRlY2lkZU1vZGUgKHByZWZlckJpbmFyeSwgdXNlRmV0Y2gpIHtcblx0aWYgKGNhcGFiaWxpdHkuZmV0Y2ggJiYgdXNlRmV0Y2gpIHtcblx0XHRyZXR1cm4gJ2ZldGNoJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkubW96Y2h1bmtlZGFycmF5YnVmZmVyKSB7XG5cdFx0cmV0dXJuICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1zc3RyZWFtKSB7XG5cdFx0cmV0dXJuICdtcy1zdHJlYW0nXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5hcnJheWJ1ZmZlciAmJiBwcmVmZXJCaW5hcnkpIHtcblx0XHRyZXR1cm4gJ2FycmF5YnVmZmVyJ1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiAndGV4dCdcblx0fVxufVxuXG52YXIgQ2xpZW50UmVxdWVzdCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHN0cmVhbS5Xcml0YWJsZS5jYWxsKHNlbGYpXG5cblx0c2VsZi5fb3B0cyA9IG9wdHNcblx0c2VsZi5fYm9keSA9IFtdXG5cdHNlbGYuX2hlYWRlcnMgPSB7fVxuXHRpZiAob3B0cy5hdXRoKVxuXHRcdHNlbGYuc2V0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBCdWZmZXIuZnJvbShvcHRzLmF1dGgpLnRvU3RyaW5nKCdiYXNlNjQnKSlcblx0T2JqZWN0LmtleXMob3B0cy5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0c2VsZi5zZXRIZWFkZXIobmFtZSwgb3B0cy5oZWFkZXJzW25hbWVdKVxuXHR9KVxuXG5cdHZhciBwcmVmZXJCaW5hcnlcblx0dmFyIHVzZUZldGNoID0gdHJ1ZVxuXHRpZiAob3B0cy5tb2RlID09PSAnZGlzYWJsZS1mZXRjaCcgfHwgKCdyZXF1ZXN0VGltZW91dCcgaW4gb3B0cyAmJiAhY2FwYWJpbGl0eS5hYm9ydENvbnRyb2xsZXIpKSB7XG5cdFx0Ly8gSWYgdGhlIHVzZSBvZiBYSFIgc2hvdWxkIGJlIHByZWZlcnJlZC4gTm90IHR5cGljYWxseSBuZWVkZWQuXG5cdFx0dXNlRmV0Y2ggPSBmYWxzZVxuXHRcdHByZWZlckJpbmFyeSA9IHRydWVcblx0fSBlbHNlIGlmIChvcHRzLm1vZGUgPT09ICdwcmVmZXItc3RyZWFtaW5nJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBhIGhpZ2ggcHJpb3JpdHkgYnV0IGJpbmFyeSBjb21wYXRpYmlsaXR5IGFuZFxuXHRcdC8vIHRoZSBhY2N1cmFjeSBvZiB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyIGFyZW4ndFxuXHRcdHByZWZlckJpbmFyeSA9IGZhbHNlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAnYWxsb3ctd3JvbmctY29udGVudC10eXBlJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBtb3JlIGltcG9ydGFudCB0aGFuIHByZXNlcnZpbmcgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlclxuXHRcdHByZWZlckJpbmFyeSA9ICFjYXBhYmlsaXR5Lm92ZXJyaWRlTWltZVR5cGVcblx0fSBlbHNlIGlmICghb3B0cy5tb2RlIHx8IG9wdHMubW9kZSA9PT0gJ2RlZmF1bHQnIHx8IG9wdHMubW9kZSA9PT0gJ3ByZWZlci1mYXN0Jykge1xuXHRcdC8vIFVzZSBiaW5hcnkgaWYgdGV4dCBzdHJlYW1pbmcgbWF5IGNvcnJ1cHQgZGF0YSBvciB0aGUgY29udGVudC10eXBlIGhlYWRlciwgb3IgZm9yIHNwZWVkXG5cdFx0cHJlZmVyQmluYXJ5ID0gdHJ1ZVxuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3Igb3B0cy5tb2RlJylcblx0fVxuXHRzZWxmLl9tb2RlID0gZGVjaWRlTW9kZShwcmVmZXJCaW5hcnksIHVzZUZldGNoKVxuXHRzZWxmLl9mZXRjaFRpbWVyID0gbnVsbFxuXG5cdHNlbGYub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcblx0XHRzZWxmLl9vbkZpbmlzaCgpXG5cdH0pXG59XG5cbmluaGVyaXRzKENsaWVudFJlcXVlc3QsIHN0cmVhbS5Xcml0YWJsZSlcblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHR2YXIgbG93ZXJOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG5cdC8vIFRoaXMgY2hlY2sgaXMgbm90IG5lY2Vzc2FyeSwgYnV0IGl0IHByZXZlbnRzIHdhcm5pbmdzIGZyb20gYnJvd3NlcnMgYWJvdXQgc2V0dGluZyB1bnNhZmVcblx0Ly8gaGVhZGVycy4gVG8gYmUgaG9uZXN0IEknbSBub3QgZW50aXJlbHkgc3VyZSBoaWRpbmcgdGhlc2Ugd2FybmluZ3MgaXMgYSBnb29kIHRoaW5nLCBidXRcblx0Ly8gaHR0cC1icm93c2VyaWZ5IGRpZCBpdCwgc28gSSB3aWxsIHRvby5cblx0aWYgKHVuc2FmZUhlYWRlcnMuaW5kZXhPZihsb3dlck5hbWUpICE9PSAtMSlcblx0XHRyZXR1cm5cblxuXHRzZWxmLl9oZWFkZXJzW2xvd2VyTmFtZV0gPSB7XG5cdFx0bmFtZTogbmFtZSxcblx0XHR2YWx1ZTogdmFsdWVcblx0fVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgaGVhZGVyID0gdGhpcy5faGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldXG5cdGlmIChoZWFkZXIpXG5cdFx0cmV0dXJuIGhlYWRlci52YWx1ZVxuXHRyZXR1cm4gbnVsbFxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0ZGVsZXRlIHNlbGYuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25GaW5pc2ggPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cdHZhciBvcHRzID0gc2VsZi5fb3B0c1xuXG5cdHZhciBoZWFkZXJzT2JqID0gc2VsZi5faGVhZGVyc1xuXHR2YXIgYm9keSA9IG51bGxcblx0aWYgKG9wdHMubWV0aG9kICE9PSAnR0VUJyAmJiBvcHRzLm1ldGhvZCAhPT0gJ0hFQUQnKSB7XG4gICAgICAgIGJvZHkgPSBuZXcgQmxvYihzZWxmLl9ib2R5LCB7XG4gICAgICAgICAgICB0eXBlOiAoaGVhZGVyc09ialsnY29udGVudC10eXBlJ10gfHwge30pLnZhbHVlIHx8ICcnXG4gICAgICAgIH0pO1xuICAgIH1cblxuXHQvLyBjcmVhdGUgZmxhdHRlbmVkIGxpc3Qgb2YgaGVhZGVyc1xuXHR2YXIgaGVhZGVyc0xpc3QgPSBbXVxuXHRPYmplY3Qua2V5cyhoZWFkZXJzT2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXlOYW1lKSB7XG5cdFx0dmFyIG5hbWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLm5hbWVcblx0XHR2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLnZhbHVlXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG5cdFx0XHRcdGhlYWRlcnNMaXN0LnB1c2goW25hbWUsIHZdKVxuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0aGVhZGVyc0xpc3QucHVzaChbbmFtZSwgdmFsdWVdKVxuXHRcdH1cblx0fSlcblxuXHRpZiAoc2VsZi5fbW9kZSA9PT0gJ2ZldGNoJykge1xuXHRcdHZhciBzaWduYWwgPSBudWxsXG5cdFx0aWYgKGNhcGFiaWxpdHkuYWJvcnRDb250cm9sbGVyKSB7XG5cdFx0XHR2YXIgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuXHRcdFx0c2lnbmFsID0gY29udHJvbGxlci5zaWduYWxcblx0XHRcdHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyID0gY29udHJvbGxlclxuXG5cdFx0XHRpZiAoJ3JlcXVlc3RUaW1lb3V0JyBpbiBvcHRzICYmIG9wdHMucmVxdWVzdFRpbWVvdXQgIT09IDApIHtcblx0XHRcdFx0c2VsZi5fZmV0Y2hUaW1lciA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ3JlcXVlc3RUaW1lb3V0Jylcblx0XHRcdFx0XHRpZiAoc2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpXG5cdFx0XHRcdFx0XHRzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpXG5cdFx0XHRcdH0sIG9wdHMucmVxdWVzdFRpbWVvdXQpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7XG5cdFx0XHRtZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLFxuXHRcdFx0aGVhZGVyczogaGVhZGVyc0xpc3QsXG5cdFx0XHRib2R5OiBib2R5IHx8IHVuZGVmaW5lZCxcblx0XHRcdG1vZGU6ICdjb3JzJyxcblx0XHRcdGNyZWRlbnRpYWxzOiBvcHRzLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbicsXG5cdFx0XHRzaWduYWw6IHNpZ25hbFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2Vcblx0XHRcdHNlbGYuX2Nvbm5lY3QoKVxuXHRcdH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoc2VsZi5fZmV0Y2hUaW1lcilcblx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgcmVhc29uKVxuXHRcdH0pXG5cdH0gZWxzZSB7XG5cdFx0dmFyIHhociA9IHNlbGYuX3hociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuXHRcdHRyeSB7XG5cdFx0XHR4aHIub3BlbihzZWxmLl9vcHRzLm1ldGhvZCwgc2VsZi5fb3B0cy51cmwsIHRydWUpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHQvLyBDYW4ndCBzZXQgcmVzcG9uc2VUeXBlIG9uIHJlYWxseSBvbGQgYnJvd3NlcnNcblx0XHRpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKVxuXHRcdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHNlbGYuX21vZGVcblxuXHRcdGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpXG5cdFx0XHR4aHIud2l0aENyZWRlbnRpYWxzID0gISFvcHRzLndpdGhDcmVkZW50aWFsc1xuXG5cdFx0aWYgKHNlbGYuX21vZGUgPT09ICd0ZXh0JyAmJiAnb3ZlcnJpZGVNaW1lVHlwZScgaW4geGhyKVxuXHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoJ3RleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWQnKVxuXG5cdFx0aWYgKCdyZXF1ZXN0VGltZW91dCcgaW4gb3B0cykge1xuXHRcdFx0eGhyLnRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0XG5cdFx0XHR4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmVtaXQoJ3JlcXVlc3RUaW1lb3V0Jylcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoZWFkZXJzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuXHRcdH0pXG5cblx0XHRzZWxmLl9yZXNwb25zZSA9IG51bGxcblx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0c3dpdGNoICh4aHIucmVhZHlTdGF0ZSkge1xuXHRcdFx0XHRjYXNlIHJTdGF0ZXMuTE9BRElORzpcblx0XHRcdFx0Y2FzZSByU3RhdGVzLkRPTkU6XG5cdFx0XHRcdFx0c2VsZi5fb25YSFJQcm9ncmVzcygpXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gTmVjZXNzYXJ5IGZvciBzdHJlYW1pbmcgaW4gRmlyZWZveCwgc2luY2UgeGhyLnJlc3BvbnNlIGlzIE9OTFkgZGVmaW5lZFxuXHRcdC8vIGluIG9ucHJvZ3Jlc3MsIG5vdCBpbiBvbnJlYWR5c3RhdGVjaGFuZ2Ugd2l0aCB4aHIucmVhZHlTdGF0ZSA9IDNcblx0XHRpZiAoc2VsZi5fbW9kZSA9PT0gJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJykge1xuXHRcdFx0eGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKHNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdYSFIgZXJyb3InKSlcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0eGhyLnNlbmQoYm9keSlcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHRcdHJldHVyblxuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB4aHIuc3RhdHVzIGlzIHJlYWRhYmxlIGFuZCBub24temVybywgaW5kaWNhdGluZyBubyBlcnJvci5cbiAqIEV2ZW4gdGhvdWdoIHRoZSBzcGVjIHNheXMgaXQgc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiByZWFkeVN0YXRlIDMsXG4gKiBhY2Nlc3NpbmcgaXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpbiBJRThcbiAqL1xuZnVuY3Rpb24gc3RhdHVzVmFsaWQgKHhocikge1xuXHR0cnkge1xuXHRcdHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzXG5cdFx0cmV0dXJuIChzdGF0dXMgIT09IG51bGwgJiYgc3RhdHVzICE9PSAwKVxuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlXG5cdH1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmICghc3RhdHVzVmFsaWQoc2VsZi5feGhyKSB8fCBzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cblx0aWYgKCFzZWxmLl9yZXNwb25zZSlcblx0XHRzZWxmLl9jb25uZWN0KClcblxuXHRzZWxmLl9yZXNwb25zZS5fb25YSFJQcm9ncmVzcygpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl9jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXG5cdHNlbGYuX3Jlc3BvbnNlID0gbmV3IEluY29taW5nTWVzc2FnZShzZWxmLl94aHIsIHNlbGYuX2ZldGNoUmVzcG9uc2UsIHNlbGYuX21vZGUsIHNlbGYuX2ZldGNoVGltZXIpXG5cdHNlbGYuX3Jlc3BvbnNlLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikge1xuXHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdH0pXG5cblx0c2VsZi5lbWl0KCdyZXNwb25zZScsIHNlbGYuX3Jlc3BvbnNlKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRzZWxmLl9ib2R5LnB1c2goY2h1bmspXG5cdGNiKClcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0c2VsZi5fZGVzdHJveWVkID0gdHJ1ZVxuXHRnbG9iYWwuY2xlYXJUaW1lb3V0KHNlbGYuX2ZldGNoVGltZXIpXG5cdGlmIChzZWxmLl9yZXNwb25zZSlcblx0XHRzZWxmLl9yZXNwb25zZS5fZGVzdHJveWVkID0gdHJ1ZVxuXHRpZiAoc2VsZi5feGhyKVxuXHRcdHNlbGYuX3hoci5hYm9ydCgpXG5cdGVsc2UgaWYgKHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyKVxuXHRcdHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyLmFib3J0KClcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nLCBjYikge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0aWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Y2IgPSBkYXRhXG5cdFx0ZGF0YSA9IHVuZGVmaW5lZFxuXHR9XG5cblx0c3RyZWFtLldyaXRhYmxlLnByb3RvdHlwZS5lbmQuY2FsbChzZWxmLCBkYXRhLCBlbmNvZGluZywgY2IpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmZsdXNoSGVhZGVycyA9IGZ1bmN0aW9uICgpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldE5vRGVsYXkgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0U29ja2V0S2VlcEFsaXZlID0gZnVuY3Rpb24gKCkge31cblxuLy8gVGFrZW4gZnJvbSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXNldHJlcXVlc3RoZWFkZXIlMjglMjktbWV0aG9kXG52YXIgdW5zYWZlSGVhZGVycyA9IFtcblx0J2FjY2VwdC1jaGFyc2V0Jyxcblx0J2FjY2VwdC1lbmNvZGluZycsXG5cdCdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnMnLFxuXHQnYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2QnLFxuXHQnY29ubmVjdGlvbicsXG5cdCdjb250ZW50LWxlbmd0aCcsXG5cdCdjb29raWUnLFxuXHQnY29va2llMicsXG5cdCdkYXRlJyxcblx0J2RudCcsXG5cdCdleHBlY3QnLFxuXHQnaG9zdCcsXG5cdCdrZWVwLWFsaXZlJyxcblx0J29yaWdpbicsXG5cdCdyZWZlcmVyJyxcblx0J3RlJyxcblx0J3RyYWlsZXInLFxuXHQndHJhbnNmZXItZW5jb2RpbmcnLFxuXHQndXBncmFkZScsXG5cdCd2aWEnXG5dXG4iLCJ2YXIgY2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vY2FwYWJpbGl0eScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc3RyZWFtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJylcblxudmFyIHJTdGF0ZXMgPSBleHBvcnRzLnJlYWR5U3RhdGVzID0ge1xuXHRVTlNFTlQ6IDAsXG5cdE9QRU5FRDogMSxcblx0SEVBREVSU19SRUNFSVZFRDogMixcblx0TE9BRElORzogMyxcblx0RE9ORTogNFxufVxuXG52YXIgSW5jb21pbmdNZXNzYWdlID0gZXhwb3J0cy5JbmNvbWluZ01lc3NhZ2UgPSBmdW5jdGlvbiAoeGhyLCByZXNwb25zZSwgbW9kZSwgZmV0Y2hUaW1lcikge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0c3RyZWFtLlJlYWRhYmxlLmNhbGwoc2VsZilcblxuXHRzZWxmLl9tb2RlID0gbW9kZVxuXHRzZWxmLmhlYWRlcnMgPSB7fVxuXHRzZWxmLnJhd0hlYWRlcnMgPSBbXVxuXHRzZWxmLnRyYWlsZXJzID0ge31cblx0c2VsZi5yYXdUcmFpbGVycyA9IFtdXG5cblx0Ly8gRmFrZSB0aGUgJ2Nsb3NlJyBldmVudCwgYnV0IG9ubHkgb25jZSAnZW5kJyBmaXJlc1xuXHRzZWxmLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gVGhlIG5leHRUaWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IHRoZSAncmVxdWVzdCcgbW9kdWxlIGZyb20gY2F1c2luZyBhbiBpbmZpbml0ZSBsb29wXG5cdFx0cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLmVtaXQoJ2Nsb3NlJylcblx0XHR9KVxuXHR9KVxuXG5cdGlmIChtb2RlID09PSAnZmV0Y2gnKSB7XG5cdFx0c2VsZi5fZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlXG5cblx0XHRzZWxmLnVybCA9IHJlc3BvbnNlLnVybFxuXHRcdHNlbGYuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c1xuXHRcdHNlbGYuc3RhdHVzTWVzc2FnZSA9IHJlc3BvbnNlLnN0YXR1c1RleHRcblx0XHRcblx0XHRyZXNwb25zZS5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlciwga2V5KXtcblx0XHRcdHNlbGYuaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSBoZWFkZXJcblx0XHRcdHNlbGYucmF3SGVhZGVycy5wdXNoKGtleSwgaGVhZGVyKVxuXHRcdH0pXG5cblx0XHRpZiAoY2FwYWJpbGl0eS53cml0YWJsZVN0cmVhbSkge1xuXHRcdFx0dmFyIHdyaXRhYmxlID0gbmV3IFdyaXRhYmxlU3RyZWFtKHtcblx0XHRcdFx0d3JpdGU6IGZ1bmN0aW9uIChjaHVuaykge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdFx0XHRpZiAoc2VsZi5fZGVzdHJveWVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlamVjdCgpXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoc2VsZi5wdXNoKEJ1ZmZlci5mcm9tKGNodW5rKSkpIHtcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzZWxmLl9yZXN1bWVGZXRjaCA9IHJlc29sdmVcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjbG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoZmV0Y2hUaW1lcilcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRcdHNlbGYucHVzaChudWxsKVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdFx0fVxuXHRcdFx0fSlcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmVzcG9uc2UuYm9keS5waXBlVG8od3JpdGFibGUpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRnbG9iYWwuY2xlYXJUaW1lb3V0KGZldGNoVGltZXIpXG5cdFx0XHRcdFx0aWYgKCFzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0XHR9KVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdH0gY2F0Y2ggKGUpIHt9IC8vIHBpcGVUbyBtZXRob2QgaXNuJ3QgZGVmaW5lZC4gQ2FuJ3QgZmluZCBhIGJldHRlciB3YXkgdG8gZmVhdHVyZSB0ZXN0IHRoaXNcblx0XHR9XG5cdFx0Ly8gZmFsbGJhY2sgZm9yIHdoZW4gd3JpdGFibGVTdHJlYW0gb3IgcGlwZVRvIGFyZW4ndCBhdmFpbGFibGVcblx0XHR2YXIgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKVxuXHRcdGZ1bmN0aW9uIHJlYWQgKCkge1xuXHRcdFx0cmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRcdFx0aWYgKHNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0aWYgKHJlc3VsdC5kb25lKSB7XG5cdFx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRcdHNlbGYucHVzaChudWxsKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYucHVzaChCdWZmZXIuZnJvbShyZXN1bHQudmFsdWUpKVxuXHRcdFx0XHRyZWFkKClcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0cmVhZCgpXG5cdH0gZWxzZSB7XG5cdFx0c2VsZi5feGhyID0geGhyXG5cdFx0c2VsZi5fcG9zID0gMFxuXG5cdFx0c2VsZi51cmwgPSB4aHIucmVzcG9uc2VVUkxcblx0XHRzZWxmLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0geGhyLnN0YXR1c1RleHRcblx0XHR2YXIgaGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgvXFxyP1xcbi8pXG5cdFx0aGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRcdHZhciBtYXRjaGVzID0gaGVhZGVyLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pXG5cdFx0XHRpZiAobWF0Y2hlcykge1xuXHRcdFx0XHR2YXIga2V5ID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuXHRcdFx0XHRcdGlmIChzZWxmLmhlYWRlcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IFtdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyc1trZXldLnB1c2gobWF0Y2hlc1syXSlcblx0XHRcdFx0fSBlbHNlIGlmIChzZWxmLmhlYWRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gKz0gJywgJyArIG1hdGNoZXNbMl1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IG1hdGNoZXNbMl1cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChtYXRjaGVzWzFdLCBtYXRjaGVzWzJdKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJ1xuXHRcdGlmICghY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHR2YXIgbWltZVR5cGUgPSBzZWxmLnJhd0hlYWRlcnNbJ21pbWUtdHlwZSddXG5cdFx0XHRpZiAobWltZVR5cGUpIHtcblx0XHRcdFx0dmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKVxuXHRcdFx0XHRpZiAoY2hhcnNldE1hdGNoKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2hhcnNldCA9IGNoYXJzZXRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghc2VsZi5fY2hhcnNldClcblx0XHRcdFx0c2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzc1xuXHRcdH1cblx0fVxufVxuXG5pbmhlcml0cyhJbmNvbWluZ01lc3NhZ2UsIHN0cmVhbS5SZWFkYWJsZSlcblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0dmFyIHJlc29sdmUgPSBzZWxmLl9yZXN1bWVGZXRjaFxuXHRpZiAocmVzb2x2ZSkge1xuXHRcdHNlbGYuX3Jlc3VtZUZldGNoID0gbnVsbFxuXHRcdHJlc29sdmUoKVxuXHR9XG59XG5cbkluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHZhciB4aHIgPSBzZWxmLl94aHJcblxuXHR2YXIgcmVzcG9uc2UgPSBudWxsXG5cdHN3aXRjaCAoc2VsZi5fbW9kZSkge1xuXHRcdGNhc2UgJ3RleHQnOlxuXHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHRpZiAocmVzcG9uc2UubGVuZ3RoID4gc2VsZi5fcG9zKSB7XG5cdFx0XHRcdHZhciBuZXdEYXRhID0gcmVzcG9uc2Uuc3Vic3RyKHNlbGYuX3Bvcylcblx0XHRcdFx0aWYgKHNlbGYuX2NoYXJzZXQgPT09ICd4LXVzZXItZGVmaW5lZCcpIHtcblx0XHRcdFx0XHR2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jKG5ld0RhdGEubGVuZ3RoKVxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RGF0YS5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRcdGJ1ZmZlcltpXSA9IG5ld0RhdGEuY2hhckNvZGVBdChpKSAmIDB4ZmZcblxuXHRcdFx0XHRcdHNlbGYucHVzaChidWZmZXIpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5wdXNoKG5ld0RhdGEsIHNlbGYuX2NoYXJzZXQpXG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5fcG9zID0gcmVzcG9uc2UubGVuZ3RoXG5cdFx0XHR9XG5cdFx0XHRicmVha1xuXHRcdGNhc2UgJ2FycmF5YnVmZmVyJzpcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5ET05FIHx8ICF4aHIucmVzcG9uc2UpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRyZXNwb25zZSA9IHhoci5yZXNwb25zZVxuXHRcdFx0c2VsZi5wdXNoKEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KHJlc3BvbnNlKSkpXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJzogLy8gdGFrZSB3aG9sZVxuXHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2Vcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5MT0FESU5HIHx8ICFyZXNwb25zZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdHNlbGYucHVzaChCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtcy1zdHJlYW0nOlxuXHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2Vcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5MT0FESU5HKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dmFyIHJlYWRlciA9IG5ldyBnbG9iYWwuTVNTdHJlYW1SZWFkZXIoKVxuXHRcdFx0cmVhZGVyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChyZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGggPiBzZWxmLl9wb3MpIHtcblx0XHRcdFx0XHRzZWxmLnB1c2goQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkocmVhZGVyLnJlc3VsdC5zbGljZShzZWxmLl9wb3MpKSkpXG5cdFx0XHRcdFx0c2VsZi5fcG9zID0gcmVhZGVyLnJlc3VsdC5ieXRlTGVuZ3RoXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYucHVzaChudWxsKVxuXHRcdFx0fVxuXHRcdFx0Ly8gcmVhZGVyLm9uZXJyb3IgPSA/Pz8gLy8gVE9ETzogdGhpc1xuXHRcdFx0cmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHJlc3BvbnNlKVxuXHRcdFx0YnJlYWtcblx0fVxuXG5cdC8vIFRoZSBtcy1zdHJlYW0gY2FzZSBoYW5kbGVzIGVuZCBzZXBhcmF0ZWx5IGluIHJlYWRlci5vbmxvYWQoKVxuXHRpZiAoc2VsZi5feGhyLnJlYWR5U3RhdGUgPT09IHJTdGF0ZXMuRE9ORSAmJiBzZWxmLl9tb2RlICE9PSAnbXMtc3RyZWFtJykge1xuXHRcdHNlbGYucHVzaChudWxsKVxuXHR9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgY29kZXMgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIEJhc2UpIHtcbiAgaWYgKCFCYXNlKSB7XG4gICAgQmFzZSA9IEVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBOb2RlRXJyb3IgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQmFzZSkge1xuICAgIF9pbmhlcml0c0xvb3NlKE5vZGVFcnJvciwgX0Jhc2UpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHJldHVybiBfQmFzZS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5vZGVFcnJvcjtcbiAgfShCYXNlKTtcblxuICBOb2RlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBCYXNlLm5hbWU7XG4gIE5vZGVFcnJvci5wcm90b3R5cGUuY29kZSA9IGNvZGU7XG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcblxuXG5mdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICB9KTtcblxuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuXG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICByZXR1cm4gc3RyLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlc1xuXG5cbmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gIH1cbn1cblxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUUnLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuICdUaGUgdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwiJyArIG5hbWUgKyAnXCInO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLCBmdW5jdGlvbiAobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuICB2YXIgZGV0ZXJtaW5lcjtcblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCAnbm90ICcpKSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICB9XG5cbiAgdmFyIG1zZztcblxuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfVxuXG4gIG1zZyArPSBcIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQodHlwZW9mIGFjdHVhbCk7XG4gIHJldHVybiBtc2c7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GJywgJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEJywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICdUaGUgJyArIG5hbWUgKyAnIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJywgJ1ByZW1hdHVyZSBjbG9zZScpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX0RFU1RST1lFRCcsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAnQ2Fubm90IGNhbGwgJyArIG5hbWUgKyAnIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NVUxUSVBMRV9DQUxMQkFDSycsICdDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9DQU5OT1RfUElQRScsICdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EJywgJ3dyaXRlIGFmdGVyIGVuZCcpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX05VTExfVkFMVUVTJywgJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJywgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1VOS05PV05fRU5DT0RJTkcnLCBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiAnVW5rbm93biBlbmNvZGluZzogJyArIGFyZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQnLCAnc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTtcbm1vZHVsZS5leHBvcnRzLmNvZGVzID0gY29kZXM7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG4ndXNlIHN0cmljdCc7XG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG5cbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIEFsbG93IHRoZSBrZXlzIGFycmF5IHRvIGJlIEdDJ2VkLlxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcblxuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG4gICAgICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbiAgICB9XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlTGVuZ3RoJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGg7XG4gIH1cbn0pOyAvLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5cbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBJZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCwgdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjsgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cblxuICBwcm9jZXNzLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pOyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbnJlcXVpcmUoJ2luaGVyaXRzJykoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBFRWxpc3RlbmVyQ291bnQoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG5cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuXG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgZGVidWc7XG5cbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gZGVidWcoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2J1ZmZlcl9saXN0Jyk7XG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZScpLFxuICAgIGdldEhpZ2hXYXRlck1hcmsgPSBfcmVxdWlyZS5nZXRIaWdoV2F0ZXJNYXJrO1xuXG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKS5jb2RlcyxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFLFxuICAgIEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GLFxuICAgIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsXG4gICAgRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQ7IC8vIExhenkgbG9hZGVkIHRvIGltcHJvdmUgdGhlIHN0YXJ0dXAgcGVyZm9ybWFuY2UuXG5cblxudmFyIFN0cmluZ0RlY29kZXI7XG52YXIgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yO1xudmFyIGZyb207XG5cbnJlcXVpcmUoJ2luaGVyaXRzJykoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBlcnJvck9yRGVzdHJveSA9IGRlc3Ryb3lJbXBsLmVycm9yT3JEZXN0cm95O1xudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7IC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSwgaXNEdXBsZXgpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cblxuICBpZiAodHlwZW9mIGlzRHVwbGV4ICE9PSAnYm9vbGVhbicpIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4OyAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlOyAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZ2V0SGlnaFdhdGVyTWFyayh0aGlzLCBvcHRpb25zLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywgaXNEdXBsZXgpOyAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG5cbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTsgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuXG4gIHRoaXMuc3luYyA9IHRydWU7IC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgdGhpcy5wYXVzZWQgPSB0cnVlOyAvLyBTaG91bGQgY2xvc2UgYmUgZW1pdHRlZCBvbiBkZXN0cm95LiBEZWZhdWx0cyB0byB0cnVlLlxuXG4gIHRoaXMuZW1pdENsb3NlID0gb3B0aW9ucy5lbWl0Q2xvc2UgIT09IGZhbHNlOyAvLyBTaG91bGQgLmRlc3Ryb3koKSBiZSBjYWxsZWQgYWZ0ZXIgJ2VuZCcgKGFuZCBwb3RlbnRpYWxseSAnZmluaXNoJylcblxuICB0aGlzLmF1dG9EZXN0cm95ID0gISFvcHRpb25zLmF1dG9EZXN0cm95OyAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcblxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlOyAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnOyAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7IC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcblxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuXG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7IC8vIENoZWNraW5nIGZvciBhIFN0cmVhbS5EdXBsZXggaW5zdGFuY2UgaXMgZmFzdGVyIGhlcmUgaW5zdGVhZCBvZiBpbnNpZGVcbiAgLy8gdGhlIFJlYWRhYmxlU3RhdGUgY29uc3RydWN0b3IsIGF0IGxlYXN0IHdpdGggVjggNi41XG5cbiAgdmFyIGlzRHVwbGV4ID0gdGhpcyBpbnN0YW5jZW9mIER1cGxleDtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTsgLy8gbGVnYWN5XG5cbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcblxuXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblxuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgY2IoZXJyKTtcbn07IC8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTsgLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgZGVidWcoJ3JlYWRhYmxlQWRkQ2h1bmsnLCBjaHVuayk7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcblxuICAgIGlmIChlcikge1xuICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgbmV3IEVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQoKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgbmV3IEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YoKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfSAvLyBXZSBjYW4gcHVzaCBtb3JlIGRhdGEgaWYgd2UgYXJlIGJlbG93IHRoZSBoaWdoV2F0ZXJNYXJrLlxuICAvLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZSBtb3JlIGJ5dGVzLlxuICAvLyBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLCBzdWNoIGFzIHRoZSByZXBsLlxuXG5cbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG5cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG5cbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnY2h1bmsnLCBbJ3N0cmluZycsICdCdWZmZXInLCAnVWludDhBcnJheSddLCBjaHVuayk7XG4gIH1cblxuICByZXR1cm4gZXI7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59OyAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHZhciBkZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gZGVjb2RlcjsgLy8gSWYgc2V0RW5jb2RpbmcobnVsbCksIGRlY29kZXIuZW5jb2RpbmcgZXF1YWxzIHV0ZjhcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyLmVuY29kaW5nOyAvLyBJdGVyYXRlIG92ZXIgY3VycmVudCBidWZmZXIgdG8gY29udmVydCBhbHJlYWR5IHN0b3JlZCBCdWZmZXJzOlxuXG4gIHZhciBwID0gdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIuaGVhZDtcbiAgdmFyIGNvbnRlbnQgPSAnJztcblxuICB3aGlsZSAocCAhPT0gbnVsbCkge1xuICAgIGNvbnRlbnQgKz0gZGVjb2Rlci53cml0ZShwLmRhdGEpO1xuICAgIHAgPSBwLm5leHQ7XG4gIH1cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuXG4gIGlmIChjb250ZW50ICE9PSAnJykgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIucHVzaChjb250ZW50KTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5sZW5ndGggPSBjb250ZW50Lmxlbmd0aDtcbiAgcmV0dXJuIHRoaXM7XG59OyAvLyBEb24ndCByYWlzZSB0aGUgaHdtID4gMUdCXG5cblxudmFyIE1BWF9IV00gPSAweDQwMDAwMDAwO1xuXG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICAvLyBUT0RPKHJvbmFnKTogVGhyb3cgRVJSX1ZBTFVFX09VVF9PRl9SQU5HRS5cbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG5cbiAgcmV0dXJuIG47XG59IC8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuXG5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG5cbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH0gLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG5cblxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjsgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcblxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59IC8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7IC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cblxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKChzdGF0ZS5oaWdoV2F0ZXJNYXJrICE9PSAwID8gc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgOiBzdGF0ZS5sZW5ndGggPiAwKSB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7IC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cblxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cblxuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTsgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfSAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG5cblxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlOyAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcblxuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTsgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHN0YXRlLmxlbmd0aCA8PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICAgIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOyAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBkZWJ1Zygnb25Fb2ZDaHVuaycpO1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcblxuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG5cbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS5zeW5jKSB7XG4gICAgLy8gaWYgd2UgYXJlIHN5bmMsIHdhaXQgdW50aWwgbmV4dCB0aWNrIHRvIGVtaXQgdGhlIGRhdGEuXG4gICAgLy8gT3RoZXJ3aXNlIHdlIHJpc2sgZW1pdHRpbmcgZGF0YSBpbiB0aGUgZmxvdygpXG4gICAgLy8gdGhlIHJlYWRhYmxlIGNvZGUgdHJpZ2dlcnMgZHVyaW5nIGEgcmVhZCgpIGNhbGxcbiAgICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAgIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICAgIH1cbiAgfVxufSAvLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuXG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUubmVlZFJlYWRhYmxlLCBzdGF0ZS5lbWl0dGVkUmVhZGFibGUpO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdlbWl0UmVhZGFibGVfJywgc3RhdGUuZGVzdHJveWVkLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcblxuICBpZiAoIXN0YXRlLmRlc3Ryb3llZCAmJiAoc3RhdGUubGVuZ3RoIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB9IC8vIFRoZSBzdHJlYW0gbmVlZHMgYW5vdGhlciByZWFkYWJsZSBldmVudCBpZlxuICAvLyAxLiBJdCBpcyBub3QgZmxvd2luZywgYXMgdGhlIGZsb3cgbWVjaGFuaXNtIHdpbGwgdGFrZVxuICAvLyAgICBjYXJlIG9mIGl0LlxuICAvLyAyLiBJdCBpcyBub3QgZW5kZWQuXG4gIC8vIDMuIEl0IGlzIGJlbG93IHRoZSBoaWdoV2F0ZXJNYXJrLCBzbyB3ZSBjYW4gc2NoZWR1bGVcbiAgLy8gICAgYW5vdGhlciByZWFkYWJsZSBsYXRlci5cblxuXG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9ICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPD0gc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgZmxvdyhzdHJlYW0pO1xufSAvLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cblxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIC8vIEF0dGVtcHQgdG8gcmVhZCBtb3JlIGRhdGEgaWYgd2Ugc2hvdWxkLlxuICAvL1xuICAvLyBUaGUgY29uZGl0aW9ucyBmb3IgcmVhZGluZyBtb3JlIGRhdGEgYXJlIChvbmUgb2YpOlxuICAvLyAtIE5vdCBlbm91Z2ggZGF0YSBidWZmZXJlZCAoc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykuIFRoZSBsb29wXG4gIC8vICAgaXMgcmVzcG9uc2libGUgZm9yIGZpbGxpbmcgdGhlIGJ1ZmZlciB3aXRoIGVub3VnaCBkYXRhIGlmIHN1Y2ggZGF0YVxuICAvLyAgIGlzIGF2YWlsYWJsZS4gSWYgaGlnaFdhdGVyTWFyayBpcyAwIGFuZCB3ZSBhcmUgbm90IGluIHRoZSBmbG93aW5nIG1vZGVcbiAgLy8gICB3ZSBzaG91bGQgX25vdF8gYXR0ZW1wdCB0byBidWZmZXIgYW55IGV4dHJhIGRhdGEuIFdlJ2xsIGdldCBtb3JlIGRhdGFcbiAgLy8gICB3aGVuIHRoZSBzdHJlYW0gY29uc3VtZXIgY2FsbHMgcmVhZCgpIGluc3RlYWQuXG4gIC8vIC0gTm8gZGF0YSBpbiB0aGUgYnVmZmVyLCBhbmQgdGhlIHN0cmVhbSBpcyBpbiBmbG93aW5nIG1vZGUuIEluIHRoaXMgbW9kZVxuICAvLyAgIHRoZSBsb29wIGJlbG93IGlzIHJlc3BvbnNpYmxlIGZvciBlbnN1cmluZyByZWFkKCkgaXMgY2FsbGVkLiBGYWlsaW5nIHRvXG4gIC8vICAgY2FsbCByZWFkIGhlcmUgd291bGQgYWJvcnQgdGhlIGZsb3cgYW5kIHRoZXJlJ3Mgbm8gb3RoZXIgbWVjaGFuaXNtIGZvclxuICAvLyAgIGNvbnRpbnVpbmcgdGhlIGZsb3cgaWYgdGhlIHN0cmVhbSBjb25zdW1lciBoYXMganVzdCBzdWJzY3JpYmVkIHRvIHRoZVxuICAvLyAgICdkYXRhJyBldmVudC5cbiAgLy9cbiAgLy8gSW4gYWRkaXRpb24gdG8gdGhlIGFib3ZlIGNvbmRpdGlvbnMgdG8ga2VlcCByZWFkaW5nIGRhdGEsIHRoZSBmb2xsb3dpbmdcbiAgLy8gY29uZGl0aW9ucyBwcmV2ZW50IHRoZSBkYXRhIGZyb20gYmVpbmcgcmVhZDpcbiAgLy8gLSBUaGUgc3RyZWFtIGhhcyBlbmRlZCAoc3RhdGUuZW5kZWQpLlxuICAvLyAtIFRoZXJlIGlzIGFscmVhZHkgYSBwZW5kaW5nICdyZWFkJyBvcGVyYXRpb24gKHN0YXRlLnJlYWRpbmcpLiBUaGlzIGlzIGFcbiAgLy8gICBjYXNlIHdoZXJlIHRoZSB0aGUgc3RyZWFtIGhhcyBjYWxsZWQgdGhlIGltcGxlbWVudGF0aW9uIGRlZmluZWQgX3JlYWQoKVxuICAvLyAgIG1ldGhvZCwgYnV0IHRoZXkgYXJlIHByb2Nlc3NpbmcgdGhlIGNhbGwgYXN5bmNocm9ub3VzbHkgYW5kIGhhdmUgX25vdF9cbiAgLy8gICBjYWxsZWQgcHVzaCgpIHdpdGggbmV3IGRhdGEuIEluIHRoaXMgY2FzZSB3ZSBza2lwIHBlcmZvcm1pbmcgbW9yZVxuICAvLyAgIHJlYWQoKXMuIFRoZSBleGVjdXRpb24gZW5kcyBpbiB0aGlzIG1ldGhvZCBhZ2FpbiBhZnRlciB0aGUgX3JlYWQoKSBlbmRzXG4gIC8vICAgdXAgY2FsbGluZyBwdXNoKCkgd2l0aCBtb3JlIGRhdGEuXG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDApKSB7XG4gICAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztcbiAgfVxuXG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59IC8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGVycm9yT3JEZXN0cm95KHRoaXMsIG5ldyBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCgnX3JlYWQoKScpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcHJvY2Vzcy5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG5cbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcblxuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9IC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuXG5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpOyAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuICAgIGNsZWFuZWRVcCA9IHRydWU7IC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgZGVidWcoJ2Rlc3Qud3JpdGUnLCByZXQpO1xuXG4gICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICB9XG5cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfSAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuXG5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZXJyb3JPckRlc3Ryb3koZGVzdCwgZXIpO1xuICB9IC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cblxuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTsgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cblxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuXG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcblxuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG5cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9IC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG5cblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpOyAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVPbkRyYWluRnVuY3Rpb25SZXN1bHQoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHtcbiAgICBoYXNVbnBpcGVkOiBmYWxzZVxuICB9OyAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzOyAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7IC8vIGdvdCBhIG1hdGNoLlxuXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywge1xuICAgICAgICBoYXNVbnBpcGVkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cblxuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgcmV0dXJuIHRoaXM7XG59OyAvLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gdXBkYXRlIHJlYWRhYmxlTGlzdGVuaW5nIHNvIHRoYXQgcmVzdW1lKCkgbWF5IGJlIGEgbm8tb3BcbiAgICAvLyBhIGZldyBsaW5lcyBkb3duLiBUaGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IG9uY2UoJ3JlYWRhYmxlJykuXG4gICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSB0aGlzLmxpc3RlbmVyQ291bnQoJ3JlYWRhYmxlJykgPiAwOyAvLyBUcnkgc3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG5cbiAgICBpZiAoc3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGRlYnVnKCdvbiByZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUucmVhZGluZyk7XG5cbiAgICAgIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfSBlbHNlIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cblJlYWRhYmxlLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIuY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgc29tZW9uZSBzdGlsbCBsaXN0ZW5pbmcgdG9cbiAgICAvLyByZWFkYWJsZSBhbmQgcmVzZXQgdGhlIHN0YXRlLiBIb3dldmVyIHRoaXMgbmVlZHMgdG8gaGFwcGVuXG4gICAgLy8gYWZ0ZXIgcmVhZGFibGUgaGFzIGJlZW4gZW1pdHRlZCBidXQgYmVmb3JlIEkvTyAobmV4dFRpY2spIHRvXG4gICAgLy8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScsIGZuKSBjeWNsZXMuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nXG4gICAgLy8gcmVzdW1lIHdpdGhpbiB0aGUgc2FtZSB0aWNrIHdpbGwgaGF2ZSBub1xuICAgIC8vIGVmZmVjdC5cbiAgICBwcm9jZXNzLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2KSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIGlmIChldiA9PT0gJ3JlYWRhYmxlJyB8fCBldiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBzb21lb25lIHN0aWxsIGxpc3RlbmluZyB0b1xuICAgIC8vIHJlYWRhYmxlIGFuZCByZXNldCB0aGUgc3RhdGUuIEhvd2V2ZXIgdGhpcyBuZWVkcyB0byBoYXBwZW5cbiAgICAvLyBhZnRlciByZWFkYWJsZSBoYXMgYmVlbiBlbWl0dGVkIGJ1dCBiZWZvcmUgSS9PIChuZXh0VGljaykgdG9cbiAgICAvLyBzdXBwb3J0IG9uY2UoJ3JlYWRhYmxlJywgZm4pIGN5Y2xlcy4gVGhpcyBtZWFucyB0aGF0IGNhbGxpbmdcbiAgICAvLyByZXN1bWUgd2l0aGluIHRoZSBzYW1lIHRpY2sgd2lsbCBoYXZlIG5vXG4gICAgLy8gZWZmZWN0LlxuICAgIHByb2Nlc3MubmV4dFRpY2sodXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcsIHRoaXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nKHNlbGYpIHtcbiAgdmFyIHN0YXRlID0gc2VsZi5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzZWxmLmxpc3RlbmVyQ291bnQoJ3JlYWRhYmxlJykgPiAwO1xuXG4gIGlmIChzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgJiYgIXN0YXRlLnBhdXNlZCkge1xuICAgIC8vIGZsb3dpbmcgbmVlZHMgdG8gYmUgc2V0IHRvIHRydWUgbm93LCBvdGhlcndpc2VcbiAgICAvLyB0aGUgdXBjb21pbmcgcmVzdW1lIHdpbGwgbm90IGZsb3cuXG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7IC8vIGNydWRlIHdheSB0byBjaGVjayBpZiB3ZSBzaG91bGQgcmVzdW1lXG4gIH0gZWxzZSBpZiAoc2VsZi5saXN0ZW5lckNvdW50KCdkYXRhJykgPiAwKSB7XG4gICAgc2VsZi5yZXN1bWUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59IC8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTsgLy8gd2UgZmxvdyBvbmx5IGlmIHRoZXJlIGlzIG5vIG9uZSBsaXN0ZW5pbmdcbiAgICAvLyBmb3IgcmVhZGFibGUsIGJ1dCB3ZSBzdGlsbCBoYXZlIHRvIGNhbGxcbiAgICAvLyByZXN1bWUoKVxuXG4gICAgc3RhdGUuZmxvd2luZyA9ICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZztcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG5cbiAgc3RhdGUucGF1c2VkID0gZmFsc2U7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGRlYnVnKCdyZXN1bWUnLCBzdGF0ZS5yZWFkaW5nKTtcblxuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5wYXVzZWQgPSB0cnVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcblxuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7XG4gICAgO1xuICB9XG59IC8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuXG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG5cbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG5cbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7IC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiBtZXRob2RXcmFwKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWV0aG9kV3JhcFJldHVybkZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfSAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG5cblxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9IC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG5cblxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuXG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVhZGFibGUucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9hc3luY19pdGVyYXRvcicpO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IodGhpcyk7XG4gIH07XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlQnVmZmVyJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVGbG93aW5nJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBzdGF0ZTtcbiAgICB9XG4gIH1cbn0pOyAvLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlTGVuZ3RoJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5sZW5ndGg7XG4gIH1cbn0pOyAvLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmZpcnN0KCk7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBzdGF0ZS5idWZmZXIuY29uc3VtZShuLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZW5kUmVhZGFibGUnLCBzdGF0ZS5lbmRFbWl0dGVkKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgZGVidWcoJ2VuZFJlYWRhYmxlTlQnLCBzdGF0ZS5lbmRFbWl0dGVkLCBzdGF0ZS5sZW5ndGgpOyAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuXG4gICAgaWYgKHN0YXRlLmF1dG9EZXN0cm95KSB7XG4gICAgICAvLyBJbiBjYXNlIG9mIGR1cGxleCBzdHJlYW1zIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZWN0XG4gICAgICAvLyBpZiB0aGUgd3JpdGFibGUgc2lkZSBpcyByZWFkeSBmb3IgYXV0b0Rlc3Ryb3kgYXMgd2VsbFxuICAgICAgdmFyIHdTdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcblxuICAgICAgaWYgKCF3U3RhdGUgfHwgd1N0YXRlLmF1dG9EZXN0cm95ICYmIHdTdGF0ZS5maW5pc2hlZCkge1xuICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWFkYWJsZS5mcm9tID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBvcHRzKSB7XG4gICAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnJvbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9mcm9tJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyb20oUmVhZGFibGUsIGl0ZXJhYmxlLCBvcHRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cblxuICByZXR1cm4gLTE7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKS5jb2RlcyxcbiAgICBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELFxuICAgIEVSUl9NVUxUSVBMRV9DQUxMQkFDSyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxcbiAgICBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyxcbiAgICBFUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzAgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzA7XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbnJlcXVpcmUoJ2luaGVyaXRzJykoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRVJSX01VTFRJUExFX0NBTExCQUNLKCkpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG4gIGNiKGVyKTtcbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuXG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9OyAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9IC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cblxuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCkge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTsgLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ190cmFuc2Zvcm0oKScpKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG5cbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59OyAvLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuXG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpOyAvLyBUT0RPKEJyaWRnZUFSKTogV3JpdGUgYSB0ZXN0IGZvciB0aGVzZSB0d28gZXJyb3IgY2FzZXNcbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcblxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCgpO1xuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HKCk7XG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcbi8qIDxyZXBsYWNlbWVudD4gKi9cblxuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufSAvLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuXG5cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcblxuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuXG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RhdGUnKSxcbiAgICBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyaztcblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgICBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELFxuICAgIEVSUl9NVUxUSVBMRV9DQUxMQkFDSyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxcbiAgICBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9DQU5OT1RfUElQRSxcbiAgICBFUlJfU1RSRUFNX0RFU1RST1lFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fREVTVFJPWUVELFxuICAgIEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX05VTExfVkFMVUVTLFxuICAgIEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQsXG4gICAgRVJSX1VOS05PV05fRU5DT0RJTkcgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfVU5LTk9XTl9FTkNPRElORztcblxudmFyIGVycm9yT3JEZXN0cm95ID0gZGVzdHJveUltcGwuZXJyb3JPckRlc3Ryb3k7XG5cbnJlcXVpcmUoJ2luaGVyaXRzJykoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtLCBpc0R1cGxleCkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0sXG4gIC8vIGUuZy4gb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGUgdnMuIG9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlLCBldGMuXG5cbiAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gJ2Jvb2xlYW4nKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDsgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cblxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZ2V0SGlnaFdhdGVyTWFyayh0aGlzLCBvcHRpb25zLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywgaXNEdXBsZXgpOyAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkXG5cbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlOyAvLyBkcmFpbiBldmVudCBmbGFnLlxuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7IC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG5cbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTsgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTsgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG5cbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlOyAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcblxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlOyAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlOyAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnOyAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuXG4gIHRoaXMubGVuZ3RoID0gMDsgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cblxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTsgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuXG4gIHRoaXMuY29ya2VkID0gMDsgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG5cbiAgdGhpcy5zeW5jID0gdHJ1ZTsgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cblxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTsgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07IC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuXG5cbiAgdGhpcy53cml0ZWNiID0gbnVsbDsgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7IC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuXG4gIHRoaXMucGVuZGluZ2NiID0gMDsgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTsgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlOyAvLyBTaG91bGQgY2xvc2UgYmUgZW1pdHRlZCBvbiBkZXN0cm95LiBEZWZhdWx0cyB0byB0cnVlLlxuXG4gIHRoaXMuZW1pdENsb3NlID0gb3B0aW9ucy5lbWl0Q2xvc2UgIT09IGZhbHNlOyAvLyBTaG91bGQgLmRlc3Ryb3koKSBiZSBjYWxsZWQgYWZ0ZXIgJ2ZpbmlzaCcgKGFuZCBwb3RlbnRpYWxseSAnZW5kJylcblxuICB0aGlzLmF1dG9EZXN0cm95ID0gISFvcHRpb25zLmF1dG9EZXN0cm95OyAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwOyAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cblxuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcblxuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gd3JpdGFibGVTdGF0ZUJ1ZmZlckdldHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7IC8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxuXG5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKG9iamVjdCkge1xuICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIHJlYWxIYXNJbnN0YW5jZShvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpOyAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIC8vIENoZWNraW5nIGZvciBhIFN0cmVhbS5EdXBsZXggaW5zdGFuY2UgaXMgZmFzdGVyIGhlcmUgaW5zdGVhZCBvZiBpbnNpZGVcbiAgLy8gdGhlIFdyaXRhYmxlU3RhdGUgY29uc3RydWN0b3IsIGF0IGxlYXN0IHdpdGggVjggNi41XG5cbiAgdmFyIGlzRHVwbGV4ID0gdGhpcyBpbnN0YW5jZW9mIER1cGxleDtcbiAgaWYgKCFpc0R1cGxleCAmJiAhcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpKSByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcywgaXNEdXBsZXgpOyAvLyBsZWdhY3kuXG5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufSAvLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5cblxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIGVycm9yT3JEZXN0cm95KHRoaXMsIG5ldyBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFKCkpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCgpOyAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuXG4gIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICBwcm9jZXNzLm5leHRUaWNrKGNiLCBlcik7XG59IC8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cblxuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgZXI7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUygpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnY2h1bmsnLCBbJ3N0cmluZycsICdCdWZmZXInXSwgY2h1bmspO1xuICB9XG5cbiAgaWYgKGVyKSB7XG4gICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYiwgZXIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG5cbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcbiAgaWYgKHN0YXRlLmVuZGluZykgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IEVSUl9VTktOT1dOX0VOQ09ESU5HKGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVCdWZmZXInLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyKCk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG5cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTsgLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cblxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG5cbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cblxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrOyAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cblxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuXG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmIChzdGF0ZS5kZXN0cm95ZWQpIHN0YXRlLm9ud3JpdGUobmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKCd3cml0ZScpKTtlbHNlIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYiwgZXIpOyAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG5cbiAgICBwcm9jZXNzLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcblxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRVJSX01VTFRJUExFX0NBTExCQUNLKCk7XG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKSB8fCBzdHJlYW0uZGVzdHJveWVkO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn0gLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5cblxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufSAvLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuXG5cbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcblxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG5cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpOyAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuXG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tOyAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCgnX3dyaXRlKCknKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpOyAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH0gLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuXG5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlTGVuZ3RoJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGg7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuXG4gICAgaWYgKGVycikge1xuICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcnIpO1xuICAgIH1cblxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJyAmJiAhc3RhdGUuZGVzdHJveWVkKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG5cbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG5cbiAgICAgIGlmIChzdGF0ZS5hdXRvRGVzdHJveSkge1xuICAgICAgICAvLyBJbiBjYXNlIG9mIGR1cGxleCBzdHJlYW1zIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZWN0XG4gICAgICAgIC8vIGlmIHRoZSByZWFkYWJsZSBzaWRlIGlzIHJlYWR5IGZvciBhdXRvRGVzdHJveSBhcyB3ZWxsXG4gICAgICAgIHZhciByU3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgICAgICAgaWYgKCFyU3RhdGUgfHwgclN0YXRlLmF1dG9EZXN0cm95ICYmIHJTdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcblxuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHByb2Nlc3MubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuXG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG5cbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH0gLy8gcmV1c2UgdGhlIGZyZWUgY29ya1JlcS5cblxuXG4gIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG5cblxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIGNiKGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9PYmplY3Qkc2V0UHJvdG90eXBlTztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGZpbmlzaGVkID0gcmVxdWlyZSgnLi9lbmQtb2Ytc3RyZWFtJyk7XG5cbnZhciBrTGFzdFJlc29sdmUgPSBTeW1ib2woJ2xhc3RSZXNvbHZlJyk7XG52YXIga0xhc3RSZWplY3QgPSBTeW1ib2woJ2xhc3RSZWplY3QnKTtcbnZhciBrRXJyb3IgPSBTeW1ib2woJ2Vycm9yJyk7XG52YXIga0VuZGVkID0gU3ltYm9sKCdlbmRlZCcpO1xudmFyIGtMYXN0UHJvbWlzZSA9IFN5bWJvbCgnbGFzdFByb21pc2UnKTtcbnZhciBrSGFuZGxlUHJvbWlzZSA9IFN5bWJvbCgnaGFuZGxlUHJvbWlzZScpO1xudmFyIGtTdHJlYW0gPSBTeW1ib2woJ3N0cmVhbScpO1xuXG5mdW5jdGlvbiBjcmVhdGVJdGVyUmVzdWx0KHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGRvbmU6IGRvbmVcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVhZEFuZFJlc29sdmUoaXRlcikge1xuICB2YXIgcmVzb2x2ZSA9IGl0ZXJba0xhc3RSZXNvbHZlXTtcblxuICBpZiAocmVzb2x2ZSAhPT0gbnVsbCkge1xuICAgIHZhciBkYXRhID0gaXRlcltrU3RyZWFtXS5yZWFkKCk7IC8vIHdlIGRlZmVyIGlmIGRhdGEgaXMgbnVsbFxuICAgIC8vIHdlIGNhbiBiZSBleHBlY3RpbmcgZWl0aGVyICdlbmQnIG9yXG4gICAgLy8gJ2Vycm9yJ1xuXG4gICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgIGl0ZXJba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICBpdGVyW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgaXRlcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVhZGFibGUoaXRlcikge1xuICAvLyB3ZSB3YWl0IGZvciB0aGUgbmV4dCB0aWNrLCBiZWNhdXNlIGl0IG1pZ2h0XG4gIC8vIGVtaXQgYW4gZXJyb3Igd2l0aCBwcm9jZXNzLm5leHRUaWNrXG4gIHByb2Nlc3MubmV4dFRpY2socmVhZEFuZFJlc29sdmUsIGl0ZXIpO1xufVxuXG5mdW5jdGlvbiB3cmFwRm9yTmV4dChsYXN0UHJvbWlzZSwgaXRlcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxhc3RQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGl0ZXJba0VuZGVkXSkge1xuICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaXRlcltrSGFuZGxlUHJvbWlzZV0ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9LCByZWplY3QpO1xuICB9O1xufVxuXG52YXIgQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihmdW5jdGlvbiAoKSB7fSk7XG52YXIgUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gT2JqZWN0LnNldFByb3RvdHlwZU9mKChfT2JqZWN0JHNldFByb3RvdHlwZU8gPSB7XG4gIGdldCBzdHJlYW0oKSB7XG4gICAgcmV0dXJuIHRoaXNba1N0cmVhbV07XG4gIH0sXG5cbiAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBkZXRlY3RlZCBhbiBlcnJvciBpbiB0aGUgbWVhbndoaWxlXG4gICAgLy8gcmVqZWN0IHN0cmFpZ2h0IGF3YXlcbiAgICB2YXIgZXJyb3IgPSB0aGlzW2tFcnJvcl07XG5cbiAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNba0VuZGVkXSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzW2tTdHJlYW1dLmRlc3Ryb3llZCkge1xuICAgICAgLy8gV2UgbmVlZCB0byBkZWZlciB2aWEgbmV4dFRpY2sgYmVjYXVzZSBpZiAuZGVzdHJveShlcnIpIGlzXG4gICAgICAvLyBjYWxsZWQsIHRoZSBlcnJvciB3aWxsIGJlIGVtaXR0ZWQgdmlhIG5leHRUaWNrLCBhbmRcbiAgICAgIC8vIHdlIGNhbm5vdCBndWFyYW50ZWUgdGhhdCB0aGVyZSBpcyBubyBlcnJvciBsaW5nZXJpbmcgYXJvdW5kXG4gICAgICAvLyB3YWl0aW5nIHRvIGJlIGVtaXR0ZWQuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXNba0Vycm9yXSkge1xuICAgICAgICAgICAgcmVqZWN0KF90aGlzW2tFcnJvcl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gLy8gaWYgd2UgaGF2ZSBtdWx0aXBsZSBuZXh0KCkgY2FsbHNcbiAgICAvLyB3ZSB3aWxsIHdhaXQgZm9yIHRoZSBwcmV2aW91cyBQcm9taXNlIHRvIGZpbmlzaFxuICAgIC8vIHRoaXMgbG9naWMgaXMgb3B0aW1pemVkIHRvIHN1cHBvcnQgZm9yIGF3YWl0IGxvb3BzLFxuICAgIC8vIHdoZXJlIG5leHQoKSBpcyBvbmx5IGNhbGxlZCBvbmNlIGF0IGEgdGltZVxuXG5cbiAgICB2YXIgbGFzdFByb21pc2UgPSB0aGlzW2tMYXN0UHJvbWlzZV07XG4gICAgdmFyIHByb21pc2U7XG5cbiAgICBpZiAobGFzdFByb21pc2UpIHtcbiAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh3cmFwRm9yTmV4dChsYXN0UHJvbWlzZSwgdGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmYXN0IHBhdGggbmVlZGVkIHRvIHN1cHBvcnQgbXVsdGlwbGUgdGhpcy5wdXNoKClcbiAgICAgIC8vIHdpdGhvdXQgdHJpZ2dlcmluZyB0aGUgbmV4dCgpIHF1ZXVlXG4gICAgICB2YXIgZGF0YSA9IHRoaXNba1N0cmVhbV0ucmVhZCgpO1xuXG4gICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQoZGF0YSwgZmFsc2UpKTtcbiAgICAgIH1cblxuICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHRoaXNba0hhbmRsZVByb21pc2VdKTtcbiAgICB9XG5cbiAgICB0aGlzW2tMYXN0UHJvbWlzZV0gPSBwcm9taXNlO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG59LCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRzZXRQcm90b3R5cGVPLCBTeW1ib2wuYXN5bmNJdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRzZXRQcm90b3R5cGVPLCBcInJldHVyblwiLCBmdW5jdGlvbiBfcmV0dXJuKCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAvLyBkZXN0cm95KGVyciwgY2IpIGlzIGEgcHJpdmF0ZSBBUElcbiAgLy8gd2UgY2FuIGd1YXJhbnRlZSB3ZSBoYXZlIHRoYXQgaGVyZSwgYmVjYXVzZSB3ZSBjb250cm9sIHRoZVxuICAvLyBSZWFkYWJsZSBjbGFzcyB0aGlzIGlzIGF0dGFjaGVkIHRvXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgX3RoaXMyW2tTdHJlYW1dLmRlc3Ryb3kobnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgfSk7XG4gIH0pO1xufSksIF9PYmplY3Qkc2V0UHJvdG90eXBlTyksIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUpO1xuXG52YXIgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID0gZnVuY3Rpb24gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHN0cmVhbSkge1xuICB2YXIgX09iamVjdCRjcmVhdGU7XG5cbiAgdmFyIGl0ZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUsIChfT2JqZWN0JGNyZWF0ZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtTdHJlYW0sIHtcbiAgICB2YWx1ZTogc3RyZWFtLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtMYXN0UmVzb2x2ZSwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtMYXN0UmVqZWN0LCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0Vycm9yLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0VuZGVkLCB7XG4gICAgdmFsdWU6IHN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtIYW5kbGVQcm9taXNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGRhdGEgPSBpdGVyYXRvcltrU3RyZWFtXS5yZWFkKCk7XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gcmVzb2x2ZTtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gcmVqZWN0O1xuICAgICAgfVxuICAgIH0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9PYmplY3QkY3JlYXRlKSk7XG4gIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICBmaW5pc2hlZChzdHJlYW0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSAnRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UnKSB7XG4gICAgICB2YXIgcmVqZWN0ID0gaXRlcmF0b3Jba0xhc3RSZWplY3RdOyAvLyByZWplY3QgaWYgd2UgYXJlIHdhaXRpbmcgZm9yIGRhdGEgaW4gdGhlIFByb21pc2VcbiAgICAgIC8vIHJldHVybmVkIGJ5IG5leHQoKSBhbmQgc3RvcmUgdGhlIGVycm9yXG5cbiAgICAgIGlmIChyZWplY3QgIT09IG51bGwpIHtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cblxuICAgICAgaXRlcmF0b3Jba0Vycm9yXSA9IGVycjtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVzb2x2ZSA9IGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV07XG5cbiAgICBpZiAocmVzb2x2ZSAhPT0gbnVsbCkge1xuICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgaXRlcmF0b3Jba0VuZGVkXSA9IHRydWU7XG4gIH0pO1xuICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgb25SZWFkYWJsZS5iaW5kKG51bGwsIGl0ZXJhdG9yKSk7XG4gIHJldHVybiBpdGVyYXRvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnYnVmZmVyJyksXG4gICAgQnVmZmVyID0gX3JlcXVpcmUuQnVmZmVyO1xuXG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIGluc3BlY3QgPSBfcmVxdWlyZTIuaW5zcGVjdDtcblxudmFyIGN1c3RvbSA9IGluc3BlY3QgJiYgaW5zcGVjdC5jdXN0b20gfHwgJ2luc3BlY3QnO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5jb3B5LmNhbGwoc3JjLCB0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJ1ZmZlckxpc3QsIFt7XG4gICAga2V5OiBcInB1c2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgIGRhdGE6IHYsXG4gICAgICAgIG5leHQ6IG51bGxcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICAgICsrdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVuc2hpZnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgIGRhdGE6IHYsXG4gICAgICAgIG5leHQ6IHRoaXMuaGVhZFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICAgICsrdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNoaWZ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImpvaW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gam9pbihzKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuXG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29uY2F0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChwKSB7XG4gICAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgb3IgY2hhcmFjdGVycyBmcm9tIHRoZSBidWZmZXJlZCBkYXRhLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiY29uc3VtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25zdW1lKG4sIGhhc1N0cmluZ3MpIHtcbiAgICAgIHZhciByZXQ7XG5cbiAgICAgIGlmIChuIDwgdGhpcy5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgIC8vIGBzbGljZWAgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3MuXG4gICAgICAgIHJldCA9IHRoaXMuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgICAgICB0aGlzLmhlYWQuZGF0YSA9IHRoaXMuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICAgICAgfSBlbHNlIGlmIChuID09PSB0aGlzLmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgLy8gRmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoLlxuICAgICAgICByZXQgPSB0aGlzLnNoaWZ0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXIuXG4gICAgICAgIHJldCA9IGhhc1N0cmluZ3MgPyB0aGlzLl9nZXRTdHJpbmcobikgOiB0aGlzLl9nZXRCdWZmZXIobik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpcnN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpcnN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIH0gLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cblxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRTdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFN0cmluZyhuKSB7XG4gICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgIHZhciBjID0gMTtcbiAgICAgIHZhciByZXQgPSBwLmRhdGE7XG4gICAgICBuIC09IHJldC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgICAgIG4gLT0gbmI7XG5cbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgIGlmIChwLm5leHQpIHRoaXMuaGVhZCA9IHAubmV4dDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHA7XG4gICAgICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgKytjO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCAtPSBjO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBidWZmZXJlZCBkYXRhLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldEJ1ZmZlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0QnVmZmVyKG4pIHtcbiAgICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgIHZhciBjID0gMTtcbiAgICAgIHAuZGF0YS5jb3B5KHJldCk7XG4gICAgICBuIC09IHAuZGF0YS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICAgICAgbiAtPSBuYjtcblxuICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgKytjO1xuICAgICAgICAgICAgaWYgKHAubmV4dCkgdGhpcy5oZWFkID0gcC5uZXh0O2Vsc2UgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gcDtcbiAgICAgICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICArK2M7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoIC09IGM7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBsaW5rZWQgbGlzdCBvbmx5IHNob3dzIHRoZSBtaW5pbWFsIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbi5cblxuICB9LCB7XG4gICAga2V5OiBjdXN0b20sXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF8sIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBpbnNwZWN0KHRoaXMsIF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgLy8gT25seSBpbnNwZWN0IG9uZSBsZXZlbC5cbiAgICAgICAgZGVwdGg6IDAsXG4gICAgICAgIC8vIEl0IHNob3VsZCBub3QgcmVjdXJzZS5cbiAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2VcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTsiLCIndXNlIHN0cmljdCc7IC8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcblxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9IC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcblxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7XG4gICAgICB9IGVsc2UgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JBbmRDbG9zZU5ULCBfdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yQW5kQ2xvc2VOVChzZWxmLCBlcnIpIHtcbiAgZW1pdEVycm9yTlQoc2VsZiwgZXJyKTtcbiAgZW1pdENsb3NlTlQoc2VsZik7XG59XG5cbmZ1bmN0aW9uIGVtaXRDbG9zZU5UKHNlbGYpIHtcbiAgaWYgKHNlbGYuX3dyaXRhYmxlU3RhdGUgJiYgIXNlbGYuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47XG4gIGlmIChzZWxmLl9yZWFkYWJsZVN0YXRlICYmICFzZWxmLl9yZWFkYWJsZVN0YXRlLmVtaXRDbG9zZSkgcmV0dXJuO1xuICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxuZnVuY3Rpb24gZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcnIpIHtcbiAgLy8gV2UgaGF2ZSB0ZXN0cyB0aGF0IHJlbHkgb24gZXJyb3JzIGJlaW5nIGVtaXR0ZWRcbiAgLy8gaW4gdGhlIHNhbWUgdGljaywgc28gY2hhbmdpbmcgdGhpcyBpcyBzZW12ZXIgbWFqb3IuXG4gIC8vIEZvciBub3cgd2hlbiB5b3Ugb3B0LWluIHRvIGF1dG9EZXN0cm95IHdlIGFsbG93XG4gIC8vIHRoZSBlcnJvciB0byBiZSBlbWl0dGVkIG5leHRUaWNrLiBJbiBhIGZ1dHVyZVxuICAvLyBzZW12ZXIgbWFqb3IgdXBkYXRlIHdlIHNob3VsZCBjaGFuZ2UgdGhlIGRlZmF1bHQgdG8gdGhpcy5cbiAgdmFyIHJTdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHdTdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgaWYgKHJTdGF0ZSAmJiByU3RhdGUuYXV0b0Rlc3Ryb3kgfHwgd1N0YXRlICYmIHdTdGF0ZS5hdXRvRGVzdHJveSkgc3RyZWFtLmRlc3Ryb3koZXJyKTtlbHNlIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveSxcbiAgZXJyb3JPckRlc3Ryb3k6IGVycm9yT3JEZXN0cm95XG59OyIsIi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYWZpbnRvc2gvZW5kLW9mLXN0cmVhbSB3aXRoXG4vLyBwZXJtaXNzaW9uIGZyb20gdGhlIGF1dGhvciwgTWF0aGlhcyBCdXVzIChAbWFmaW50b3NoKS5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0U7XG5cbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICBjYWxsZWQgPSB0cnVlO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gaXNSZXF1ZXN0KHN0cmVhbSkge1xuICByZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBlb3Moc3RyZWFtLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHJldHVybiBlb3Moc3RyZWFtLCBudWxsLCBvcHRzKTtcbiAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTtcbiAgdmFyIHJlYWRhYmxlID0gb3B0cy5yZWFkYWJsZSB8fCBvcHRzLnJlYWRhYmxlICE9PSBmYWxzZSAmJiBzdHJlYW0ucmVhZGFibGU7XG4gIHZhciB3cml0YWJsZSA9IG9wdHMud3JpdGFibGUgfHwgb3B0cy53cml0YWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLndyaXRhYmxlO1xuXG4gIHZhciBvbmxlZ2FjeWZpbmlzaCA9IGZ1bmN0aW9uIG9ubGVnYWN5ZmluaXNoKCkge1xuICAgIGlmICghc3RyZWFtLndyaXRhYmxlKSBvbmZpbmlzaCgpO1xuICB9O1xuXG4gIHZhciB3cml0YWJsZUVuZGVkID0gc3RyZWFtLl93cml0YWJsZVN0YXRlICYmIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZDtcblxuICB2YXIgb25maW5pc2ggPSBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICB3cml0YWJsZSA9IGZhbHNlO1xuICAgIHdyaXRhYmxlRW5kZWQgPSB0cnVlO1xuICAgIGlmICghcmVhZGFibGUpIGNhbGxiYWNrLmNhbGwoc3RyZWFtKTtcbiAgfTtcblxuICB2YXIgcmVhZGFibGVFbmRlZCA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZSAmJiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZDtcblxuICB2YXIgb25lbmQgPSBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICByZWFkYWJsZSA9IGZhbHNlO1xuICAgIHJlYWRhYmxlRW5kZWQgPSB0cnVlO1xuICAgIGlmICghd3JpdGFibGUpIGNhbGxiYWNrLmNhbGwoc3RyZWFtKTtcbiAgfTtcblxuICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uIG9uZXJyb3IoZXJyKSB7XG4gICAgY2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG4gIH07XG5cbiAgdmFyIG9uY2xvc2UgPSBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIHZhciBlcnI7XG5cbiAgICBpZiAocmVhZGFibGUgJiYgIXJlYWRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl9yZWFkYWJsZVN0YXRlIHx8ICFzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cblxuICAgIGlmICh3cml0YWJsZSAmJiAhd3JpdGFibGVFbmRlZCkge1xuICAgICAgaWYgKCFzdHJlYW0uX3dyaXRhYmxlU3RhdGUgfHwgIXN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgZXJyID0gbmV3IEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFKCk7XG4gICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvbnJlcXVlc3QgPSBmdW5jdGlvbiBvbnJlcXVlc3QoKSB7XG4gICAgc3RyZWFtLnJlcS5vbignZmluaXNoJywgb25maW5pc2gpO1xuICB9O1xuXG4gIGlmIChpc1JlcXVlc3Qoc3RyZWFtKSkge1xuICAgIHN0cmVhbS5vbignY29tcGxldGUnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLm9uKCdhYm9ydCcsIG9uY2xvc2UpO1xuICAgIGlmIChzdHJlYW0ucmVxKSBvbnJlcXVlc3QoKTtlbHNlIHN0cmVhbS5vbigncmVxdWVzdCcsIG9ucmVxdWVzdCk7XG4gIH0gZWxzZSBpZiAod3JpdGFibGUgJiYgIXN0cmVhbS5fd3JpdGFibGVTdGF0ZSkge1xuICAgIC8vIGxlZ2FjeSBzdHJlYW1zXG4gICAgc3RyZWFtLm9uKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLm9uKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcbiAgfVxuXG4gIHN0cmVhbS5vbignZW5kJywgb25lbmQpO1xuICBzdHJlYW0ub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgaWYgKG9wdHMuZXJyb3IgIT09IGZhbHNlKSBzdHJlYW0ub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIHN0cmVhbS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICAgIGlmIChzdHJlYW0ucmVxKSBzdHJlYW0ucmVxLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVvczsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdSZWFkYWJsZS5mcm9tIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJyb3dzZXInKVxufTtcbiIsIi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYWZpbnRvc2gvcHVtcCB3aXRoXG4vLyBwZXJtaXNzaW9uIGZyb20gdGhlIGF1dGhvciwgTWF0aGlhcyBCdXVzIChAbWFmaW50b3NoKS5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVvcztcblxuZnVuY3Rpb24gb25jZShjYWxsYmFjaykge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgY2FsbGJhY2suYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi8uLi8uLi9lcnJvcnMnKS5jb2RlcyxcbiAgICBFUlJfTUlTU0lOR19BUkdTID0gX3JlcXVpcmUkY29kZXMuRVJSX01JU1NJTkdfQVJHUyxcbiAgICBFUlJfU1RSRUFNX0RFU1RST1lFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fREVTVFJPWUVEO1xuXG5mdW5jdGlvbiBub29wKGVycikge1xuICAvLyBSZXRocm93IHRoZSBlcnJvciBpZiBpdCBleGlzdHMgdG8gYXZvaWQgc3dhbGxvd2luZyBpdFxuICBpZiAoZXJyKSB0aHJvdyBlcnI7XG59XG5cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrKTtcbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICBzdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIGNsb3NlZCA9IHRydWU7XG4gIH0pO1xuICBpZiAoZW9zID09PSB1bmRlZmluZWQpIGVvcyA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpO1xuICBlb3Moc3RyZWFtLCB7XG4gICAgcmVhZGFibGU6IHJlYWRpbmcsXG4gICAgd3JpdGFibGU6IHdyaXRpbmdcbiAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIGNsb3NlZCA9IHRydWU7XG4gICAgY2FsbGJhY2soKTtcbiAgfSk7XG4gIHZhciBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGRlc3Ryb3llZCA9IHRydWU7IC8vIHJlcXVlc3QuZGVzdHJveSBqdXN0IGRvIC5lbmQgLSAuYWJvcnQgaXMgd2hhdCB3ZSB3YW50XG5cbiAgICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHJldHVybiBzdHJlYW0uYWJvcnQoKTtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gc3RyZWFtLmRlc3Ryb3koKTtcbiAgICBjYWxsYmFjayhlcnIgfHwgbmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKCdwaXBlJykpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjYWxsKGZuKSB7XG4gIGZuKCk7XG59XG5cbmZ1bmN0aW9uIHBpcGUoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZyb20ucGlwZSh0byk7XG59XG5cbmZ1bmN0aW9uIHBvcENhbGxiYWNrKHN0cmVhbXMpIHtcbiAgaWYgKCFzdHJlYW1zLmxlbmd0aCkgcmV0dXJuIG5vb3A7XG4gIGlmICh0eXBlb2Ygc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbm9vcDtcbiAgcmV0dXJuIHN0cmVhbXMucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc3RyZWFtcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzdHJlYW1zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGNhbGxiYWNrID0gcG9wQ2FsbGJhY2soc3RyZWFtcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0cmVhbXNbMF0pKSBzdHJlYW1zID0gc3RyZWFtc1swXTtcblxuICBpZiAoc3RyZWFtcy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ3N0cmVhbXMnKTtcbiAgfVxuXG4gIHZhciBlcnJvcjtcbiAgdmFyIGRlc3Ryb3lzID0gc3RyZWFtcy5tYXAoZnVuY3Rpb24gKHN0cmVhbSwgaSkge1xuICAgIHZhciByZWFkaW5nID0gaSA8IHN0cmVhbXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgd3JpdGluZyA9IGkgPiAwO1xuICAgIHJldHVybiBkZXN0cm95ZXIoc3RyZWFtLCByZWFkaW5nLCB3cml0aW5nLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiAgICAgIGlmIChlcnIpIGRlc3Ryb3lzLmZvckVhY2goY2FsbCk7XG4gICAgICBpZiAocmVhZGluZykgcmV0dXJuO1xuICAgICAgZGVzdHJveXMuZm9yRWFjaChjYWxsKTtcbiAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBzdHJlYW1zLnJlZHVjZShwaXBlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwaXBlbGluZTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUlJfSU5WQUxJRF9PUFRfVkFMVUUgPSByZXF1aXJlKCcuLi8uLi8uLi9lcnJvcnMnKS5jb2Rlcy5FUlJfSU5WQUxJRF9PUFRfVkFMVUU7XG5cbmZ1bmN0aW9uIGhpZ2hXYXRlck1hcmtGcm9tKG9wdGlvbnMsIGlzRHVwbGV4LCBkdXBsZXhLZXkpIHtcbiAgcmV0dXJuIG9wdGlvbnMuaGlnaFdhdGVyTWFyayAhPSBudWxsID8gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrIDogaXNEdXBsZXggPyBvcHRpb25zW2R1cGxleEtleV0gOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRIaWdoV2F0ZXJNYXJrKHN0YXRlLCBvcHRpb25zLCBkdXBsZXhLZXksIGlzRHVwbGV4KSB7XG4gIHZhciBod20gPSBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KTtcblxuICBpZiAoaHdtICE9IG51bGwpIHtcbiAgICBpZiAoIShpc0Zpbml0ZShod20pICYmIE1hdGguZmxvb3IoaHdtKSA9PT0gaHdtKSB8fCBod20gPCAwKSB7XG4gICAgICB2YXIgbmFtZSA9IGlzRHVwbGV4ID8gZHVwbGV4S2V5IDogJ2hpZ2hXYXRlck1hcmsnO1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX09QVF9WQUxVRShuYW1lLCBod20pO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLmZsb29yKGh3bSk7XG4gIH0gLy8gRGVmYXVsdCB2YWx1ZVxuXG5cbiAgcmV0dXJuIHN0YXRlLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEhpZ2hXYXRlck1hcms6IGdldEhpZ2hXYXRlck1hcmtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IGV4cG9ydHM7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuZXhwb3J0cy5maW5pc2hlZCA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvZW5kLW9mLXN0cmVhbS5qcycpO1xuZXhwb3J0cy5waXBlbGluZSA9IHJlcXVpcmUoJy4vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIiFmdW5jdGlvbihlLHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPXQoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sdCk7ZWxzZXt2YXIgbj10KCk7Zm9yKHZhciByIGluIG4pKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHM6ZSlbcl09bltyXX19KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChyKXtpZihuW3JdKXJldHVybiBuW3JdLmV4cG9ydHM7dmFyIG89bltyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sPSEwLG8uZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5pPWZ1bmN0aW9uKGUpe3JldHVybiBlfSx0LmQ9ZnVuY3Rpb24oZSxuLHIpe3QubyhlLG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSx0Lm49ZnVuY3Rpb24oZSl7dmFyIG49ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHQuZChuLFwiYVwiLG4pLG59LHQubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sdC5wPVwiXCIsdCh0LnM9MSl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9dGhpcyYmdGhpcy5fX2Fzc2lnbnx8T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rKyl7dD1hcmd1bWVudHNbbl07Zm9yKHZhciBvIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsbykmJihlW29dPXRbb10pfXJldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uZXhlY3V0ZShlKX07dmFyIG87IWZ1bmN0aW9uKGUpe2UuZXhlY3V0ZT1mdW5jdGlvbih0KXt2YXIgbjtyZXR1cm4gbnVsbD09PXQ/bj10OnQgaW5zdGFuY2VvZiBEYXRlP249bmV3IERhdGUodC5nZXRUaW1lKCkpOkFycmF5LmlzQXJyYXkodCk/KG49W10sdC5mb3JFYWNoKGZ1bmN0aW9uKGUsdCxyKXtuLnB1c2goZSl9KSxuPW4ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBlLmV4ZWN1dGUodCl9KSk6XCJvYmplY3RcIj09dHlwZW9mIHQmJnQhPT17fT8obj1yKHt9LHQpLE9iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24odCl7blt0XT1lLmV4ZWN1dGUoblt0XSl9KSk6bj10LG59LGUuaXNQcmltaXRpdmU9ZnVuY3Rpb24oKXt9fShvfHwobz17fSkpfSxmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oMCl9XSl9KTsiLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jcmVhdGVCaW5kaW5nKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjMuMiBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS4zLjInLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcbi8vIFRoaXMgZW50cnkgbW9kdWxlIHVzZWQgJ2V4cG9ydHMnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbiJdLCJzb3VyY2VSb290IjoiIn0=